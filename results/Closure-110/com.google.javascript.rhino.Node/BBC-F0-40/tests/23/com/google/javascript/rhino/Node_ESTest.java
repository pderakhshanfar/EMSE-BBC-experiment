/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 22:50:15 GMT 2021
 */

package com.google.javascript.rhino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.TemplatizedType;
import com.google.javascript.rhino.jstype.UnknownType;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Node node0 = new Node(43, 43, 31);
      Node node1 = new Node(47, 47, 38);
      node1.isLabelName();
      node0.getInputId();
      node0.isParamList();
      Node node2 = Node.newString(56, "j{oFfFJ0nTL$=");
      Node node3 = new Node(37, node2, node0, 39, (-185));
      // Undeclared exception!
      try { 
        node0.removeChildAfter(node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Node node0 = new Node(10);
      node0.isSyntheticBlock();
      String string0 = "$Q-!cyX";
      Node node1 = Node.newString("$Q-!cyX", 15, (-748));
      node0.cloneNode();
      node1.getAncestor(15);
      Node node2 = null;
      try {
        node2 = new Node(40, node0, node1, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Node node0 = new Node(79);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      Node node1 = new Node(79);
      node0.setSourceFileForTesting("i|.Y5huTdI.9[.FA");
      Node node2 = new Node((-3302), node1, node1);
      node2.setType(79);
      node2.putIntProp(48, 56);
      Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeEqualsImpl(node1);
      node2.putProp(16, node_NodeMismatch0);
      node2.isNew();
      node2.useSourceInfoFrom(node0);
      node1.isAnd();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node node0 = Node.newString("", 115, 147);
      Node node1 = Node.newString(119, "/<AXpJwJp");
      Node node2 = new Node(49, node1, node0, (-3244), (-751));
      node2.isNull();
      node1.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = new Node(105, 105, 105);
      node0.isLabelName();
      node0.getInputId();
      node0.isParamList();
      String string0 = "jrMc<6";
      Node[] nodeArray0 = new Node[5];
      Node node1 = Node.newString(29, "jrMc<6", 2, 1536);
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      Node node2 = null;
      try {
        node2 = new Node(32, nodeArray0, 39, (-1276));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node node0 = new Node(79, 79, 79);
      node0.getAncestors();
      Node node1 = new Node(79);
      Node node2 = node1.copyInformationFromForTree(node0);
      Node node3 = Node.newNumber((double) 29);
      node1.getInputId();
      node2.isBreak();
      node2.getSourcePosition();
      Node node4 = Node.newString(41, "_=QBy>tV7y9&^=0Dk");
      Node node5 = new Node(38, node3, node4, 1, 1784);
      node0.addChildToBack(node2);
      node4.getString();
      node1.isNull();
      node4.isCatch();
      node5.getIndexOfChild(node4);
      node5.getNext();
      node5.isGetProp();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node node0 = new Node(105, 105, 105);
      node0.isLabelName();
      node0.getInputId();
      node0.isParamList();
      Node node1 = Node.newString(155, "jrMc<6");
      Node node2 = new Node(53, node0, node1, 0, 52);
      node2.getBooleanProp(124);
      node0.isNull();
      node1.isCatch();
      node1.getIndexOfChild(node2);
      node0.getNext();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node.newNumber(0.0);
      Node.newString(30, "");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1);
      Node node0 = Node.newString(57, "");
      // Undeclared exception!
      try { 
        node0.toString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 57
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node node0 = Node.newNumber(205.237925307545, 2, 2);
      Node node1 = new Node(0, node0, node0, node0, 30, 751619275);
      node0.addChildrenToFront(node1);
      node1.getJSDocInfo();
      node1.setCharno(16);
      // Undeclared exception!
      try { 
        node0.checkTreeEqualsImpl((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = ">,s|+$3eDbS,vZA";
      Node node0 = Node.newString(">,s|+$3eDbS,vZA", 1088, 83);
      byte[] byteArray0 = new byte[3];
      node0.getLength();
      byteArray0[0] = (byte) (-78);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)43;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node1 = new Node(1088, node0);
      node1.getSourcePosition();
      // Undeclared exception!
      try { 
        node1.removeChildAfter(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no next sibling.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node node0 = new Node(10);
      Node node1 = Node.newString(2, "");
      Node node2 = new Node(31, node0, node0, node1, 2, 38);
      node2.getStaticSourceFile();
      node0.isNoSideEffectsCall();
      Node.newString("", 300, 147);
      node0.isObjectLit();
      node2.isNE();
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // BITXOR is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node node0 = null;
      try {
        node0 = new Node(44, (Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node node0 = new Node(105, 105, 105);
      node0.isLabelName();
      node0.getInputId();
      node0.isParamList();
      Node node1 = Node.newString(155, "jrMc<6");
      Node node2 = new Node(53, node0, node1, 0, 52);
      node0.isNull();
      node1.isCatch();
      node1.getIndexOfChild(node2);
      node0.getNext();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node node0 = Node.newString("=", 79, 890);
      node0.setQuotedString();
      Node node1 = Node.newString(36, "=");
      Node node2 = new Node(30, node1, node0);
      node2.isNull();
      node2.isCatch();
      node1.getIndexOfChild(node2);
      node2.isDo();
      node1.isQuotedString();
      node1.isRegExp();
      node2.getStaticSourceFile();
      node2.isVoid();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-3453), (-3453));
      node0.setJSType((JSType) null);
      Node node1 = new Node(300, node0, node0);
      node0.setType(37);
      node0.putIntProp(119, 48);
      Node node2 = node0.cloneNode();
      node0.checkTreeEqualsImpl(node2);
      Node node3 = new Node(105, node1);
      node2.setLength(751619275);
      node1.isCatch();
      Node node4 = new Node(80, node2, (-4999), 49);
      node0.getIndexOfChild(node4);
      node3.getNext();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node node0 = new Node(79);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      Node node1 = new Node(79);
      node0.setSourceFileForTesting("i|.Y5huTdI.9[.FA");
      Node node2 = new Node((-3302), node1, node1);
      node2.setType(79);
      node2.putIntProp(48, 56);
      Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeEqualsImpl(node1);
      node2.putProp(16, node_NodeMismatch0);
      // Undeclared exception!
      try { 
        node2.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = new Node((-50));
      node0.detachChildren();
      Node node1 = new Node(30, node0, node0);
      node0.setType(120);
      node1.putIntProp((-3259), 49);
      Node node2 = new Node(4, 208947, 2);
      node1.checkTreeEqualsImpl(node2);
      node0.cloneNode();
      // Undeclared exception!
      try { 
        node1.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Node node0 = new Node((-1143));
      node0.isTypeOf();
      Node node1 = Node.newNumber((-2001.164499695), 1, 4);
      node1.checkTreeEqualsImpl(node0);
      Node node2 = Node.newString(57, "z`h?");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node4 = new Node(55, node2, node3, 638, 64);
      node1.isNull();
      node1.isEmpty();
      node0.getIndexOfChild(node2);
      node1.getNext();
      node2.getProp(47);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = "APA_S0h";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newString(147, "APA_S0h", 147, 115);
      node0.getAncestors();
      node0.isContinue();
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(147);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 147
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node node1 = new Node(118, node0);
      node1.isTry();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = new Node((-1));
      node0.detachChildren();
      node0.isOnlyModifiesThisCall();
      Node node1 = new Node(824, node0);
      node0.addChildrenToFront(node1);
      node1.detachChildren();
      node1.setLength(43);
      Node node2 = Node.newNumber((double) 4095, 124, (-47));
      node1.isFalse();
      node1.isArrayLit();
      Node node3 = new Node(46, node0, node2, (-519), 51);
      node3.cloneTree();
      node0.getChildAtIndex((-1528));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = new Node((-50), (-3259), 31);
      Node node1 = Node.newNumber((double) 51);
      node1.getAncestors();
      Node node2 = new Node(40);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "G&w");
      Node node3 = node0.copyInformationFromForTree(node1);
      node1.isEquivalentToTyped(node2);
      Node node4 = Node.newNumber((double) 54);
      node3.getInputId();
      node2.isBreak();
      node4.getSourcePosition();
      Node node5 = new Node(50, node1);
      Node node6 = node5.srcrefTree(node2);
      node4.isHook();
      Node node7 = new Node(2, node5, 41, 1120);
      Node[] nodeArray0 = new Node[12];
      nodeArray0[0] = node6;
      Node node8 = null;
      try {
        node8 = new Node(2, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node0 = Node.newString(1120, "com.google.javascript.rhino.Node$NumberNode");
      node0.getStaticSourceFile();
      node0.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = Node.newNumber((-1782.2078329), 1916, 1916);
      String string0 = "1fX%Yfrxx^8JY";
      Node node1 = Node.newString("1fX%Yfrxx^8JY");
      node1.getString();
      node1.isStringKey();
      Node node2 = node0.copyInformationFrom(node1);
      node2.setSourceEncodedPositionForTree(53);
      Node node3 = null;
      try {
        node3 = new Node(12, (Node) null, (Node) null, (Node) null, (-1877), 52);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = Node.newNumber((double) 3185);
      Node node1 = Node.newString((-2074), "", 621, 1916);
      node0.getSideEffectFlags();
      node0.getDirectives();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(125);
      node_SideEffectFlags0.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags0.setReturnsTainted();
      node1.getChildCount();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = new Node(1815);
      String string0 = "";
      Node node1 = Node.newString("1fX%Yfrxx^8JY");
      node1.getString();
      node1.isStringKey();
      // Undeclared exception!
      try { 
        node1.copyInformationFrom((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = new Node(79, 79, 79);
      node0.getAncestors();
      Node node1 = new Node(79);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(37);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      Node node2 = Node.newNumber((double) 16, 2, 0);
      node2.isUnscopedQualifiedName();
      node_SideEffectFlags3.clearAllFlags();
      Node node3 = Node.newNumber((double) 0, 31, 57);
      node2.getStaticSourceFile();
      Node node4 = new Node(55);
      node3.toStringTree();
      node3.clonePropsFrom(node2);
      node1.useSourceInfoIfMissingFrom(node3);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Node node0 = null;
      try {
        node0 = new Node((-359), (Node) null, (Node) null, (Node) null, (Node) null, 1125, 1125);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node node0 = new Node(1815);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node1 = Node.newString(54, "", 55, 53);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      node0.children();
      node0.isWith();
      node1.getSourcePosition();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node node0 = new Node((-1246));
      byte[] byteArray0 = new byte[7];
      node0.isNoSideEffectsCall();
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)0;
      Node node1 = Node.newString("1fX%Yfrxx^8JY");
      node0.setLength(32);
      node0.getStaticSourceFile();
      Node node2 = new Node(33);
      node1.toStringTree();
      Node node3 = Node.newString("1fX%Yfrxx^8JY", 230, 2423);
      node2.clonePropsFrom(node3);
      node2.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = new Node(79);
      node0.getAncestors();
      Node node1 = new Node(79);
      node1.addChildToFront(node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node2 = new Node(40, node1);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.getProp(4);
      Node.newString(30, "z4L3dfOTRabf8");
      Node node3 = null;
      try {
        node3 = new Node((-1102), node1, node2, (-1835), 46);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = new Node((-1246));
      byte[] byteArray0 = new byte[7];
      node0.isNoSideEffectsCall();
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)0;
      node0.isUnscopedQualifiedName();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags4.clearAllFlags();
      Node node1 = Node.newNumber((double) 54, 29, (-149));
      node0.getStaticSourceFile();
      Node node2 = new Node((-2383));
      node1.toStringTree();
      Node node3 = node0.clonePropsFrom(node2);
      node3.useSourceInfoIfMissingFrom(node2);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node.newString(30, "");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags0.setMutatesArguments();
      Node.newNumber((double) 51, 37, 48);
      Node.newString("\n\nSubtree1: ");
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 0.0 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node node0 = Node.newNumber((-4523.0), 44, 44);
      Node node1 = new Node(57, node0, node0, node0, node0, 70, 53);
      Node node2 = null;
      try {
        node2 = new Node(44, node0, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(1262, nodeArray0);
      Node node1 = Node.newString("", 12288, 0);
      node0.addChildToBack(node1);
      Node node2 = Node.newNumber((-1031.639374));
      node2.putIntProp(8, 159);
      // Undeclared exception!
      try { 
        Node.newString((String) null, (-2279), 43);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node.extractCharno((-149));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = Node.newString(44, "sg_{;L{935r");
      node0.getSourceOffset();
      node0.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = new Node((-1246));
      byte[] byteArray0 = new byte[7];
      node0.isNoSideEffectsCall();
      byteArray0[0] = (byte)7;
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(123);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1246
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node.newString(30, "");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags0.setMutatesArguments();
      Node node1 = Node.newNumber((double) 51, 37, 48);
      node1.isUnscopedQualifiedName();
      node_SideEffectFlags2.clearAllFlags();
      Node node2 = Node.newNumber(0.0, 101, 51);
      node0.getStaticSourceFile();
      Node node3 = new Node(31);
      node0.toStringTree();
      node2.clonePropsFrom(node0);
      node0.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-3453), (-3453));
      Node node1 = Node.newString(56, "3LW qC?=~VE", 8, 39);
      node0.addChildrenToFront(node1);
      node0.isInc();
      node0.isNew();
      node1.setLineno(50);
      node0.useSourceInfoFrom(node1);
      node1.isAnd();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = new Node(79);
      node0.getAncestors();
      Node node1 = new Node(79);
      node1.setJSType((JSType) null);
      Node node2 = new Node((-3302), node1, node1);
      node2.setType(79);
      node2.putIntProp(44, 56);
      node1.setSourceEncodedPosition(43);
      node0.cloneNode();
      node0.checkTreeEqualsImpl(node2);
      Node node3 = new Node(0, node0);
      node3.hasChildren();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      node2.isString();
      node0.isDebugger();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      String string0 = null;
      // Undeclared exception!
      try { 
        Node.newString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node node0 = Node.newNumber((-1782.2078329), 10, 155);
      Node node1 = new Node(31, 52, 49);
      node1.mayMutateGlobalStateOrThrow();
      node0.setSourceEncodedPositionForTree(48);
      Node[] nodeArray0 = new Node[0];
      Node node2 = new Node(3645440, nodeArray0, (-2462), 49);
      node1.setVarArgs(true);
      Node.newString(32, "BikX");
      node1.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node node0 = new Node((-1930), 17, (-379));
      node0.isNoSideEffectsCall();
      Node node1 = Node.newNumber((-148.0617223525506), 32, 4095);
      node0.checkTreeEqualsImpl(node1);
      Node node2 = Node.newString(0, "YFoYH(mY`- v", 54, 2);
      node2.addChildrenToFront(node1);
      Node node3 = new Node(188);
      node1.detachChildren();
      node1.isInc();
      Node node4 = Node.newString("YFoYH(mY`- v", 44, 54);
      node4.isString();
      Node node5 = Node.newString(55, " is not a string node", 188, (-1573));
      node5.isQuotedString();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = new Node((-1143), (-1143), 2398);
      node0.isTypeOf();
      Node node1 = Node.newNumber((-2001.164499695), 1, 4);
      node1.checkTreeEqualsImpl(node0);
      Node.newString(8232, "YFoYaB (FY`S- v", 47, 4374);
      node0.addChildrenToFront(node1);
      Node node2 = Node.newString(2, "YFoYaB (FY`S- v");
      node2.detachChildren();
      node1.isInc();
      node1.isString();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = new Node(44);
      Node node1 = Node.newString(112, "Namespaces not supported yet (", 12, 56);
      Node node2 = new Node((-2859), node0, node0, node1, node0, (-628), 51);
      try { 
        node0.setString("3G'.Lkmxm");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // TRUE is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = Node.newString(30, "");
      node1.setLineno(890);
      node0.isNE();
      Node[] nodeArray0 = new Node[10];
      nodeArray0[0] = node1;
      nodeArray0[1] = node1;
      node1.isRegExp();
      node1.isCatch();
      Node.mergeLineCharNo((-2859), 4096);
      node1.addChildrenToFront(node0);
      node1.isEquivalentToTyped(node1);
      node1.isFalse();
      try { 
        node1.setDouble((-121.798));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NEW  890 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = new Node(79, 79, 79);
      node0.getAncestors();
      Node node1 = new Node(79);
      String string0 = "G\\&w";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "G&w");
      Node node2 = node1.copyInformationFromForTree(node0);
      node2.isEquivalentToTyped(node0);
      Node.newNumber((double) 29);
      node1.getInputId();
      node2.isBreak();
      node2.getSourcePosition();
      node1.srcrefTree(node2);
      node2.isHook();
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node0;
      nodeArray0[1] = node1;
      Node node3 = new Node(29, node2, 47, 40);
      nodeArray0[3] = node1;
      Node node4 = null;
      try {
        node4 = new Node(113, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-3453), (-3453));
      node0.getStaticSourceFile();
      node0.isSyntheticBlock();
      Node node1 = Node.newNumber(2997.05841199, 1049, 1);
      node0.checkTreeEqualsImpl(node1);
      Node node2 = Node.newString(36, "=", 8388608, 35);
      node2.addChildrenToFront(node0);
      node0.detachChildren();
      node0.isInc();
      // Undeclared exception!
      try { 
        node0.addChildBefore(node2, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = Node.newString(43, "");
      node0.getStaticSourceFile();
      node0.isNoSideEffectsCall();
      node0.isCast();
      Node node1 = new Node(40);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedHashSet<FunctionType> linkedHashSet0 = new LinkedHashSet<FunctionType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) linkedHashSet0);
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node1.getAncestor(211);
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node0, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-3453), (-3453));
      Node node1 = Node.newString(56, "3LW qC?=~VE", (-276), 113);
      node0.addChildrenToFront(node1);
      node0.detachChildren();
      node0.isBreak();
      node0.getSourcePosition();
      Node node2 = node0.srcrefTree(node1);
      Node node3 = new Node(37, node2, 52, (-325));
      // Undeclared exception!
      try { 
        node1.replaceChild(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node node0 = new Node(79, 79, 79);
      node0.getAncestors();
      Node node1 = new Node(79);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "G&w");
      node1.copyInformationFromForTree(node0);
      Node node2 = Node.newNumber((double) 29);
      node1.getInputId();
      Node node3 = node1.copyInformationFrom(node0);
      node2.isNoSideEffectsCall();
      node0.isInc();
      Node node4 = Node.newString("");
      Node node5 = new Node(48, node4, 2828, 8);
      Node.NodeMismatch node_NodeMismatch0 = node5.checkTreeTypeAwareEqualsImpl(node3);
      node_NodeMismatch0.equals(node3);
      node1.isContinue();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node node0 = new Node(44, 37, 37);
      Node node1 = new Node(44, node0);
      node0.addChildrenToFront(node1);
      Node node2 = null;
      try {
        node2 = new Node(43, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-35), nodeArray0, (-35), 946);
      Node node1 = new Node(47, node0, node0, node0, node0, 90, 12);
      node0.addChildrenToFront(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node2 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node2.detachChildren();
      Node node3 = node1.copyInformationFrom(node0);
      node3.isNoSideEffectsCall();
      node0.isInc();
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
      Object object0 = new Object();
      node_NodeMismatch0.equals(object0);
      node0.isContinue();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = Node.newString(30, "");
      node1.setLineno(49);
      node0.isNE();
      Node[] nodeArray0 = new Node[10];
      nodeArray0[0] = node1;
      nodeArray0[1] = node1;
      nodeArray0[2] = node0;
      // Undeclared exception!
      try { 
        node0.addChildAfter(node0, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Node node0 = new Node(79, 79, 79);
      node0.getAncestors();
      Node node1 = new Node(79);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "G&w");
      Node node2 = node1.copyInformationFromForTree(node0);
      node2.isEquivalentToTyped(node0);
      Node.newNumber((double) 29);
      node1.getInputId();
      node2.isBreak();
      node2.getSourcePosition();
      Node node3 = node1.srcrefTree(node2);
      Node node4 = new Node(1, node3, 50, 36);
      // Undeclared exception!
      try { 
        node3.replaceChild(node4, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = new Node(79);
      node0.getAncestors();
      Node node1 = new Node(79);
      node1.setJSType((JSType) null);
      Node node2 = new Node((-3302), node1, node1);
      Node node3 = new Node((-403), node2, node2, 50, 1);
      node2.copyInformationFromForTree(node3);
      node2.setType(79);
      node2.putIntProp(44, 56);
      Node node4 = node0.cloneNode();
      node0.checkTreeEqualsImpl(node2);
      Node node5 = new Node(0, node0);
      node5.hasChildren();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      node4.getChildCount();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString(150, "");
      node0.setSourceEncodedPositionForTree(150);
      node0.setDirectives((Set<String>) null);
      Node node1 = null;
      Node node2 = new Node(2);
      // Undeclared exception!
      try { 
        node2.isEquivalentToTyped((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node.newNumber(0.0);
      Node node0 = Node.newString(30, "");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.clearAllFlags();
      Node.newString("", 63, 3571);
      node0.isDelProp();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = new Node(6);
      Node node1 = new Node(51, node0, 12, 30);
      node1.removeChildren();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags(node_SideEffectFlags1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got IN
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = new Node(41, 41, 41);
      node0.isTry();
      node0.getInputId();
      node0.isParamList();
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NULL 41 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString(150, "+d}f=");
      node0.setSourceEncodedPositionForTree(150);
      node0.setDirectives((Set<String>) null);
      Node node1 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "G&w");
      // Undeclared exception!
      try { 
        node0.copyInformationFromForTree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = new Node(79, 79, 79);
      node0.getAncestors();
      Node node1 = new Node(79);
      Node node2 = Node.newString(4, "3LW qC?=~VE", 1, (-2100));
      node2.addChildrenToFront(node1);
      node0.isBlock();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node node0 = new Node((-50));
      node0.detachChildren();
      node0.isOnlyModifiesThisCall();
      Node node1 = new Node(16, node0);
      node0.addChildrenToFront(node1);
      node1.detachChildren();
      node0.setLength(113);
      Node.newNumber((-1303.922416), 102, 31);
      node0.isFalse();
      node0.isArrayLit();
      node1.cloneTree();
      // Undeclared exception!
      try { 
        node1.getChildAtIndex(49);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = Node.newString("~", 1602, 1602);
      Node node1 = Node.newString(4095, "BAY51v3z");
      Node node2 = new Node(1602, node0, node1, 31, (-4999));
      // Undeclared exception!
      try { 
        node2.addChildAfter(node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node node0 = Node.newString("~", 1602, 1602);
      node0.setQuotedString();
      Node node1 = Node.newString(4095, "jrMc<6");
      Node node2 = new Node(1602, node0, node1, 31, (-4999));
      node2.isNull();
      node0.isCatch();
      node1.getIndexOfChild(node2);
      node2.getNext();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node node0 = new Node((-50));
      node0.detachChildren();
      node0.isOnlyModifiesThisCall();
      Node node1 = new Node(16, node0);
      node0.addChildrenToFront(node1);
      node1.detachChildren();
      node0.setLength(113);
      Node node2 = new Node(16777216, 113, (-1194));
      Node node3 = node0.cloneNode();
      Node node4 = node0.getAncestor(0);
      Node node5 = new Node(57, node3, node3, node0);
      node5.isDo();
      node3.isQuotedString();
      node3.isRegExp();
      node4.getStaticSourceFile();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = Node.newNumber(1418.29258, 2066, 2066);
      Node node1 = new Node(2066, node0, 54, 50);
      Node node2 = node1.removeChildren();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(57);
      node0.isCase();
      node2.putIntProp(52, 63);
      node2.checkTreeEqualsImpl(node1);
      Node node3 = node1.cloneNode();
      Node node4 = new Node(43, node3, node1, 40, 0);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node3, node3);
      node1.getChildCount();
      node2.isDo();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node_SideEffectFlags1.areAllFlagsSet();
      node2.isNull();
      Node node5 = null;
      try {
        node5 = new Node(9, node0, node4, node1, node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node node0 = new Node(79);
      node0.getAncestors();
      Node node1 = new Node(79);
      node0.setSourceFileForTesting("i|.Y5huTdI.9[.FA");
      Node node2 = new Node((-3302), node1, node1);
      node2.setType(79);
      node1.getAncestors();
      // Undeclared exception!
      try { 
        node2.replaceChild(node0, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = 44;
      String string0 = "sg_{;L{935r";
      int int1 = 124;
      Node node0 = Node.newString("sg_{;L{935r");
      Node node1 = new Node(44, node0, node0);
      Node node2 = new Node(2);
      Node node3 = null;
      try {
        node3 = new Node(124, node1, node0, node2, (-4313), 4095);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node node0 = new Node(105, 105, 105);
      try { 
        node0.setDouble(42);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FUNCTION <invalid> 105 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node node0 = new Node((-1246));
      byte[] byteArray0 = new byte[7];
      node0.isNoSideEffectsCall();
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)0;
      String string0 = "1fX%Yfrxx^8JY";
      Node node1 = Node.newString("1fX%Yfrxx^8JY");
      node1.getString();
      node0.isStringKey();
      node0.copyInformationFrom(node1);
      node1.setSourceEncodedPositionForTree(2699);
      // Undeclared exception!
      try { 
        node0.addChildToFront((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = new Node((-1143), (-1143), 2352);
      node0.isNoSideEffectsCall();
      Node node1 = Node.newNumber((-2001.164499695), 1, 4);
      node1.checkTreeEqualsImpl(node0);
      Node node2 = Node.newString(8232, "YFoYaB (FY`S- v", 47, 4374);
      node2.addChildrenToFront(node0);
      node0.addChildrenToFront(node1);
      Node node3 = new Node(1);
      node3.detachChildren();
      node1.isInc();
      node1.isString();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node node0 = new Node(6);
      assertNotNull(node0);
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertEquals(6, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      Node node1 = new Node((-1788), node0, node0, node0, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertEquals(6, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isContinue());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWhile());
      assertFalse(node1.isScript());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isComma());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isGetterDef());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isArrayLit());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isHook());
      assertFalse(node1.isRegExp());
      assertEquals((-1788), node1.getType());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFor());
      assertFalse(node1.isString());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isFalse());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFunction());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSetterDef());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      Node node2 = node1.cloneNode();
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertEquals(6, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isContinue());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWhile());
      assertFalse(node1.isScript());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isComma());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isGetterDef());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isArrayLit());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isHook());
      assertFalse(node1.isRegExp());
      assertEquals((-1788), node1.getType());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFor());
      assertFalse(node1.isString());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isFalse());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFunction());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSetterDef());
      assertEquals((-1), node2.getCharno());
      assertEquals((-1788), node2.getType());
      assertFalse(node2.isHook());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isThrow());
      assertFalse(node2.isCase());
      assertFalse(node2.isIn());
      assertFalse(node2.isString());
      assertFalse(node2.isInc());
      assertFalse(node2.isFalse());
      assertFalse(node2.isAnd());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isFunction());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTry());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isNumber());
      assertFalse(node2.isScript());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isIf());
      assertFalse(node2.isThis());
      assertFalse(node2.isNE());
      assertFalse(node2.isFor());
      assertFalse(node2.isWith());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertFalse(node2.isBlock());
      assertFalse(node2.isNew());
      assertFalse(node2.isWhile());
      assertFalse(node2.isVar());
      assertFalse(node2.isDo());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertEquals(0, node2.getChildCount());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isContinue());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isCast());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isComma());
      assertFalse(node2.isOr());
      assertFalse(node2.isNull());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isReturn());
      assertFalse(node2.isName());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isBreak());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCall());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      
      node1.addChildToFront(node2);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertEquals(6, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isContinue());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWhile());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isComma());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIf());
      assertTrue(node1.hasMoreThanOneChild());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isArrayLit());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isHook());
      assertFalse(node1.isRegExp());
      assertEquals((-1788), node1.getType());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFor());
      assertFalse(node1.isString());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertEquals(2, node1.getChildCount());
      assertFalse(node1.isFalse());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFunction());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSetterDef());
      assertEquals((-1), node2.getCharno());
      assertEquals((-1788), node2.getType());
      assertFalse(node2.isHook());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isThrow());
      assertFalse(node2.isCase());
      assertFalse(node2.isIn());
      assertFalse(node2.isString());
      assertFalse(node2.isInc());
      assertFalse(node2.isFalse());
      assertFalse(node2.isAnd());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isFunction());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTry());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isNumber());
      assertFalse(node2.isScript());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isIf());
      assertFalse(node2.isThis());
      assertFalse(node2.isNE());
      assertFalse(node2.isFor());
      assertFalse(node2.isWith());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertFalse(node2.isBlock());
      assertFalse(node2.isNew());
      assertFalse(node2.isWhile());
      assertFalse(node2.isVar());
      assertFalse(node2.isDo());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertEquals(0, node2.getChildCount());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isContinue());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isCast());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isComma());
      assertFalse(node2.isOr());
      assertFalse(node2.isNull());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isReturn());
      assertFalse(node2.isName());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isBreak());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCall());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isDefine());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNgInject());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      
      Node node3 = node0.setJSDocInfo(jSDocInfo0);
      assertNotNull(node3);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertEquals(6, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isDefine());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNgInject());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isCatch());
      assertFalse(node3.isVoid());
      assertFalse(node3.isTry());
      assertFalse(node3.isFunction());
      assertFalse(node3.isRegExp());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isFor());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isParamList());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isDo());
      assertFalse(node3.isString());
      assertFalse(node3.isWhile());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isNew());
      assertFalse(node3.isReturn());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isVar());
      assertFalse(node3.isDec());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isLabel());
      assertFalse(node3.isAssign());
      assertFalse(node3.isName());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isCall());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isBreak());
      assertFalse(node3.isOr());
      assertFalse(node3.isAdd());
      assertFalse(node3.isNull());
      assertFalse(node3.isTrue());
      assertFalse(node3.isWith());
      assertFalse(node3.isNot());
      assertFalse(node3.isAnd());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isScript());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isComma());
      assertFalse(node3.isThis());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isFalse());
      assertFalse(node3.isNumber());
      assertFalse(node3.isCast());
      assertFalse(node3.isGetProp());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isObjectLit());
      assertEquals((-1), node3.getSourcePosition());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isContinue());
      assertFalse(node3.isInc());
      assertFalse(node3.isCase());
      assertFalse(node3.isBlock());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isHook());
      assertEquals(6, node3.getType());
      assertFalse(node3.isIf());
      assertFalse(node3.isThrow());
      assertFalse(node3.isSetterDef());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isIn());
      assertFalse(node3.isNE());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotSame(node0, node2);
      assertSame(node0, node3);
      assertNotSame(node0, node1);
      assertNotSame(node3, node2);
      assertSame(node3, node0);
      assertNotSame(node3, node1);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      
      StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
      assertNull(staticSourceFile0);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertEquals(6, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertNotSame(node0, node2);
      assertSame(node0, node3);
      assertNotSame(node0, node1);
      
      Node node4 = new Node(31);
      assertNotNull(node4);
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.isGetProp());
      assertFalse(node4.isThis());
      assertFalse(node4.isComma());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isNot());
      assertFalse(node4.isBreak());
      assertFalse(node4.isAnd());
      assertFalse(node4.isInc());
      assertFalse(node4.isCast());
      assertFalse(node4.isFalse());
      assertFalse(node4.isThrow());
      assertTrue(node4.isDelProp());
      assertFalse(node4.isLabel());
      assertFalse(node4.isAssignAdd());
      assertEquals((-1), node4.getLineno());
      assertFalse(node4.isIn());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isNumber());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isNE());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isIf());
      assertFalse(node4.isSwitch());
      assertEquals(31, node4.getType());
      assertFalse(node4.isTry());
      assertEquals((-1), node4.getCharno());
      assertFalse(node4.isHook());
      assertFalse(node4.isBlock());
      assertFalse(node4.isScript());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isWith());
      assertFalse(node4.isFor());
      assertFalse(node4.isCase());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isCatch());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isCall());
      assertFalse(node4.isNull());
      assertFalse(node4.isParamList());
      assertFalse(node4.isVoid());
      assertFalse(node4.isName());
      assertFalse(node4.isAdd());
      assertFalse(node4.isNew());
      assertFalse(node4.isTrue());
      assertFalse(node4.isFunction());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isDo());
      assertFalse(node4.isVar());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isOr());
      assertFalse(node4.isReturn());
      assertFalse(node4.isTypeOf());
      assertEquals((-1), node4.getSourcePosition());
      assertFalse(node4.isDec());
      assertFalse(node4.isContinue());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isAssign());
      assertFalse(node4.isString());
      assertFalse(node4.isWhile());
      assertFalse(node4.hasChildren());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      
      // Undeclared exception!
      try { 
        node0.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 6
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType[] jSTypeArray0 = new JSType[5];
      String string0 = null;
      int int0 = 1108;
      Node node0 = null;
      Node node1 = null;
      try {
        node1 = new Node(2159, (Node) null, (Node) null, 1108, 1108);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        Node.newString((-2430), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = new Node(1815);
      assertNotNull(node0);
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCase());
      assertEquals(1815, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Node node1 = Node.newString(54, "", 55, 53);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(225333, node1.getSourcePosition());
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isName());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isBlock());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTry());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNumber());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isFunction());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertFalse(node1.isRegExp());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertEquals(54, node1.getType());
      assertFalse(node1.isThis());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThrow());
      assertEquals(53, node1.getCharno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isComma());
      assertFalse(node1.isWith());
      assertFalse(node1.isFalse());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabel());
      assertFalse(node1.isReturn());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTypeOf());
      assertEquals(55, node1.getLineno());
      assertFalse(node1.isDo());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isOr());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Node node2 = Node.newString((-1316), "", 84, (-567));
      assertNotNull(node2);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.isWith());
      assertFalse(node2.isScript());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isAnd());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCast());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isAssign());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isGetProp());
      assertFalse(node2.hasOneChild());
      assertEquals((-1316), node2.getType());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isObjectLit());
      assertEquals((-1), node2.getCharno());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isNumber());
      assertFalse(node2.isNot());
      assertFalse(node2.isInc());
      assertFalse(node2.isCase());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isHook());
      assertFalse(node2.isBlock());
      assertFalse(node2.isContinue());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isFalse());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isThrow());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isIn());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isTry());
      assertFalse(node2.isVoid());
      assertFalse(node2.isCatch());
      assertFalse(node2.isFunction());
      assertFalse(node2.isRegExp());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isFor());
      assertFalse(node2.isParamList());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isString());
      assertFalse(node2.isWhile());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertFalse(node2.isReturn());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isVar());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isBreak());
      assertFalse(node2.isNull());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isAdd());
      assertFalse(node2.isTrue());
      assertFalse(node2.isOr());
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotSame(node2, node1);
      
      // Undeclared exception!
      try { 
        node0.getChildBefore(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-3453), (-3453));
      assertNotNull(node0);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isReturn());
      assertTrue(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isHook());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getLineno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      Node node1 = Node.newString(56, "3LW qC?=~VE", (-276), 113);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isNE());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCatch());
      assertFalse(node1.isString());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isComma());
      assertFalse(node1.isParamList());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isLabel());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isReturn());
      assertFalse(node1.isNot());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isFalse());
      assertEquals(56, node1.getType());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      node0.addChildrenToFront(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isCatch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isReturn());
      assertTrue(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isHook());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getLineno());
      assertEquals(39, node0.getType());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isNE());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCatch());
      assertFalse(node1.isString());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isComma());
      assertFalse(node1.isParamList());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isLabel());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isReturn());
      assertFalse(node1.isNot());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isFalse());
      assertEquals(56, node1.getType());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      node0.detachChildren();
      assertFalse(node0.equals((Object)node1));
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isReturn());
      assertTrue(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isHook());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getLineno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      boolean boolean0 = node0.isInc();
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean0);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isReturn());
      assertTrue(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isHook());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getLineno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      boolean boolean1 = node0.isNew();
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isReturn());
      assertTrue(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isHook());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getLineno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      Node node2 = node0.useSourceInfoFrom(node1);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isReturn());
      assertTrue(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isHook());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getLineno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isNE());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCatch());
      assertFalse(node1.isString());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isComma());
      assertFalse(node1.isParamList());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isLabel());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isReturn());
      assertFalse(node1.isNot());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isFalse());
      assertEquals(56, node1.getType());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isCatch());
      assertFalse(node2.isName());
      assertFalse(node2.isNull());
      assertFalse(node2.isTrue());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isParamList());
      assertFalse(node2.isAdd());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isNew());
      assertFalse(node2.isFunction());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDo());
      assertFalse(node2.isVar());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isLabel());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isIn());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNE());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isIf());
      assertFalse(node2.isTry());
      assertFalse(node2.isBlock());
      assertFalse(node2.isHook());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isScript());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isWith());
      assertEquals(39, node2.getType());
      assertFalse(node2.isFor());
      assertFalse(node2.isCase());
      assertFalse(node2.isThis());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isComma());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isNot());
      assertFalse(node2.isBreak());
      assertFalse(node2.isAnd());
      assertFalse(node2.isCast());
      assertFalse(node2.isInc());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertTrue(node2.isNumber());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isReturn());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isContinue());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isGetElem());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCall());
      assertFalse(node2.isString());
      assertFalse(node2.isAssign());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertFalse(node2.isWhile());
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertSame(node0, node2);
      assertSame(node2, node0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node node0 = Node.newString(44, "sg_{;L{935r");
      assertNotNull(node0);
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAdd());
      assertTrue(node0.isTrue());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDefaultCase());
      assertEquals(44, node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWhile());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(53);
      assertNotNull(node_SideEffectFlags0);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(53, node_SideEffectFlags0.valueOf());
      
      node_SideEffectFlags0.clearSideEffectFlags();
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(63, node_SideEffectFlags0.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      assertNotNull(node_SideEffectFlags1);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.clearAllFlags();
      assertNotNull(node_SideEffectFlags2);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags2.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setMutatesGlobalState();
      assertNotNull(node_SideEffectFlags3);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(24, node_SideEffectFlags0.valueOf());
      assertEquals(24, node_SideEffectFlags3.valueOf());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      assertNotNull(node_SideEffectFlags4);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags0.clearAllFlags();
      assertNotNull(node_SideEffectFlags5);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags5.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags5.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      
      Node node1 = Node.newString(29, "H~T!GP", 54, (-5040));
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isParamList());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNull());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNew());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isContinue());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertFalse(node1.isIn());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isThrow());
      assertFalse(node1.isNot());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetProp());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFalse());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isLabel());
      assertFalse(node1.isReturn());
      assertFalse(node1.isString());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isWhile());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertEquals(29, node1.getType());
      assertFalse(node1.isGetElem());
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertNotSame(node1, node0);
      
      node0.addChildrenToFront(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isReturn());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAdd());
      assertTrue(node0.isTrue());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isNE());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDefaultCase());
      assertEquals(44, node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWhile());
      assertFalse(node1.isParamList());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNull());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNew());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isContinue());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertFalse(node1.isIn());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isThrow());
      assertFalse(node1.isNot());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetProp());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFalse());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isLabel());
      assertFalse(node1.isReturn());
      assertFalse(node1.isString());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isWhile());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertEquals(29, node1.getType());
      assertFalse(node1.isGetElem());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      
      node0.detachChildren();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAdd());
      assertTrue(node0.isTrue());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDefaultCase());
      assertEquals(44, node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWhile());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertNotSame(node0, node1);
      
      boolean boolean0 = node0.isInc();
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean0);
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAdd());
      assertTrue(node0.isTrue());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDefaultCase());
      assertEquals(44, node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWhile());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertNotSame(node0, node1);
      
      boolean boolean1 = node0.isString();
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAdd());
      assertTrue(node0.isTrue());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDefaultCase());
      assertEquals(44, node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWhile());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertNotSame(node0, node1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node node0 = new Node(79);
      assertNotNull(node0);
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertEquals(79, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.isNull());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      assertNotNull(node_AncestorIterable0);
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertEquals(79, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.isNull());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      
      Node node1 = new Node(79);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isFalse());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isAnd());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertFalse(node1.isCast());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isThis());
      assertFalse(node1.isSetterDef());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.isParamList());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAssign());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isOr());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isBreak());
      assertEquals(79, node1.getType());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isNull());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      
      node1.addChildToFront(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertEquals(79, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.isNull());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isFalse());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isAnd());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertFalse(node1.isCast());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFor());
      assertFalse(node1.isThis());
      assertFalse(node1.isSetterDef());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.isParamList());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAssign());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isOr());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isBreak());
      assertEquals(79, node1.getType());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isNull());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isWizaction());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      
      Node node2 = node1.setJSDocInfo(jSDocInfo0);
      assertNotNull(node2);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isFalse());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isAnd());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertFalse(node1.isCast());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFor());
      assertFalse(node1.isThis());
      assertFalse(node1.isSetterDef());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.isParamList());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAssign());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isOr());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isBreak());
      assertEquals(79, node1.getType());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isNull());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isWizaction());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isThrow());
      assertFalse(node2.isNot());
      assertFalse(node2.isScript());
      assertEquals(79, node2.getType());
      assertFalse(node2.isHook());
      assertFalse(node2.isAssign());
      assertFalse(node2.isWith());
      assertFalse(node2.isBreak());
      assertFalse(node2.isInstanceOf());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNumber());
      assertFalse(node2.isGetterDef());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isFor());
      assertFalse(node2.isLabel());
      assertFalse(node2.isCase());
      assertFalse(node2.isDo());
      assertFalse(node2.isEmpty());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isNew());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isVar());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isParamList());
      assertFalse(node2.isNull());
      assertFalse(node2.isAdd());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isVoid());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTry());
      assertFalse(node2.isWhile());
      assertFalse(node2.isBlock());
      assertFalse(node2.isTrue());
      assertFalse(node2.isCatch());
      assertFalse(node2.isName());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isDelProp());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isCall());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isIf());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDec());
      assertFalse(node2.isNE());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isReturn());
      assertFalse(node2.isIn());
      assertFalse(node2.isString());
      assertFalse(node2.isInc());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isFunction());
      assertFalse(node2.isAnd());
      assertFalse(node2.isContinue());
      assertFalse(node2.isFalse());
      assertFalse(node2.isCast());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertSame(node1, node2);
      assertNotSame(node1, node0);
      assertSame(node2, node1);
      assertNotSame(node2, node0);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      
      StaticSourceFile staticSourceFile0 = node2.getStaticSourceFile();
      assertNull(staticSourceFile0);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isFalse());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isAnd());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertFalse(node1.isCast());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFor());
      assertFalse(node1.isThis());
      assertFalse(node1.isSetterDef());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.isParamList());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAssign());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isOr());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isBreak());
      assertEquals(79, node1.getType());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isNull());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isWizaction());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isThrow());
      assertFalse(node2.isNot());
      assertFalse(node2.isScript());
      assertEquals(79, node2.getType());
      assertFalse(node2.isHook());
      assertFalse(node2.isAssign());
      assertFalse(node2.isWith());
      assertFalse(node2.isBreak());
      assertFalse(node2.isInstanceOf());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNumber());
      assertFalse(node2.isGetterDef());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isFor());
      assertFalse(node2.isLabel());
      assertFalse(node2.isCase());
      assertFalse(node2.isDo());
      assertFalse(node2.isEmpty());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isNew());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isVar());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isParamList());
      assertFalse(node2.isNull());
      assertFalse(node2.isAdd());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isVoid());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTry());
      assertFalse(node2.isWhile());
      assertFalse(node2.isBlock());
      assertFalse(node2.isTrue());
      assertFalse(node2.isCatch());
      assertFalse(node2.isName());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isDelProp());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isCall());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isIf());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDec());
      assertFalse(node2.isNE());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isReturn());
      assertFalse(node2.isIn());
      assertFalse(node2.isString());
      assertFalse(node2.isInc());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isFunction());
      assertFalse(node2.isAnd());
      assertFalse(node2.isContinue());
      assertFalse(node2.isFalse());
      assertFalse(node2.isCast());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertSame(node1, node2);
      assertNotSame(node1, node0);
      assertSame(node2, node1);
      assertNotSame(node2, node0);
      
      Node node3 = new Node(43);
      assertNotNull(node3);
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.isNE());
      assertFalse(node3.isIf());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isFor());
      assertFalse(node3.isDebugger());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isTry());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isCase());
      assertFalse(node3.isString());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isParamList());
      assertFalse(node3.isNull());
      assertFalse(node3.isBreak());
      assertTrue(node3.isFalse());
      assertFalse(node3.isName());
      assertFalse(node3.isVar());
      assertFalse(node3.isCall());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isComma());
      assertFalse(node3.isVoid());
      assertFalse(node3.isNew());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isTrue());
      assertFalse(node3.isAdd());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isDo());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isOr());
      assertFalse(node3.isLabel());
      assertFalse(node3.isReturn());
      assertEquals((-1), node3.getLineno());
      assertEquals(43, node3.getType());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isContinue());
      assertFalse(node3.isCast());
      assertFalse(node3.isGetElem());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isDec());
      assertFalse(node3.isAssign());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isScript());
      assertFalse(node3.isBlock());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isWhile());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isAnd());
      assertFalse(node3.isNumber());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isNot());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isThis());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isThrow());
      assertFalse(node3.isCatch());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isHook());
      assertFalse(node3.isWith());
      assertFalse(node3.isFunction());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isInc());
      assertFalse(node3.isIn());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      // Undeclared exception!
      try { 
        node0.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 79
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Node node0 = new Node(0);
      assertNotNull(node0);
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isString());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertEquals(0, node0.getType());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      Node node1 = Node.newString(15, "Namespaces not supported yet (", (-4470), (-2139));
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNE());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFor());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isContinue());
      assertFalse(node1.isSetterDef());
      assertEquals(15, node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCast());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isNot());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertEquals((-1), node1.getSourcePosition());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isComma());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThis());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isHook());
      assertFalse(node1.isReturn());
      assertFalse(node1.isCall());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isName());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabel());
      assertFalse(node1.isVar());
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      Node node2 = new Node(0, node0, node1, node1, node1, 266, (-654));
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isString());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertEquals(0, node0.getType());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNE());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFor());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isContinue());
      assertFalse(node1.isSetterDef());
      assertEquals(15, node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCast());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isNot());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertEquals((-1), node1.getSourcePosition());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isComma());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThis());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isHook());
      assertFalse(node1.isReturn());
      assertFalse(node1.isCall());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isName());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabel());
      assertFalse(node1.isVar());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isString());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isCase());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isInc());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isIn());
      assertFalse(node2.isTry());
      assertEquals(0, node2.getType());
      assertFalse(node2.isHook());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDelProp());
      assertTrue(node2.hasMoreThanOneChild());
      assertFalse(node2.isFor());
      assertFalse(node2.isThis());
      assertFalse(node2.isBreak());
      assertFalse(node2.isComma());
      assertFalse(node2.isCatch());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isGetProp());
      assertEquals(2, node2.getChildCount());
      assertFalse(node2.isAnd());
      assertFalse(node2.isNot());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFunction());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCast());
      assertFalse(node2.isFalse());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDo());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isNumber());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isBlock());
      assertFalse(node2.isName());
      assertFalse(node2.isWhile());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCall());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isWith());
      assertFalse(node2.isParamList());
      assertFalse(node2.isScript());
      assertFalse(node2.isNull());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isVar());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isLabelName());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      
      node1.setString("3G'.Lkmxm");
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNE());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFor());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isContinue());
      assertFalse(node1.isSetterDef());
      assertEquals(15, node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCast());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isNot());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertEquals((-1), node1.getSourcePosition());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isComma());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThis());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isHook());
      assertFalse(node1.isReturn());
      assertFalse(node1.isCall());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isName());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabel());
      assertFalse(node1.isVar());
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      Node node3 = Node.newString("Namespaces not supported yet (", 70, 3198);
      assertNotNull(node3);
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.isNE());
      assertFalse(node3.isFor());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isIf());
      assertFalse(node3.isCase());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isIn());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isFunction());
      assertFalse(node3.isInc());
      assertFalse(node3.isDebugger());
      assertEquals(40, node3.getType());
      assertFalse(node3.isDefaultCase());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isFalse());
      assertFalse(node3.isComma());
      assertFalse(node3.isNull());
      assertFalse(node3.isBreak());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isName());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isNot());
      assertFalse(node3.isAdd());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isVoid());
      assertFalse(node3.isTrue());
      assertEquals(3198, node3.getCharno());
      assertFalse(node3.isWhile());
      assertFalse(node3.isCall());
      assertFalse(node3.isAssign());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isDec());
      assertFalse(node3.isLabel());
      assertFalse(node3.isReturn());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isOr());
      assertFalse(node3.isNumber());
      assertFalse(node3.isNew());
      assertFalse(node3.isDo());
      assertFalse(node3.isAnd());
      assertFalse(node3.isCast());
      assertFalse(node3.isVar());
      assertFalse(node3.isContinue());
      assertFalse(node3.isThis());
      assertFalse(node3.isSetterDef());
      assertEquals(70, node3.getLineno());
      assertFalse(node3.isThrow());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isParamList());
      assertEquals(289918, node3.getSourcePosition());
      assertFalse(node3.isScript());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isTry());
      assertTrue(node3.isString());
      assertFalse(node3.isBlock());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isCatch());
      assertFalse(node3.isHook());
      assertFalse(node3.isWith());
      assertFalse(node3.isInstanceOf());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertNotSame(node3, node1);
      
      Node node4 = null;
      try {
        node4 = new Node(0, node1, node0, node1, node1, (-3882), 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Node node0 = Node.newString(44, "sg_{;L{935r");
      assertNotNull(node0);
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertEquals(44, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isHook());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertTrue(node0.isTrue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      
      node0.setIsSyntheticBlock(true);
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertEquals(44, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isHook());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertTrue(node0.isTrue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      
      Node node1 = new Node(43);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isDo());
      assertFalse(node1.isOr());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertTrue(node1.isFalse());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isInstanceOf());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertEquals(43, node1.getType());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isTry());
      assertFalse(node1.hasOneChild());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThrow());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isComma());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      
      // Undeclared exception!
      try { 
        node0.clonePropsFrom(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Node has existing properties.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node node0 = Node.newString(44, "sg_{;L{935r");
      assertNotNull(node0);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertTrue(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertEquals(44, node0.getType());
      assertFalse(node0.isTry());
      assertFalse(node0.isVar());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      
      StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
      assertNull(staticSourceFile0);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertTrue(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertEquals(44, node0.getType());
      assertFalse(node0.isTry());
      assertFalse(node0.isVar());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      
      boolean boolean0 = node0.isNoSideEffectsCall();
      assertFalse(boolean0);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertTrue(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertEquals(44, node0.getType());
      assertFalse(node0.isTry());
      assertFalse(node0.isVar());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      
      boolean boolean1 = node0.isNumber();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertTrue(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertEquals(44, node0.getType());
      assertFalse(node0.isTry());
      assertFalse(node0.isVar());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      
      node0.putProp(44, (Object) null);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertTrue(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertEquals(44, node0.getType());
      assertFalse(node0.isTry());
      assertFalse(node0.isVar());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      
      // Undeclared exception!
      try { 
        node0.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = (-1143);
      Node node0 = new Node((-1143), (-1143), 2374);
      assertNotNull(node0);
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertEquals((-1143), node0.getType());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      
      boolean boolean0 = node0.isNoSideEffectsCall();
      assertFalse(boolean0);
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertEquals((-1143), node0.getType());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      
      InputId inputId0 = node0.getInputId();
      assertNull(inputId0);
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertEquals((-1143), node0.getType());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      
      boolean boolean1 = node0.isLabelName();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertEquals((-1143), node0.getType());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("?L-'<^% 6;, D");
      assertNotNull(mockPrintWriter0);
      
      // Undeclared exception!
      try { 
        node0.appendStringTree(mockPrintWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1143
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Node node0 = new Node(41, 41, 41);
      assertNotNull(node0);
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertEquals(167977, node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isTrue());
      assertEquals(41, node0.getType());
      assertFalse(node0.isHook());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isComma());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(41, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isInstanceOf());
      assertEquals(41, node0.getLineno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertTrue(node0.isNull());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      
      try { 
        node0.setDouble(42);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NULL 41 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node node0 = Node.newString(44, "sg_{;L{935r");
      assertNotNull(node0);
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInc());
      assertTrue(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertEquals(44, node0.getType());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      node0.setIsSyntheticBlock(false);
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInc());
      assertTrue(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertEquals(44, node0.getType());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
      assertNull(staticSourceFile0);
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInc());
      assertTrue(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertEquals(44, node0.getType());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      boolean boolean0 = node0.isArrayLit();
      assertFalse(boolean0);
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInc());
      assertTrue(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertEquals(44, node0.getType());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      Node node1 = Node.newString("null");
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertTrue(node1.isString());
      assertFalse(node1.isName());
      assertFalse(node1.isWhile());
      assertFalse(node1.isFor());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isReturn());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isThrow());
      assertEquals(40, node1.getType());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCast());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isComma());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDo());
      assertFalse(node1.isCase());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isArrayLit());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabelName());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertNotSame(node1, node0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node node0 = new Node((-50));
      assertNotNull(node0);
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isWhile());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertEquals((-50), node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      node0.detachChildren();
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isWhile());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertEquals((-50), node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      boolean boolean0 = node0.isOnlyModifiesThisCall();
      assertFalse(boolean0);
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isWhile());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertEquals((-50), node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      Node node1 = new Node(16, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isWhile());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertEquals((-50), node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabel());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isDec());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssign());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isCast());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertEquals(16, node1.getType());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      node0.addChildrenToFront(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isWhile());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertEquals(1, node0.getChildCount());
      assertEquals((-50), node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isCast());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabel());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isDec());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssign());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isCast());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertEquals(16, node1.getType());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      
      node1.detachChildren();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isWhile());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertEquals(1, node0.getChildCount());
      assertEquals((-50), node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isCast());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabel());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAssign());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isCast());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertEquals(16, node1.getType());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      
      node0.setLength(113);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isWhile());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertEquals(1, node0.getChildCount());
      assertEquals((-50), node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isCast());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotSame(node0, node1);
      
      Node node2 = Node.newNumber((-1303.922416), 102, 31);
      assertNotNull(node2);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isParamList());
      assertFalse(node2.isNull());
      assertFalse(node2.isDefaultCase());
      assertEquals(417823, node2.getSourcePosition());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isNew());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isVar());
      assertFalse(node2.isFunction());
      assertFalse(node2.isContinue());
      assertFalse(node2.isIn());
      assertFalse(node2.isNE());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isCase());
      assertFalse(node2.isInc());
      assertFalse(node2.isHook());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isTry());
      assertFalse(node2.isBlock());
      assertFalse(node2.isFor());
      assertFalse(node2.isWith());
      assertFalse(node2.isIf());
      assertEquals(39, node2.getType());
      assertFalse(node2.isRegExp());
      assertEquals(102, node2.getLineno());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertFalse(node2.isThis());
      assertFalse(node2.isAnd());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isScript());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isThrow());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isFalse());
      assertFalse(node2.isCast());
      assertFalse(node2.isReturn());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertTrue(node2.isNumber());
      assertFalse(node2.isOr());
      assertFalse(node2.isString());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDo());
      assertFalse(node2.isAdd());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTrue());
      assertEquals(31, node2.getCharno());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isName());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isComma());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCall());
      assertFalse(node2.isGetElem());
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      
      boolean boolean1 = node2.isThis();
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isParamList());
      assertFalse(node2.isNull());
      assertFalse(node2.isDefaultCase());
      assertEquals(417823, node2.getSourcePosition());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isNew());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isVar());
      assertFalse(node2.isFunction());
      assertFalse(node2.isContinue());
      assertFalse(node2.isIn());
      assertFalse(node2.isNE());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isCase());
      assertFalse(node2.isInc());
      assertFalse(node2.isHook());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isTry());
      assertFalse(node2.isBlock());
      assertFalse(node2.isFor());
      assertFalse(node2.isWith());
      assertFalse(node2.isIf());
      assertEquals(39, node2.getType());
      assertFalse(node2.isRegExp());
      assertEquals(102, node2.getLineno());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertFalse(node2.isThis());
      assertFalse(node2.isAnd());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isScript());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isThrow());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isFalse());
      assertFalse(node2.isCast());
      assertFalse(node2.isReturn());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertTrue(node2.isNumber());
      assertFalse(node2.isOr());
      assertFalse(node2.isString());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDo());
      assertFalse(node2.isAdd());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTrue());
      assertEquals(31, node2.getCharno());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isName());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isComma());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCall());
      assertFalse(node2.isGetElem());
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      
      boolean boolean2 = node0.isArrayLit();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isParamList());
      assertFalse(node0.isWhile());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertEquals(1, node0.getChildCount());
      assertEquals((-50), node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isCast());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotSame(node0, node1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-3453), (-3453));
      assertNotNull(node0);
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertTrue(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertEquals(39, node0.getType());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      node0.setJSType((JSType) null);
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertTrue(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertEquals(39, node0.getType());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      Node node1 = new Node(300, node0, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertTrue(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertEquals(39, node0.getType());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node1.isIf());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIn());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFalse());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isNull());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVoid());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTrue());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOr());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDo());
      assertFalse(node1.isNumber());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isCast());
      assertFalse(node1.isParamList());
      assertEquals(300, node1.getType());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertTrue(node1.hasChildren());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      
      node0.setType(37);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertEquals(37, node0.getType());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertTrue(node0.isCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      node0.putIntProp(119, 48);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertEquals(37, node0.getType());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertTrue(node0.isCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      Node node2 = node0.cloneNode();
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertEquals(37, node0.getType());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertTrue(node0.isCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isCatch());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isVar());
      assertFalse(node2.isTry());
      assertFalse(node2.isFunction());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isParamList());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDo());
      assertFalse(node2.isWhile());
      assertEquals(37, node2.getType());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isReturn());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isVoid());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isName());
      assertFalse(node2.isNull());
      assertFalse(node2.isTrue());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isWith());
      assertFalse(node2.isFalse());
      assertFalse(node2.isComma());
      assertFalse(node2.isThrow());
      assertFalse(node2.isThis());
      assertFalse(node2.isHook());
      assertFalse(node2.isScript());
      assertFalse(node2.isCast());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isNot());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isString());
      assertFalse(node2.isAnd());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNumber());
      assertFalse(node2.isSwitch());
      assertEquals((-1), node2.getSourcePosition());
      assertEquals((-1), node2.getCharno());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isIn());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isFor());
      assertFalse(node2.isCase());
      assertFalse(node2.isContinue());
      assertFalse(node2.isBlock());
      assertFalse(node2.isInc());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertTrue(node2.isCall());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotSame(node0, node2);
      assertNotSame(node2, node0);
      
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node2);
      assertNull(node_NodeMismatch0);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertEquals(37, node0.getType());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertTrue(node0.isCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isCatch());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isVar());
      assertFalse(node2.isTry());
      assertFalse(node2.isFunction());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isParamList());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDo());
      assertFalse(node2.isWhile());
      assertEquals(37, node2.getType());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isReturn());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isVoid());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isName());
      assertFalse(node2.isNull());
      assertFalse(node2.isTrue());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isWith());
      assertFalse(node2.isFalse());
      assertFalse(node2.isComma());
      assertFalse(node2.isThrow());
      assertFalse(node2.isThis());
      assertFalse(node2.isHook());
      assertFalse(node2.isScript());
      assertFalse(node2.isCast());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isNot());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isString());
      assertFalse(node2.isAnd());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNumber());
      assertFalse(node2.isSwitch());
      assertEquals((-1), node2.getSourcePosition());
      assertEquals((-1), node2.getCharno());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isIn());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isFor());
      assertFalse(node2.isCase());
      assertFalse(node2.isContinue());
      assertFalse(node2.isBlock());
      assertFalse(node2.isInc());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertTrue(node2.isCall());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotSame(node0, node2);
      assertNotSame(node2, node0);
      
      Node node3 = new Node(105, node1);
      assertNotNull(node3);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertEquals(37, node0.getType());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isFor());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertTrue(node0.isCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node1.isIf());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIn());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFalse());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isNull());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVoid());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTrue());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOr());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDo());
      assertFalse(node1.isNumber());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isCast());
      assertFalse(node1.isParamList());
      assertEquals(300, node1.getType());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertTrue(node1.hasChildren());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isScript());
      assertFalse(node3.isWith());
      assertFalse(node3.isNot());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isAnd());
      assertFalse(node3.isCast());
      assertTrue(node3.isFunction());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isThis());
      assertFalse(node3.isReturn());
      assertFalse(node3.isInstanceOf());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isDec());
      assertFalse(node3.isNumber());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isComma());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isAssign());
      assertFalse(node3.isWhile());
      assertEquals(105, node3.getType());
      assertFalse(node3.isNew());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isAdd());
      assertFalse(node3.isName());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isCall());
      assertFalse(node3.isBreak());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isLabel());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isNull());
      assertFalse(node3.isOr());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isVar());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isDo());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isTrue());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isCatch());
      assertFalse(node3.isIf());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isVoid());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isParamList());
      assertTrue(node3.hasChildren());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isCase());
      assertFalse(node3.isString());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isFor());
      assertFalse(node3.isTry());
      assertFalse(node3.isBlock());
      assertFalse(node3.isInc());
      assertFalse(node3.isHook());
      assertFalse(node3.isFalse());
      assertFalse(node3.isContinue());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isNE());
      assertFalse(node3.isIn());
      assertFalse(node3.isThrow());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createEnumType("this", node2, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Node node0 = new Node(79);
      assertNotNull(node0);
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isParamList());
      assertEquals(79, node0.getType());
      assertFalse(node0.isThis());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isDefaultCase());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      assertNotNull(node_AncestorIterable0);
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isParamList());
      assertEquals(79, node0.getType());
      assertFalse(node0.isThis());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isDefaultCase());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      Node node1 = new Node(79);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isHook());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isVoid());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTypeOf());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isBreak());
      assertEquals(79, node1.getType());
      assertFalse(node1.isName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isCall());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVar());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTry());
      assertFalse(node1.isFunction());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCast());
      assertFalse(node1.isFor());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      Node node2 = Node.newString(4, "3LW qC?=~VE", 1, (-2100));
      assertNotNull(node2);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.isAssign());
      assertFalse(node2.isLabelName());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isGetElem());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isOr());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isNumber());
      assertFalse(node2.isWith());
      assertFalse(node2.isWhile());
      assertFalse(node2.isScript());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isThis());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isBlock());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isComma());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isThrow());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isInc());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isAnd());
      assertFalse(node2.isCast());
      assertFalse(node2.isContinue());
      assertFalse(node2.isFalse());
      assertFalse(node2.isFunction());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isFor());
      assertFalse(node2.isNE());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isIf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isTry());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isIn());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isCase());
      assertFalse(node2.isString());
      assertTrue(node2.isReturn());
      assertFalse(node2.isVoid());
      assertFalse(node2.isHook());
      assertFalse(node2.isCatch());
      assertEquals(4, node2.getType());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isBreak());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isCall());
      assertFalse(node2.isNull());
      assertFalse(node2.isVar());
      assertFalse(node2.isParamList());
      assertFalse(node2.isName());
      assertFalse(node2.isNew());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isAdd());
      assertFalse(node2.isDo());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertEquals(0, node2.getChildCount());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      node2.addChildrenToFront(node1);
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isHook());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isVoid());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTypeOf());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isBreak());
      assertEquals(79, node1.getType());
      assertFalse(node1.isName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isCall());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVar());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTry());
      assertFalse(node1.isFunction());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCast());
      assertFalse(node1.isFor());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node2.isAssign());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isOr());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isNumber());
      assertFalse(node2.isWith());
      assertFalse(node2.isWhile());
      assertFalse(node2.isScript());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isThis());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isBlock());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isComma());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isThrow());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isInc());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isAnd());
      assertFalse(node2.isCast());
      assertFalse(node2.isContinue());
      assertFalse(node2.isFalse());
      assertFalse(node2.isFunction());
      assertFalse(node2.isEmpty());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isFor());
      assertFalse(node2.isNE());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isIf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isTry());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isIn());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isCase());
      assertFalse(node2.isString());
      assertTrue(node2.isReturn());
      assertFalse(node2.isVoid());
      assertTrue(node2.hasChildren());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isHook());
      assertFalse(node2.isCatch());
      assertEquals(4, node2.getType());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isBreak());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isCall());
      assertFalse(node2.isNull());
      assertFalse(node2.isVar());
      assertFalse(node2.isParamList());
      assertFalse(node2.isName());
      assertFalse(node2.isNew());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isAdd());
      assertFalse(node2.isDo());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertNotSame(node1, node0);
      
      node1.detachChildren();
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isHook());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isVoid());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTypeOf());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isBreak());
      assertEquals(79, node1.getType());
      assertFalse(node1.isName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isCall());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVar());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTry());
      assertFalse(node1.isFunction());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCast());
      assertFalse(node1.isFor());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotSame(node1, node0);
      
      boolean boolean0 = node1.isFor();
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean0);
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isHook());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isVoid());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTypeOf());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isBreak());
      assertEquals(79, node1.getType());
      assertFalse(node1.isName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isCall());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVar());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTry());
      assertFalse(node1.isFunction());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCast());
      assertFalse(node1.isFor());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotSame(node1, node0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node node0 = Node.newString("~", 10, 10);
      assertNotNull(node0);
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertTrue(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertEquals(40970, node0.getSourcePosition());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertEquals(10, node0.getCharno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(10, node0.getLineno());
      assertFalse(node0.isDefaultCase());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      
      Node node1 = Node.newString(1754, "BAY51v3z");
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isTypeOf());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCast());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWith());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isComma());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isString());
      assertFalse(node1.isFunction());
      assertEquals(1754, node1.getType());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isTrue());
      assertFalse(node1.isParamList());
      assertFalse(node1.isVar());
      assertFalse(node1.isInstanceOf());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isScript());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getCharno());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertNotSame(node1, node0);
      
      Node node2 = new Node(39, node1, node0, (-4999), 38);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertTrue(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertEquals(40970, node0.getSourcePosition());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertEquals(10, node0.getCharno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(10, node0.getLineno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node1.isTypeOf());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCast());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWith());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isComma());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isString());
      assertFalse(node1.isFunction());
      assertEquals(1754, node1.getType());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isTrue());
      assertFalse(node1.isParamList());
      assertFalse(node1.isVar());
      assertFalse(node1.isInstanceOf());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isScript());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getCharno());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertFalse(node2.isThis());
      assertFalse(node2.isHook());
      assertFalse(node2.isComma());
      assertEquals(2, node2.getChildCount());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isInc());
      assertFalse(node2.isWith());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isBreak());
      assertFalse(node2.isDelProp());
      assertTrue(node2.hasMoreThanOneChild());
      assertFalse(node2.isFor());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isTry());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isScript());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isCase());
      assertFalse(node2.isDo());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isParamList());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isName());
      assertFalse(node2.isCall());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isNull());
      assertFalse(node2.isVar());
      assertFalse(node2.isAdd());
      assertFalse(node2.isBlock());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNew());
      assertEquals(39, node2.getType());
      assertFalse(node2.isCatch());
      assertFalse(node2.isWhile());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVoid());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isAssign());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isIf());
      assertFalse(node2.isCast());
      assertFalse(node2.isNE());
      assertFalse(node2.isTypeOf());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDec());
      assertFalse(node2.isReturn());
      assertFalse(node2.isIn());
      assertTrue(node2.isNumber());
      assertFalse(node2.isNot());
      assertFalse(node2.isAnd());
      assertFalse(node2.isString());
      assertFalse(node2.isContinue());
      assertFalse(node2.isFunction());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isDebugger());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      
      node1.addChildrenToBack(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertTrue(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertEquals(40970, node0.getSourcePosition());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertEquals(10, node0.getCharno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(10, node0.getLineno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node1.isTypeOf());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWith());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isComma());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isString());
      assertFalse(node1.isFunction());
      assertEquals(1754, node1.getType());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isTrue());
      assertFalse(node1.isParamList());
      assertFalse(node1.isVar());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isScript());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getCharno());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertFalse(node2.isThis());
      assertFalse(node2.isHook());
      assertFalse(node2.isComma());
      assertEquals(2, node2.getChildCount());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isInc());
      assertFalse(node2.isWith());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isBreak());
      assertFalse(node2.isDelProp());
      assertTrue(node2.hasMoreThanOneChild());
      assertFalse(node2.isFor());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isTry());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isScript());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isCase());
      assertFalse(node2.isDo());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isParamList());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isName());
      assertFalse(node2.isCall());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isNull());
      assertFalse(node2.isVar());
      assertFalse(node2.isAdd());
      assertFalse(node2.isBlock());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNew());
      assertEquals(39, node2.getType());
      assertFalse(node2.isCatch());
      assertFalse(node2.isWhile());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVoid());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isAssign());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isIf());
      assertFalse(node2.isCast());
      assertFalse(node2.isNE());
      assertFalse(node2.isTypeOf());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDec());
      assertFalse(node2.isReturn());
      assertFalse(node2.isIn());
      assertTrue(node2.isNumber());
      assertFalse(node2.isNot());
      assertFalse(node2.isAnd());
      assertFalse(node2.isString());
      assertFalse(node2.isContinue());
      assertFalse(node2.isFunction());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isDebugger());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      
      boolean boolean0 = node2.isNull();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(boolean0);
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertTrue(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertEquals(40970, node0.getSourcePosition());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertEquals(10, node0.getCharno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(10, node0.getLineno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node1.isTypeOf());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWith());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isComma());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isString());
      assertFalse(node1.isFunction());
      assertEquals(1754, node1.getType());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isTrue());
      assertFalse(node1.isParamList());
      assertFalse(node1.isVar());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isScript());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getCharno());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertFalse(node2.isThis());
      assertFalse(node2.isHook());
      assertFalse(node2.isComma());
      assertEquals(2, node2.getChildCount());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isInc());
      assertFalse(node2.isWith());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isBreak());
      assertFalse(node2.isDelProp());
      assertTrue(node2.hasMoreThanOneChild());
      assertFalse(node2.isFor());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isTry());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isScript());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isCase());
      assertFalse(node2.isDo());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isParamList());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isName());
      assertFalse(node2.isCall());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isNull());
      assertFalse(node2.isVar());
      assertFalse(node2.isAdd());
      assertFalse(node2.isBlock());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNew());
      assertEquals(39, node2.getType());
      assertFalse(node2.isCatch());
      assertFalse(node2.isWhile());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVoid());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isAssign());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isIf());
      assertFalse(node2.isCast());
      assertFalse(node2.isNE());
      assertFalse(node2.isTypeOf());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDec());
      assertFalse(node2.isReturn());
      assertFalse(node2.isIn());
      assertTrue(node2.isNumber());
      assertFalse(node2.isNot());
      assertFalse(node2.isAnd());
      assertFalse(node2.isString());
      assertFalse(node2.isContinue());
      assertFalse(node2.isFunction());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isDebugger());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node node0 = new Node(1602);
      assertNotNull(node0);
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertEquals(1602, node0.getType());
      assertFalse(node0.isBreak());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      boolean boolean0 = node0.isAdd();
      assertFalse(boolean0);
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertEquals(1602, node0.getType());
      assertFalse(node0.isBreak());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        node0.setDouble(1602);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1602
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = Node.newString("~", 1602, 1602);
      assertNotNull(node0);
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isCall());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAssign());
      assertEquals(6563394, node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isCast());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertTrue(node0.isString());
      assertEquals(1602, node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertEquals(1602, node0.getCharno());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(hashSet0.contains("~"));
      
      boolean boolean0 = hashSet0.add("");
      assertTrue(boolean0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.contains("~"));
      assertTrue(hashSet0.contains(""));
      
      node0.setDirectives(hashSet0);
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isCall());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAssign());
      assertEquals(6563394, node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isCast());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertTrue(node0.isString());
      assertEquals(1602, node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertEquals(1602, node0.getCharno());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertFalse(hashSet0.contains("~"));
      assertTrue(hashSet0.contains(""));
      
      node0.putIntProp(1327, 53);
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isCall());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAssign());
      assertEquals(6563394, node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isCast());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertTrue(node0.isString());
      assertEquals(1602, node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertEquals(1602, node0.getCharno());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      boolean boolean1 = node0.isNE();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isCall());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAssign());
      assertEquals(6563394, node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isCast());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertTrue(node0.isString());
      assertEquals(1602, node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertEquals(1602, node0.getCharno());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      node0.setSourceEncodedPositionForTree(53);
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertEquals(53, node0.getCharno());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isCall());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isCast());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertEquals(53, node0.getSourcePosition());
      assertTrue(node0.isString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isAnd());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      Node node1 = node0.getLastSibling();
      assertNotNull(node1);
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertEquals(53, node0.getCharno());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isCall());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isCast());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertEquals(53, node0.getSourcePosition());
      assertTrue(node0.isString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isAnd());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node1.isVar());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWhile());
      assertTrue(node1.isString());
      assertEquals(53, node1.getSourcePosition());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isContinue());
      assertEquals(40, node1.getType());
      assertFalse(node1.isLabel());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isIf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isNE());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInc());
      assertEquals(53, node1.getCharno());
      assertFalse(node1.isCase());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDebugger());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertSame(node0, node1);
      assertSame(node1, node0);
      
      boolean boolean2 = node0.isFromExterns();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertEquals(53, node0.getCharno());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isCall());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isCast());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertEquals(53, node0.getSourcePosition());
      assertTrue(node0.isString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isAnd());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertSame(node0, node1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node node0 = new Node((-50));
      assertNotNull(node0);
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertEquals((-50), node0.getType());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      
      node0.detachChildren();
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertEquals((-50), node0.getType());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      
      boolean boolean0 = node0.mayMutateGlobalStateOrThrow();
      assertTrue(boolean0);
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertEquals((-50), node0.getType());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      
      Node node1 = node0.cloneNode();
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertEquals((-50), node0.getType());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node1.isDo());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNumber());
      assertFalse(node1.isCall());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isCase());
      assertFalse(node1.isIn());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isIf());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertEquals((-50), node1.getType());
      assertFalse(node1.isComma());
      assertFalse(node1.isTry());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isWith());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFalse());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      
      Node node2 = Node.newString(130, "v;A5uE|");
      assertNotNull(node2);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.isString());
      assertFalse(node2.isCase());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isHook());
      assertFalse(node2.isFalse());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isBreak());
      assertFalse(node2.isNE());
      assertFalse(node2.isThrow());
      assertTrue(node2.isExprResult());
      assertFalse(node2.isIf());
      assertFalse(node2.isInc());
      assertFalse(node2.isIn());
      assertFalse(node2.isNot());
      assertFalse(node2.isAnd());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVoid());
      assertFalse(node2.isFunction());
      assertFalse(node2.isComma());
      assertFalse(node2.isCast());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDo());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isReturn());
      assertFalse(node2.isBlock());
      assertFalse(node2.isLabel());
      assertFalse(node2.isContinue());
      assertEquals(130, node2.getType());
      assertFalse(node2.isCall());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isNull());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isVar());
      assertFalse(node2.isName());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isOr());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isScript());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isInstanceOf());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isCatch());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isWith());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isFor());
      assertFalse(node2.isThis());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isTry());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isNumber());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      
      Node node3 = new Node(47, node0, node2, 12, 2);
      assertNotNull(node3);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertEquals((-50), node0.getType());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node2.isString());
      assertFalse(node2.isCase());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isHook());
      assertFalse(node2.isFalse());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isBreak());
      assertFalse(node2.isNE());
      assertFalse(node2.isThrow());
      assertTrue(node2.isExprResult());
      assertFalse(node2.isIf());
      assertFalse(node2.isInc());
      assertFalse(node2.isIn());
      assertFalse(node2.isNot());
      assertFalse(node2.isAnd());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVoid());
      assertFalse(node2.isFunction());
      assertFalse(node2.isComma());
      assertFalse(node2.isCast());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDo());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isReturn());
      assertFalse(node2.isBlock());
      assertFalse(node2.isLabel());
      assertFalse(node2.isContinue());
      assertEquals(130, node2.getType());
      assertFalse(node2.isCall());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isNull());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isVar());
      assertFalse(node2.isName());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isOr());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isScript());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isInstanceOf());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isCatch());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isWith());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isFor());
      assertFalse(node2.isThis());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isTry());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isNumber());
      assertFalse(node3.isCast());
      assertTrue(node3.isRegExp());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isNumber());
      assertFalse(node3.isNot());
      assertFalse(node3.isOr());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isWith());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isScript());
      assertFalse(node3.isGetProp());
      assertEquals(47, node3.getType());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isComma());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isWhile());
      assertFalse(node3.isAssign());
      assertFalse(node3.isDec());
      assertFalse(node3.isBlock());
      assertFalse(node3.isThis());
      assertFalse(node3.isReturn());
      assertFalse(node3.isCall());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isVar());
      assertFalse(node3.isName());
      assertFalse(node3.isNew());
      assertFalse(node3.isAdd());
      assertFalse(node3.isBreak());
      assertFalse(node3.isParamList());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isNull());
      assertFalse(node3.isDo());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isLabel());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isTry());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isVoid());
      assertFalse(node3.isTrue());
      assertFalse(node3.isNE());
      assertFalse(node3.isIf());
      assertFalse(node3.isGetterDef());
      assertEquals(2, node3.getCharno());
      assertFalse(node3.isCatch());
      assertFalse(node3.isString());
      assertTrue(node3.hasChildren());
      assertTrue(node3.hasMoreThanOneChild());
      assertFalse(node3.isCase());
      assertFalse(node3.isFor());
      assertFalse(node3.isHook());
      assertFalse(node3.isThrow());
      assertEquals(12, node3.getLineno());
      assertFalse(node3.isFalse());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isInc());
      assertFalse(node3.isAnd());
      assertFalse(node3.isContinue());
      assertFalse(node3.isIn());
      assertEquals(49154, node3.getSourcePosition());
      assertFalse(node3.isFunction());
      assertEquals(2, node3.getChildCount());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      Node node4 = null;
      try {
        node4 = new Node((-276), node0, node3, node0, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = new Node((-1143), (-1143), 2374);
      assertNotNull(node0);
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1143), node0.getType());
      assertFalse(node0.isLabel());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isString());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      boolean boolean0 = node0.isNoSideEffectsCall();
      assertFalse(boolean0);
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1143), node0.getType());
      assertFalse(node0.isLabel());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isString());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      Node node1 = Node.newNumber((-2001.164499695), 1, 4);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.isLabelName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isWith());
      assertFalse(node1.isReturn());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isContinue());
      assertFalse(node1.isWhile());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isNot());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertEquals(4100, node1.getSourcePosition());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isNew());
      assertFalse(node1.isComma());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertEquals(1, node1.getLineno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCase());
      assertTrue(node1.isNumber());
      assertFalse(node1.isParamList());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isString());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertEquals(39, node1.getType());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertEquals(4, node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node0);
      assertNotNull(node_NodeMismatch0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1143), node0.getType());
      assertFalse(node0.isLabel());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isString());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.isLabelName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isWith());
      assertFalse(node1.isReturn());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isContinue());
      assertFalse(node1.isWhile());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isNot());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertEquals(4100, node1.getSourcePosition());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isNew());
      assertFalse(node1.isComma());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertEquals(1, node1.getLineno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCase());
      assertTrue(node1.isNumber());
      assertFalse(node1.isParamList());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isString());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertEquals(39, node1.getType());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertEquals(4, node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      Node node2 = Node.newString(8232, "YFoYaB (FY`S- v", 47, 4374);
      assertNotNull(node2);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.isString());
      assertFalse(node2.isCase());
      assertEquals(4095, node2.getCharno());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isIn());
      assertEquals(47, node2.getLineno());
      assertFalse(node2.isInc());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isThrow());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isFunction());
      assertFalse(node2.isFalse());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isNot());
      assertFalse(node2.isAnd());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTrue());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isName());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isComma());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isNull());
      assertFalse(node2.isReturn());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCall());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDo());
      assertFalse(node2.isBlock());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isOr());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNumber());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isParamList());
      assertFalse(node2.isVar());
      assertFalse(node2.isStringKey());
      assertEquals(8232, node2.getType());
      assertFalse(node2.isLabel());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCast());
      assertFalse(node2.isWith());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTry());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isScript());
      assertFalse(node2.isIf());
      assertFalse(node2.isThis());
      assertFalse(node2.isFor());
      assertFalse(node2.isNE());
      assertEquals(196607, node2.getSourcePosition());
      assertFalse(node2.isHook());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      
      node2.addChildrenToFront(node0);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1143), node0.getType());
      assertFalse(node0.isLabel());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isString());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node2.isString());
      assertFalse(node2.isCase());
      assertEquals(4095, node2.getCharno());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isIn());
      assertEquals(47, node2.getLineno());
      assertFalse(node2.isInc());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isThrow());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isFunction());
      assertFalse(node2.isFalse());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isNot());
      assertFalse(node2.isAnd());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTrue());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isBreak());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isName());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isComma());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isNull());
      assertFalse(node2.isReturn());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCall());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDo());
      assertFalse(node2.isBlock());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isOr());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNumber());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isParamList());
      assertFalse(node2.isVar());
      assertFalse(node2.isStringKey());
      assertEquals(8232, node2.getType());
      assertFalse(node2.isLabel());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCast());
      assertFalse(node2.isWith());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTry());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isScript());
      assertFalse(node2.isIf());
      assertFalse(node2.isThis());
      assertFalse(node2.isFor());
      assertFalse(node2.isNE());
      assertEquals(196607, node2.getSourcePosition());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isHook());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isInstanceOf());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isCatch());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      
      node2.detachChildren();
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.isString());
      assertFalse(node2.isCase());
      assertEquals(4095, node2.getCharno());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isIn());
      assertEquals(47, node2.getLineno());
      assertFalse(node2.isInc());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isThrow());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isFunction());
      assertFalse(node2.isFalse());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isNot());
      assertFalse(node2.isAnd());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTrue());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isName());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isComma());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isNull());
      assertFalse(node2.isReturn());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCall());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDo());
      assertFalse(node2.isBlock());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isOr());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNumber());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isParamList());
      assertFalse(node2.isVar());
      assertFalse(node2.isStringKey());
      assertEquals(8232, node2.getType());
      assertFalse(node2.isLabel());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCast());
      assertFalse(node2.isWith());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTry());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isScript());
      assertFalse(node2.isIf());
      assertFalse(node2.isThis());
      assertFalse(node2.isFor());
      assertFalse(node2.isNE());
      assertEquals(196607, node2.getSourcePosition());
      assertFalse(node2.isHook());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      
      boolean boolean1 = node2.isInc();
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(node2.isString());
      assertFalse(node2.isCase());
      assertEquals(4095, node2.getCharno());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isIn());
      assertEquals(47, node2.getLineno());
      assertFalse(node2.isInc());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isThrow());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isFunction());
      assertFalse(node2.isFalse());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isNot());
      assertFalse(node2.isAnd());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTrue());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isName());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isComma());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isNull());
      assertFalse(node2.isReturn());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCall());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDo());
      assertFalse(node2.isBlock());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isOr());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNumber());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isParamList());
      assertFalse(node2.isVar());
      assertFalse(node2.isStringKey());
      assertEquals(8232, node2.getType());
      assertFalse(node2.isLabel());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCast());
      assertFalse(node2.isWith());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTry());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isScript());
      assertFalse(node2.isIf());
      assertFalse(node2.isThis());
      assertFalse(node2.isFor());
      assertFalse(node2.isNE());
      assertEquals(196607, node2.getSourcePosition());
      assertFalse(node2.isHook());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      
      // Undeclared exception!
      try { 
        node1.addChildBefore(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-3453), (-3453));
      assertNotNull(node0);
      assertTrue(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isString());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertEquals(39, node0.getType());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertFalse(node0.isWith());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      
      Node node1 = Node.newString(56, "3LW qC?=~VE", (-276), 113);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCast());
      assertFalse(node1.isWith());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOr());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertFalse(node1.isHook());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isBlock());
      assertFalse(node1.isLabel());
      assertFalse(node1.isThis());
      assertFalse(node1.isNumber());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFor());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNull());
      assertFalse(node1.isIf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIn());
      assertEquals(56, node1.getType());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCall());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isReturn());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      
      node0.addChildrenToFront(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.isNumber());
      assertFalse(node0.isIn());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isCase());
      assertFalse(node0.isDelProp());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isString());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertEquals(39, node0.getType());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertFalse(node0.isWith());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCast());
      assertFalse(node1.isWith());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOr());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertFalse(node1.isHook());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isBlock());
      assertFalse(node1.isLabel());
      assertFalse(node1.isThis());
      assertFalse(node1.isNumber());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFor());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNull());
      assertFalse(node1.isIf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIn());
      assertEquals(56, node1.getType());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCall());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isReturn());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      
      node0.detachChildren();
      assertFalse(node0.equals((Object)node1));
      assertTrue(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isString());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertEquals(39, node0.getType());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertFalse(node0.isWith());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      
      Node node2 = node1.copyInformationFrom(node0);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertTrue(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isString());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertEquals(39, node0.getType());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertFalse(node0.isWith());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCast());
      assertFalse(node1.isWith());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOr());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertFalse(node1.isHook());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isBlock());
      assertFalse(node1.isLabel());
      assertFalse(node1.isThis());
      assertFalse(node1.isNumber());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFor());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNull());
      assertFalse(node1.isIf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIn());
      assertEquals(56, node1.getType());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCall());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isReturn());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isTry());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertEquals(56, node2.getType());
      assertFalse(node2.isCall());
      assertFalse(node2.isNull());
      assertFalse(node2.isFor());
      assertFalse(node2.isName());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isBlock());
      assertFalse(node2.isCatch());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isWhile());
      assertFalse(node2.isString());
      assertFalse(node2.isInc());
      assertFalse(node2.isIn());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isThrow());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isFunction());
      assertFalse(node2.isCast());
      assertFalse(node2.isContinue());
      assertFalse(node2.isFalse());
      assertFalse(node2.isWith());
      assertFalse(node2.isScript());
      assertFalse(node2.isAnd());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isBreak());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isGetElem());
      assertFalse(node2.hasOneChild());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isReturn());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isHook());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isCase());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertFalse(node2.isAdd());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isNumber());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isOr());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isParamList());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isVar());
      assertEquals(0, node2.getChildCount());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertSame(node1, node2);
      assertSame(node2, node1);
      
      boolean boolean0 = node0.isInc();
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean0);
      assertTrue(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isString());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertEquals(39, node0.getType());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertFalse(node0.isWith());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      
      Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeTypeAwareEqualsImpl(node0);
      assertNotNull(node_NodeMismatch0);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isString());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertEquals(39, node0.getType());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertFalse(node0.isWith());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCast());
      assertFalse(node1.isWith());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOr());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertFalse(node1.isHook());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isBlock());
      assertFalse(node1.isLabel());
      assertFalse(node1.isThis());
      assertFalse(node1.isNumber());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFor());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNull());
      assertFalse(node1.isIf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIn());
      assertEquals(56, node1.getType());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCall());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isReturn());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertSame(node1, node2);
      
      boolean boolean1 = node_NodeMismatch0.equals(node0);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isString());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertEquals(39, node0.getType());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertFalse(node0.isWith());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCast());
      assertFalse(node1.isWith());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOr());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertFalse(node1.isHook());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isBlock());
      assertFalse(node1.isLabel());
      assertFalse(node1.isThis());
      assertFalse(node1.isNumber());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFor());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNull());
      assertFalse(node1.isIf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIn());
      assertEquals(56, node1.getType());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCall());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isReturn());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertSame(node1, node2);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = Node.newNumber(1418.29258, 2066, 2066);
      assertNotNull(node0);
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertEquals(39, node0.getType());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isDec());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertEquals(8464402, node0.getSourcePosition());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertTrue(node0.isNumber());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertEquals(2066, node0.getCharno());
      assertFalse(node0.isSwitch());
      assertEquals(2066, node0.getLineno());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOr());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      Node node1 = new Node(2066, node0, 54, 50);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertEquals(39, node0.getType());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isDec());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertEquals(8464402, node0.getSourcePosition());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertTrue(node0.isNumber());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertEquals(2066, node0.getCharno());
      assertFalse(node0.isSwitch());
      assertEquals(2066, node0.getLineno());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOr());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node1.isCase());
      assertFalse(node1.isIn());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isHook());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertEquals(54, node1.getLineno());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertEquals(221234, node1.getSourcePosition());
      assertFalse(node1.isTrue());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isDo());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertEquals(50, node1.getCharno());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isCast());
      assertEquals(2066, node1.getType());
      assertFalse(node1.isParamList());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isThis());
      assertFalse(node1.isFunction());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isTry());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      Node node2 = node1.removeChildren();
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertEquals(39, node0.getType());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isDec());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertEquals(8464402, node0.getSourcePosition());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertTrue(node0.isNumber());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertEquals(2066, node0.getCharno());
      assertFalse(node0.isSwitch());
      assertEquals(2066, node0.getLineno());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOr());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node1.isCase());
      assertFalse(node1.isIn());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertEquals(54, node1.getLineno());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertEquals(221234, node1.getSourcePosition());
      assertFalse(node1.isTrue());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isDo());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertFalse(node1.hasChildren());
      assertEquals(50, node1.getCharno());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNumber());
      assertFalse(node1.isCast());
      assertEquals(2066, node1.getType());
      assertFalse(node1.isParamList());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isThis());
      assertFalse(node1.isFunction());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isTry());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node2.isAdd());
      assertFalse(node2.isBlock());
      assertFalse(node2.isNew());
      assertFalse(node2.isCall());
      assertEquals(39, node2.getType());
      assertFalse(node2.isDo());
      assertFalse(node2.isVar());
      assertEquals(2066, node2.getCharno());
      assertFalse(node2.isWhile());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isReturn());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isCatch());
      assertFalse(node2.isName());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isNull());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isVoid());
      assertFalse(node2.isCast());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isFunction());
      assertFalse(node2.isAssign());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertFalse(node2.isGetProp());
      assertTrue(node2.isNumber());
      assertEquals(8464402, node2.getSourcePosition());
      assertFalse(node2.isContinue());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isAnd());
      assertEquals(2066, node2.getLineno());
      assertFalse(node2.isInc());
      assertFalse(node2.isString());
      assertFalse(node2.isFalse());
      assertFalse(node2.isCase());
      assertFalse(node2.isThis());
      assertFalse(node2.isHook());
      assertFalse(node2.isThrow());
      assertFalse(node2.isComma());
      assertFalse(node2.isIn());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isBreak());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isTry());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isScript());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isFor());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isWith());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isLabel());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertSame(node0, node2);
      assertSame(node2, node0);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(57);
      assertNotNull(node_SideEffectFlags0);
      assertEquals(57, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      
      boolean boolean0 = node0.isCase();
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean0);
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertEquals(39, node0.getType());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isDec());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertEquals(8464402, node0.getSourcePosition());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertTrue(node0.isNumber());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertEquals(2066, node0.getCharno());
      assertFalse(node0.isSwitch());
      assertEquals(2066, node0.getLineno());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOr());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertSame(node0, node2);
      
      Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
      assertNotNull(node_AncestorIterable0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertEquals(39, node0.getType());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isDec());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertEquals(8464402, node0.getSourcePosition());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertTrue(node0.isNumber());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertEquals(2066, node0.getCharno());
      assertFalse(node0.isSwitch());
      assertEquals(2066, node0.getLineno());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOr());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node1.isCase());
      assertFalse(node1.isIn());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertEquals(54, node1.getLineno());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertEquals(221234, node1.getSourcePosition());
      assertFalse(node1.isTrue());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isDo());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertFalse(node1.hasChildren());
      assertEquals(50, node1.getCharno());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNumber());
      assertFalse(node1.isCast());
      assertEquals(2066, node1.getType());
      assertFalse(node1.isParamList());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isThis());
      assertFalse(node1.isFunction());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isTry());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertSame(node0, node2);
      
      // Undeclared exception!
      try { 
        node0.replaceChild(node2, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Node node0 = new Node((-1246));
      assertNotNull(node0);
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCall());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isScript());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1246), node0.getType());
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      
      byte[] byteArray0 = new byte[7];
      boolean boolean0 = node0.isNoSideEffectsCall();
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCall());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isScript());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1246), node0.getType());
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte) (-20);
      byteArray0[6] = (byte) (-97);
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)7, (byte)47, (byte)0, (byte)11, (byte)30, (byte) (-20), (byte) (-97)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      boolean boolean2 = node0.isThrow();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCall());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isScript());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1246), node0.getType());
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      
      int int0 = Node.extractCharno(51);
      assertEquals(51, int0);
      
      // Undeclared exception!
      try { 
        node0.setString("Nt-f(!WI8\"96I");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1246
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node node0 = Node.newString("~", 1602, 1602);
      assertNotNull(node0);
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertEquals(1602, node0.getCharno());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isHook());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(1602, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertTrue(node0.isString());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetterDef());
      assertEquals(6563394, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      
      Node node1 = Node.newString(4095, "BAY51v3z");
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isAnd());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isHook());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetProp());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isScript());
      assertFalse(node1.isString());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNumber());
      assertFalse(node1.isWhile());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNew());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDefaultCase());
      assertEquals(4095, node1.getType());
      assertFalse(node1.isVoid());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isFor());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isParamList());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isThrow());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIn());
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotSame(node1, node0);
      
      Node node2 = new Node(1602, node0, node1, 31, (-4999));
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertEquals(1602, node0.getCharno());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isHook());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(1602, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertTrue(node0.isString());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetterDef());
      assertEquals(6563394, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isHook());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetProp());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isScript());
      assertFalse(node1.isString());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNumber());
      assertFalse(node1.isWhile());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNew());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDefaultCase());
      assertEquals(4095, node1.getType());
      assertFalse(node1.isVoid());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isFor());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isTry());
      assertFalse(node1.isParamList());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isThrow());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIn());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isFor());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isTry());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isIn());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isFunction());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThis());
      assertFalse(node2.isThrow());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isParamList());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertFalse(node2.isWith());
      assertFalse(node2.isCase());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isBlock());
      assertFalse(node2.isHook());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isCatch());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isAssign());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isDec());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isOr());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isScript());
      assertFalse(node2.isNumber());
      assertFalse(node2.isNot());
      assertFalse(node2.isDo());
      assertFalse(node2.isAnd());
      assertEquals(2, node2.getChildCount());
      assertFalse(node2.isLabel());
      assertFalse(node2.isCast());
      assertFalse(node2.isContinue());
      assertFalse(node2.isName());
      assertFalse(node2.isBreak());
      assertFalse(node2.isVar());
      assertFalse(node2.isNull());
      assertFalse(node2.isAdd());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isNew());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isString());
      assertTrue(node2.hasMoreThanOneChild());
      assertFalse(node2.isTrue());
      assertFalse(node2.isWhile());
      assertFalse(node2.isReturn());
      assertFalse(node2.isVoid());
      assertFalse(node2.isComma());
      assertEquals(1602, node2.getType());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCall());
      assertFalse(node2.isTypeOf());
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      
      // Undeclared exception!
      try { 
        node2.addChildrenToBack(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-3453), (-3453));
      assertNotNull(node0);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isNull());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertTrue(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(39, node0.getType());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      Node node1 = Node.newString(56, "3LW qC?=~VE", (-276), 113);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isNE());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isReturn());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isAnd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isContinue());
      assertFalse(node1.isThrow());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertEquals(56, node1.getType());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      
      node0.addChildrenToFront(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isCatch());
      assertFalse(node0.isNull());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertTrue(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(1, node0.getChildCount());
      assertEquals(39, node0.getType());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isHook());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isNE());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isReturn());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isAnd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isContinue());
      assertFalse(node1.isThrow());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertEquals(56, node1.getType());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      
      // Undeclared exception!
      try { 
        node1.setDouble(0.0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 56
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = new Node((-1143), (-1143), 2374);
      assertNotNull(node0);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertEquals((-1143), node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isOr());
      assertFalse(node0.isString());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      boolean boolean0 = node0.isNoSideEffectsCall();
      assertFalse(boolean0);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertEquals((-1143), node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isOr());
      assertFalse(node0.isString());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      InputId inputId0 = node0.getInputId();
      assertNull(inputId0);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertEquals((-1143), node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isOr());
      assertFalse(node0.isString());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      boolean boolean1 = node0.isIn();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertEquals((-1143), node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isOr());
      assertFalse(node0.isString());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("?L-'<^% 6;, D");
      assertNotNull(mockPrintWriter0);
      
      // Undeclared exception!
      try { 
        node0.appendStringTree(mockPrintWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1143
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node node0 = Node.newString(43, "sg_{;L{935r");
      assertNotNull(node0);
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isName());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertEquals(43, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.isFalse());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      
      StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
      assertNull(staticSourceFile0);
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isName());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertEquals(43, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.isFalse());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      
      boolean boolean0 = node0.isNoSideEffectsCall();
      assertFalse(boolean0);
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isName());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertEquals(43, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.isFalse());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      
      boolean boolean1 = node0.isCast();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isName());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertEquals(43, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.isFalse());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      
      Node node1 = new Node(47, node0, node0, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isName());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertEquals(43, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.isFalse());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertEquals(47, node1.getType());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.isRegExp());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNot());
      assertFalse(node1.isWith());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertFalse(node1.isReturn());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFalse());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isContinue());
      assertFalse(node1.isInc());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIf());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isIn());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNE());
      assertFalse(node1.isString());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCase());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isTry());
      assertFalse(node1.isHook());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isDo());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedHashSet<FunctionType> linkedHashSet0 = new LinkedHashSet<FunctionType>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) linkedHashSet0);
      assertNotNull(immutableList0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, immutableList0.size());
      
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      assertNotNull(node2);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, immutableList0.size());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isOr());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isNumber());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isContinue());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDo());
      assertFalse(node2.isReturn());
      assertFalse(node2.isWhile());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isNew());
      assertFalse(node2.isWith());
      assertFalse(node2.isAdd());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isNull());
      assertFalse(node2.isThis());
      assertEquals(83, node2.getType());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isHook());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isBlock());
      assertFalse(node2.isVar());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isTry());
      assertFalse(node2.isScript());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isIn());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isCase());
      assertFalse(node2.isFor());
      assertFalse(node2.isInc());
      assertFalse(node2.isTrue());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isComma());
      assertFalse(node2.isBreak());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isString());
      assertFalse(node2.isCast());
      assertFalse(node2.isAnd());
      assertFalse(node2.isObjectLit());
      assertTrue(node2.isParamList());
      assertFalse(node2.isNot());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertNotSame(node2, node1);
      
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node0, node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = new Node(79);
      assertNotNull(node0);
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNE());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isIn());
      assertEquals(79, node0.getType());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isOr());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      assertNotNull(node_AncestorIterable0);
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNE());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isIn());
      assertEquals(79, node0.getType());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isOr());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      
      Node node1 = new Node(79);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isCast());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isGetProp());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isWhile());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isContinue());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFalse());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNE());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isNull());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getCharno());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isAssignAdd());
      assertEquals(79, node1.getType());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabel());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      node0.setSourceFileForTesting("i|.Y5huTdI.9[.FA");
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNE());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isIn());
      assertEquals(79, node0.getType());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isOr());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertNotSame(node0, node1);
      
      Node node2 = new Node((-3302), node1, node1);
      assertNotNull(node2);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node1.isCast());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isGetProp());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isWhile());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isContinue());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFalse());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNE());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isNull());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getCharno());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isAssignAdd());
      assertEquals(79, node1.getType());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabel());
      assertFalse(node2.isAdd());
      assertFalse(node2.isBlock());
      assertFalse(node2.isNew());
      assertFalse(node2.isCall());
      assertFalse(node2.isNull());
      assertFalse(node2.isParamList());
      assertFalse(node2.isName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isContinue());
      assertFalse(node2.isDo());
      assertFalse(node2.isVar());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isFunction());
      assertFalse(node2.isCast());
      assertFalse(node2.isNot());
      assertFalse(node2.isDelProp());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVoid());
      assertFalse(node2.isAnd());
      assertFalse(node2.isReturn());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isComma());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isString());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isWhile());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isHook());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isInc());
      assertFalse(node2.isFalse());
      assertFalse(node2.isBreak());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isIn());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isThrow());
      assertFalse(node2.isTry());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isScript());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isNE());
      assertEquals((-3302), node2.getType());
      assertFalse(node2.isIf());
      assertEquals((-1), node2.getLineno());
      assertEquals(1, node2.getChildCount());
      assertTrue(node2.hasChildren());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isNumber());
      assertFalse(node2.isWith());
      assertFalse(node2.isFor());
      assertFalse(node2.isCase());
      assertFalse(node2.isThis());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      
      node2.putIntProp(44, 56);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node1.isCast());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isGetProp());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isWhile());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isContinue());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFalse());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNE());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isNull());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getCharno());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isAssignAdd());
      assertEquals(79, node1.getType());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabel());
      assertFalse(node2.isAdd());
      assertFalse(node2.isBlock());
      assertFalse(node2.isNew());
      assertFalse(node2.isCall());
      assertFalse(node2.isNull());
      assertFalse(node2.isParamList());
      assertFalse(node2.isName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isContinue());
      assertFalse(node2.isDo());
      assertFalse(node2.isVar());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isFunction());
      assertFalse(node2.isCast());
      assertFalse(node2.isNot());
      assertFalse(node2.isDelProp());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVoid());
      assertFalse(node2.isAnd());
      assertFalse(node2.isReturn());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isComma());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isString());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isWhile());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isHook());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isInc());
      assertFalse(node2.isFalse());
      assertFalse(node2.isBreak());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isIn());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isThrow());
      assertFalse(node2.isTry());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isScript());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isNE());
      assertEquals((-3302), node2.getType());
      assertFalse(node2.isIf());
      assertEquals((-1), node2.getLineno());
      assertEquals(1, node2.getChildCount());
      assertTrue(node2.hasChildren());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isNumber());
      assertFalse(node2.isWith());
      assertFalse(node2.isFor());
      assertFalse(node2.isCase());
      assertFalse(node2.isThis());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      
      Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeEqualsImpl(node1);
      assertNotNull(node_NodeMismatch0);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node1.isCast());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isGetProp());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isWhile());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isContinue());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFalse());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNE());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFor());
      assertFalse(node1.isHook());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isNull());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getCharno());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isAssignAdd());
      assertEquals(79, node1.getType());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabel());
      assertFalse(node2.isAdd());
      assertFalse(node2.isBlock());
      assertFalse(node2.isNew());
      assertFalse(node2.isCall());
      assertFalse(node2.isNull());
      assertFalse(node2.isParamList());
      assertFalse(node2.isName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isContinue());
      assertFalse(node2.isDo());
      assertFalse(node2.isVar());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isFunction());
      assertFalse(node2.isCast());
      assertFalse(node2.isNot());
      assertFalse(node2.isDelProp());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVoid());
      assertFalse(node2.isAnd());
      assertFalse(node2.isReturn());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isComma());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isString());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isWhile());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isHook());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isInc());
      assertFalse(node2.isFalse());
      assertFalse(node2.isBreak());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isIn());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isThrow());
      assertFalse(node2.isTry());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isScript());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isNE());
      assertEquals((-3302), node2.getType());
      assertFalse(node2.isIf());
      assertEquals((-1), node2.getLineno());
      assertEquals(1, node2.getChildCount());
      assertTrue(node2.hasChildren());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isNumber());
      assertFalse(node2.isWith());
      assertFalse(node2.isFor());
      assertFalse(node2.isCase());
      assertFalse(node2.isThis());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      
      Node node3 = node0.cloneNode();
      assertNotNull(node3);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNE());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isIn());
      assertEquals(79, node0.getType());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isOr());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node3.isNew());
      assertFalse(node3.isAdd());
      assertFalse(node3.isCall());
      assertFalse(node3.isName());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isNull());
      assertFalse(node3.isParamList());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isOr());
      assertFalse(node3.isContinue());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isDo());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isLabel());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isVar());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isFunction());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isTrue());
      assertFalse(node3.isVoid());
      assertFalse(node3.isCast());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isAnd());
      assertFalse(node3.isNot());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isComma());
      assertFalse(node3.isGetProp());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isDec());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isBreak());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isAssign());
      assertFalse(node3.isReturn());
      assertFalse(node3.isWhile());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isInc());
      assertFalse(node3.isSwitch());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isString());
      assertFalse(node3.isIn());
      assertEquals(79, node3.getType());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isFalse());
      assertFalse(node3.isThrow());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isTry());
      assertFalse(node3.isWith());
      assertFalse(node3.isScript());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isIf());
      assertFalse(node3.isNE());
      assertFalse(node3.isThis());
      assertFalse(node3.isNumber());
      assertFalse(node3.isGetterDef());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isCatch());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isCase());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isHook());
      assertFalse(node3.isBlock());
      assertFalse(node3.isFor());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertNotSame(node0, node3);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node3, node1);
      assertNotSame(node3, node2);
      assertNotSame(node3, node0);
      
      // Undeclared exception!
      try { 
        node3.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node node0 = new Node(79);
      assertNotNull(node0);
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertEquals(79, node0.getType());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      assertNotNull(node_AncestorIterable0);
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertEquals(79, node0.getType());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      Node node1 = new Node(79);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCase());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isFunction());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isCast());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isFor());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isCall());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isLabel());
      assertFalse(node1.isVar());
      assertFalse(node1.isReturn());
      assertFalse(node1.isBlock());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNumber());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDec());
      assertFalse(node1.isComma());
      assertFalse(node1.isOr());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertEquals(79, node1.getType());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      node1.setJSType((JSType) null);
      assertFalse(node1.equals((Object)node0));
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCase());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isFunction());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isCast());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isFor());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isCall());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isLabel());
      assertFalse(node1.isVar());
      assertFalse(node1.isReturn());
      assertFalse(node1.isBlock());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNumber());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDec());
      assertFalse(node1.isComma());
      assertFalse(node1.isOr());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertEquals(79, node1.getType());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotSame(node1, node0);
      
      Node node2 = new Node((-3302), node1, node1);
      assertNotNull(node2);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCase());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isFunction());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isCast());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isFor());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isCall());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isLabel());
      assertFalse(node1.isVar());
      assertFalse(node1.isReturn());
      assertFalse(node1.isBlock());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNumber());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDec());
      assertFalse(node1.isComma());
      assertFalse(node1.isOr());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertEquals(79, node1.getType());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertFalse(node2.isHook());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isInc());
      assertFalse(node2.isWith());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isNE());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isIn());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isReturn());
      assertFalse(node2.isWhile());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isString());
      assertFalse(node2.isNot());
      assertFalse(node2.isContinue());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isCast());
      assertFalse(node2.isAnd());
      assertFalse(node2.isParamList());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNull());
      assertFalse(node2.isVar());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isTrue());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isBlock());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isCall());
      assertFalse(node2.isCatch());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isName());
      assertFalse(node2.isIf());
      assertFalse(node2.isLabel());
      assertEquals(1, node2.getChildCount());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isOr());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isNumber());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCase());
      assertFalse(node2.isTry());
      assertFalse(node2.isFor());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isScript());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isLabelName());
      assertEquals((-3302), node2.getType());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isSwitch());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      
      node2.setType(79);
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCase());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isFunction());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isCast());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isFor());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isCall());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isLabel());
      assertFalse(node1.isVar());
      assertFalse(node1.isReturn());
      assertFalse(node1.isBlock());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNumber());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDec());
      assertFalse(node1.isComma());
      assertFalse(node1.isOr());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertEquals(79, node1.getType());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetProp());
      assertEquals(79, node2.getType());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertFalse(node2.isHook());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isInc());
      assertFalse(node2.isWith());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isNE());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isIn());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isReturn());
      assertFalse(node2.isWhile());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isString());
      assertFalse(node2.isNot());
      assertFalse(node2.isContinue());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isCast());
      assertFalse(node2.isAnd());
      assertFalse(node2.isParamList());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNull());
      assertFalse(node2.isVar());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isTrue());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isBlock());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isCall());
      assertFalse(node2.isCatch());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isName());
      assertFalse(node2.isIf());
      assertFalse(node2.isLabel());
      assertEquals(1, node2.getChildCount());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isOr());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isNumber());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCase());
      assertFalse(node2.isTry());
      assertFalse(node2.isFor());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isScript());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isSwitch());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      
      node2.putIntProp(44, 56);
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCase());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isFunction());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isCast());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isFor());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isCall());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isLabel());
      assertFalse(node1.isVar());
      assertFalse(node1.isReturn());
      assertFalse(node1.isBlock());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNumber());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDec());
      assertFalse(node1.isComma());
      assertFalse(node1.isOr());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertEquals(79, node1.getType());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetProp());
      assertEquals(79, node2.getType());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertFalse(node2.isHook());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isInc());
      assertFalse(node2.isWith());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isNE());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isIn());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isReturn());
      assertFalse(node2.isWhile());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isString());
      assertFalse(node2.isNot());
      assertFalse(node2.isContinue());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isCast());
      assertFalse(node2.isAnd());
      assertFalse(node2.isParamList());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNull());
      assertFalse(node2.isVar());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isTrue());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isBlock());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isCall());
      assertFalse(node2.isCatch());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isName());
      assertFalse(node2.isIf());
      assertFalse(node2.isLabel());
      assertEquals(1, node2.getChildCount());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isOr());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isNumber());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCase());
      assertFalse(node2.isTry());
      assertFalse(node2.isFor());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isScript());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isSwitch());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      
      Node node3 = node0.cloneNode();
      assertNotNull(node3);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertEquals(79, node0.getType());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node3.isNew());
      assertFalse(node3.isCall());
      assertFalse(node3.isAdd());
      assertFalse(node3.isName());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isParamList());
      assertFalse(node3.isNull());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isCatch());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isDec());
      assertFalse(node3.isWhile());
      assertFalse(node3.isAssign());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isReturn());
      assertFalse(node3.isBlock());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isTry());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isScript());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isNumber());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isVoid());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isTrue());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isOr());
      assertFalse(node3.isAssignAdd());
      assertEquals(79, node3.getType());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isDo());
      assertFalse(node3.isLabel());
      assertFalse(node3.isVar());
      assertFalse(node3.isHook());
      assertFalse(node3.isFalse());
      assertFalse(node3.isInc());
      assertFalse(node3.isBreak());
      assertFalse(node3.isString());
      assertFalse(node3.isSwitch());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isCase());
      assertFalse(node3.isComma());
      assertFalse(node3.isWith());
      assertFalse(node3.isThis());
      assertFalse(node3.isFor());
      assertFalse(node3.isCast());
      assertFalse(node3.isIf());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isNot());
      assertFalse(node3.isAnd());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isNE());
      assertFalse(node3.isIn());
      assertFalse(node3.isContinue());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isFunction());
      assertFalse(node3.isThrow());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node0, node3);
      assertNotSame(node3, node2);
      assertNotSame(node3, node1);
      assertNotSame(node3, node0);
      
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node2);
      assertNotNull(node_NodeMismatch0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node3));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertEquals(79, node0.getType());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCase());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isFunction());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isCast());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isFor());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isCall());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDo());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isLabel());
      assertFalse(node1.isVar());
      assertFalse(node1.isReturn());
      assertFalse(node1.isBlock());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNumber());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDec());
      assertFalse(node1.isComma());
      assertFalse(node1.isOr());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertEquals(79, node1.getType());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetProp());
      assertEquals(79, node2.getType());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertFalse(node2.isHook());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isInc());
      assertFalse(node2.isWith());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isNE());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isIn());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isReturn());
      assertFalse(node2.isWhile());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isString());
      assertFalse(node2.isNot());
      assertFalse(node2.isContinue());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isCast());
      assertFalse(node2.isAnd());
      assertFalse(node2.isParamList());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNull());
      assertFalse(node2.isVar());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isTrue());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isBlock());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isCall());
      assertFalse(node2.isCatch());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isName());
      assertFalse(node2.isIf());
      assertFalse(node2.isLabel());
      assertEquals(1, node2.getChildCount());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isOr());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isNumber());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCase());
      assertFalse(node2.isTry());
      assertFalse(node2.isFor());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isScript());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isSwitch());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node0, node3);
      assertNotSame(node1, node2);
      assertNotSame(node1, node3);
      assertNotSame(node1, node0);
      assertNotSame(node2, node3);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      
      Node node4 = new Node(0, node0);
      assertNotNull(node4);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertEquals(79, node0.getType());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isFunction());
      assertFalse(node4.isCatch());
      assertFalse(node4.isTry());
      assertFalse(node4.isFor());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isParamList());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isCase());
      assertFalse(node4.isContinue());
      assertFalse(node4.isInc());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isHook());
      assertEquals(1, node4.getChildCount());
      assertFalse(node4.isThrow());
      assertFalse(node4.isBlock());
      assertFalse(node4.isIf());
      assertFalse(node4.isSetterDef());
      assertTrue(node4.hasChildren());
      assertFalse(node4.isIn());
      assertEquals((-1), node4.getLineno());
      assertFalse(node4.isNE());
      assertFalse(node4.isWith());
      assertFalse(node4.isNot());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isScript());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isThis());
      assertFalse(node4.isNumber());
      assertFalse(node4.isLabelName());
      assertEquals((-1), node4.getSourcePosition());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isFalse());
      assertFalse(node4.isCast());
      assertFalse(node4.isAnd());
      assertEquals((-1), node4.getCharno());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isDo());
      assertEquals(0, node4.getType());
      assertFalse(node4.isAdd());
      assertFalse(node4.isString());
      assertFalse(node4.isReturn());
      assertFalse(node4.isLabel());
      assertFalse(node4.isNew());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isVar());
      assertFalse(node4.isWhile());
      assertFalse(node4.isBreak());
      assertFalse(node4.isDelProp());
      assertTrue(node4.hasOneChild());
      assertFalse(node4.isNull());
      assertFalse(node4.isAssign());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isComma());
      assertFalse(node4.isDec());
      assertFalse(node4.isCall());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isOr());
      assertFalse(node4.isVoid());
      assertFalse(node4.isName());
      assertFalse(node4.isTrue());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      boolean boolean0 = node4.hasChildren();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node0));
      assertTrue(boolean0);
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertEquals(79, node0.getType());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isFunction());
      assertFalse(node4.isCatch());
      assertFalse(node4.isTry());
      assertFalse(node4.isFor());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isParamList());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isCase());
      assertFalse(node4.isContinue());
      assertFalse(node4.isInc());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isHook());
      assertEquals(1, node4.getChildCount());
      assertFalse(node4.isThrow());
      assertFalse(node4.isBlock());
      assertFalse(node4.isIf());
      assertFalse(node4.isSetterDef());
      assertTrue(node4.hasChildren());
      assertFalse(node4.isIn());
      assertEquals((-1), node4.getLineno());
      assertFalse(node4.isNE());
      assertFalse(node4.isWith());
      assertFalse(node4.isNot());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isScript());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isThis());
      assertFalse(node4.isNumber());
      assertFalse(node4.isLabelName());
      assertEquals((-1), node4.getSourcePosition());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isFalse());
      assertFalse(node4.isCast());
      assertFalse(node4.isAnd());
      assertEquals((-1), node4.getCharno());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isDo());
      assertEquals(0, node4.getType());
      assertFalse(node4.isAdd());
      assertFalse(node4.isString());
      assertFalse(node4.isReturn());
      assertFalse(node4.isLabel());
      assertFalse(node4.isNew());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isVar());
      assertFalse(node4.isWhile());
      assertFalse(node4.isBreak());
      assertFalse(node4.isDelProp());
      assertTrue(node4.hasOneChild());
      assertFalse(node4.isNull());
      assertFalse(node4.isAssign());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isComma());
      assertFalse(node4.isDec());
      assertFalse(node4.isCall());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isOr());
      assertFalse(node4.isVoid());
      assertFalse(node4.isName());
      assertFalse(node4.isTrue());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node0, node3);
      assertNotSame(node0, node4);
      assertNotSame(node4, node1);
      assertNotSame(node4, node2);
      assertNotSame(node4, node3);
      assertNotSame(node4, node0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry1);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      int int0 = node3.getChildCount();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node4));
      assertEquals(0, int0);
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertEquals(79, node0.getType());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node3.isNew());
      assertFalse(node3.isCall());
      assertFalse(node3.isAdd());
      assertFalse(node3.isName());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isParamList());
      assertFalse(node3.isNull());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isCatch());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isDec());
      assertFalse(node3.isWhile());
      assertFalse(node3.isAssign());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isReturn());
      assertFalse(node3.isBlock());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isTry());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isScript());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isNumber());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isVoid());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isTrue());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isOr());
      assertFalse(node3.isAssignAdd());
      assertEquals(79, node3.getType());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isDo());
      assertFalse(node3.isLabel());
      assertFalse(node3.isVar());
      assertFalse(node3.isHook());
      assertFalse(node3.isFalse());
      assertFalse(node3.isInc());
      assertFalse(node3.isBreak());
      assertFalse(node3.isString());
      assertFalse(node3.isSwitch());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isCase());
      assertFalse(node3.isComma());
      assertFalse(node3.isWith());
      assertFalse(node3.isThis());
      assertFalse(node3.isFor());
      assertFalse(node3.isCast());
      assertFalse(node3.isIf());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isNot());
      assertFalse(node3.isAnd());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isNE());
      assertFalse(node3.isIn());
      assertFalse(node3.isContinue());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isFunction());
      assertFalse(node3.isThrow());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node0, node3);
      assertNotSame(node0, node4);
      assertNotSame(node3, node2);
      assertNotSame(node3, node1);
      assertNotSame(node3, node0);
      assertNotSame(node3, node4);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = Node.newString(44, "sg_{;L{935r");
      assertNotNull(node0);
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertTrue(node0.isTrue());
      assertFalse(node0.isScript());
      assertFalse(node0.isOr());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertEquals(44, node0.getType());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isFor());
      assertFalse(node0.isCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      
      StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
      assertNull(staticSourceFile0);
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertTrue(node0.isTrue());
      assertFalse(node0.isScript());
      assertFalse(node0.isOr());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertEquals(44, node0.getType());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isFor());
      assertFalse(node0.isCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      
      Node node1 = new Node(43);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isParamList());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNull());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAdd());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isNE());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isCast());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isHook());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isLabel());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDo());
      assertEquals(43, node1.getType());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isVar());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertTrue(node1.isFalse());
      assertFalse(node1.isArrayLit());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      
      String string0 = node0.toStringTree();
      assertNotNull(string0);
      assertFalse(node0.equals((Object)node1));
      assertEquals("TRUE sg_{;L{935r\n", string0);
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertTrue(node0.isTrue());
      assertFalse(node0.isScript());
      assertFalse(node0.isOr());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertEquals(44, node0.getType());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isFor());
      assertFalse(node0.isCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      
      Node node2 = node0.clonePropsFrom(node1);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertTrue(node0.isTrue());
      assertFalse(node0.isScript());
      assertFalse(node0.isOr());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertEquals(44, node0.getType());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isFor());
      assertFalse(node0.isCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node1.isParamList());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNull());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAdd());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isNE());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isCast());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isHook());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isLabel());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDo());
      assertEquals(43, node1.getType());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isVar());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertTrue(node1.isFalse());
      assertFalse(node1.isArrayLit());
      assertFalse(node2.isVar());
      assertFalse(node2.isName());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isCall());
      assertFalse(node2.isNull());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isWhile());
      assertFalse(node2.isBlock());
      assertFalse(node2.isAssign());
      assertFalse(node2.isReturn());
      assertFalse(node2.hasChildren());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isTry());
      assertFalse(node2.isVoid());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isNumber());
      assertFalse(node2.isScript());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isOr());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDo());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isLabel());
      assertFalse(node2.isHook());
      assertFalse(node2.isInc());
      assertFalse(node2.isBreak());
      assertFalse(node2.isString());
      assertFalse(node2.isSwitch());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCase());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isWith());
      assertFalse(node2.isFor());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertTrue(node2.isTrue());
      assertFalse(node2.isCast());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isDebugger());
      assertEquals(44, node2.getType());
      assertFalse(node2.isAnd());
      assertFalse(node2.isIn());
      assertFalse(node2.isContinue());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isFunction());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertSame(node0, node2);
      assertSame(node2, node0);
      
      Node node3 = node2.useSourceInfoIfMissingFrom(node1);
      assertNotNull(node3);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertTrue(node0.isTrue());
      assertFalse(node0.isScript());
      assertFalse(node0.isOr());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertEquals(44, node0.getType());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isFor());
      assertFalse(node0.isCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node1.isParamList());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNull());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isBlock());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAdd());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isNE());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isWhile());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isCast());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isHook());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isLabel());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDo());
      assertEquals(43, node1.getType());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isVar());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertTrue(node1.isFalse());
      assertFalse(node1.isArrayLit());
      assertFalse(node2.isVar());
      assertFalse(node2.isName());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isCall());
      assertFalse(node2.isNull());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isWhile());
      assertFalse(node2.isBlock());
      assertFalse(node2.isAssign());
      assertFalse(node2.isReturn());
      assertFalse(node2.hasChildren());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isTry());
      assertFalse(node2.isVoid());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isNumber());
      assertFalse(node2.isScript());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isOr());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDo());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isLabel());
      assertFalse(node2.isHook());
      assertFalse(node2.isInc());
      assertFalse(node2.isBreak());
      assertFalse(node2.isString());
      assertFalse(node2.isSwitch());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCase());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isWith());
      assertFalse(node2.isFor());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertTrue(node2.isTrue());
      assertFalse(node2.isCast());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isDebugger());
      assertEquals(44, node2.getType());
      assertFalse(node2.isAnd());
      assertFalse(node2.isIn());
      assertFalse(node2.isContinue());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isFunction());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isInc());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isFalse());
      assertFalse(node3.isThrow());
      assertFalse(node3.isHook());
      assertFalse(node3.isComma());
      assertFalse(node3.isNE());
      assertFalse(node3.isBreak());
      assertFalse(node3.isIf());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isIn());
      assertFalse(node3.isScript());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isTry());
      assertFalse(node3.isCatch());
      assertFalse(node3.isFor());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isWith());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isThis());
      assertFalse(node3.isParamList());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isCase());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isNumber());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isBlock());
      assertFalse(node3.isNew());
      assertFalse(node3.isAdd());
      assertFalse(node3.isDo());
      assertFalse(node3.isContinue());
      assertFalse(node3.isCall());
      assertFalse(node3.isWhile());
      assertFalse(node3.isVar());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isLabel());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isNull());
      assertEquals(44, node3.getType());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isName());
      assertTrue(node3.isTrue());
      assertFalse(node3.isOr());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isVoid());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isCast());
      assertFalse(node3.isDec());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isFunction());
      assertFalse(node3.isAssign());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isReturn());
      assertFalse(node3.isAnd());
      assertFalse(node3.isString());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isNot());
      assertFalse(node3.isObjectLit());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertSame(node0, node2);
      assertSame(node0, node3);
      assertSame(node2, node0);
      assertSame(node2, node3);
      assertSame(node3, node0);
      assertSame(node3, node2);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-3453), (-3453));
      assertNotNull(node0);
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertTrue(node0.isNumber());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertEquals(39, node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      Node node1 = node0.getParent();
      assertNull(node1);
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertTrue(node0.isNumber());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertEquals(39, node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      Node node2 = Node.newNumber((double) 1, 37, 6);
      assertNotNull(node2);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.isExprResult());
      assertFalse(node2.isScript());
      assertFalse(node2.isAnd());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isBreak());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isThis());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isHook());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isReturn());
      assertEquals(39, node2.getType());
      assertFalse(node2.isComma());
      assertFalse(node2.isWith());
      assertFalse(node2.isAssign());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isCase());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertFalse(node2.isAdd());
      assertEquals(151558, node2.getSourcePosition());
      assertFalse(node2.isOr());
      assertFalse(node2.isParamList());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isVar());
      assertFalse(node2.isLabel());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isTrue());
      assertEquals(6, node2.getCharno());
      assertFalse(node2.isTry());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNull());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isFor());
      assertFalse(node2.isName());
      assertTrue(node2.isNumber());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isCall());
      assertFalse(node2.isCatch());
      assertFalse(node2.isBlock());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isString());
      assertFalse(node2.isInc());
      assertFalse(node2.isWhile());
      assertFalse(node2.isIn());
      assertEquals(37, node2.getLineno());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isCast());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isContinue());
      assertFalse(node2.isFunction());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertNotSame(node2, node0);
      
      InputId inputId0 = new InputId("3LW qC?=~VE");
      assertNotNull(inputId0);
      assertEquals("3LW qC?=~VE", inputId0.getIdName());
      
      String string0 = inputId0.toString();
      assertNotNull(string0);
      assertEquals("InputId: 3LW qC?=~VE", string0);
      assertEquals("3LW qC?=~VE", inputId0.getIdName());
      
      node2.setInputId(inputId0);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.isExprResult());
      assertFalse(node2.isScript());
      assertFalse(node2.isAnd());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isBreak());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isThis());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isHook());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isReturn());
      assertEquals(39, node2.getType());
      assertFalse(node2.isComma());
      assertFalse(node2.isWith());
      assertFalse(node2.isAssign());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isCase());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertFalse(node2.isAdd());
      assertEquals(151558, node2.getSourcePosition());
      assertFalse(node2.isOr());
      assertFalse(node2.isParamList());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isVar());
      assertFalse(node2.isLabel());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isTrue());
      assertEquals(6, node2.getCharno());
      assertFalse(node2.isTry());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNull());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isFor());
      assertFalse(node2.isName());
      assertTrue(node2.isNumber());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isCall());
      assertFalse(node2.isCatch());
      assertFalse(node2.isBlock());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isString());
      assertFalse(node2.isInc());
      assertFalse(node2.isWhile());
      assertFalse(node2.isIn());
      assertEquals(37, node2.getLineno());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isCast());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isContinue());
      assertFalse(node2.isFunction());
      assertEquals("3LW qC?=~VE", inputId0.getIdName());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertNotSame(node2, node0);
      
      boolean boolean0 = node0.wasEmptyNode();
      assertFalse(node0.equals((Object)node2));
      assertFalse(boolean0);
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertTrue(node0.isNumber());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertEquals(39, node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotSame(node0, node2);
      
      boolean boolean1 = node0.hasChildren();
      assertFalse(node0.equals((Object)node2));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertTrue(node0.isNumber());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertEquals(39, node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotSame(node0, node2);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node node0 = new Node(79);
      assertNotNull(node0);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInstanceOf());
      assertEquals(79, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isString());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      assertNotNull(node_AncestorIterable0);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInstanceOf());
      assertEquals(79, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isString());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      Node node1 = new Node(79);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCatch());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCast());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNE());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThrow());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFalse());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isWith());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isScript());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTrue());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isParamList());
      assertFalse(node1.isAssignAdd());
      assertEquals(79, node1.getType());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertEquals(0, node1.getChildCount());
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      node1.addChildToFront(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInstanceOf());
      assertEquals(79, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isString());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCatch());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCast());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNE());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThrow());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFalse());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertEquals((-1), node1.getCharno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isWith());
      assertFalse(node1.isComma());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isThis());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isScript());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTrue());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isParamList());
      assertFalse(node1.isAssignAdd());
      assertEquals(79, node1.getType());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasThisType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isDisposes());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isNgInject());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      
      Node node2 = node1.setJSDocInfo(jSDocInfo0);
      assertNotNull(node2);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCatch());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isReturn());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCast());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNE());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isIn());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThrow());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFalse());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertEquals((-1), node1.getCharno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isWith());
      assertFalse(node1.isComma());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isThis());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isScript());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTrue());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isParamList());
      assertFalse(node1.isAssignAdd());
      assertEquals(79, node1.getType());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasThisType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isDisposes());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isNgInject());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(node2.isCatch());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isTry());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isCall());
      assertFalse(node2.isAdd());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isNull());
      assertFalse(node2.isNE());
      assertFalse(node2.isTrue());
      assertFalse(node2.isName());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertEquals((-1), node2.getLineno());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isLabel());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isOr());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCase());
      assertFalse(node2.isBlock());
      assertFalse(node2.isNew());
      assertFalse(node2.isFor());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isVar());
      assertFalse(node2.isNumber());
      assertFalse(node2.isGetterDef());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isParamList());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isInstanceOf());
      assertEquals(79, node2.getType());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isWith());
      assertFalse(node2.isScript());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isThrow());
      assertFalse(node2.isHook());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isAssign());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isBreak());
      assertFalse(node2.isReturn());
      assertFalse(node2.isString());
      assertFalse(node2.isIn());
      assertFalse(node2.isContinue());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isInc());
      assertFalse(node2.isWhile());
      assertFalse(node2.isCast());
      assertFalse(node2.isFalse());
      assertFalse(node2.isFunction());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isAnd());
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node2, node0);
      assertSame(node2, node1);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      node_SideEffectFlags0.clearSideEffectFlags();
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(15, node_SideEffectFlags0.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      assertNotNull(node_SideEffectFlags1);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      assertNotNull(node_SideEffectFlags2);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags2.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesGlobalState();
      assertNotNull(node_SideEffectFlags3);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(24, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(24, node_SideEffectFlags1.valueOf());
      assertEquals(24, node_SideEffectFlags3.valueOf());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setAllFlags();
      assertNotNull(node_SideEffectFlags4);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.clearAllFlags();
      assertNotNull(node_SideEffectFlags5);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags3.valueOf());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags5.valueOf());
      assertFalse(node_SideEffectFlags5.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      
      // Undeclared exception!
      try { 
        node1.addChildrenToFront(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Node node0 = new Node(42, 44, 3757);
      assertNotNull(node0);
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertEquals(3757, node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertEquals(44, node0.getLineno());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFalse());
      assertEquals(183981, node0.getSourcePosition());
      assertEquals(42, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.isThis());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      Node node1 = node0.setJSDocInfo((JSDocInfo) null);
      assertNotNull(node1);
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertEquals(3757, node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertEquals(44, node0.getLineno());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFalse());
      assertEquals(183981, node0.getSourcePosition());
      assertEquals(42, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.isThis());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertEquals(42, node1.getType());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertEquals(44, node1.getLineno());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isHook());
      assertFalse(node1.isComma());
      assertFalse(node1.isExprResult());
      assertEquals(3757, node1.getCharno());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isBreak());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isContinue());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isFalse());
      assertEquals(183981, node1.getSourcePosition());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCast());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isTry());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isNull());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isVoid());
      assertTrue(node1.isThis());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNumber());
      assertFalse(node1.isNew());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertSame(node0, node1);
      assertSame(node1, node0);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      node_SideEffectFlags0.clearSideEffectFlags();
      assertEquals(15, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      assertNotNull(node_SideEffectFlags1);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      assertNotNull(node_SideEffectFlags2);
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertEquals(31, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      assertNotNull(node_SideEffectFlags3);
      assertEquals(24, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(24, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(24, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(24, node_SideEffectFlags3.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setAllFlags();
      assertNotNull(node_SideEffectFlags4);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags2.clearAllFlags();
      assertNotNull(node_SideEffectFlags5);
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertEquals(31, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags5.valueOf());
      assertFalse(node_SideEffectFlags5.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      
      Node node2 = new Node(1, node0, node0, node1);
      assertNotNull(node2);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertEquals(3757, node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertEquals(44, node0.getLineno());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFalse());
      assertEquals(183981, node0.getSourcePosition());
      assertEquals(42, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.isThis());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertEquals(42, node1.getType());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertEquals(44, node1.getLineno());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isHook());
      assertFalse(node1.isComma());
      assertFalse(node1.isExprResult());
      assertEquals(3757, node1.getCharno());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isBreak());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isContinue());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isFalse());
      assertEquals(183981, node1.getSourcePosition());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFunction());
      assertFalse(node1.isCast());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isTry());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isNull());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isVoid());
      assertTrue(node1.isThis());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNumber());
      assertFalse(node1.isNew());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isFalse());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isAnd());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isScript());
      assertFalse(node2.isExprResult());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isString());
      assertFalse(node2.isWith());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isHook());
      assertFalse(node2.isCase());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssign());
      assertFalse(node2.isOr());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNumber());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isVoid());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isTrue());
      assertFalse(node2.isAdd());
      assertEquals(1, node2.getType());
      assertFalse(node2.isVar());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNull());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isCatch());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isParamList());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isDebugger());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isReturn());
      assertFalse(node2.isBlock());
      assertFalse(node2.isFor());
      assertFalse(node2.isTry());
      assertFalse(node2.isWhile());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isNE());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isIn());
      assertFalse(node2.isCast());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isIf());
      assertFalse(node2.isInc());
      assertFalse(node2.isFunction());
      assertFalse(node2.isContinue());
      assertFalse(node2.isThrow());
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      Node node3 = new Node(55, 30, 1);
      assertNotNull(node3);
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.isParamList());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isNull());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isVar());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isNew());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isFunction());
      assertEquals(1, node3.getCharno());
      assertFalse(node3.isContinue());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isArrayLit());
      assertEquals(122881, node3.getSourcePosition());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isReturn());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isLabel());
      assertFalse(node3.isAssign());
      assertFalse(node3.isDec());
      assertFalse(node3.isOr());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isWhile());
      assertFalse(node3.isDo());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isVoid());
      assertFalse(node3.isTrue());
      assertFalse(node3.isAdd());
      assertFalse(node3.isCall());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isBreak());
      assertEquals(30, node3.getLineno());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isName());
      assertFalse(node3.isThis());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isComma());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isThrow());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isScript());
      assertFalse(node3.isString());
      assertFalse(node3.isNot());
      assertFalse(node3.isAnd());
      assertFalse(node3.isFalse());
      assertFalse(node3.isCast());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isNE());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isIn());
      assertEquals(55, node3.getType());
      assertFalse(node3.isNumber());
      assertFalse(node3.isFor());
      assertFalse(node3.isCase());
      assertFalse(node3.isTry());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isInc());
      assertFalse(node3.isBlock());
      assertFalse(node3.isWith());
      assertFalse(node3.isHook());
      assertFalse(node3.isRegExp());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isCatch());
      assertFalse(node3.isIf());
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      
      boolean boolean0 = node3.isFromExterns();
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertFalse(boolean0);
      assertFalse(node3.isParamList());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isNull());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isVar());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isNew());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isFunction());
      assertEquals(1, node3.getCharno());
      assertFalse(node3.isContinue());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isArrayLit());
      assertEquals(122881, node3.getSourcePosition());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isReturn());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isLabel());
      assertFalse(node3.isAssign());
      assertFalse(node3.isDec());
      assertFalse(node3.isOr());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isWhile());
      assertFalse(node3.isDo());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isVoid());
      assertFalse(node3.isTrue());
      assertFalse(node3.isAdd());
      assertFalse(node3.isCall());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isBreak());
      assertEquals(30, node3.getLineno());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isName());
      assertFalse(node3.isThis());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isComma());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isThrow());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isScript());
      assertFalse(node3.isString());
      assertFalse(node3.isNot());
      assertFalse(node3.isAnd());
      assertFalse(node3.isFalse());
      assertFalse(node3.isCast());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isNE());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isIn());
      assertEquals(55, node3.getType());
      assertFalse(node3.isNumber());
      assertFalse(node3.isFor());
      assertFalse(node3.isCase());
      assertFalse(node3.isTry());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isInc());
      assertFalse(node3.isBlock());
      assertFalse(node3.isWith());
      assertFalse(node3.isHook());
      assertFalse(node3.isRegExp());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isCatch());
      assertFalse(node3.isIf());
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertNotSame(node3, node0);
      assertNotSame(node3, node1);
      assertNotSame(node3, node2);
      
      Node node4 = Node.newString("AQ;y:n|", 31, (-1601));
      assertNotNull(node4);
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isBreak());
      assertFalse(node4.isWith());
      assertFalse(node4.isFalse());
      assertFalse(node4.isThrow());
      assertFalse(node4.isComma());
      assertFalse(node4.isThis());
      assertFalse(node4.isHook());
      assertFalse(node4.isInc());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isReturn());
      assertFalse(node4.isIn());
      assertFalse(node4.isAssign());
      assertFalse(node4.isContinue());
      assertFalse(node4.isWhile());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isDec());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isCast());
      assertFalse(node4.isNot());
      assertFalse(node4.isAnd());
      assertFalse(node4.isObjectLit());
      assertEquals((-1), node4.getSourcePosition());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isCatch());
      assertEquals(40, node4.getType());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isFunction());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isVar());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isAdd());
      assertFalse(node4.isCall());
      assertFalse(node4.isVoid());
      assertFalse(node4.isNew());
      assertFalse(node4.isName());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isIf());
      assertFalse(node4.isNE());
      assertFalse(node4.isNull());
      assertFalse(node4.isTrue());
      assertEquals((-1), node4.getLineno());
      assertFalse(node4.isOr());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isCase());
      assertFalse(node4.isFor());
      assertFalse(node4.isDo());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isBlock());
      assertFalse(node4.isLabel());
      assertTrue(node4.isString());
      assertFalse(node4.isTry());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isScript());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isNumber());
      assertFalse(node4.isParamList());
      assertEquals((-1), node4.getCharno());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      boolean boolean1 = node_SideEffectFlags4.areAllFlagsSet();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertEquals(31, node_SideEffectFlags4.valueOf());
      assertFalse(node_SideEffectFlags4.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Node node0 = new Node(1387);
      assertNotNull(node0);
      assertFalse(node0.isIn());
      assertEquals(1387, node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isCast());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isBlock());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isParamList());
      assertFalse(node0.isScript());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      assertNotNull(node_AncestorIterable0);
      assertFalse(node0.isIn());
      assertEquals(1387, node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isCast());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isBlock());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isParamList());
      assertFalse(node0.isScript());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      
      Node node1 = new Node(1387);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNull());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertEquals(1387, node1.getType());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isNumber());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isCast());
      assertFalse(node1.isContinue());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertFalse(node1.isParamList());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isHook());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      
      node0.setSourceFileForTesting("i|.Y5huTdI.9[.FA");
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.isIn());
      assertEquals(1387, node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isCast());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isBlock());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isParamList());
      assertFalse(node0.isScript());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertNotSame(node0, node1);
      
      node1.setJSType((JSType) null);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNull());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertEquals(1387, node1.getType());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isNumber());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isCast());
      assertFalse(node1.isContinue());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertFalse(node1.isParamList());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isHook());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertNotSame(node1, node0);
      
      Node node2 = new Node((-3312), node1, node1);
      assertNotNull(node2);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNull());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertEquals(1387, node1.getType());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isNumber());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isCast());
      assertFalse(node1.isContinue());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertFalse(node1.isParamList());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isHook());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node2.isInc());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isString());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertFalse(node2.isCase());
      assertFalse(node2.isHook());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isGetterDef());
      assertEquals((-3312), node2.getType());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isAnd());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isEmpty());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isComma());
      assertFalse(node2.isReturn());
      assertFalse(node2.isOr());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isBreak());
      assertFalse(node2.isNull());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isBlock());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertFalse(node2.isVar());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isWhile());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isLabel());
      assertFalse(node2.isNumber());
      assertFalse(node2.isContinue());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isParamList());
      assertFalse(node2.isFunction());
      assertFalse(node2.isTry());
      assertFalse(node2.isScript());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isWith());
      assertFalse(node2.isCast());
      assertFalse(node2.isFor());
      assertFalse(node2.isThis());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isSetterDef());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isIn());
      assertTrue(node2.hasChildren());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      node2.setType(1387);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNull());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertEquals(1387, node1.getType());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isNumber());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isCast());
      assertFalse(node1.isContinue());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertFalse(node1.isParamList());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isHook());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node2.isInc());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isString());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertFalse(node2.isCase());
      assertFalse(node2.isHook());
      assertEquals(1387, node2.getType());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isAnd());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isEmpty());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isComma());
      assertFalse(node2.isReturn());
      assertFalse(node2.isOr());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isBreak());
      assertFalse(node2.isNull());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isBlock());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertFalse(node2.isVar());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isWhile());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isLabel());
      assertFalse(node2.isNumber());
      assertFalse(node2.isContinue());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isParamList());
      assertFalse(node2.isFunction());
      assertFalse(node2.isTry());
      assertFalse(node2.isScript());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isWith());
      assertFalse(node2.isCast());
      assertFalse(node2.isFor());
      assertFalse(node2.isThis());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isSetterDef());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isIn());
      assertTrue(node2.hasChildren());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      
      node2.putIntProp(44, 56);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNull());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertEquals(1387, node1.getType());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isNumber());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isCast());
      assertFalse(node1.isContinue());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertFalse(node1.isParamList());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isHook());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node2.isInc());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isString());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertFalse(node2.isCase());
      assertFalse(node2.isHook());
      assertEquals(1387, node2.getType());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isAnd());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isEmpty());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isComma());
      assertFalse(node2.isReturn());
      assertFalse(node2.isOr());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isBreak());
      assertFalse(node2.isNull());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isBlock());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertFalse(node2.isVar());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isWhile());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isLabel());
      assertFalse(node2.isNumber());
      assertFalse(node2.isContinue());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isParamList());
      assertFalse(node2.isFunction());
      assertFalse(node2.isTry());
      assertFalse(node2.isScript());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isWith());
      assertFalse(node2.isCast());
      assertFalse(node2.isFor());
      assertFalse(node2.isThis());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isSetterDef());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isIn());
      assertTrue(node2.hasChildren());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      
      Node node3 = node0.cloneNode();
      assertNotNull(node3);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node0.isIn());
      assertEquals(1387, node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isCast());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isBlock());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isParamList());
      assertFalse(node0.isScript());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isReturn());
      assertFalse(node3.isNumber());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isLabel());
      assertFalse(node3.isAssign());
      assertFalse(node3.isDec());
      assertFalse(node3.isOr());
      assertFalse(node3.isContinue());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isCast());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isScript());
      assertFalse(node3.isBlock());
      assertFalse(node3.isWith());
      assertFalse(node3.isNot());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isWhile());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isParamList());
      assertFalse(node3.isNull());
      assertFalse(node3.isComma());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isCall());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isBreak());
      assertFalse(node3.isName());
      assertFalse(node3.isVoid());
      assertFalse(node3.isTrue());
      assertFalse(node3.isAdd());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isVar());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isNew());
      assertFalse(node3.isDo());
      assertFalse(node3.isNE());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isIn());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isIf());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isDebugger());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isString());
      assertFalse(node3.isHook());
      assertFalse(node3.isRegExp());
      assertEquals(1387, node3.getType());
      assertFalse(node3.isFor());
      assertFalse(node3.isCase());
      assertFalse(node3.isTry());
      assertFalse(node3.isThis());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isAnd());
      assertFalse(node3.isFalse());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isCatch());
      assertFalse(node3.isFunction());
      assertFalse(node3.isInc());
      assertFalse(node3.isThrow());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node0, node3);
      assertNotSame(node3, node2);
      assertNotSame(node3, node1);
      assertNotSame(node3, node0);
      
      Node node4 = Node.newString("i|.Y5huTdI.9[.FA");
      assertNotNull(node4);
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.isInc());
      assertEquals((-1), node4.getCharno());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isHook());
      assertFalse(node4.isFalse());
      assertFalse(node4.isBreak());
      assertFalse(node4.isThis());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isComma());
      assertFalse(node4.isFor());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isCase());
      assertFalse(node4.isNot());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isScript());
      assertFalse(node4.isFunction());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isTry());
      assertEquals(40, node4.getType());
      assertFalse(node4.isAnd());
      assertFalse(node4.isWith());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isCast());
      assertFalse(node4.isCatch());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isIf());
      assertFalse(node4.isNE());
      assertFalse(node4.isThrow());
      assertFalse(node4.isIn());
      assertTrue(node4.isString());
      assertFalse(node4.isNew());
      assertFalse(node4.isWhile());
      assertFalse(node4.isBlock());
      assertFalse(node4.isVar());
      assertFalse(node4.isContinue());
      assertFalse(node4.isCall());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isName());
      assertEquals((-1), node4.getLineno());
      assertFalse(node4.isParamList());
      assertEquals((-1), node4.getSourcePosition());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isDec());
      assertFalse(node4.isReturn());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isStringKey());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isNumber());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isTrue());
      assertFalse(node4.isVoid());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isAssign());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isOr());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isLabel());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isNull());
      assertFalse(node4.isDo());
      assertFalse(node4.isAdd());
      assertFalse(node4.isEmpty());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node2);
      assertNotNull(node_NodeMismatch0);
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node4));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node3));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node4));
      assertFalse(node0.isIn());
      assertEquals(1387, node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isCast());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isBlock());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isParamList());
      assertFalse(node0.isScript());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNull());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertEquals(1387, node1.getType());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isNumber());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isCast());
      assertFalse(node1.isContinue());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabel());
      assertFalse(node1.isParamList());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isHook());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node2.isInc());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isString());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertFalse(node2.isCase());
      assertFalse(node2.isHook());
      assertEquals(1387, node2.getType());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isAnd());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isEmpty());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isComma());
      assertFalse(node2.isReturn());
      assertFalse(node2.isOr());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isBreak());
      assertFalse(node2.isNull());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isBlock());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertFalse(node2.isVar());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isWhile());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isLabel());
      assertFalse(node2.isNumber());
      assertFalse(node2.isContinue());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isParamList());
      assertFalse(node2.isFunction());
      assertFalse(node2.isTry());
      assertFalse(node2.isScript());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isWith());
      assertFalse(node2.isCast());
      assertFalse(node2.isFor());
      assertFalse(node2.isThis());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isSetterDef());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isIn());
      assertTrue(node2.hasChildren());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node0, node3);
      assertNotSame(node1, node3);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node2, node3);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      
      Node node5 = new Node(0, node0);
      assertNotNull(node5);
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node5.equals((Object)node4));
      assertFalse(node5.equals((Object)node1));
      assertFalse(node5.equals((Object)node3));
      assertFalse(node5.equals((Object)node2));
      assertFalse(node5.equals((Object)node0));
      assertFalse(node0.isIn());
      assertEquals(1387, node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isCast());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isBlock());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isParamList());
      assertFalse(node0.isScript());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node5.isHook());
      assertFalse(node5.isThrow());
      assertEquals((-1), node5.getCharno());
      assertFalse(node5.isSwitch());
      assertFalse(node5.isBreak());
      assertFalse(node5.isComma());
      assertFalse(node5.isFalse());
      assertEquals(0, node5.getType());
      assertFalse(node5.isIn());
      assertFalse(node5.isNE());
      assertFalse(node5.isInc());
      assertFalse(node5.isEmpty());
      assertFalse(node5.isTry());
      assertFalse(node5.isArrayLit());
      assertFalse(node5.isFor());
      assertFalse(node5.isIf());
      assertFalse(node5.isRegExp());
      assertFalse(node5.isLabelName());
      assertFalse(node5.isWith());
      assertTrue(node5.hasChildren());
      assertFalse(node5.isCatch());
      assertFalse(node5.isInstanceOf());
      assertEquals(1, node5.getChildCount());
      assertFalse(node5.isThis());
      assertFalse(node5.isParamList());
      assertFalse(node5.isGetterDef());
      assertFalse(node5.isNumber());
      assertFalse(node5.isCase());
      assertFalse(node5.isScript());
      assertFalse(node5.isNew());
      assertFalse(node5.isName());
      assertFalse(node5.isBlock());
      assertFalse(node5.isVar());
      assertFalse(node5.isStringKey());
      assertFalse(node5.isContinue());
      assertFalse(node5.isCall());
      assertFalse(node5.hasMoreThanOneChild());
      assertFalse(node5.isOr());
      assertFalse(node5.isLabel());
      assertEquals((-1), node5.getLineno());
      assertFalse(node5.isAssignAdd());
      assertFalse(node5.isDefaultCase());
      assertFalse(node5.isNull());
      assertFalse(node5.isDo());
      assertFalse(node5.isSetterDef());
      assertFalse(node5.isAdd());
      assertFalse(node5.isVoid());
      assertFalse(node5.isTrue());
      assertFalse(node5.isDec());
      assertTrue(node5.hasOneChild());
      assertFalse(node5.isDelProp());
      assertFalse(node5.isTypeOf());
      assertFalse(node5.isAssign());
      assertFalse(node5.isExprResult());
      assertFalse(node5.isFunction());
      assertFalse(node5.isGetElem());
      assertFalse(node5.isCast());
      assertFalse(node5.isReturn());
      assertFalse(node5.isAnd());
      assertFalse(node5.isWhile());
      assertFalse(node5.isNot());
      assertEquals((-1), node5.getSourcePosition());
      assertFalse(node5.isDebugger());
      assertFalse(node5.isGetProp());
      assertFalse(node5.isObjectLit());
      assertFalse(node5.isString());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      
      boolean boolean0 = node5.hasChildren();
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node5));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node5.equals((Object)node4));
      assertFalse(node5.equals((Object)node1));
      assertFalse(node5.equals((Object)node3));
      assertFalse(node5.equals((Object)node2));
      assertFalse(node5.equals((Object)node0));
      assertTrue(boolean0);
      assertFalse(node0.isIn());
      assertEquals(1387, node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isCast());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isBlock());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isParamList());
      assertFalse(node0.isScript());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node5.isHook());
      assertFalse(node5.isThrow());
      assertEquals((-1), node5.getCharno());
      assertFalse(node5.isSwitch());
      assertFalse(node5.isBreak());
      assertFalse(node5.isComma());
      assertFalse(node5.isFalse());
      assertEquals(0, node5.getType());
      assertFalse(node5.isIn());
      assertFalse(node5.isNE());
      assertFalse(node5.isInc());
      assertFalse(node5.isEmpty());
      assertFalse(node5.isTry());
      assertFalse(node5.isArrayLit());
      assertFalse(node5.isFor());
      assertFalse(node5.isIf());
      assertFalse(node5.isRegExp());
      assertFalse(node5.isLabelName());
      assertFalse(node5.isWith());
      assertTrue(node5.hasChildren());
      assertFalse(node5.isCatch());
      assertFalse(node5.isInstanceOf());
      assertEquals(1, node5.getChildCount());
      assertFalse(node5.isThis());
      assertFalse(node5.isParamList());
      assertFalse(node5.isGetterDef());
      assertFalse(node5.isNumber());
      assertFalse(node5.isCase());
      assertFalse(node5.isScript());
      assertFalse(node5.isNew());
      assertFalse(node5.isName());
      assertFalse(node5.isBlock());
      assertFalse(node5.isVar());
      assertFalse(node5.isStringKey());
      assertFalse(node5.isContinue());
      assertFalse(node5.isCall());
      assertFalse(node5.hasMoreThanOneChild());
      assertFalse(node5.isOr());
      assertFalse(node5.isLabel());
      assertEquals((-1), node5.getLineno());
      assertFalse(node5.isAssignAdd());
      assertFalse(node5.isDefaultCase());
      assertFalse(node5.isNull());
      assertFalse(node5.isDo());
      assertFalse(node5.isSetterDef());
      assertFalse(node5.isAdd());
      assertFalse(node5.isVoid());
      assertFalse(node5.isTrue());
      assertFalse(node5.isDec());
      assertTrue(node5.hasOneChild());
      assertFalse(node5.isDelProp());
      assertFalse(node5.isTypeOf());
      assertFalse(node5.isAssign());
      assertFalse(node5.isExprResult());
      assertFalse(node5.isFunction());
      assertFalse(node5.isGetElem());
      assertFalse(node5.isCast());
      assertFalse(node5.isReturn());
      assertFalse(node5.isAnd());
      assertFalse(node5.isWhile());
      assertFalse(node5.isNot());
      assertEquals((-1), node5.getSourcePosition());
      assertFalse(node5.isDebugger());
      assertFalse(node5.isGetProp());
      assertFalse(node5.isObjectLit());
      assertFalse(node5.isString());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertNotSame(node0, node5);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node0, node3);
      assertNotSame(node5, node1);
      assertNotSame(node5, node3);
      assertNotSame(node5, node2);
      assertNotSame(node5, node0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      assertNotNull(node_SideEffectFlags1);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setAllFlags();
      assertNotNull(node_SideEffectFlags2);
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      
      Node node6 = null;
      try {
        node6 = new Node(4, node0, node4, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1718));
      assertNotNull(node_SideEffectFlags0);
      assertEquals((-1718), node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      assertNotNull(node_SideEffectFlags1);
      assertEquals((-1718), node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals((-1718), node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      
      int int0 = node_SideEffectFlags0.valueOf();
      assertEquals((-1718), int0);
      assertEquals((-1718), node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      
      Node node0 = Node.newNumber((double) (-1718));
      assertNotNull(node0);
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertEquals(39, node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertTrue(node0.isNumber());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      
      Node node1 = new Node(125, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertEquals(39, node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertTrue(node0.isNumber());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFunction());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFor());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertTrue(node1.hasOneChild());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIn());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIf());
      assertFalse(node1.isNull());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isDo());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isVar());
      assertFalse(node1.isThis());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isLabel());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isScript());
      assertFalse(node1.isCast());
      assertEquals(125, node1.getType());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWith());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInc());
      assertFalse(node1.isCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isWhile());
      assertTrue(node1.isBlock());
      assertFalse(node1.isContinue());
      assertFalse(node1.isComma());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isAnd());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      
      Node node2 = node1.getParent();
      assertNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertEquals(39, node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertTrue(node0.isNumber());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isFunction());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFor());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertTrue(node1.hasOneChild());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIn());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIf());
      assertFalse(node1.isNull());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCase());
      assertFalse(node1.isDo());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isHook());
      assertFalse(node1.isVar());
      assertFalse(node1.isThis());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isLabel());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isScript());
      assertFalse(node1.isCast());
      assertEquals(125, node1.getType());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWith());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInc());
      assertFalse(node1.isCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isWhile());
      assertTrue(node1.isBlock());
      assertFalse(node1.isContinue());
      assertFalse(node1.isComma());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isAnd());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Node node0 = Node.newString("is_constant_name");
      assertNotNull(node0);
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertTrue(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(57);
      assertNotNull(node_SideEffectFlags0);
      assertEquals(57, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      assertNotNull(node_SideEffectFlags1);
      assertEquals(49, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(49, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      assertNotNull(node_SideEffectFlags2);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      assertNotNull(node_SideEffectFlags3);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      assertNotNull(node_SideEffectFlags4);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.clearAllFlags();
      assertNotNull(node_SideEffectFlags5);
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags3.valueOf());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags4.valueOf());
      assertFalse(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags5.valueOf());
      assertFalse(node_SideEffectFlags5.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags1.setAllFlags();
      assertNotNull(node_SideEffectFlags6);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags6.valueOf());
      assertTrue(node_SideEffectFlags6.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
      
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags1.setMutatesArguments();
      assertNotNull(node_SideEffectFlags7);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags7.valueOf());
      assertTrue(node_SideEffectFlags7.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
      
      Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags4.clearAllFlags();
      assertNotNull(node_SideEffectFlags8);
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags3.valueOf());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags4.valueOf());
      assertFalse(node_SideEffectFlags4.areAllFlagsSet());
      assertFalse(node_SideEffectFlags8.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags8.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags6);
      
      int int0 = node0.getChangeTime();
      assertEquals(0, int0);
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertTrue(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      
      int int1 = node0.getLineno();
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertTrue(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node node0 = new Node((-50));
      assertNotNull(node0);
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNot());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertEquals((-50), node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      node0.detachChildren();
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNot());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertEquals((-50), node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      node0.setDirectives(hashSet0);
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNot());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertEquals((-50), node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      node0.putProp(120, (Object) null);
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNot());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertEquals((-50), node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      Node node1 = Node.newString(414, "V", 47, 831);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isVar());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isLabel());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isWith());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isScript());
      assertFalse(node1.isCatch());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isThis());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabelName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isArrayLit());
      assertEquals(414, node1.getType());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertEquals(47, node1.getLineno());
      assertFalse(node1.isBreak());
      assertFalse(node1.isVoid());
      assertFalse(node1.isIn());
      assertEquals(193343, node1.getSourcePosition());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isFunction());
      assertFalse(node1.isComma());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDebugger());
      assertEquals(831, node1.getCharno());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      
      // Undeclared exception!
      try { 
        node0.removeChild(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Node node0 = new Node(634, 634, 634);
      assertNotNull(node0);
      assertEquals(2597498, node0.getSourcePosition());
      assertEquals(634, node0.getType());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertEquals(634, node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertEquals(634, node0.getLineno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      
      Node node1 = new Node(634, node0, node0, (-1026), 55);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(2597498, node0.getSourcePosition());
      assertEquals(634, node0.getType());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertEquals(634, node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertEquals(634, node0.getLineno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCatch());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isParamList());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isString());
      assertFalse(node1.isNew());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isWhile());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCall());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCast());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isThis());
      assertFalse(node1.isReturn());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertEquals(634, node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isThrow());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      node1.setCharno(63);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(2597498, node0.getSourcePosition());
      assertEquals(634, node0.getType());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertEquals(634, node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertEquals(634, node0.getLineno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isCatch());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isParamList());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isString());
      assertFalse(node1.isNew());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isWhile());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCall());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCast());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isThis());
      assertFalse(node1.isReturn());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertEquals(634, node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isThrow());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = new Node((-1143), (-1143), 2374);
      assertNotNull(node0);
      assertFalse(node0.isNot());
      assertEquals((-1143), node0.getType());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      
      boolean boolean0 = node0.isNoSideEffectsCall();
      assertFalse(boolean0);
      assertFalse(node0.isNot());
      assertEquals((-1143), node0.getType());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      
      InputId inputId0 = node0.getInputId();
      assertNull(inputId0);
      assertFalse(node0.isNot());
      assertEquals((-1143), node0.getType());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      
      boolean boolean1 = node0.isFalse();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(node0.isNot());
      assertEquals((-1143), node0.getType());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("?L-'<^% 6;, D");
      assertNotNull(mockPrintWriter0);
      
      // Undeclared exception!
      try { 
        node0.appendStringTree(mockPrintWriter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1143
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Node node0 = new Node((-50));
      assertNotNull(node0);
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isString());
      assertEquals((-50), node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      
      node0.detachChildren();
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isString());
      assertEquals((-50), node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      node0.setDirectives(hashSet0);
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isString());
      assertEquals((-50), node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      
      boolean boolean0 = node0.isOnlyModifiesThisCall();
      assertFalse(boolean0);
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isString());
      assertEquals((-50), node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      
      Node node1 = new Node(16, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isString());
      assertEquals((-50), node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertFalse(node1.isIf());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWith());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isHook());
      assertFalse(node1.isCase());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isScript());
      assertEquals(16, node1.getType());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDec());
      assertFalse(node1.isLabel());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      node0.addChildrenToFront(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isString());
      assertEquals((-50), node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertFalse(node1.isIf());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWith());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isHook());
      assertFalse(node1.isCase());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isScript());
      assertEquals(16, node1.getType());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDec());
      assertFalse(node1.isLabel());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      
      node1.detachChildren();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isString());
      assertEquals((-50), node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node1.isParamList());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWith());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isHook());
      assertFalse(node1.isCase());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertEquals(16, node1.getType());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDec());
      assertFalse(node1.isLabel());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      
      boolean boolean1 = node0.isInc();
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isString());
      assertEquals((-50), node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertNotSame(node0, node1);
      
      boolean boolean2 = node1.isCatch();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isString());
      assertEquals((-50), node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node1.isParamList());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isAnd());
      assertFalse(node1.isWith());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isHook());
      assertFalse(node1.isCase());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertEquals(16, node1.getType());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDec());
      assertFalse(node1.isLabel());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDo());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertNotNull(node0);
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertEquals(39, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      Node node1 = Node.newNumber((-1166.2915476), 0, 1239);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isBreak());
      assertFalse(node1.isThis());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isHook());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThrow());
      assertFalse(node1.isString());
      assertFalse(node1.isScript());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isCast());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isIn());
      assertFalse(node1.isCase());
      assertEquals(1239, node1.getCharno());
      assertFalse(node1.isTry());
      assertFalse(node1.isInc());
      assertFalse(node1.isBlock());
      assertEquals(39, node1.getType());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertEquals(0, node1.getChildCount());
      assertEquals(1239, node1.getSourcePosition());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isContinue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssign());
      assertFalse(node1.isOr());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertTrue(node1.isNumber());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDelProp());
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertNotSame(node1, node0);
      
      Node node2 = Node.newString((-3787), "com.google.javascript.rhino.Node$ObjectPropListItem", 31, 2);
      assertNotNull(node2);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isReturn());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isNumber());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertFalse(node2.isDo());
      assertFalse(node2.isWhile());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isNew());
      assertFalse(node2.isVar());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAnd());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCast());
      assertFalse(node2.isStringKey());
      assertEquals(31, node2.getLineno());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isParamList());
      assertFalse(node2.isThis());
      assertFalse(node2.isThrow());
      assertFalse(node2.isScript());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isTry());
      assertFalse(node2.isBlock());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isHook());
      assertFalse(node2.isWith());
      assertFalse(node2.isIf());
      assertFalse(node2.isCatch());
      assertFalse(node2.isIn());
      assertFalse(node2.isNE());
      assertEquals((-3787), node2.getType());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isCase());
      assertFalse(node2.isFor());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isString());
      assertFalse(node2.isInc());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isFalse());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isNull());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isComma());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isNot());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAdd());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTrue());
      assertFalse(node2.isAssign());
      assertFalse(node2.isName());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCall());
      assertEquals(2, node2.getCharno());
      assertEquals(126978, node2.getSourcePosition());
      assertFalse(node2.isBreak());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDelProp());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      node2.addChildrenToFront(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertEquals(39, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isReturn());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isNumber());
      assertFalse(node2.isDec());
      assertFalse(node2.isDo());
      assertFalse(node2.isWhile());
      assertFalse(node2.isNew());
      assertFalse(node2.isVar());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAnd());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCast());
      assertFalse(node2.isStringKey());
      assertEquals(31, node2.getLineno());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isParamList());
      assertFalse(node2.isThis());
      assertFalse(node2.isThrow());
      assertFalse(node2.isScript());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isTry());
      assertFalse(node2.isBlock());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isHook());
      assertFalse(node2.isWith());
      assertFalse(node2.isIf());
      assertFalse(node2.isCatch());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isIn());
      assertFalse(node2.isNE());
      assertEquals((-3787), node2.getType());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isCase());
      assertFalse(node2.isFor());
      assertFalse(node2.isEmpty());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isString());
      assertFalse(node2.isInc());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isFalse());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isNull());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isComma());
      assertFalse(node2.isNot());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAdd());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTrue());
      assertFalse(node2.isAssign());
      assertFalse(node2.isName());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCall());
      assertEquals(2, node2.getCharno());
      assertEquals(126978, node2.getSourcePosition());
      assertFalse(node2.isBreak());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDelProp());
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertNotSame(node0, node1);
      
      node0.detachChildren();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertEquals(39, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertNotSame(node0, node1);
      
      boolean boolean0 = node2.isInc();
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(boolean0);
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isReturn());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isNumber());
      assertFalse(node2.isDec());
      assertFalse(node2.isDo());
      assertFalse(node2.isWhile());
      assertFalse(node2.isNew());
      assertFalse(node2.isVar());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAnd());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCast());
      assertFalse(node2.isStringKey());
      assertEquals(31, node2.getLineno());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isParamList());
      assertFalse(node2.isThis());
      assertFalse(node2.isThrow());
      assertFalse(node2.isScript());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isTry());
      assertFalse(node2.isBlock());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isHook());
      assertFalse(node2.isWith());
      assertFalse(node2.isIf());
      assertFalse(node2.isCatch());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isIn());
      assertFalse(node2.isNE());
      assertEquals((-3787), node2.getType());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isCase());
      assertFalse(node2.isFor());
      assertFalse(node2.isEmpty());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isString());
      assertFalse(node2.isInc());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isFalse());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isNull());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isComma());
      assertFalse(node2.isNot());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAdd());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTrue());
      assertFalse(node2.isAssign());
      assertFalse(node2.isName());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCall());
      assertEquals(2, node2.getCharno());
      assertEquals(126978, node2.getSourcePosition());
      assertFalse(node2.isBreak());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDelProp());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      boolean boolean1 = node2.isCatch();
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isReturn());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isNumber());
      assertFalse(node2.isDec());
      assertFalse(node2.isDo());
      assertFalse(node2.isWhile());
      assertFalse(node2.isNew());
      assertFalse(node2.isVar());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAnd());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCast());
      assertFalse(node2.isStringKey());
      assertEquals(31, node2.getLineno());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isParamList());
      assertFalse(node2.isThis());
      assertFalse(node2.isThrow());
      assertFalse(node2.isScript());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isTry());
      assertFalse(node2.isBlock());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isHook());
      assertFalse(node2.isWith());
      assertFalse(node2.isIf());
      assertFalse(node2.isCatch());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isIn());
      assertFalse(node2.isNE());
      assertEquals((-3787), node2.getType());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isCase());
      assertFalse(node2.isFor());
      assertFalse(node2.isEmpty());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isString());
      assertFalse(node2.isInc());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isFalse());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isNull());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isComma());
      assertFalse(node2.isNot());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAdd());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTrue());
      assertFalse(node2.isAssign());
      assertFalse(node2.isName());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCall());
      assertEquals(2, node2.getCharno());
      assertEquals(126978, node2.getSourcePosition());
      assertFalse(node2.isBreak());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDelProp());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      JSType jSType0 = node2.getJSType();
      assertNull(jSType0);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isReturn());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isNumber());
      assertFalse(node2.isDec());
      assertFalse(node2.isDo());
      assertFalse(node2.isWhile());
      assertFalse(node2.isNew());
      assertFalse(node2.isVar());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAnd());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCast());
      assertFalse(node2.isStringKey());
      assertEquals(31, node2.getLineno());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isParamList());
      assertFalse(node2.isThis());
      assertFalse(node2.isThrow());
      assertFalse(node2.isScript());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isTry());
      assertFalse(node2.isBlock());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isHook());
      assertFalse(node2.isWith());
      assertFalse(node2.isIf());
      assertFalse(node2.isCatch());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isIn());
      assertFalse(node2.isNE());
      assertEquals((-3787), node2.getType());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isCase());
      assertFalse(node2.isFor());
      assertFalse(node2.isEmpty());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isString());
      assertFalse(node2.isInc());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isFalse());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isNull());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isComma());
      assertFalse(node2.isNot());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAdd());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTrue());
      assertFalse(node2.isAssign());
      assertFalse(node2.isName());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCall());
      assertEquals(2, node2.getCharno());
      assertEquals(126978, node2.getSourcePosition());
      assertFalse(node2.isBreak());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDelProp());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      Node node3 = node2.copyInformationFrom(node0);
      assertNotNull(node3);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertEquals(39, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isNumber());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isReturn());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isNumber());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDec());
      assertFalse(node2.isDo());
      assertFalse(node2.isWhile());
      assertFalse(node2.isNew());
      assertFalse(node2.isVar());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAnd());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCast());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isParamList());
      assertFalse(node2.isThis());
      assertFalse(node2.isThrow());
      assertFalse(node2.isScript());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isTry());
      assertFalse(node2.isBlock());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isHook());
      assertFalse(node2.isWith());
      assertFalse(node2.isIf());
      assertFalse(node2.isCatch());
      assertEquals((-1), node2.getLineno());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isIn());
      assertFalse(node2.isNE());
      assertEquals((-3787), node2.getType());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isCase());
      assertFalse(node2.isFor());
      assertFalse(node2.isEmpty());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isString());
      assertFalse(node2.isInc());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDebugger());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isFalse());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isNull());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isComma());
      assertFalse(node2.isNot());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAdd());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTrue());
      assertFalse(node2.isAssign());
      assertFalse(node2.isName());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCall());
      assertFalse(node2.isBreak());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDelProp());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isLabel());
      assertFalse(node3.isReturn());
      assertFalse(node3.isAssign());
      assertFalse(node3.isDec());
      assertFalse(node3.isOr());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isNumber());
      assertFalse(node3.isContinue());
      assertFalse(node3.isCast());
      assertFalse(node3.isGetElem());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isScript());
      assertFalse(node3.isBlock());
      assertFalse(node3.isNot());
      assertFalse(node3.isWith());
      assertFalse(node3.isWhile());
      assertFalse(node3.isParamList());
      assertFalse(node3.isComma());
      assertFalse(node3.isNull());
      assertFalse(node3.isCall());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isBreak());
      assertFalse(node3.isName());
      assertFalse(node3.isTrue());
      assertFalse(node3.isNew());
      assertFalse(node3.isAdd());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isVar());
      assertFalse(node3.isDo());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isNE());
      assertTrue(node3.hasChildren());
      assertEquals((-3787), node3.getType());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isIn());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isIf());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isVoid());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isString());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isCase());
      assertFalse(node3.isFor());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isHook());
      assertFalse(node3.isTry());
      assertFalse(node3.isThis());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isFalse());
      assertFalse(node3.isAnd());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isCatch());
      assertFalse(node3.isInc());
      assertFalse(node3.isFunction());
      assertFalse(node3.isThrow());
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertNotSame(node0, node1);
      assertSame(node2, node3);
      assertSame(node3, node2);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node node0 = new Node(3579);
      assertNotNull(node0);
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertEquals(3579, node0.getType());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDo());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      Node node1 = new Node(1, node0, node0, node0, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertEquals(3579, node0.getType());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDo());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isThrow());
      assertFalse(node1.isIn());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isAnd());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertEquals(1, node1.getType());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssign());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isDec());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isLabel());
      assertFalse(node1.isCast());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFunction());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isTry());
      assertFalse(node1.isThis());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isFor());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      node0.addChildrenToFront(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertEquals(3579, node0.getType());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDo());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getLineno());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isThrow());
      assertFalse(node1.isIn());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isAnd());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertEquals(1, node1.getType());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssign());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isDec());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isLabel());
      assertFalse(node1.isCast());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFunction());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isTry());
      assertFalse(node1.isThis());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isFor());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      
      boolean boolean0 = node1.isQualifiedName();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean0);
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertEquals(3579, node0.getType());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDo());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getLineno());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isThrow());
      assertFalse(node1.isIn());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isAnd());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertEquals(1, node1.getType());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssign());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isDec());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isLabel());
      assertFalse(node1.isCast());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFunction());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isTry());
      assertFalse(node1.isThis());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isFor());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      
      node0.detachChildren();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertEquals(3579, node0.getType());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDo());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertNotSame(node0, node1);
      
      boolean boolean1 = node1.isInc();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertEquals(3579, node0.getType());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDo());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isThrow());
      assertFalse(node1.isIn());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isAnd());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertEquals(1, node1.getType());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isTypeOf());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssign());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isDec());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isLabel());
      assertFalse(node1.isCast());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFunction());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isTry());
      assertFalse(node1.isThis());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isFor());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Node node0 = new Node(79);
      assertNotNull(node0);
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertEquals(79, node0.getType());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      assertNotNull(node_AncestorIterable0);
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertEquals(79, node0.getType());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      Node node1 = new Node(79);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCall());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isTrue());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTry());
      assertFalse(node1.isLabel());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isArrayLit());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFalse());
      assertFalse(node1.isHook());
      assertEquals(79, node1.getType());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInc());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isContinue());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isString());
      assertFalse(node1.isAnd());
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      node0.setSourceFileForTesting("i|.Y5huTdI.9[.FA");
      assertFalse(node0.equals((Object)node1));
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertEquals(79, node0.getType());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertNotSame(node0, node1);
      
      node1.setJSType((JSType) null);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCall());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isTrue());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTry());
      assertFalse(node1.isLabel());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isArrayLit());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFalse());
      assertFalse(node1.isHook());
      assertEquals(79, node1.getType());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInc());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isContinue());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isString());
      assertFalse(node1.isAnd());
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertNotSame(node1, node0);
      
      Node node2 = new Node((-3302), node1, node1);
      assertNotNull(node2);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCall());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isTrue());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTry());
      assertFalse(node1.isLabel());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isArrayLit());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFalse());
      assertFalse(node1.isHook());
      assertEquals(79, node1.getType());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInc());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isContinue());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isString());
      assertFalse(node1.isAnd());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isScript());
      assertFalse(node2.isCast());
      assertEquals((-1), node2.getSourcePosition());
      assertEquals((-3302), node2.getType());
      assertFalse(node2.isNumber());
      assertFalse(node2.isNot());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAnd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isOr());
      assertFalse(node2.isContinue());
      assertFalse(node2.isFalse());
      assertFalse(node2.isDo());
      assertFalse(node2.isThrow());
      assertFalse(node2.isNew());
      assertFalse(node2.isCall());
      assertFalse(node2.isAdd());
      assertFalse(node2.isString());
      assertFalse(node2.isBreak());
      assertFalse(node2.isName());
      assertFalse(node2.isNull());
      assertFalse(node2.isReturn());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isGetProp());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isAssign());
      assertFalse(node2.isComma());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isTry());
      assertFalse(node2.isVoid());
      assertFalse(node2.isFunction());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNE());
      assertFalse(node2.isIn());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isVar());
      assertFalse(node2.isInc());
      assertFalse(node2.isParamList());
      assertFalse(node2.isSwitch());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isStringKey());
      assertEquals((-1), node2.getLineno());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isInstanceOf());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isCatch());
      assertFalse(node2.isWith());
      assertFalse(node2.isCase());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isThis());
      assertFalse(node2.isHook());
      assertFalse(node2.isBlock());
      assertFalse(node2.isFor());
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      node2.setType(79);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCall());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isTrue());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTry());
      assertFalse(node1.isLabel());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isArrayLit());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFalse());
      assertFalse(node1.isHook());
      assertEquals(79, node1.getType());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInc());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isContinue());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isString());
      assertFalse(node1.isAnd());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isScript());
      assertFalse(node2.isCast());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isNumber());
      assertFalse(node2.isNot());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAnd());
      assertEquals(79, node2.getType());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isOr());
      assertFalse(node2.isContinue());
      assertFalse(node2.isFalse());
      assertFalse(node2.isDo());
      assertFalse(node2.isThrow());
      assertFalse(node2.isNew());
      assertFalse(node2.isCall());
      assertFalse(node2.isAdd());
      assertFalse(node2.isString());
      assertFalse(node2.isBreak());
      assertFalse(node2.isName());
      assertFalse(node2.isNull());
      assertFalse(node2.isReturn());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isGetProp());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isAssign());
      assertFalse(node2.isComma());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isTry());
      assertFalse(node2.isVoid());
      assertFalse(node2.isFunction());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNE());
      assertFalse(node2.isIn());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isVar());
      assertFalse(node2.isInc());
      assertFalse(node2.isParamList());
      assertFalse(node2.isSwitch());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isStringKey());
      assertEquals((-1), node2.getLineno());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isInstanceOf());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isCatch());
      assertFalse(node2.isWith());
      assertFalse(node2.isCase());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isThis());
      assertFalse(node2.isHook());
      assertFalse(node2.isBlock());
      assertFalse(node2.isFor());
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      
      node2.putIntProp(44, 56);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCall());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isTrue());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTry());
      assertFalse(node1.isLabel());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isArrayLit());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFalse());
      assertFalse(node1.isHook());
      assertEquals(79, node1.getType());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInc());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isContinue());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isString());
      assertFalse(node1.isAnd());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isScript());
      assertFalse(node2.isCast());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isNumber());
      assertFalse(node2.isNot());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAnd());
      assertEquals(79, node2.getType());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isOr());
      assertFalse(node2.isContinue());
      assertFalse(node2.isFalse());
      assertFalse(node2.isDo());
      assertFalse(node2.isThrow());
      assertFalse(node2.isNew());
      assertFalse(node2.isCall());
      assertFalse(node2.isAdd());
      assertFalse(node2.isString());
      assertFalse(node2.isBreak());
      assertFalse(node2.isName());
      assertFalse(node2.isNull());
      assertFalse(node2.isReturn());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isGetProp());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isAssign());
      assertFalse(node2.isComma());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isTry());
      assertFalse(node2.isVoid());
      assertFalse(node2.isFunction());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNE());
      assertFalse(node2.isIn());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isVar());
      assertFalse(node2.isInc());
      assertFalse(node2.isParamList());
      assertFalse(node2.isSwitch());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isStringKey());
      assertEquals((-1), node2.getLineno());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isInstanceOf());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isCatch());
      assertFalse(node2.isWith());
      assertFalse(node2.isCase());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isThis());
      assertFalse(node2.isHook());
      assertFalse(node2.isBlock());
      assertFalse(node2.isFor());
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      
      Node node3 = node0.cloneNode();
      assertNotNull(node3);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertEquals(79, node0.getType());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node3.isIn());
      assertFalse(node3.isString());
      assertFalse(node3.isIf());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isNE());
      assertFalse(node3.isSwitch());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isFunction());
      assertFalse(node3.isInc());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isFalse());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isThrow());
      assertEquals(79, node3.getType());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isBreak());
      assertFalse(node3.isNot());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isName());
      assertFalse(node3.isAnd());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isNull());
      assertFalse(node3.isTrue());
      assertFalse(node3.isVoid());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isCall());
      assertFalse(node3.isAssign());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isWhile());
      assertFalse(node3.isDec());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isComma());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isReturn());
      assertFalse(node3.isOr());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isLabel());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isContinue());
      assertFalse(node3.isNumber());
      assertFalse(node3.isLabelName());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isNew());
      assertFalse(node3.isCast());
      assertFalse(node3.isAdd());
      assertFalse(node3.isDo());
      assertFalse(node3.isVar());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isCatch());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isParamList());
      assertFalse(node3.isStringKey());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isTry());
      assertFalse(node3.isScript());
      assertFalse(node3.isWith());
      assertFalse(node3.isCase());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isThis());
      assertFalse(node3.isHook());
      assertFalse(node3.isBlock());
      assertFalse(node3.isFor());
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node0, node3);
      assertNotSame(node3, node1);
      assertNotSame(node3, node0);
      assertNotSame(node3, node2);
      
      Node node4 = Node.newString("i|.Y5huTdI.9[.FA");
      assertNotNull(node4);
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.isTry());
      assertFalse(node4.isVoid());
      assertFalse(node4.isFunction());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isIf());
      assertFalse(node4.isNE());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isTrue());
      assertFalse(node4.isParamList());
      assertFalse(node4.isIn());
      assertFalse(node4.isSetterDef());
      assertEquals(40, node4.getType());
      assertFalse(node4.isDefaultCase());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isVar());
      assertTrue(node4.isString());
      assertFalse(node4.isBlock());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isInc());
      assertFalse(node4.isStringKey());
      assertEquals((-1), node4.getCharno());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isCatch());
      assertEquals((-1), node4.getLineno());
      assertFalse(node4.isCase());
      assertFalse(node4.isFor());
      assertFalse(node4.isWith());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isHook());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isThis());
      assertFalse(node4.isScript());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isCast());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isNot());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isAnd());
      assertFalse(node4.isObjectLit());
      assertEquals((-1), node4.getSourcePosition());
      assertFalse(node4.isNumber());
      assertFalse(node4.isOr());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isThrow());
      assertFalse(node4.isDo());
      assertFalse(node4.isContinue());
      assertFalse(node4.isFalse());
      assertFalse(node4.isLabel());
      assertFalse(node4.isNew());
      assertFalse(node4.isAdd());
      assertFalse(node4.isCall());
      assertFalse(node4.isName());
      assertFalse(node4.isNull());
      assertFalse(node4.isBreak());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isAssign());
      assertFalse(node4.isWhile());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isDec());
      assertFalse(node4.isComma());
      assertFalse(node4.isReturn());
      assertFalse(node4.hasChildren());
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node2);
      assertNotNull(node_NodeMismatch0);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node4));
      assertFalse(node2.equals((Object)node3));
      assertFalse(node2.equals((Object)node4));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertEquals(79, node0.getType());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCall());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertFalse(node1.isTrue());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTry());
      assertFalse(node1.isLabel());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isArrayLit());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFalse());
      assertFalse(node1.isHook());
      assertEquals(79, node1.getType());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isInc());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isContinue());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isString());
      assertFalse(node1.isAnd());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isScript());
      assertFalse(node2.isCast());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isNumber());
      assertFalse(node2.isNot());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAnd());
      assertEquals(79, node2.getType());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isOr());
      assertFalse(node2.isContinue());
      assertFalse(node2.isFalse());
      assertFalse(node2.isDo());
      assertFalse(node2.isThrow());
      assertFalse(node2.isNew());
      assertFalse(node2.isCall());
      assertFalse(node2.isAdd());
      assertFalse(node2.isString());
      assertFalse(node2.isBreak());
      assertFalse(node2.isName());
      assertFalse(node2.isNull());
      assertFalse(node2.isReturn());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isGetProp());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isAssign());
      assertFalse(node2.isComma());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isTry());
      assertFalse(node2.isVoid());
      assertFalse(node2.isFunction());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNE());
      assertFalse(node2.isIn());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isVar());
      assertFalse(node2.isInc());
      assertFalse(node2.isParamList());
      assertFalse(node2.isSwitch());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isStringKey());
      assertEquals((-1), node2.getLineno());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isInstanceOf());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isCatch());
      assertFalse(node2.isWith());
      assertFalse(node2.isCase());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isThis());
      assertFalse(node2.isHook());
      assertFalse(node2.isBlock());
      assertFalse(node2.isFor());
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node0, node3);
      assertNotSame(node1, node3);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node2, node3);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      
      Node node5 = new Node(0, node0);
      assertNotNull(node5);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node5.equals((Object)node0));
      assertFalse(node5.equals((Object)node2));
      assertFalse(node5.equals((Object)node4));
      assertFalse(node5.equals((Object)node3));
      assertFalse(node5.equals((Object)node1));
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertEquals(79, node0.getType());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node5.isName());
      assertFalse(node5.isStringKey());
      assertFalse(node5.isCall());
      assertFalse(node5.isNull());
      assertFalse(node5.isVar());
      assertFalse(node5.isParamList());
      assertFalse(node5.isNew());
      assertFalse(node5.isAdd());
      assertFalse(node5.isSetterDef());
      assertFalse(node5.isWhile());
      assertFalse(node5.isBlock());
      assertFalse(node5.isVoid());
      assertEquals((-1), node5.getLineno());
      assertFalse(node5.isReturn());
      assertFalse(node5.isRegExp());
      assertFalse(node5.isTypeOf());
      assertFalse(node5.isCatch());
      assertFalse(node5.isDec());
      assertFalse(node5.hasMoreThanOneChild());
      assertFalse(node5.isAssign());
      assertTrue(node5.hasOneChild());
      assertFalse(node5.isNE());
      assertFalse(node5.isIf());
      assertFalse(node5.isDebugger());
      assertEquals((-1), node5.getSourcePosition());
      assertFalse(node5.isIn());
      assertFalse(node5.isNot());
      assertFalse(node5.isAnd());
      assertFalse(node5.isCast());
      assertFalse(node5.isFunction());
      assertFalse(node5.isContinue());
      assertFalse(node5.isFalse());
      assertFalse(node5.isThrow());
      assertFalse(node5.isBreak());
      assertFalse(node5.isHook());
      assertFalse(node5.isInc());
      assertFalse(node5.isGetProp());
      assertEquals((-1), node5.getCharno());
      assertFalse(node5.isObjectLit());
      assertFalse(node5.isString());
      assertFalse(node5.isCase());
      assertEquals(0, node5.getType());
      assertTrue(node5.hasChildren());
      assertFalse(node5.isComma());
      assertFalse(node5.isThis());
      assertFalse(node5.isExprResult());
      assertEquals(1, node5.getChildCount());
      assertFalse(node5.isInstanceOf());
      assertFalse(node5.isWith());
      assertFalse(node5.isGetElem());
      assertFalse(node5.isFor());
      assertFalse(node5.isEmpty());
      assertFalse(node5.isLabelName());
      assertFalse(node5.isArrayLit());
      assertFalse(node5.isDelProp());
      assertFalse(node5.isTry());
      assertFalse(node5.isOr());
      assertFalse(node5.isTrue());
      assertFalse(node5.isNumber());
      assertFalse(node5.isScript());
      assertFalse(node5.isGetterDef());
      assertFalse(node5.isDo());
      assertFalse(node5.isSwitch());
      assertFalse(node5.isDefaultCase());
      assertFalse(node5.isAssignAdd());
      assertFalse(node5.isLabel());
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      
      boolean boolean0 = node5.hasChildren();
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node5));
      assertFalse(node5.equals((Object)node0));
      assertFalse(node5.equals((Object)node2));
      assertFalse(node5.equals((Object)node4));
      assertFalse(node5.equals((Object)node3));
      assertFalse(node5.equals((Object)node1));
      assertTrue(boolean0);
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertEquals(79, node0.getType());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node5.isName());
      assertFalse(node5.isStringKey());
      assertFalse(node5.isCall());
      assertFalse(node5.isNull());
      assertFalse(node5.isVar());
      assertFalse(node5.isParamList());
      assertFalse(node5.isNew());
      assertFalse(node5.isAdd());
      assertFalse(node5.isSetterDef());
      assertFalse(node5.isWhile());
      assertFalse(node5.isBlock());
      assertFalse(node5.isVoid());
      assertEquals((-1), node5.getLineno());
      assertFalse(node5.isReturn());
      assertFalse(node5.isRegExp());
      assertFalse(node5.isTypeOf());
      assertFalse(node5.isCatch());
      assertFalse(node5.isDec());
      assertFalse(node5.hasMoreThanOneChild());
      assertFalse(node5.isAssign());
      assertTrue(node5.hasOneChild());
      assertFalse(node5.isNE());
      assertFalse(node5.isIf());
      assertFalse(node5.isDebugger());
      assertEquals((-1), node5.getSourcePosition());
      assertFalse(node5.isIn());
      assertFalse(node5.isNot());
      assertFalse(node5.isAnd());
      assertFalse(node5.isCast());
      assertFalse(node5.isFunction());
      assertFalse(node5.isContinue());
      assertFalse(node5.isFalse());
      assertFalse(node5.isThrow());
      assertFalse(node5.isBreak());
      assertFalse(node5.isHook());
      assertFalse(node5.isInc());
      assertFalse(node5.isGetProp());
      assertEquals((-1), node5.getCharno());
      assertFalse(node5.isObjectLit());
      assertFalse(node5.isString());
      assertFalse(node5.isCase());
      assertEquals(0, node5.getType());
      assertTrue(node5.hasChildren());
      assertFalse(node5.isComma());
      assertFalse(node5.isThis());
      assertFalse(node5.isExprResult());
      assertEquals(1, node5.getChildCount());
      assertFalse(node5.isInstanceOf());
      assertFalse(node5.isWith());
      assertFalse(node5.isGetElem());
      assertFalse(node5.isFor());
      assertFalse(node5.isEmpty());
      assertFalse(node5.isLabelName());
      assertFalse(node5.isArrayLit());
      assertFalse(node5.isDelProp());
      assertFalse(node5.isTry());
      assertFalse(node5.isOr());
      assertFalse(node5.isTrue());
      assertFalse(node5.isNumber());
      assertFalse(node5.isScript());
      assertFalse(node5.isGetterDef());
      assertFalse(node5.isDo());
      assertFalse(node5.isSwitch());
      assertFalse(node5.isDefaultCase());
      assertFalse(node5.isAssignAdd());
      assertFalse(node5.isLabel());
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node0, node3);
      assertNotSame(node0, node5);
      assertNotSame(node5, node0);
      assertNotSame(node5, node2);
      assertNotSame(node5, node3);
      assertNotSame(node5, node1);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry1);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
      
      ObjectType objectType0 = ObjectType.cast((JSType) null);
      assertNull(objectType0);
      
      HashMap<TemplateType, JSType> hashMap0 = new HashMap<TemplateType, JSType>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      // Undeclared exception!
      try { 
        jSTypeRegistry1.createTemplatizedType((ObjectType) null, (Map<TemplateType, JSType>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Node node0 = Node.newString("~", 1602, 1602);
      assertNotNull(node0);
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertEquals(1602, node0.getLineno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertEquals(6563394, node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertEquals(1602, node0.getCharno());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNot());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      boolean boolean0 = node0.isAnd();
      assertFalse(boolean0);
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertEquals(1602, node0.getLineno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertEquals(6563394, node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertEquals(1602, node0.getCharno());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNot());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      boolean boolean1 = node0.isDefaultCase();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertEquals(1602, node0.getLineno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertEquals(6563394, node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertEquals(1602, node0.getCharno());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNot());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      boolean boolean2 = node0.mayMutateArguments();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertEquals(1602, node0.getLineno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertEquals(6563394, node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertEquals(1602, node0.getCharno());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNot());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      int int0 = node0.getSideEffectFlags();
      assertEquals(0, int0);
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertEquals(1602, node0.getLineno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertEquals(6563394, node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertEquals(1602, node0.getCharno());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNot());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      String string0 = node0.toString(false, false, false);
      assertNotNull(string0);
      assertEquals("STRING ~", string0);
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertEquals(1602, node0.getLineno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertEquals(6563394, node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertEquals(1602, node0.getCharno());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNot());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(12, nodeArray0, 2, 1);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCase());
      assertFalse(node1.isHook());
      assertEquals(12, node1.getType());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isTry());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isFor());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isDefaultCase());
      assertEquals(2, node1.getLineno());
      assertFalse(node1.isLabel());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isStringKey());
      assertEquals(8193, node1.getSourcePosition());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isOr());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isNull());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isCast());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isContinue());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertEquals(1, node1.getCharno());
      assertFalse(node1.isAnd());
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, nodeArray0.length);
      
      node1.setLength(47);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCase());
      assertFalse(node1.isHook());
      assertEquals(12, node1.getType());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isTry());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isFor());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isDefaultCase());
      assertEquals(2, node1.getLineno());
      assertFalse(node1.isLabel());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isStringKey());
      assertEquals(8193, node1.getSourcePosition());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isOr());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isNull());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isCast());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isContinue());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertEquals(1, node1.getCharno());
      assertFalse(node1.isAnd());
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, nodeArray0.length);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      assertNotNull(jSDocInfo0);
      assertFalse(jSDocInfo0.isDisposes());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isOverride());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.hasThisType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.makesStructs());
      
      Iterable<Node> iterable0 = node0.siblings();
      assertNotNull(iterable0);
      assertFalse(node0.equals((Object)node1));
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertEquals(1602, node0.getLineno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertEquals(6563394, node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertEquals(1602, node0.getCharno());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNot());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags(122);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got EQ
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Node node0 = new Node(79);
      assertNotNull(node0);
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isOr());
      assertEquals(79, node0.getType());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      assertNotNull(node_AncestorIterable0);
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isOr());
      assertEquals(79, node0.getType());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      Node node1 = new Node(79);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isLabel());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isCast());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAnd());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isHook());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isInc());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isFunction());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isString());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isParamList());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertEquals(79, node1.getType());
      assertFalse(node1.isDefaultCase());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isVar());
      assertFalse(node1.isComma());
      assertFalse(node1.isNew());
      assertFalse(node1.isVoid());
      assertFalse(node1.isAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      node0.setSourceFileForTesting("i|.Y5huTdI.9[.FA");
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isOr());
      assertEquals(79, node0.getType());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertNotSame(node0, node1);
      
      Node node2 = new Node((-3302), node1, node1);
      assertNotNull(node2);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isLabel());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isCast());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAnd());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isHook());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isInc());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isFunction());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isString());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isParamList());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertEquals(79, node1.getType());
      assertFalse(node1.isDefaultCase());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isVar());
      assertFalse(node1.isComma());
      assertFalse(node1.isNew());
      assertFalse(node1.isVoid());
      assertFalse(node1.isAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isHook());
      assertFalse(node2.isInc());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isBreak());
      assertFalse(node2.isThrow());
      assertFalse(node2.isComma());
      assertFalse(node2.isFalse());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isThis());
      assertFalse(node2.isAnd());
      assertFalse(node2.isNot());
      assertFalse(node2.isCase());
      assertFalse(node2.isString());
      assertFalse(node2.isScript());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isTry());
      assertFalse(node2.isWith());
      assertFalse(node2.isFor());
      assertFalse(node2.isCast());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isFunction());
      assertFalse(node2.isRegExp());
      assertTrue(node2.hasChildren());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isIn());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isBlock());
      assertFalse(node2.isVar());
      assertFalse(node2.isName());
      assertFalse(node2.isWhile());
      assertFalse(node2.isCall());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isContinue());
      assertFalse(node2.isReturn());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isNumber());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTrue());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDefaultCase());
      assertEquals((-3302), node2.getType());
      assertFalse(node2.isAssign());
      assertFalse(node2.isLabelName());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDo());
      assertFalse(node2.isNull());
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      node2.setType(79);
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isLabel());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isCast());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAnd());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isHook());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isInc());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isFunction());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isString());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isParamList());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertEquals(79, node1.getType());
      assertFalse(node1.isDefaultCase());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isVar());
      assertFalse(node1.isComma());
      assertFalse(node1.isNew());
      assertFalse(node1.isVoid());
      assertFalse(node1.isAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isHook());
      assertFalse(node2.isInc());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isBreak());
      assertFalse(node2.isThrow());
      assertFalse(node2.isComma());
      assertFalse(node2.isFalse());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isThis());
      assertFalse(node2.isAnd());
      assertFalse(node2.isNot());
      assertFalse(node2.isCase());
      assertFalse(node2.isString());
      assertFalse(node2.isScript());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isTry());
      assertFalse(node2.isWith());
      assertFalse(node2.isFor());
      assertFalse(node2.isCast());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isFunction());
      assertFalse(node2.isRegExp());
      assertTrue(node2.hasChildren());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isIn());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isBlock());
      assertFalse(node2.isVar());
      assertFalse(node2.isName());
      assertFalse(node2.isWhile());
      assertFalse(node2.isCall());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isContinue());
      assertFalse(node2.isReturn());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isNumber());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTrue());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAssign());
      assertFalse(node2.isLabelName());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertEquals(79, node2.getType());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDo());
      assertFalse(node2.isNull());
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      
      node2.putIntProp(44, 56);
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isLabel());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isCast());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAnd());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isHook());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isInc());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isFunction());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isString());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isParamList());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertEquals(79, node1.getType());
      assertFalse(node1.isDefaultCase());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isVar());
      assertFalse(node1.isComma());
      assertFalse(node1.isNew());
      assertFalse(node1.isVoid());
      assertFalse(node1.isAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isHook());
      assertFalse(node2.isInc());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isBreak());
      assertFalse(node2.isThrow());
      assertFalse(node2.isComma());
      assertFalse(node2.isFalse());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isThis());
      assertFalse(node2.isAnd());
      assertFalse(node2.isNot());
      assertFalse(node2.isCase());
      assertFalse(node2.isString());
      assertFalse(node2.isScript());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isTry());
      assertFalse(node2.isWith());
      assertFalse(node2.isFor());
      assertFalse(node2.isCast());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isFunction());
      assertFalse(node2.isRegExp());
      assertTrue(node2.hasChildren());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isIn());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isBlock());
      assertFalse(node2.isVar());
      assertFalse(node2.isName());
      assertFalse(node2.isWhile());
      assertFalse(node2.isCall());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isContinue());
      assertFalse(node2.isReturn());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isNumber());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTrue());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAssign());
      assertFalse(node2.isLabelName());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertEquals(79, node2.getType());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDo());
      assertFalse(node2.isNull());
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      
      Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeEqualsImpl(node1);
      assertNotNull(node_NodeMismatch0);
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isLabel());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isCast());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAnd());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isHook());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isInc());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isTry());
      assertFalse(node1.isFunction());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isString());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isParamList());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertEquals(79, node1.getType());
      assertFalse(node1.isDefaultCase());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isVar());
      assertFalse(node1.isComma());
      assertFalse(node1.isNew());
      assertFalse(node1.isVoid());
      assertFalse(node1.isAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isHook());
      assertFalse(node2.isInc());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isBreak());
      assertFalse(node2.isThrow());
      assertFalse(node2.isComma());
      assertFalse(node2.isFalse());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isThis());
      assertFalse(node2.isAnd());
      assertFalse(node2.isNot());
      assertFalse(node2.isCase());
      assertFalse(node2.isString());
      assertFalse(node2.isScript());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isTry());
      assertFalse(node2.isWith());
      assertFalse(node2.isFor());
      assertFalse(node2.isCast());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isFunction());
      assertFalse(node2.isRegExp());
      assertTrue(node2.hasChildren());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isIn());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isBlock());
      assertFalse(node2.isVar());
      assertFalse(node2.isName());
      assertFalse(node2.isWhile());
      assertFalse(node2.isCall());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isContinue());
      assertFalse(node2.isReturn());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isNumber());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTrue());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAssign());
      assertFalse(node2.isLabelName());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertEquals(79, node2.getType());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDo());
      assertFalse(node2.isNull());
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      
      Node node3 = node0.cloneNode();
      assertNotNull(node3);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isOr());
      assertEquals(79, node0.getType());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isCall());
      assertFalse(node3.isName());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isBlock());
      assertFalse(node3.isNew());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isVar());
      assertFalse(node3.isWhile());
      assertFalse(node3.isContinue());
      assertFalse(node3.isParamList());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isNumber());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isAssign());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isDec());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isReturn());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isLabel());
      assertFalse(node3.isDo());
      assertFalse(node3.isDefaultCase());
      assertEquals(79, node3.getType());
      assertFalse(node3.isVoid());
      assertFalse(node3.isOr());
      assertFalse(node3.isTrue());
      assertFalse(node3.isAdd());
      assertFalse(node3.isNull());
      assertFalse(node3.isFalse());
      assertFalse(node3.isThrow());
      assertFalse(node3.isBreak());
      assertFalse(node3.isHook());
      assertFalse(node3.isComma());
      assertFalse(node3.isThis());
      assertFalse(node3.isNot());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isAnd());
      assertFalse(node3.isString());
      assertFalse(node3.isScript());
      assertFalse(node3.isCase());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isGetterDef());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isFor());
      assertFalse(node3.isCast());
      assertFalse(node3.isIf());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isTry());
      assertFalse(node3.isFunction());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isWith());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isCatch());
      assertFalse(node3.isInstanceOf());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isInc());
      assertFalse(node3.isIn());
      assertFalse(node3.isNE());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node0, node3);
      assertNotSame(node3, node0);
      assertNotSame(node3, node2);
      assertNotSame(node3, node1);
      
      // Undeclared exception!
      try { 
        node3.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = new Node(10);
      assertNotNull(node0);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isHook());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCase());
      assertEquals(10, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      boolean boolean0 = node0.isSyntheticBlock();
      assertFalse(boolean0);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isHook());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCase());
      assertEquals(10, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      Node node1 = Node.newString("$Q-!cyX", 15, (-748));
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isHook());
      assertFalse(node1.isCase());
      assertFalse(node1.isThrow());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInc());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFalse());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNot());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertTrue(node1.isString());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isParamList());
      assertEquals((-1), node1.getSourcePosition());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertFalse(node1.isTry());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertEquals(40, node1.getType());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isThis());
      assertFalse(node1.isWith());
      assertFalse(node1.isIf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      boolean boolean1 = node1.isDelProp();
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isHook());
      assertFalse(node1.isCase());
      assertFalse(node1.isThrow());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInc());
      assertFalse(node1.isAnd());
      assertFalse(node1.isFalse());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNot());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertTrue(node1.isString());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isParamList());
      assertEquals((-1), node1.getSourcePosition());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertFalse(node1.isTry());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertEquals(40, node1.getType());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isThis());
      assertFalse(node1.isWith());
      assertFalse(node1.isIf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      assertNotNull(node_SideEffectFlags0);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      assertNotNull(node_SideEffectFlags1);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      
      boolean boolean2 = node_SideEffectFlags1.areAllFlagsSet();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Node node0 = Node.newString(0, "is_constant_name");
      assertNotNull(node0);
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getType());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isString());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNumber());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      Node node1 = Node.newString("is_constant_name");
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isVar());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isBlock());
      assertFalse(node1.isParamList());
      assertFalse(node1.isCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertTrue(node1.isString());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTry());
      assertFalse(node1.isCast());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIn());
      assertFalse(node1.isContinue());
      assertEquals(40, node1.getType());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isHook());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isComma());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertNotSame(node1, node0);
      
      Node node2 = new Node(0, node0, node0, node1);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getType());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isString());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNumber());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node1.isVar());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isBlock());
      assertFalse(node1.isParamList());
      assertFalse(node1.isCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertTrue(node1.isString());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTry());
      assertFalse(node1.isCast());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIn());
      assertFalse(node1.isContinue());
      assertEquals(40, node1.getType());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isHook());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isComma());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node2.isIn());
      assertFalse(node2.isCase());
      assertFalse(node2.isString());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isFor());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isTry());
      assertFalse(node2.isFalse());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isGetterDef());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isComma());
      assertFalse(node2.isVar());
      assertEquals(0, node2.getType());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isNew());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCall());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNull());
      assertFalse(node2.isBreak());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertTrue(node2.hasMoreThanOneChild());
      assertFalse(node2.isName());
      assertFalse(node2.isTrue());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isOr());
      assertFalse(node2.isContinue());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDo());
      assertFalse(node2.isBlock());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isReturn());
      assertFalse(node2.isWhile());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isScript());
      assertFalse(node2.isCast());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isNumber());
      assertFalse(node2.isNot());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isAnd());
      assertFalse(node2.isParamList());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isWith());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isCatch());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isFunction());
      assertEquals(2, node2.getChildCount());
      assertFalse(node2.isThis());
      assertFalse(node2.isThrow());
      assertFalse(node2.isHook());
      assertFalse(node2.isInc());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      
      boolean boolean0 = node2.isFromExterns();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(boolean0);
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getType());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isString());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNumber());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node1.isVar());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNull());
      assertFalse(node1.isBlock());
      assertFalse(node1.isParamList());
      assertFalse(node1.isCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertTrue(node1.isString());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTry());
      assertFalse(node1.isCast());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIn());
      assertFalse(node1.isContinue());
      assertEquals(40, node1.getType());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isHook());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isComma());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node2.isIn());
      assertFalse(node2.isCase());
      assertFalse(node2.isString());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isFor());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isTry());
      assertFalse(node2.isFalse());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isGetterDef());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isComma());
      assertFalse(node2.isVar());
      assertEquals(0, node2.getType());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isNew());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCall());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNull());
      assertFalse(node2.isBreak());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertTrue(node2.hasMoreThanOneChild());
      assertFalse(node2.isName());
      assertFalse(node2.isTrue());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isOr());
      assertFalse(node2.isContinue());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDo());
      assertFalse(node2.isBlock());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isReturn());
      assertFalse(node2.isWhile());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isScript());
      assertFalse(node2.isCast());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isNumber());
      assertFalse(node2.isNot());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isAnd());
      assertFalse(node2.isParamList());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isWith());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isCatch());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isFunction());
      assertEquals(2, node2.getChildCount());
      assertFalse(node2.isThis());
      assertFalse(node2.isThrow());
      assertFalse(node2.isHook());
      assertFalse(node2.isInc());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      
      boolean boolean1 = node0.isUnscopedQualifiedName();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getType());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isString());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNumber());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertNotSame(node0, node1);
      
      Node node3 = Node.newString("REFERENCE_ERROR_TYPE", 50, 47);
      assertNotNull(node3);
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.isComma());
      assertFalse(node3.isThis());
      assertFalse(node3.isBreak());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isFalse());
      assertFalse(node3.isHook());
      assertFalse(node3.isThrow());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isScript());
      assertEquals(204847, node3.getSourcePosition());
      assertFalse(node3.isNot());
      assertFalse(node3.isCast());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isAnd());
      assertFalse(node3.isNE());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isIn());
      assertFalse(node3.isNumber());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isCase());
      assertFalse(node3.isTry());
      assertFalse(node3.isFor());
      assertFalse(node3.isInc());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isWith());
      assertFalse(node3.isCatch());
      assertFalse(node3.isIf());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isNull());
      assertEquals(47, node3.getCharno());
      assertFalse(node3.isVar());
      assertEquals(0, node3.getChildCount());
      assertTrue(node3.isString());
      assertEquals(40, node3.getType());
      assertFalse(node3.isBlock());
      assertFalse(node3.isDefaultCase());
      assertEquals(50, node3.getLineno());
      assertFalse(node3.isFunction());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isContinue());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isParamList());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isDec());
      assertFalse(node3.isLabel());
      assertFalse(node3.isAssign());
      assertFalse(node3.isOr());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isReturn());
      assertFalse(node3.isDo());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isWhile());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isVoid());
      assertFalse(node3.isTrue());
      assertFalse(node3.isNew());
      assertFalse(node3.isAdd());
      assertFalse(node3.isCall());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isName());
      assertFalse(node3.isDelProp());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertNotSame(node3, node1);
      assertNotSame(node3, node0);
      
      // Undeclared exception!
      try { 
        node2.replaceChild(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node node0 = Node.newString("[f5q?xN", 2123, 2123);
      assertNotNull(node0);
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertEquals(8697931, node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals(2123, node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertFalse(node0.isNot());
      assertEquals(40, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertEquals(2123, node0.getCharno());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      
      boolean boolean0 = node0.isDelProp();
      assertFalse(boolean0);
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertEquals(8697931, node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals(2123, node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertFalse(node0.isNot());
      assertEquals(40, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertEquals(2123, node0.getCharno());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node node0 = Node.newString(656, "fb}+(G");
      assertNotNull(node0);
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCase());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertEquals(656, node0.getType());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      Node node1 = node0.getLastSibling();
      assertNotNull(node1);
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCase());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertEquals(656, node0.getType());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isVar());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isContinue());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabel());
      assertEquals(656, node1.getType());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssign());
      assertFalse(node1.isOr());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isScript());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isCast());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isNumber());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isInc());
      assertFalse(node1.isBlock());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getLineno());
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertSame(node0, node1);
      assertSame(node1, node0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = 0;
      Node node0 = new Node(0);
      assertNotNull(node0);
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCast());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCatch());
      assertFalse(node0.isThis());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      
      Node node1 = Node.newString(15, "Namespaces not supported yet (", (-4470), (-2139));
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isLabel());
      assertFalse(node1.isReturn());
      assertFalse(node1.isBlock());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCall());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isContinue());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isVar());
      assertFalse(node1.isNull());
      assertEquals(15, node1.getType());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isVoid());
      assertFalse(node1.isComma());
      assertFalse(node1.isCast());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isFunction());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isWith());
      assertFalse(node1.isDefaultCase());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isTry());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      
      Node node2 = new Node(0, node0, node1, node1, node1, 266, (-654));
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCast());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCatch());
      assertFalse(node0.isThis());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isLabel());
      assertFalse(node1.isReturn());
      assertFalse(node1.isBlock());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCall());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isContinue());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isVar());
      assertFalse(node1.isNull());
      assertEquals(15, node1.getType());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isVoid());
      assertFalse(node1.isComma());
      assertFalse(node1.isCast());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isFunction());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isWith());
      assertFalse(node1.isDefaultCase());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isTry());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertEquals(0, node2.getType());
      assertFalse(node2.isInc());
      assertFalse(node2.isHook());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isCase());
      assertFalse(node2.isString());
      assertFalse(node2.isThrow());
      assertFalse(node2.isThis());
      assertFalse(node2.isInstanceOf());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isNE());
      assertFalse(node2.isIn());
      assertFalse(node2.isComma());
      assertFalse(node2.isWith());
      assertFalse(node2.isBreak());
      assertFalse(node2.isIf());
      assertFalse(node2.isDelProp());
      assertTrue(node2.hasMoreThanOneChild());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isNot());
      assertFalse(node2.isGetProp());
      assertEquals(2, node2.getChildCount());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isFalse());
      assertFalse(node2.isAnd());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCast());
      assertFalse(node2.isBlock());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isWhile());
      assertFalse(node2.isVar());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isDo());
      assertFalse(node2.isReturn());
      assertFalse(node2.isNull());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isOr());
      assertFalse(node2.isName());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCall());
      assertFalse(node2.isCatch());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTrue());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isFor());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isScript());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isTry());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isParamList());
      assertFalse(node2.isNumber());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isLabelName());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      
      node1.setString("3G'.Lkmxm");
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isLabel());
      assertFalse(node1.isReturn());
      assertFalse(node1.isBlock());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCall());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isContinue());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isVar());
      assertFalse(node1.isNull());
      assertEquals(15, node1.getType());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isVoid());
      assertFalse(node1.isComma());
      assertFalse(node1.isCast());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isFunction());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasChildren());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isWith());
      assertFalse(node1.isDefaultCase());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isTry());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      
      Node node3 = Node.newString("Namespaces not supported yet (", 70, 3198);
      assertNotNull(node3);
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.isSwitch());
      assertEquals(289918, node3.getSourcePosition());
      assertFalse(node3.isInc());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isBreak());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isCase());
      assertFalse(node3.isFor());
      assertFalse(node3.isWith());
      assertFalse(node3.isHook());
      assertFalse(node3.isComma());
      assertFalse(node3.isThis());
      assertFalse(node3.isFunction());
      assertFalse(node3.isCast());
      assertFalse(node3.isNot());
      assertFalse(node3.isAnd());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isIf());
      assertFalse(node3.isNE());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isIn());
      assertFalse(node3.isSetterDef());
      assertEquals(40, node3.getType());
      assertFalse(node3.isThrow());
      assertFalse(node3.isContinue());
      assertFalse(node3.isFalse());
      assertEquals(70, node3.getLineno());
      assertTrue(node3.isString());
      assertFalse(node3.isBlock());
      assertFalse(node3.isNew());
      assertFalse(node3.isAdd());
      assertFalse(node3.isCall());
      assertFalse(node3.isName());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isNull());
      assertFalse(node3.isCatch());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isAssign());
      assertFalse(node3.isWhile());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isDec());
      assertFalse(node3.isReturn());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isTry());
      assertFalse(node3.isVoid());
      assertEquals(3198, node3.getCharno());
      assertFalse(node3.isScript());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isNumber());
      assertFalse(node3.isTrue());
      assertFalse(node3.isOr());
      assertFalse(node3.isParamList());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isDo());
      assertFalse(node3.isDefaultCase());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isVar());
      assertFalse(node3.isLabel());
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertNotSame(node3, node1);
      
      // Undeclared exception!
      try { 
        node2.getDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = 0;
      Node node0 = new Node(0);
      assertNotNull(node0);
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      Node node1 = Node.newString(15, "Namespaces not supported yet (", (-4470), (-2139));
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isComma());
      assertFalse(node1.isWith());
      assertFalse(node1.isFalse());
      assertFalse(node1.isAnd());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNot());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInc());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSetterDef());
      assertEquals(15, node1.getType());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCatch());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFor());
      assertFalse(node1.isWhile());
      assertFalse(node1.isLabel());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isOr());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVar());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      
      Node node2 = new Node(0, node0, node1, node1, node1, 266, (-654));
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isComma());
      assertFalse(node1.isWith());
      assertFalse(node1.isFalse());
      assertFalse(node1.isAnd());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNot());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isScript());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInc());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSetterDef());
      assertEquals(15, node1.getType());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCatch());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFor());
      assertFalse(node1.isWhile());
      assertFalse(node1.isLabel());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isOr());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVar());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node2.isCatch());
      assertFalse(node2.isNull());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVoid());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isName());
      assertFalse(node2.isCall());
      assertFalse(node2.isBlock());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isWhile());
      assertFalse(node2.isFor());
      assertFalse(node2.isTry());
      assertFalse(node2.isIn());
      assertEquals((-1), node2.getLineno());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isContinue());
      assertFalse(node2.isIf());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isNE());
      assertFalse(node2.isCast());
      assertFalse(node2.isFunction());
      assertFalse(node2.isFalse());
      assertFalse(node2.isInc());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isThrow());
      assertFalse(node2.isInstanceOf());
      assertEquals(2, node2.getChildCount());
      assertFalse(node2.isComma());
      assertFalse(node2.isNot());
      assertFalse(node2.isWith());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isBreak());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isAnd());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isHook());
      assertEquals(0, node2.getType());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isAssign());
      assertFalse(node2.isString());
      assertFalse(node2.isDec());
      assertFalse(node2.isScript());
      assertFalse(node2.isThis());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isCase());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertFalse(node2.isOr());
      assertFalse(node2.isNumber());
      assertFalse(node2.isTypeOf());
      assertTrue(node2.hasMoreThanOneChild());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isAdd());
      assertFalse(node2.isVar());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssignAdd());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      // Undeclared exception!
      try { 
        node2.getDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Node node0 = new Node(79);
      assertNotNull(node0);
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCase());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertEquals(0, node0.getChildCount());
      assertEquals(79, node0.getType());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabel());
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      assertNotNull(node_AncestorIterable0);
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCase());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertEquals(0, node0.getChildCount());
      assertEquals(79, node0.getType());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabel());
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      Node node1 = new Node(79);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNot());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isCast());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isHook());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCase());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.isRegExp());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isTry());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertFalse(node1.isSwitch());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isNull());
      assertFalse(node1.isVar());
      assertFalse(node1.isGetProp());
      assertEquals(79, node1.getType());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isString());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isBreak());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      
      node1.addChildToFront(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCase());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertEquals(0, node0.getChildCount());
      assertEquals(79, node0.getType());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabel());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNot());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isCast());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isHook());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCase());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.isRegExp());
      assertEquals((-1), node1.getLineno());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isWith());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isTry());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isNull());
      assertFalse(node1.isVar());
      assertFalse(node1.isGetProp());
      assertEquals(79, node1.getType());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isString());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isBreak());
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isWizaction());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isExport());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getMeaning());
      
      Node node2 = node1.setJSDocInfo(jSDocInfo0);
      assertNotNull(node2);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isOr());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isContinue());
      assertFalse(node1.isNot());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isCast());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isHook());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCase());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.isRegExp());
      assertEquals((-1), node1.getLineno());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isWith());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isTry());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isNull());
      assertFalse(node1.isVar());
      assertFalse(node1.isGetProp());
      assertEquals(79, node1.getType());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isString());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isBreak());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isWizaction());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isExport());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(node2.isScript());
      assertFalse(node2.isNot());
      assertFalse(node2.isAnd());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isGetProp());
      assertEquals(79, node2.getType());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isNumber());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isThrow());
      assertFalse(node2.isFalse());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCast());
      assertFalse(node2.isDo());
      assertFalse(node2.isWhile());
      assertFalse(node2.isOr());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isString());
      assertFalse(node2.isNull());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isBreak());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isComma());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isName());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isReturn());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCall());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTry());
      assertFalse(node2.isTrue());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isVar());
      assertFalse(node2.isInc());
      assertFalse(node2.isSwitch());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isBlock());
      assertFalse(node2.isIn());
      assertFalse(node2.isCase());
      assertFalse(node2.isThis());
      assertFalse(node2.isIf());
      assertFalse(node2.isFor());
      assertFalse(node2.isNE());
      assertFalse(node2.isHook());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals(1, node2.getChildCount());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isWith());
      assertFalse(node2.isInstanceOf());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isCatch());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertNotSame(node1, node0);
      assertSame(node1, node2);
      assertNotSame(node2, node0);
      assertSame(node2, node1);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      node_SideEffectFlags0.clearSideEffectFlags();
      assertEquals(15, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      assertNotNull(node_SideEffectFlags1);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      assertNotNull(node_SideEffectFlags2);
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertEquals(31, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesGlobalState();
      assertNotNull(node_SideEffectFlags3);
      assertEquals(24, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(24, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(24, node_SideEffectFlags3.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setAllFlags();
      assertNotNull(node_SideEffectFlags4);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.clearAllFlags();
      assertNotNull(node_SideEffectFlags5);
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags3.valueOf());
      assertEquals(31, node_SideEffectFlags5.valueOf());
      assertFalse(node_SideEffectFlags5.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      
      Node node3 = null;
      try {
        node3 = new Node(49, node2, node2, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      assertNotNull(node_SideEffectFlags1);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesArguments();
      assertNotNull(node_SideEffectFlags2);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setReturnsTainted();
      assertNotNull(node_SideEffectFlags3);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags0.setReturnsTainted();
      assertNotNull(node_SideEffectFlags4);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags0.setReturnsTainted();
      assertNotNull(node_SideEffectFlags5);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags5.valueOf());
      assertTrue(node_SideEffectFlags5.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      
      node_SideEffectFlags0.clearSideEffectFlags();
      assertEquals(15, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      
      Node node0 = Node.newString("    ");
      assertNotNull(node0);
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isComma());
      assertFalse(node0.isAnd());
      assertEquals(40, node0.getType());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertTrue(node0.isString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isName());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType[] jSTypeArray0 = new JSType[7];
      TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
      assertNotNull(templateType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.hasCachedValues());
      assertEquals("Object#Key", templateType0.getReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isResolved());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isVoidType());
      assertTrue(templateType0.isTemplateType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      EnumType enumType0 = jSTypeRegistry0.createEnumType("    ", node0, templateType0);
      assertNotNull(enumType0);
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isComma());
      assertFalse(node0.isAnd());
      assertEquals(40, node0.getType());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertTrue(node0.isString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isName());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.hasCachedValues());
      assertEquals("Object#Key", templateType0.getReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isResolved());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isVoidType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isStringValueType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isNominalType());
      assertFalse(enumType0.isNominalConstructor());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isTemplateType());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isTemplatizedType());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.matchesNumberContext());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isVoidType());
      assertFalse(enumType0.isRecordType());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType0.isNoResolvedType());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      EnumElementType enumElementType0 = enumType0.getElementsType();
      assertNotNull(enumElementType0);
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isComma());
      assertFalse(node0.isAnd());
      assertEquals(40, node0.getType());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertTrue(node0.isString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isName());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.hasCachedValues());
      assertEquals("Object#Key", templateType0.getReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isResolved());
      assertTrue(templateType0.hasAnyTemplateTypesInternal());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isVoidType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isStringValueType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isNominalType());
      assertFalse(enumType0.isNominalConstructor());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isTemplateType());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isTemplatizedType());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.matchesNumberContext());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isVoidType());
      assertFalse(enumType0.isRecordType());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isAllType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isFunctionType());
      assertEquals("    ", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isTemplatizedType());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      jSTypeArray0[0] = (JSType) enumElementType0;
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      assertNotNull(modificationVisitor0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createConstructorType(jSTypeArray0[0], true, jSTypeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionParamBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Node node0 = new Node(105, 105, 105);
      assertNotNull(node0);
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isExprResult());
      assertTrue(node0.isFunction());
      assertFalse(node0.isLabelName());
      assertEquals(430185, node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertEquals(105, node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertEquals(105, node0.getLineno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertEquals(105, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      boolean boolean0 = node0.isVar();
      assertFalse(boolean0);
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isExprResult());
      assertTrue(node0.isFunction());
      assertFalse(node0.isLabelName());
      assertEquals(430185, node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertEquals(105, node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertEquals(105, node0.getLineno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertEquals(105, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      node0.setChangeTime(105);
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isExprResult());
      assertTrue(node0.isFunction());
      assertFalse(node0.isLabelName());
      assertEquals(430185, node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertEquals(105, node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertEquals(105, node0.getLineno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertEquals(105, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      boolean boolean1 = node0.isCall();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isExprResult());
      assertTrue(node0.isFunction());
      assertFalse(node0.isLabelName());
      assertEquals(430185, node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertEquals(105, node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertEquals(105, node0.getLineno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertEquals(105, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      node0.setChangeTime(0);
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isExprResult());
      assertTrue(node0.isFunction());
      assertFalse(node0.isLabelName());
      assertEquals(430185, node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertEquals(105, node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertEquals(105, node0.getLineno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertEquals(105, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      InputId inputId0 = node0.getInputId();
      assertNull(inputId0);
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isExprResult());
      assertTrue(node0.isFunction());
      assertFalse(node0.isLabelName());
      assertEquals(430185, node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertEquals(105, node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertEquals(105, node0.getLineno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertEquals(105, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      assertNotNull(modificationVisitor0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      UnknownType unknownType0 = (UnknownType)modificationVisitor0.caseUnknownType();
      assertNotNull(unknownType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isAllType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isBooleanValueType());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isNumberValueType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.hasDisplayName());
      assertTrue(unknownType0.isObject());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isNominalConstructor());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isTemplatizedType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.hasReferenceName());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isInterface());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      UnknownType unknownType1 = (UnknownType)ObjectType.cast(unknownType0);
      assertNotNull(unknownType1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isAllType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isBooleanValueType());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isNumberValueType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.hasDisplayName());
      assertTrue(unknownType0.isObject());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isNominalConstructor());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isTemplatizedType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.hasReferenceName());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isInterface());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertEquals("Unknown", unknownType1.getDisplayName());
      assertFalse(unknownType1.isConstructor());
      assertFalse(unknownType1.isRecordType());
      assertTrue(unknownType1.matchesObjectContext());
      assertFalse(unknownType1.hasCachedValues());
      assertTrue(unknownType1.isUnknownType());
      assertFalse(unknownType1.isFunctionPrototypeType());
      assertFalse(unknownType1.isTemplateType());
      assertTrue(unknownType1.matchesNumberContext());
      assertTrue(unknownType1.isNullable());
      assertFalse(unknownType1.isOrdinaryFunction());
      assertTrue(unknownType1.canBeCalled());
      assertTrue(unknownType1.matchesStringContext());
      assertFalse(unknownType1.isInterface());
      assertFalse(unknownType1.isCheckedUnknownType());
      assertFalse(unknownType1.isStringValueType());
      assertFalse(unknownType1.isResolved());
      assertFalse(unknownType1.isNominalConstructor());
      assertFalse(unknownType1.hasReferenceName());
      assertFalse(unknownType1.isEnumElementType());
      assertFalse(unknownType1.isTemplatizedType());
      assertFalse(unknownType1.isVoidType());
      assertTrue(unknownType1.hasDisplayName());
      assertFalse(unknownType1.isNumberValueType());
      assertFalse(unknownType1.isUnionType());
      assertFalse(unknownType1.isNoResolvedType());
      assertFalse(unknownType1.isEnumType());
      assertEquals("?", unknownType1.getReferenceName());
      assertFalse(unknownType1.isBooleanValueType());
      assertFalse(unknownType1.isAllType());
      assertFalse(unknownType1.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType1.getPossibleToBooleanOutcomes());
      assertFalse(unknownType1.isFunctionType());
      assertFalse(unknownType1.isNominalType());
      assertFalse(unknownType1.isNoObjectType());
      assertTrue(unknownType1.isObject());
      assertFalse(unknownType1.isNativeObjectType());
      assertFalse(unknownType1.isNullType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertSame(unknownType0, unknownType1);
      assertSame(unknownType1, unknownType0);
      
      JSType[] jSTypeArray0 = new JSType[6];
      jSTypeArray0[0] = (JSType) unknownType1;
      jSTypeArray0[1] = (JSType) unknownType1;
      jSTypeArray0[2] = (JSType) unknownType1;
      String string0 = node0.getSourceFileName();
      assertNull(string0);
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isExprResult());
      assertTrue(node0.isFunction());
      assertFalse(node0.isLabelName());
      assertEquals(430185, node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertEquals(105, node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertEquals(105, node0.getLineno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertEquals(105, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      boolean boolean2 = unknownType1.isBooleanObjectType();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isAllType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isBooleanValueType());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isNumberValueType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.hasDisplayName());
      assertTrue(unknownType0.isObject());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isNominalConstructor());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isTemplatizedType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.hasReferenceName());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isInterface());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertEquals("Unknown", unknownType1.getDisplayName());
      assertFalse(unknownType1.isConstructor());
      assertFalse(unknownType1.isRecordType());
      assertTrue(unknownType1.matchesObjectContext());
      assertFalse(unknownType1.hasCachedValues());
      assertTrue(unknownType1.isUnknownType());
      assertFalse(unknownType1.isFunctionPrototypeType());
      assertFalse(unknownType1.isTemplateType());
      assertTrue(unknownType1.matchesNumberContext());
      assertTrue(unknownType1.isNullable());
      assertFalse(unknownType1.isOrdinaryFunction());
      assertTrue(unknownType1.canBeCalled());
      assertTrue(unknownType1.matchesStringContext());
      assertFalse(unknownType1.isInterface());
      assertFalse(unknownType1.isCheckedUnknownType());
      assertFalse(unknownType1.isStringValueType());
      assertFalse(unknownType1.isResolved());
      assertFalse(unknownType1.isNominalConstructor());
      assertFalse(unknownType1.hasReferenceName());
      assertFalse(unknownType1.isEnumElementType());
      assertFalse(unknownType1.isTemplatizedType());
      assertFalse(unknownType1.isVoidType());
      assertTrue(unknownType1.hasDisplayName());
      assertFalse(unknownType1.isNumberValueType());
      assertFalse(unknownType1.isUnionType());
      assertFalse(unknownType1.isNoResolvedType());
      assertFalse(unknownType1.isEnumType());
      assertEquals("?", unknownType1.getReferenceName());
      assertFalse(unknownType1.isBooleanValueType());
      assertFalse(unknownType1.isAllType());
      assertFalse(unknownType1.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType1.getPossibleToBooleanOutcomes());
      assertFalse(unknownType1.isFunctionType());
      assertFalse(unknownType1.isNominalType());
      assertFalse(unknownType1.isNoObjectType());
      assertTrue(unknownType1.isObject());
      assertFalse(unknownType1.isNativeObjectType());
      assertFalse(unknownType1.isNullType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertSame(unknownType0, unknownType1);
      assertSame(unknownType1, unknownType0);
      
      boolean boolean3 = node0.hasOneChild();
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isExprResult());
      assertTrue(node0.isFunction());
      assertFalse(node0.isLabelName());
      assertEquals(430185, node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertEquals(105, node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertEquals(105, node0.getLineno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertEquals(105, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      boolean boolean4 = node0.isDelProp();
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isExprResult());
      assertTrue(node0.isFunction());
      assertFalse(node0.isLabelName());
      assertEquals(430185, node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertEquals(105, node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertEquals(105, node0.getLineno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertEquals(105, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      boolean boolean5 = node0.isAssignAdd();
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5);
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isExprResult());
      assertTrue(node0.isFunction());
      assertFalse(node0.isLabelName());
      assertEquals(430185, node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertEquals(105, node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertEquals(105, node0.getLineno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertEquals(105, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isInc());
      assertFalse(node1.isTrue());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertTrue(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertFalse(node1.isThis());
      assertEquals(83, node1.getType());
      assertFalse(node1.isCatch());
      assertFalse(node1.isVar());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isScript());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.isContinue());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isLabel());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isName());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isComma());
      assertFalse(node1.isSetterDef());
      assertEquals(6, node1.getChildCount());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCall());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertTrue(node1.isParamList());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertNotSame(node1, node0);
      assertEquals(6, jSTypeArray0.length);
      
      Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
      assertNotNull(node_AncestorIterable0);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isInc());
      assertFalse(node1.isTrue());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertTrue(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertFalse(node1.isThis());
      assertEquals(83, node1.getType());
      assertFalse(node1.isCatch());
      assertFalse(node1.isVar());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isScript());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssignAdd());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.isContinue());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isLabel());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isName());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isComma());
      assertFalse(node1.isSetterDef());
      assertEquals(6, node1.getChildCount());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCall());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isFunction());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertTrue(node1.isParamList());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertNotSame(node1, node0);
      assertEquals(6, jSTypeArray0.length);
      
      boolean boolean6 = node0.isDec();
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6);
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isExprResult());
      assertTrue(node0.isFunction());
      assertFalse(node0.isLabelName());
      assertEquals(430185, node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertEquals(105, node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertEquals(105, node0.getLineno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertEquals(105, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertNotSame(node0, node1);
      
      node1.setSourceEncodedPosition(48);
      assertFalse(node1.equals((Object)node0));
      assertEquals(48, node1.getCharno());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFor());
      assertFalse(node1.isInc());
      assertFalse(node1.isTrue());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertTrue(node1.hasMoreThanOneChild());
      assertFalse(node1.isIn());
      assertFalse(node1.isThis());
      assertEquals(83, node1.getType());
      assertFalse(node1.isCatch());
      assertFalse(node1.isVar());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isScript());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertFalse(node1.isContinue());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isLabel());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isName());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isComma());
      assertFalse(node1.isSetterDef());
      assertEquals(6, node1.getChildCount());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isCall());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertEquals(48, node1.getSourcePosition());
      assertFalse(node1.isFunction());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertTrue(node1.isParamList());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertNotSame(node1, node0);
      assertEquals(6, jSTypeArray0.length);
      
      // Undeclared exception!
      try { 
        Node.newString(0, (String) null, 31, 300);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Node node0 = Node.newNumber(1418.29258, 2066, 2066);
      assertNotNull(node0);
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isSwitch());
      assertEquals(2066, node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertTrue(node0.isNumber());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isString());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertEquals(2066, node0.getCharno());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertEquals(8464402, node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIn());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertEquals(39, node0.getType());
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      
      Node node1 = new Node(2066, node0, 54, 50);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isSwitch());
      assertEquals(2066, node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertTrue(node0.isNumber());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isString());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertEquals(2066, node0.getCharno());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertEquals(8464402, node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIn());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertEquals(39, node0.getType());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIn());
      assertEquals(221234, node1.getSourcePosition());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isCase());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isFor());
      assertFalse(node1.isInc());
      assertFalse(node1.isTrue());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isComma());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertEquals(54, node1.getLineno());
      assertFalse(node1.isString());
      assertFalse(node1.isCast());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isDec());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isGetElem());
      assertEquals(2066, node1.getType());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDo());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertEquals(50, node1.getCharno());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNew());
      assertFalse(node1.isWith());
      assertFalse(node1.isAdd());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isNull());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isTry());
      assertFalse(node1.isScript());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      
      Node node2 = node1.removeChildren();
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isSwitch());
      assertEquals(2066, node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertTrue(node0.isNumber());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isString());
      assertFalse(node0.isVoid());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertEquals(2066, node0.getCharno());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertEquals(8464402, node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIn());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertEquals(39, node0.getType());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIn());
      assertEquals(221234, node1.getSourcePosition());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isInc());
      assertFalse(node1.isTrue());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isComma());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertEquals(54, node1.getLineno());
      assertFalse(node1.isString());
      assertFalse(node1.isCast());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isDec());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isGetElem());
      assertEquals(2066, node1.getType());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDo());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertEquals(50, node1.getCharno());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNew());
      assertFalse(node1.isWith());
      assertFalse(node1.isAdd());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isNull());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isTry());
      assertFalse(node1.isScript());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node2.isIn());
      assertFalse(node2.isCase());
      assertTrue(node2.isNumber());
      assertFalse(node2.isFor());
      assertFalse(node2.isVoid());
      assertFalse(node2.isEmpty());
      assertEquals(2066, node2.getLineno());
      assertFalse(node2.isInc());
      assertFalse(node2.isBreak());
      assertFalse(node2.isNE());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isTrue());
      assertFalse(node2.isInstanceOf());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isCatch());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isWith());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isThis());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isHook());
      assertFalse(node2.isTry());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isScript());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isParamList());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isContinue());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDo());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isWhile());
      assertFalse(node2.isBlock());
      assertFalse(node2.isAssign());
      assertFalse(node2.isReturn());
      assertFalse(node2.hasChildren());
      assertEquals(39, node2.getType());
      assertFalse(node2.isLabel());
      assertFalse(node2.isVar());
      assertFalse(node2.isName());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCall());
      assertFalse(node2.isNull());
      assertFalse(node2.isOr());
      assertEquals(8464402, node2.getSourcePosition());
      assertFalse(node2.isAnd());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isGetProp());
      assertEquals(2066, node2.getCharno());
      assertFalse(node2.isFunction());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertFalse(node2.isComma());
      assertFalse(node2.isCast());
      assertFalse(node2.isString());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isDebugger());
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertSame(node0, node2);
      assertSame(node2, node0);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      assertNotNull(node_SideEffectFlags0);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      assertNotNull(node_SideEffectFlags1);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags(node_SideEffectFlags1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2066
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = "sg_{;L{935r";
      Node node0 = Node.newString(44, "sg_{;L{935r");
      assertNotNull(node0);
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertTrue(node0.isTrue());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLabel());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertEquals(44, node0.getType());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
      assertNull(staticSourceFile0);
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertTrue(node0.isTrue());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLabel());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertEquals(44, node0.getType());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      boolean boolean0 = node0.isNoSideEffectsCall();
      assertFalse(boolean0);
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertTrue(node0.isTrue());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLabel());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertEquals(44, node0.getType());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      boolean boolean1 = node0.isCast();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertTrue(node0.isTrue());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLabel());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertEquals(44, node0.getType());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      boolean boolean2 = node0.isNE();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertTrue(node0.isTrue());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLabel());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertEquals(44, node0.getType());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // TRUE sg_{;L{935r is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Node node0 = new Node((-50));
      assertNotNull(node0);
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertEquals((-50), node0.getType());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isName());
      assertFalse(node0.isNot());
      assertFalse(node0.isVoid());
      assertFalse(node0.isString());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isCast());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      node0.detachChildren();
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertEquals((-50), node0.getType());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isName());
      assertFalse(node0.isNot());
      assertFalse(node0.isVoid());
      assertFalse(node0.isString());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isCast());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      boolean boolean0 = hashSet0.add("");
      assertTrue(boolean0);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertTrue(hashSet0.contains(""));
      
      node0.setDirectives(hashSet0);
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertEquals((-50), node0.getType());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isName());
      assertFalse(node0.isNot());
      assertFalse(node0.isVoid());
      assertFalse(node0.isString());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isCast());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertTrue(hashSet0.contains(""));
      
      node0.putIntProp((-50), (-879));
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertEquals((-50), node0.getType());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isName());
      assertFalse(node0.isNot());
      assertFalse(node0.isVoid());
      assertFalse(node0.isString());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isCast());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      boolean boolean1 = node0.isNE();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertEquals((-50), node0.getType());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isName());
      assertFalse(node0.isNot());
      assertFalse(node0.isVoid());
      assertFalse(node0.isString());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isCast());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      node0.setSourceEncodedPositionForTree((-50));
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertEquals((-50), node0.getType());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isName());
      assertFalse(node0.isNot());
      assertEquals((-50), node0.getSourcePosition());
      assertFalse(node0.isVoid());
      assertFalse(node0.isString());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isCast());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertEquals(4046, node0.getCharno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isTry());
      assertEquals(1048575, node0.getLineno());
      assertFalse(node0.isCase());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      boolean boolean2 = node0.isArrayLit();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertEquals((-50), node0.getType());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isName());
      assertFalse(node0.isNot());
      assertEquals((-50), node0.getSourcePosition());
      assertFalse(node0.isVoid());
      assertFalse(node0.isString());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isCast());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertEquals(4046, node0.getCharno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isTry());
      assertEquals(1048575, node0.getLineno());
      assertFalse(node0.isCase());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      boolean boolean3 = node0.isCall();
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertEquals((-50), node0.getType());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isName());
      assertFalse(node0.isNot());
      assertEquals((-50), node0.getSourcePosition());
      assertFalse(node0.isVoid());
      assertFalse(node0.isString());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isCast());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertEquals(4046, node0.getCharno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isTry());
      assertEquals(1048575, node0.getLineno());
      assertFalse(node0.isCase());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Node node0 = Node.newString(1591, "");
      assertNotNull(node0);
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertEquals(1591, node0.getType());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      
      boolean boolean0 = node0.isVoid();
      assertFalse(boolean0);
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertEquals(1591, node0.getType());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      
      node0.setSourceFileForTesting("");
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertEquals(1591, node0.getType());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      
      node0.putIntProp(1591, (-2993));
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertEquals(1591, node0.getType());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      
      SimpleSourceFile simpleSourceFile0 = (SimpleSourceFile)node0.getStaticSourceFile();
      assertNotNull(simpleSourceFile0);
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertEquals(1591, node0.getType());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertEquals("", simpleSourceFile0.toString());
      assertEquals("", simpleSourceFile0.getName());
      assertFalse(simpleSourceFile0.isExtern());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      
      boolean boolean1 = node0.isVar();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertEquals(1591, node0.getType());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isString());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(6);
      assertNotNull(node0);
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWith());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(6, node0.getType());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      
      Node node1 = new Node((-1788), node0, node0, node0, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWith());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(6, node0.getType());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node1.isCatch());
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertFalse(node1.isContinue());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isString());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOr());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssign());
      assertEquals((-1788), node1.getType());
      assertFalse(node1.isDec());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isCast());
      assertFalse(node1.isThrow());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFalse());
      assertFalse(node1.isLabel());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isNumber());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isHook());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertFalse(node1.isWith());
      assertEquals(1, node1.getChildCount());
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      
      Node node2 = node1.cloneNode();
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWith());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(6, node0.getType());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node1.isCatch());
      assertFalse(node1.isNull());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertFalse(node1.isContinue());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isString());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOr());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssign());
      assertEquals((-1788), node1.getType());
      assertFalse(node1.isDec());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isCast());
      assertFalse(node1.isThrow());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFalse());
      assertFalse(node1.isLabel());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIf());
      assertFalse(node1.isNumber());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isHook());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.isFor());
      assertFalse(node1.isWith());
      assertEquals(1, node1.getChildCount());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTrue());
      assertFalse(node2.isFunction());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isCatch());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isIf());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isNE());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNull());
      assertFalse(node2.isIn());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isVar());
      assertFalse(node2.isNew());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isSwitch());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isInc());
      assertFalse(node2.isBlock());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isStringKey());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isThis());
      assertFalse(node2.isParamList());
      assertFalse(node2.isNumber());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isHook());
      assertFalse(node2.isFor());
      assertFalse(node2.isCase());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isTry());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isScript());
      assertFalse(node2.isNot());
      assertFalse(node2.isWith());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isCast());
      assertFalse(node2.isAnd());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssignAdd());
      assertEquals((-1788), node2.getType());
      assertFalse(node2.isAdd());
      assertFalse(node2.isString());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isComma());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetProp());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isAssign());
      assertFalse(node2.isReturn());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isWhile());
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(52, Node.LENGTH);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      
      boolean boolean0 = node0.isContinue();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(boolean0);
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWith());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(6, node0.getType());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      
      Node node3 = node0.removeChildren();
      assertNull(node3);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWith());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(6, node0.getType());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      
      // Undeclared exception!
      try { 
        node1.useSourceInfoFromForTree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Node node0 = Node.newString(0, "is_constant_name");
      assertNotNull(node0);
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      Node node1 = Node.newString("is_constant_name");
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNE());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isTry());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isComma());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCatch());
      assertEquals(40, node1.getType());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertFalse(node1.isContinue());
      assertFalse(node1.isWhile());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isOr());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.hasOneChild());
      assertTrue(node1.isString());
      assertFalse(node1.isName());
      assertFalse(node1.isReturn());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVoid());
      assertFalse(node1.isParamList());
      assertFalse(node1.isScript());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isVar());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isLabel());
      assertEquals(0, node1.getChildCount());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertNotSame(node1, node0);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(57);
      assertNotNull(node_SideEffectFlags0);
      assertEquals(57, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      assertNotNull(node_SideEffectFlags1);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(49, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(49, node_SideEffectFlags1.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      assertNotNull(node_SideEffectFlags2);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(49, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(49, node_SideEffectFlags1.valueOf());
      assertEquals(49, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      assertNotNull(node_SideEffectFlags3);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      assertNotNull(node_SideEffectFlags4);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesThis();
      assertNotNull(node_SideEffectFlags5);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertEquals(0, node_SideEffectFlags4.valueOf());
      assertTrue(node_SideEffectFlags4.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags5.valueOf());
      assertTrue(node_SideEffectFlags5.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.clearAllFlags();
      assertNotNull(node_SideEffectFlags6);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertEquals(31, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags3.valueOf());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags4.valueOf());
      assertFalse(node_SideEffectFlags4.areAllFlagsSet());
      assertFalse(node_SideEffectFlags5.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags5.valueOf());
      assertFalse(node_SideEffectFlags6.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags6.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
      
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags1.setAllFlags();
      assertNotNull(node_SideEffectFlags7);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags7.valueOf());
      assertTrue(node_SideEffectFlags7.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
      
      Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags1.setMutatesArguments();
      assertNotNull(node_SideEffectFlags8);
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertTrue(node_SideEffectFlags8.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags8.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags8, node_SideEffectFlags7);
      
      boolean boolean0 = node0.isUnscopedQualifiedName();
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean0);
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertNotSame(node0, node1);
      
      Node.SideEffectFlags node_SideEffectFlags9 = node_SideEffectFlags5.clearAllFlags();
      assertNotNull(node_SideEffectFlags9);
      assertFalse(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags0.valueOf());
      assertFalse(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags1.valueOf());
      assertEquals(31, node_SideEffectFlags2.valueOf());
      assertFalse(node_SideEffectFlags2.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags3.valueOf());
      assertFalse(node_SideEffectFlags3.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags4.valueOf());
      assertFalse(node_SideEffectFlags4.areAllFlagsSet());
      assertFalse(node_SideEffectFlags5.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags5.valueOf());
      assertFalse(node_SideEffectFlags9.areAllFlagsSet());
      assertEquals(31, node_SideEffectFlags9.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags9);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags5, node_SideEffectFlags6);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags7);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags8);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags5);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags4);
      assertSame(node_SideEffectFlags9, node_SideEffectFlags6);
      
      Node node2 = Node.newNumber((double) 37, 12, 126);
      assertNotNull(node2);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.isHook());
      assertFalse(node2.isThrow());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isBreak());
      assertFalse(node2.isFalse());
      assertEquals(49278, node2.getSourcePosition());
      assertTrue(node2.isNumber());
      assertFalse(node2.isCase());
      assertFalse(node2.isAnd());
      assertFalse(node2.isScript());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isString());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isCast());
      assertFalse(node2.isTry());
      assertFalse(node2.isFor());
      assertFalse(node2.isIf());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isWith());
      assertFalse(node2.isFunction());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isNE());
      assertFalse(node2.isInc());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isIn());
      assertFalse(node2.isVar());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isBlock());
      assertFalse(node2.isNew());
      assertEquals(12, node2.getLineno());
      assertEquals(39, node2.getType());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isContinue());
      assertFalse(node2.isReturn());
      assertFalse(node2.isParamList());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isVoid());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isExprResult());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isAssign());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isLabel());
      assertFalse(node2.isDo());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNull());
      assertFalse(node2.isTrue());
      assertEquals(126, node2.getCharno());
      assertFalse(node2.isOr());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isAdd());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      Object object0 = node0.getProp(40);
      assertNull(object0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertNotSame(node0, node1);
      
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(13);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 13
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Node node0 = new Node(10);
      assertNotNull(node0);
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals(10, node0.getType());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      
      boolean boolean0 = node0.isAdd();
      assertFalse(boolean0);
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals(10, node0.getType());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      
      try { 
        node0.setDouble(3220.866463342);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // BITXOR is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Node node0 = new Node((-50));
      assertNotNull(node0);
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertEquals((-50), node0.getType());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isScript());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      node0.detachChildren();
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertEquals((-50), node0.getType());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isScript());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      node0.setDirectives(hashSet0);
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertEquals((-50), node0.getType());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isScript());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      Node node1 = new Node(1, node0, node0, node0, node0, 4095, 43);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertEquals((-50), node0.getType());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isScript());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node1.isName());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCall());
      assertEquals(43, node1.getCharno());
      assertFalse(node1.isNew());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isFunction());
      assertFalse(node1.isContinue());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isParamList());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isStringKey());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isDo());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVoid());
      assertFalse(node1.isOr());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFalse());
      assertFalse(node1.isGetProp());
      assertEquals(16773163, node1.getSourcePosition());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isScript());
      assertEquals(1, node1.getType());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isIf());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCast());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isTry());
      assertFalse(node1.isFor());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isInc());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isIn());
      assertEquals(4095, node1.getLineno());
      assertFalse(node1.isNE());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      // Undeclared exception!
      try { 
        node0.replaceChildAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Node node0 = Node.newString(2955, "com.google.common.base.CharMatcher$And");
      assertNotNull(node0);
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isIn());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertEquals(2955, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isName());
      assertFalse(node0.isFor());
      assertFalse(node0.isCall());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      // Undeclared exception!
      try { 
        node0.toString(false, true, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2955
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int int0 = 2660;
      Node[] nodeArray0 = new Node[6];
      Node node0 = Node.newNumber((double) 0, (-1540), (-1540));
      assertNotNull(node0);
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAssign());
      assertEquals(39, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.isNumber());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      
      Node node1 = new Node(2601, node0, node0, node0, 0, (-183));
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAssign());
      assertEquals(39, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.isNumber());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node1.isNE());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertTrue(node1.hasOneChild());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertEquals(1, node1.getChildCount());
      assertEquals(2601, node1.getType());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isFor());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isInc());
      assertFalse(node1.isTrue());
      assertFalse(node1.isCatch());
      assertFalse(node1.isVoid());
      assertFalse(node1.isIf());
      assertFalse(node1.isNull());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isVar());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isOr());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAdd());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isComma());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isFunction());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertFalse(node1.isAnd());
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      String string0 = "[p]ooo";
      Node node2 = Node.newString("[p]ooo", 0, 0);
      assertNotNull(node2);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isHook());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isCase());
      assertFalse(node2.isNot());
      assertFalse(node2.isAnd());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isScript());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isAssign());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isReturn());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isLabel());
      assertFalse(node2.isDo());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isAdd());
      assertFalse(node2.isVoid());
      assertFalse(node2.isOr());
      assertFalse(node2.isNull());
      assertFalse(node2.isTrue());
      assertEquals(0, node2.getSourcePosition());
      assertFalse(node2.isName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isCall());
      assertTrue(node2.isString());
      assertFalse(node2.isBlock());
      assertFalse(node2.isNew());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isVar());
      assertFalse(node2.isWhile());
      assertFalse(node2.isContinue());
      assertEquals(0, node2.getLineno());
      assertFalse(node2.isParamList());
      assertFalse(node2.isNumber());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isFor());
      assertFalse(node2.isIf());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isCast());
      assertFalse(node2.isTry());
      assertFalse(node2.isFunction());
      assertFalse(node2.isRegExp());
      assertEquals(40, node2.getType());
      assertFalse(node2.isWith());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInc());
      assertFalse(node2.isIn());
      assertFalse(node2.isNE());
      assertEquals(0, node2.getCharno());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      Node node3 = new Node((-1781), node1, node2, 1, 42);
      assertNotNull(node3);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAssign());
      assertEquals(39, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.isNumber());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node1.isNE());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertTrue(node1.hasOneChild());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertEquals(1, node1.getChildCount());
      assertEquals(2601, node1.getType());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isFor());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isInc());
      assertFalse(node1.isTrue());
      assertFalse(node1.isCatch());
      assertFalse(node1.isVoid());
      assertFalse(node1.isIf());
      assertFalse(node1.isNull());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isVar());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isScript());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isOr());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isAdd());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isComma());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isFunction());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertFalse(node1.isAnd());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isHook());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isCase());
      assertFalse(node2.isNot());
      assertFalse(node2.isAnd());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isScript());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isAssign());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isReturn());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isLabel());
      assertFalse(node2.isDo());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isAdd());
      assertFalse(node2.isVoid());
      assertFalse(node2.isOr());
      assertFalse(node2.isNull());
      assertFalse(node2.isTrue());
      assertEquals(0, node2.getSourcePosition());
      assertFalse(node2.isName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isCall());
      assertTrue(node2.isString());
      assertFalse(node2.isBlock());
      assertFalse(node2.isNew());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isVar());
      assertFalse(node2.isWhile());
      assertFalse(node2.isContinue());
      assertEquals(0, node2.getLineno());
      assertFalse(node2.isParamList());
      assertFalse(node2.isNumber());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isFor());
      assertFalse(node2.isIf());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isCast());
      assertFalse(node2.isTry());
      assertFalse(node2.isFunction());
      assertFalse(node2.isRegExp());
      assertEquals(40, node2.getType());
      assertFalse(node2.isWith());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInc());
      assertFalse(node2.isIn());
      assertFalse(node2.isNE());
      assertEquals(0, node2.getCharno());
      assertFalse(node3.isFalse());
      assertFalse(node3.isBreak());
      assertFalse(node3.isSwitch());
      assertTrue(node3.hasMoreThanOneChild());
      assertFalse(node3.isAnd());
      assertFalse(node3.isIn());
      assertFalse(node3.isInc());
      assertEquals(2, node3.getChildCount());
      assertFalse(node3.isThrow());
      assertFalse(node3.isAssign());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isCast());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isTrue());
      assertFalse(node3.isVoid());
      assertFalse(node3.isOr());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isNot());
      assertFalse(node3.isString());
      assertEquals(1, node3.getLineno());
      assertFalse(node3.isComma());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isDec());
      assertFalse(node3.isReturn());
      assertFalse(node3.isWhile());
      assertFalse(node3.isCall());
      assertFalse(node3.isName());
      assertFalse(node3.isAdd());
      assertFalse(node3.isParamList());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isNull());
      assertEquals((-1781), node3.getType());
      assertFalse(node3.isContinue());
      assertFalse(node3.isDo());
      assertEquals(42, node3.getCharno());
      assertFalse(node3.isFunction());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isNew());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isLabel());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isVar());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isLabelName());
      assertEquals(4138, node3.getSourcePosition());
      assertFalse(node3.isNumber());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isIf());
      assertFalse(node3.isNE());
      assertFalse(node3.isCase());
      assertFalse(node3.isWith());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isScript());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isCatch());
      assertFalse(node3.isThis());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isTry());
      assertFalse(node3.isHook());
      assertFalse(node3.isBlock());
      assertFalse(node3.isFor());
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      Node node4 = null;
      try {
        node4 = new Node(0, node3, node0, node0, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Node node0 = Node.newString(0, "is_constant_name");
      assertNotNull(node0);
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThis());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      
      Node node1 = Node.newString("is_constant_name");
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertTrue(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCall());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNull());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNot());
      assertEquals(40, node1.getType());
      assertFalse(node1.isTrue());
      assertFalse(node1.isCast());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isThrow());
      assertFalse(node1.isIn());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isCatch());
      assertFalse(node1.isArrayLit());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isWith());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isFor());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertNotSame(node1, node0);
      
      Node node2 = new Node(0, node0, node0, node1);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThis());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertTrue(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCall());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNull());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNot());
      assertEquals(40, node1.getType());
      assertFalse(node1.isTrue());
      assertFalse(node1.isCast());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isThrow());
      assertFalse(node1.isIn());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isCatch());
      assertFalse(node1.isArrayLit());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isWith());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isFor());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertEquals(0, node2.getType());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isHook());
      assertFalse(node2.isInc());
      assertFalse(node2.isString());
      assertFalse(node2.isFalse());
      assertFalse(node2.isCase());
      assertFalse(node2.isThrow());
      assertFalse(node2.isGetProp());
      assertEquals(2, node2.getChildCount());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNot());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isAnd());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isTry());
      assertFalse(node2.isScript());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isCast());
      assertFalse(node2.isWith());
      assertFalse(node2.isFunction());
      assertFalse(node2.isFor());
      assertFalse(node2.hasOneChild());
      assertTrue(node2.hasChildren());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isThis());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertFalse(node2.isIn());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isBlock());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertFalse(node2.isVar());
      assertFalse(node2.isWhile());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isContinue());
      assertFalse(node2.isNumber());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isParamList());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTrue());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isOr());
      assertFalse(node2.isReturn());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isComma());
      assertFalse(node2.isDec());
      assertFalse(node2.isName());
      assertFalse(node2.isBreak());
      assertFalse(node2.isCall());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isNull());
      assertTrue(node2.hasMoreThanOneChild());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDelProp());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      boolean boolean0 = node2.isFromExterns();
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(boolean0);
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThis());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertTrue(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertFalse(node1.isVar());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCall());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNull());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNot());
      assertEquals(40, node1.getType());
      assertFalse(node1.isTrue());
      assertFalse(node1.isCast());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isThrow());
      assertFalse(node1.isIn());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isCatch());
      assertFalse(node1.isArrayLit());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isWith());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isFor());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertEquals(0, node2.getType());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isHook());
      assertFalse(node2.isInc());
      assertFalse(node2.isString());
      assertFalse(node2.isFalse());
      assertFalse(node2.isCase());
      assertFalse(node2.isThrow());
      assertFalse(node2.isGetProp());
      assertEquals(2, node2.getChildCount());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNot());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isAnd());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isTry());
      assertFalse(node2.isScript());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isCast());
      assertFalse(node2.isWith());
      assertFalse(node2.isFunction());
      assertFalse(node2.isFor());
      assertFalse(node2.hasOneChild());
      assertTrue(node2.hasChildren());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isThis());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertFalse(node2.isIn());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isBlock());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertFalse(node2.isVar());
      assertFalse(node2.isWhile());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isContinue());
      assertFalse(node2.isNumber());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isParamList());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTrue());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isOr());
      assertFalse(node2.isReturn());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isComma());
      assertFalse(node2.isDec());
      assertFalse(node2.isName());
      assertFalse(node2.isBreak());
      assertFalse(node2.isCall());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isNull());
      assertTrue(node2.hasMoreThanOneChild());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDelProp());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      
      Node node3 = Node.newString("REFERENCE_ERROR_TYPE", 50, 47);
      assertNotNull(node3);
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.isOr());
      assertFalse(node3.isLabel());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isReturn());
      assertFalse(node3.isAssign());
      assertFalse(node3.isDo());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isContinue());
      assertFalse(node3.isWhile());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isDec());
      assertTrue(node3.isString());
      assertFalse(node3.isBlock());
      assertFalse(node3.isScript());
      assertFalse(node3.isCast());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isNot());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isAnd());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isNumber());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isCatch());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isWith());
      assertFalse(node3.isFalse());
      assertEquals(40, node3.getType());
      assertFalse(node3.isThrow());
      assertFalse(node3.isThis());
      assertFalse(node3.isHook());
      assertFalse(node3.isFunction());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isInc());
      assertFalse(node3.isIf());
      assertFalse(node3.isNE());
      assertFalse(node3.isIn());
      assertFalse(node3.isCase());
      assertFalse(node3.isFor());
      assertFalse(node3.isTry());
      assertEquals(50, node3.getLineno());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isParamList());
      assertFalse(node3.isBreak());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isVar());
      assertEquals(0, node3.getChildCount());
      assertEquals(204847, node3.getSourcePosition());
      assertEquals(47, node3.getCharno());
      assertFalse(node3.isComma());
      assertFalse(node3.isAdd());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isCall());
      assertFalse(node3.isVoid());
      assertFalse(node3.isNew());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isName());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isNull());
      assertFalse(node3.isTrue());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotSame(node3, node0);
      assertNotSame(node3, node1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Node node0 = new Node((-1143), (-1143), 2374);
      assertNotNull(node0);
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertEquals((-1143), node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      
      boolean boolean0 = node0.isOptionalArg();
      assertFalse(boolean0);
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertEquals((-1143), node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      
      Node node1 = new Node(112, node0, 0, 2374);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertEquals((-1143), node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isCast());
      assertFalse(node1.isLabel());
      assertFalse(node1.isReturn());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertTrue(node1.isDefaultCase());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isScript());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isNumber());
      assertFalse(node1.isThis());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInstanceOf());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInc());
      assertEquals(2374, node1.getCharno());
      assertFalse(node1.isIn());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertEquals(2374, node1.getSourcePosition());
      assertFalse(node1.isName());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isComma());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertEquals(112, node1.getType());
      assertFalse(node1.isOr());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      boolean boolean1 = node1.mayMutateArguments();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertEquals((-1143), node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node1.isDec());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isCast());
      assertFalse(node1.isLabel());
      assertFalse(node1.isReturn());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertTrue(node1.isDefaultCase());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isScript());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isNumber());
      assertFalse(node1.isThis());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInstanceOf());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isFalse());
      assertFalse(node1.isInc());
      assertEquals(2374, node1.getCharno());
      assertFalse(node1.isIn());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isBreak());
      assertFalse(node1.isNull());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertEquals(2374, node1.getSourcePosition());
      assertFalse(node1.isName());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isComma());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertEquals(112, node1.getType());
      assertFalse(node1.isOr());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      
      // Undeclared exception!
      try { 
        node0.addChildBefore(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Node node0 = Node.newString(";b", (-1169), (-1169));
      assertNotNull(node0);
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertEquals(40, node0.getType());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      int int0 = node0.getChangeTime();
      assertEquals(0, int0);
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertEquals(40, node0.getType());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      boolean boolean0 = node0.mayMutateGlobalStateOrThrow();
      assertTrue(boolean0);
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSetterDef());
      assertEquals(40, node0.getType());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Node node0 = new Node(3336);
      assertNotNull(node0);
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isComma());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertEquals(3336, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getLineno());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      
      Node node1 = new Node(0, node0, node0, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isComma());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertEquals(3336, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getLineno());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isScript());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isVar());
      assertFalse(node1.isHook());
      assertFalse(node1.isAdd());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.isDo());
      assertFalse(node1.isCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isLabel());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isFor());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isCatch());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertEquals(0, node1.getType());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isIf());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertFalse(node1.isThrow());
      assertFalse(node1.isCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isContinue());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAnd());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      
      // Undeclared exception!
      try { 
        node1.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Node node0 = Node.newString("~", 1602, 1602);
      assertNotNull(node0);
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertEquals(1602, node0.getCharno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertEquals(6563394, node0.getSourcePosition());
      assertFalse(node0.isBlock());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCatch());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(1602, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNull());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetProp());
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      
      Node node1 = Node.newString(4095, "jrMc<6");
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAdd());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isOr());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isCase());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isIf());
      assertFalse(node1.isCast());
      assertEquals((-1), node1.getLineno());
      assertEquals(4095, node1.getType());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNE());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isInc());
      assertFalse(node1.isFunction());
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertNotSame(node1, node0);
      
      Node node2 = new Node(1602, node0, node1, 31, (-4999));
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertEquals(1602, node0.getCharno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertEquals(6563394, node0.getSourcePosition());
      assertFalse(node0.isBlock());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCatch());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(1602, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNull());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetProp());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAdd());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isOr());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isCase());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isIf());
      assertFalse(node1.isCast());
      assertEquals((-1), node1.getLineno());
      assertEquals(4095, node1.getType());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNE());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isInc());
      assertFalse(node1.isFunction());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDo());
      assertFalse(node2.isBlock());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isReturn());
      assertFalse(node2.isLabel());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isNull());
      assertFalse(node2.isVar());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isOr());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isAdd());
      assertFalse(node2.isWith());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNumber());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isThis());
      assertFalse(node2.isParamList());
      assertFalse(node2.isFor());
      assertFalse(node2.isStringKey());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isTry());
      assertFalse(node2.isScript());
      assertFalse(node2.isString());
      assertFalse(node2.isCase());
      assertTrue(node2.hasMoreThanOneChild());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isHook());
      assertFalse(node2.isFalse());
      assertTrue(node2.hasChildren());
      assertEquals(1602, node2.getType());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isThrow());
      assertFalse(node2.isIn());
      assertFalse(node2.isInc());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isNot());
      assertFalse(node2.isAnd());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTrue());
      assertEquals(2, node2.getChildCount());
      assertFalse(node2.isVoid());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isFunction());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCast());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isComma());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isGetProp());
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      
      boolean boolean0 = node2.isNull();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(boolean0);
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertEquals(1602, node0.getCharno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertEquals(6563394, node0.getSourcePosition());
      assertFalse(node0.isBlock());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCatch());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(1602, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNull());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetProp());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCall());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAdd());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isTry());
      assertFalse(node1.isBlock());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isOr());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isCase());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isString());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isIf());
      assertFalse(node1.isCast());
      assertEquals((-1), node1.getLineno());
      assertEquals(4095, node1.getType());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNE());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isInc());
      assertFalse(node1.isFunction());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDo());
      assertFalse(node2.isBlock());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isReturn());
      assertFalse(node2.isLabel());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isNull());
      assertFalse(node2.isVar());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isOr());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isAdd());
      assertFalse(node2.isWith());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNumber());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isThis());
      assertFalse(node2.isParamList());
      assertFalse(node2.isFor());
      assertFalse(node2.isStringKey());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isTry());
      assertFalse(node2.isScript());
      assertFalse(node2.isString());
      assertFalse(node2.isCase());
      assertTrue(node2.hasMoreThanOneChild());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isHook());
      assertFalse(node2.isFalse());
      assertTrue(node2.hasChildren());
      assertEquals(1602, node2.getType());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isThrow());
      assertFalse(node2.isIn());
      assertFalse(node2.isInc());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isNot());
      assertFalse(node2.isAnd());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTrue());
      assertEquals(2, node2.getChildCount());
      assertFalse(node2.isVoid());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isFunction());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCast());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isComma());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isGetProp());
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = 1832;
      Node node0 = new Node((-972), 1832, (-972));
      assertNotNull(node0);
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDec());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertEquals((-972), node0.getType());
      assertFalse(node0.isOr());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVar());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isVoid());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      Node node1 = null;
      try {
        node1 = new Node(53, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Node node0 = new Node(0);
      assertNotNull(node0);
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWhile());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      boolean boolean0 = node0.isOptionalArg();
      assertFalse(boolean0);
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getType());
      assertFalse(node0.isString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWhile());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      // Undeclared exception!
      try { 
        node0.setDouble(3220.866463342);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = 1916;
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newNumber((-1782.2078329), 1916, 1916);
      assertNotNull(node0);
      assertFalse(node0.isVoid());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCatch());
      assertTrue(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isNull());
      assertFalse(node0.isSwitch());
      assertEquals(7849852, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertEquals(1916, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isOr());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isAssign());
      assertEquals(39, node0.getType());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertEquals(1916, node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      boolean boolean0 = node0.mayMutateGlobalStateOrThrow();
      assertTrue(boolean0);
      assertFalse(node0.isVoid());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCatch());
      assertTrue(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isNull());
      assertFalse(node0.isSwitch());
      assertEquals(7849852, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertEquals(1916, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isOr());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isAssign());
      assertEquals(39, node0.getType());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertEquals(1916, node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      nodeArray0[0] = node0;
      node0.setSourceEncodedPositionForTree(8287);
      assertFalse(node0.isVoid());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCatch());
      assertTrue(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isNull());
      assertFalse(node0.isSwitch());
      assertEquals(8287, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertEquals(2, node0.getLineno());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isOr());
      assertEquals(95, node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isAssign());
      assertEquals(39, node0.getType());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      Node node1 = new Node(1916, nodeArray0, 2, 37);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isIf());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNE());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isEmpty());
      assertEquals(1916, node1.getType());
      assertEquals(8229, node1.getSourcePosition());
      assertFalse(node1.isCall());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNull());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNot());
      assertFalse(node1.isReturn());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isComma());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isCast());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isLabelName());
      assertEquals(37, node1.getCharno());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isContinue());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isVar());
      assertFalse(node1.isHook());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSwitch());
      assertEquals(2, node1.getLineno());
      assertFalse(node1.isParamList());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isScript());
      assertFalse(node1.isThis());
      assertFalse(node1.isNumber());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, nodeArray0.length);
      
      // Undeclared exception!
      try { 
        node1.addChildToBack(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = 0;
      Node node0 = new Node(79);
      assertNotNull(node0);
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertEquals(79, node0.getType());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isWith());
      assertFalse(node0.isString());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      assertNotNull(node_AncestorIterable0);
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertEquals(79, node0.getType());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isWith());
      assertFalse(node0.isString());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      Node node1 = new Node(79);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isContinue());
      assertFalse(node1.isWhile());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isOr());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isBlock());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isReturn());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVoid());
      assertEquals(79, node1.getType());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertFalse(node1.isScript());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isVar());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertFalse(node1.isBreak());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTry());
      assertFalse(node1.isThis());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isComma());
      assertFalse(node1.isWith());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCatch());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFunction());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      node0.setSourceFileForTesting("i|.Y5huTdI.9[.FA");
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertEquals(79, node0.getType());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isWith());
      assertFalse(node0.isString());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertNotSame(node0, node1);
      
      node1.setJSType((JSType) null);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isContinue());
      assertFalse(node1.isWhile());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isOr());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isBlock());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isReturn());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVoid());
      assertEquals(79, node1.getType());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertFalse(node1.isScript());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isVar());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertFalse(node1.isBreak());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTry());
      assertFalse(node1.isThis());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isComma());
      assertFalse(node1.isWith());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCatch());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFunction());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertNotSame(node1, node0);
      
      Node node2 = new Node((-3302), node1, node1);
      assertNotNull(node2);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node1.isContinue());
      assertFalse(node1.isWhile());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isOr());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isBlock());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isReturn());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVoid());
      assertEquals(79, node1.getType());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertFalse(node1.isScript());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isVar());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertFalse(node1.isBreak());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTry());
      assertFalse(node1.isThis());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isComma());
      assertFalse(node1.isWith());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCatch());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFunction());
      assertFalse(node2.isIn());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDelProp());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isHook());
      assertFalse(node2.isTry());
      assertFalse(node2.isFor());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isGetterDef());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isCase());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isString());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isAnd());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isThis());
      assertFalse(node2.isFunction());
      assertFalse(node2.isWith());
      assertFalse(node2.isFalse());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertFalse(node2.isThrow());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isWhile());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCast());
      assertFalse(node2.isBlock());
      assertEquals((-3302), node2.getType());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isScript());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isNumber());
      assertFalse(node2.isNot());
      assertFalse(node2.isParamList());
      assertFalse(node2.isBreak());
      assertFalse(node2.isVoid());
      assertFalse(node2.isComma());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCall());
      assertFalse(node2.isVar());
      assertFalse(node2.isName());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNull());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isDo());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      node2.setType(79);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node1.isContinue());
      assertFalse(node1.isWhile());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isOr());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isBlock());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isReturn());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVoid());
      assertEquals(79, node1.getType());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertFalse(node1.isScript());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isVar());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertFalse(node1.isBreak());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTry());
      assertFalse(node1.isThis());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isComma());
      assertFalse(node1.isWith());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCatch());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFunction());
      assertFalse(node2.isIn());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDelProp());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isHook());
      assertFalse(node2.isTry());
      assertFalse(node2.isFor());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isGetterDef());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isCase());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isString());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isAnd());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isThis());
      assertFalse(node2.isFunction());
      assertFalse(node2.isWith());
      assertFalse(node2.isFalse());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertFalse(node2.isThrow());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isWhile());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCast());
      assertFalse(node2.isBlock());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isScript());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isNumber());
      assertFalse(node2.isNot());
      assertFalse(node2.isParamList());
      assertFalse(node2.isBreak());
      assertFalse(node2.isVoid());
      assertFalse(node2.isComma());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCall());
      assertFalse(node2.isVar());
      assertFalse(node2.isName());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNull());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isDo());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertEquals(79, node2.getType());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      
      node2.putIntProp(44, 56);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node1.isContinue());
      assertFalse(node1.isWhile());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isNumber());
      assertFalse(node1.isOr());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isBlock());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isReturn());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVoid());
      assertEquals(79, node1.getType());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertFalse(node1.isScript());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isVar());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertFalse(node1.isBreak());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTry());
      assertFalse(node1.isThis());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isHook());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isComma());
      assertFalse(node1.isWith());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCatch());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNot());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFunction());
      assertFalse(node2.isIn());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDelProp());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isHook());
      assertFalse(node2.isTry());
      assertFalse(node2.isFor());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isGetterDef());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isCase());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isString());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isAnd());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isThis());
      assertFalse(node2.isFunction());
      assertFalse(node2.isWith());
      assertFalse(node2.isFalse());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertFalse(node2.isThrow());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isWhile());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCast());
      assertFalse(node2.isBlock());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isScript());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isNumber());
      assertFalse(node2.isNot());
      assertFalse(node2.isParamList());
      assertFalse(node2.isBreak());
      assertFalse(node2.isVoid());
      assertFalse(node2.isComma());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCall());
      assertFalse(node2.isVar());
      assertFalse(node2.isName());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNull());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isDo());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertEquals(79, node2.getType());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      
      Node node3 = node0.cloneNode();
      assertNotNull(node3);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertEquals(79, node0.getType());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isWith());
      assertFalse(node0.isString());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isGetElem());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isLabelName());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isReturn());
      assertFalse(node3.isLabel());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isCast());
      assertFalse(node3.isContinue());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isDec());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isAssign());
      assertFalse(node3.isWhile());
      assertFalse(node3.isScript());
      assertFalse(node3.isAnd());
      assertFalse(node3.isObjectLit());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isNumber());
      assertFalse(node3.isNot());
      assertFalse(node3.isBreak());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isNull());
      assertFalse(node3.isParamList());
      assertFalse(node3.isCall());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isName());
      assertFalse(node3.isVar());
      assertFalse(node3.isComma());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isNew());
      assertFalse(node3.isVoid());
      assertFalse(node3.isDo());
      assertEquals(79, node3.getType());
      assertFalse(node3.isAdd());
      assertFalse(node3.isTrue());
      assertFalse(node3.isOr());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isIf());
      assertFalse(node3.isNE());
      assertFalse(node3.isFor());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isFunction());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isString());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isCase());
      assertFalse(node3.isTry());
      assertFalse(node3.isDebugger());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isThrow());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isHook());
      assertFalse(node3.isBlock());
      assertFalse(node3.isCatch());
      assertFalse(node3.isThis());
      assertFalse(node3.isFalse());
      assertFalse(node3.isWith());
      assertFalse(node3.isInc());
      assertFalse(node3.isIn());
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotSame(node0, node2);
      assertNotSame(node0, node3);
      assertNotSame(node0, node1);
      assertNotSame(node3, node2);
      assertNotSame(node3, node1);
      assertNotSame(node3, node0);
      
      // Undeclared exception!
      try { 
        node3.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Stack<JSType> stack0 = new Stack<JSType>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      assertNotNull(node0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(node0.isBreak());
      assertEquals(83, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isScript());
      assertTrue(node0.isParamList());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      Node node1 = new Node(54, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(node0.isBreak());
      assertEquals(83, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isScript());
      assertTrue(node0.isParamList());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node1.isCatch());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isString());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOr());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssign());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isObjectLit());
      assertEquals(54, node1.getType());
      assertFalse(node1.isNot());
      assertFalse(node1.isCast());
      assertFalse(node1.isThrow());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFalse());
      assertFalse(node1.isLabel());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIf());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isHook());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWith());
      assertEquals(1, node1.getChildCount());
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      
      Node node2 = node1.srcrefTree(node0);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(node0.isBreak());
      assertEquals(83, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isScript());
      assertTrue(node0.isParamList());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node1.isCatch());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isString());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOr());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssign());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isObjectLit());
      assertEquals(54, node1.getType());
      assertFalse(node1.isNot());
      assertFalse(node1.isCast());
      assertFalse(node1.isThrow());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFalse());
      assertFalse(node1.isLabel());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIf());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isHook());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWith());
      assertEquals(1, node1.getChildCount());
      assertFalse(node2.isInc());
      assertFalse(node2.isFalse());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isThrow());
      assertFalse(node2.isHook());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isInstanceOf());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isIn());
      assertFalse(node2.isBreak());
      assertEquals(54, node2.getType());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isCast());
      assertFalse(node2.isVoid());
      assertFalse(node2.isGetElem());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isFunction());
      assertFalse(node2.isReturn());
      assertFalse(node2.isContinue());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isString());
      assertFalse(node2.isNot());
      assertFalse(node2.isAnd());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isDebugger());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isCall());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isWhile());
      assertFalse(node2.isDo());
      assertFalse(node2.isVar());
      assertFalse(node2.isBlock());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isOr());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isCatch());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isName());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNull());
      assertFalse(node2.isTry());
      assertFalse(node2.isScript());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isWith());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isFor());
      assertFalse(node2.isLabel());
      assertFalse(node2.isCase());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isNumber());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertEquals((-1), node2.getCharno());
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertSame(node1, node2);
      assertNotSame(node1, node0);
      assertSame(node2, node1);
      assertNotSame(node2, node0);
      
      InputId inputId0 = new InputId("");
      assertNotNull(inputId0);
      assertEquals("", inputId0.getIdName());
      
      node1.setInputId(inputId0);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(node0.isBreak());
      assertEquals(83, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isScript());
      assertTrue(node0.isParamList());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node1.isCatch());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isString());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOr());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssign());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isObjectLit());
      assertEquals(54, node1.getType());
      assertFalse(node1.isNot());
      assertFalse(node1.isCast());
      assertFalse(node1.isThrow());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFalse());
      assertFalse(node1.isLabel());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIf());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isNE());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isHook());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWith());
      assertEquals(1, node1.getChildCount());
      assertEquals("", inputId0.getIdName());
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertSame(node1, node2);
      assertNotSame(node1, node0);
      
      node0.setWasEmptyNode(true);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(node0.isBreak());
      assertEquals(83, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isScript());
      assertTrue(node0.isParamList());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      
      // Undeclared exception!
      try { 
        node1.getExistingIntProp(39);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 39
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Node node0 = Node.newString("he|C9EP?c");
      assertNotNull(node0);
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertTrue(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      
      Node node1 = Node.newString(2, "*Rf!DWs-`<c30ufm{", 1, (-355));
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertEquals(2, node1.getType());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isOr());
      assertFalse(node1.isCast());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isFunction());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isInc());
      assertFalse(node1.isIf());
      assertFalse(node1.isTry());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isLabelName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isWith());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabel());
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertNotSame(node1, node0);
      
      Node node2 = new Node(111, node0, node0, node1, 52, 57);
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertTrue(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertEquals(2, node1.getType());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isOr());
      assertFalse(node1.isCast());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isFunction());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isInc());
      assertFalse(node1.isIf());
      assertFalse(node1.isTry());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isLabelName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isWith());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabel());
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(node2.isDec());
      assertFalse(node2.isNumber());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isAssign());
      assertFalse(node2.isReturn());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isCast());
      assertFalse(node2.isContinue());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isScript());
      assertEquals(52, node2.getLineno());
      assertFalse(node2.isWith());
      assertFalse(node2.isWhile());
      assertFalse(node2.isObjectLit());
      assertTrue(node2.isCase());
      assertFalse(node2.isBlock());
      assertFalse(node2.isNot());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.isNull());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isComma());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertTrue(node2.hasMoreThanOneChild());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isTrue());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isVar());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isAdd());
      assertFalse(node2.isDo());
      assertFalse(node2.isNew());
      assertFalse(node2.isIf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNE());
      assertFalse(node2.isFor());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isVoid());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isString());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isHook());
      assertEquals(57, node2.getCharno());
      assertEquals(111, node2.getType());
      assertFalse(node2.isTry());
      assertEquals(213049, node2.getSourcePosition());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertFalse(node2.isThis());
      assertEquals(2, node2.getChildCount());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertFalse(node2.isAnd());
      assertFalse(node2.isFunction());
      assertFalse(node2.isIn());
      assertFalse(node2.isInc());
      assertFalse(node2.isSetterDef());
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      node2.setType(32);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertTrue(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertEquals(2, node1.getType());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNull());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isOr());
      assertFalse(node1.isCast());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isFunction());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isBreak());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isInc());
      assertFalse(node1.isIf());
      assertFalse(node1.isTry());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isLabelName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isWith());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabel());
      assertFalse(node1.isCase());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getCharno());
      assertFalse(node2.isDec());
      assertFalse(node2.isNumber());
      assertFalse(node2.isAssign());
      assertFalse(node2.isReturn());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isCast());
      assertFalse(node2.isContinue());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isScript());
      assertEquals(52, node2.getLineno());
      assertFalse(node2.isWith());
      assertFalse(node2.isWhile());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isBlock());
      assertFalse(node2.isNot());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.isNull());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isComma());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertTrue(node2.hasMoreThanOneChild());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isTrue());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isVar());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isAdd());
      assertFalse(node2.isDo());
      assertFalse(node2.isNew());
      assertFalse(node2.isIf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNE());
      assertFalse(node2.isFor());
      assertTrue(node2.hasChildren());
      assertEquals(32, node2.getType());
      assertFalse(node2.isVoid());
      assertTrue(node2.isTypeOf());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isString());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isHook());
      assertEquals(57, node2.getCharno());
      assertFalse(node2.isTry());
      assertFalse(node2.isCase());
      assertEquals(213049, node2.getSourcePosition());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertFalse(node2.isThis());
      assertEquals(2, node2.getChildCount());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isCatch());
      assertFalse(node2.isAnd());
      assertFalse(node2.isFunction());
      assertFalse(node2.isIn());
      assertFalse(node2.isInc());
      assertFalse(node2.isSetterDef());
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Node node0 = new Node(70, 70, 70);
      assertNotNull(node0);
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertEquals(70, node0.getType());
      assertFalse(node0.isDec());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertEquals(286790, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBlock());
      assertEquals(70, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertEquals(70, node0.getCharno());
      assertFalse(node0.isIn());
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      boolean boolean0 = node0.isTrue();
      assertFalse(boolean0);
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertEquals(70, node0.getType());
      assertFalse(node0.isDec());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertEquals(286790, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isBlock());
      assertEquals(70, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertEquals(70, node0.getCharno());
      assertFalse(node0.isIn());
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      // Undeclared exception!
      try { 
        node0.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 70
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int int0 = (-3253);
      Node node0 = Node.newString("cc?J`k@O1<", (-3253), 1150);
      assertNotNull(node0);
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertEquals(40, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIn());
      assertFalse(node0.isTrue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node1 = null;
      try {
        node1 = new Node(8388608, nodeArray0, 2562, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      // Undeclared exception!
      try { 
        Node.newString((String) null, 2114, 2114);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Node node0 = Node.newNumber(1418.29258, 2066, 2066);
      assertNotNull(node0);
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertEquals(39, node0.getType());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCast());
      assertEquals(8464402, node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isIf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertEquals(2066, node0.getLineno());
      assertFalse(node0.isInc());
      assertTrue(node0.isNumber());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFalse());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertEquals(2066, node0.getCharno());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNull());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      
      Node node1 = new Node(2066, node0, 54, 50);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertEquals(39, node0.getType());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCast());
      assertEquals(8464402, node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isIf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertEquals(2066, node0.getLineno());
      assertFalse(node0.isInc());
      assertTrue(node0.isNumber());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFalse());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertEquals(2066, node0.getCharno());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNull());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node1.isVar());
      assertFalse(node1.isName());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isCall());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isCast());
      assertEquals(54, node1.getLineno());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isAnd());
      assertFalse(node1.isIn());
      assertFalse(node1.isContinue());
      assertFalse(node1.isSetterDef());
      assertEquals(50, node1.getCharno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isBreak());
      assertFalse(node1.isString());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isCase());
      assertEquals(221234, node1.getSourcePosition());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isWith());
      assertFalse(node1.isFor());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertEquals(2066, node1.getType());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isOr());
      assertFalse(node1.isTrue());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLabel());
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      // Undeclared exception!
      try { 
        node1.addChildBefore(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int int0 = 2335;
      Node node0 = null;
      Node node1 = null;
      try {
        node1 = new Node(2335, (Node) null, 2335, 2335);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int int0 = 405;
      Node[] nodeArray0 = new Node[2];
      int int1 = 2438;
      Node node0 = Node.newString("");
      assertNotNull(node0);
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isAdd());
      assertTrue(node0.isString());
      assertFalse(node0.isCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ObjectType objectType0 = ObjectType.cast((JSType) null);
      assertNull(objectType0);
      
      TemplateType templateType0 = JSType.toMaybeTemplateType((JSType) null);
      assertNull(templateType0);
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createEnumType("", node0, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-1788), nodeArray0, (-1788), 6);
      assertNotNull(node0);
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertEquals((-1788), node0.getType());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, nodeArray0.length);
      
      Node node1 = new Node((-1788), node0, node0, node0, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertEquals((-1788), node0.getType());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBreak());
      assertEquals((-1788), node1.getType());
      assertFalse(node1.isWhile());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNull());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTrue());
      assertFalse(node1.isOr());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isString());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThis());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, nodeArray0.length);
      
      Node node2 = node1.cloneNode();
      assertNotNull(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertEquals((-1788), node0.getType());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBreak());
      assertEquals((-1788), node1.getType());
      assertFalse(node1.isWhile());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNull());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTrue());
      assertFalse(node1.isOr());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isString());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThis());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node2.isNull());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isParamList());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isVar());
      assertFalse(node2.isCall());
      assertFalse(node2.isCatch());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNew());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDo());
      assertFalse(node2.isOr());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isAdd());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDec());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isCast());
      assertFalse(node2.isReturn());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isAssign());
      assertFalse(node2.isFunction());
      assertFalse(node2.isContinue());
      assertEquals((-1788), node2.getType());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isWhile());
      assertFalse(node2.isAnd());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isString());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isThrow());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isHook());
      assertFalse(node2.isFalse());
      assertFalse(node2.isWith());
      assertFalse(node2.isInc());
      assertFalse(node2.isIn());
      assertFalse(node2.isNumber());
      assertFalse(node2.isNE());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isFor());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isIf());
      assertFalse(node2.isAssignAdd());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isLabel());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isScript());
      assertFalse(node2.isRegExp());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isCase());
      assertFalse(node2.isBlock());
      assertFalse(node2.isTry());
      assertFalse(node2.isSwitch());
      assertFalse(node2.hasOneChild());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertEquals(0, nodeArray0.length);
      
      StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
      assertNull(staticSourceFile0);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertEquals((-1788), node0.getType());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertEquals(0, nodeArray0.length);
      
      node1.setStaticSourceFile((StaticSourceFile) null);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertEquals((-1788), node0.getType());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBreak());
      assertEquals((-1788), node1.getType());
      assertFalse(node1.isWhile());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNull());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTrue());
      assertFalse(node1.isOr());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isString());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThis());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertEquals(0, nodeArray0.length);
      
      boolean boolean0 = node2.isEquivalentTo(node0);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertTrue(boolean0);
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertEquals((-1788), node0.getType());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBreak());
      assertEquals((-1788), node1.getType());
      assertFalse(node1.isWhile());
      assertFalse(node1.isComma());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNull());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTrue());
      assertFalse(node1.isOr());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFor());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isCase());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isString());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isHook());
      assertFalse(node1.isInc());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isBlock());
      assertFalse(node1.isThis());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node2.isNull());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isParamList());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isVar());
      assertFalse(node2.isCall());
      assertFalse(node2.isCatch());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNew());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDo());
      assertFalse(node2.isOr());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isAdd());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDec());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isCast());
      assertFalse(node2.isReturn());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isAssign());
      assertFalse(node2.isFunction());
      assertFalse(node2.isContinue());
      assertEquals((-1788), node2.getType());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isWhile());
      assertFalse(node2.isAnd());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isString());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isThrow());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isHook());
      assertFalse(node2.isFalse());
      assertFalse(node2.isWith());
      assertFalse(node2.isInc());
      assertFalse(node2.isIn());
      assertFalse(node2.isNumber());
      assertFalse(node2.isNE());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isFor());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isIf());
      assertFalse(node2.isAssignAdd());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isLabel());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isScript());
      assertFalse(node2.isRegExp());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isCase());
      assertFalse(node2.isBlock());
      assertFalse(node2.isTry());
      assertFalse(node2.isSwitch());
      assertFalse(node2.hasOneChild());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertEquals(0, nodeArray0.length);
      
      Node node3 = node0.removeChildren();
      assertNull(node3);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertEquals((-1788), node0.getType());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertEquals(0, nodeArray0.length);
      
      // Undeclared exception!
      try { 
        node1.useSourceInfoFromForTree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertNotNull(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Stack<JSType> stack0 = new Stack<JSType>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      assertNotNull(node0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isParamList());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNull());
      assertEquals(83, node0.getType());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      assertNotNull(node_NodeMismatch0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isParamList());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNull());
      assertEquals(83, node0.getType());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      assertNotNull(node_SideEffectFlags0);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      
      simpleErrorReporter0.warning("com.google.common.collect.ImmutableList", (String) null, 38, 0);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      assertNotNull(node_SideEffectFlags1);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertTrue(node_SideEffectFlags1.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags1.valueOf());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesArguments();
      assertNotNull(node_SideEffectFlags2);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags2.valueOf());
      assertTrue(node_SideEffectFlags2.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
      
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setAllFlags();
      assertNotNull(node_SideEffectFlags3);
      assertEquals(0, node_SideEffectFlags0.valueOf());
      assertTrue(node_SideEffectFlags0.areAllFlagsSet());
      assertEquals(0, node_SideEffectFlags3.valueOf());
      assertTrue(node_SideEffectFlags3.areAllFlagsSet());
      assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
      assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
      assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
      
      Node node1 = node0.getFirstChild();
      assertNull(node1);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isParamList());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNull());
      assertEquals(83, node0.getType());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Node node0 = Node.newString("duplicate child", 2, 2);
      assertNotNull(node0);
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertTrue(node0.isString());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertEquals(2, node0.getLineno());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertEquals(2, node0.getCharno());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertEquals(8194, node0.getSourcePosition());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertEquals(40, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      Node node1 = new Node(2, node0, node0, node0, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertTrue(node0.isString());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertEquals(2, node0.getLineno());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertEquals(2, node0.getCharno());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertEquals(8194, node0.getSourcePosition());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertEquals(40, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isNumber());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDo());
      assertFalse(node1.isDec());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isExprResult());
      assertEquals(2, node1.getType());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isNull());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThrow());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isString());
      assertFalse(node1.isCast());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isAnd());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isInc());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isTrue());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWith());
      assertFalse(node1.isVar());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTry());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isScript());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      
      // Undeclared exception!
      try { 
        node1.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Node node0 = Node.newString(44, "sg_{;L{935r");
      assertNotNull(node0);
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isComma());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertTrue(node0.isTrue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertEquals(44, node0.getType());
      assertFalse(node0.isThrow());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
      assertNull(staticSourceFile0);
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isComma());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertTrue(node0.isTrue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertEquals(44, node0.getType());
      assertFalse(node0.isThrow());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      boolean boolean0 = node0.isArrayLit();
      assertFalse(boolean0);
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isComma());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertTrue(node0.isTrue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertEquals(44, node0.getType());
      assertFalse(node0.isThrow());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertNotNull(node0);
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isOr());
      assertTrue(node0.isNumber());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isDec());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(39, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      
      Node node1 = Node.newString(30, "");
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertTrue(node1.isNew());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isString());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNot());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetProp());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFor());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isIf());
      assertFalse(node1.isCast());
      assertFalse(node1.isCatch());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIn());
      assertFalse(node1.isNE());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isBlock());
      assertFalse(node1.isName());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isParamList());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNumber());
      assertEquals(30, node1.getType());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isArrayLit());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNull());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      node1.setLineno(890);
      assertFalse(node1.equals((Object)node0));
      assertTrue(node1.isNew());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isFalse());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertEquals(890, node1.getLineno());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isString());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNot());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetProp());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFor());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isIf());
      assertFalse(node1.isCast());
      assertFalse(node1.isCatch());
      assertFalse(node1.isIn());
      assertEquals(3645440, node1.getSourcePosition());
      assertFalse(node1.isNE());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isBlock());
      assertFalse(node1.isName());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isParamList());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNumber());
      assertEquals(30, node1.getType());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isArrayLit());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNull());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      
      // Undeclared exception!
      try { 
        node0.replaceChildAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Node node0 = new Node((-50));
      node0.detachChildren();
      HashSet<String> hashSet0 = new HashSet<String>();
      node0.setDirectives(hashSet0);
      node0.putIntProp((-50), (-879));
      node0.isNE();
      node0.setSourceEncodedPositionForTree((-50));
      assertEquals(4046, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int int0 = 1643;
      Node node0 = new Node(1643);
      Node node1 = null;
      node0.setOptionalArg(true);
      // Undeclared exception!
      try { 
        node0.addChildrenToFront((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Node node0 = new Node(3378, 3378, 3378);
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      nodeArray0[5] = node0;
      Node node1 = null;
      try {
        node1 = new Node(36, nodeArray0, 0, 32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int int0 = 24;
      Node node0 = null;
      try {
        node0 = new Node(24, (Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      int int0 = 309;
      Node node0 = new Node(309);
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // LC is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      int int0 = (-1463);
      Node[] nodeArray0 = new Node[9];
      Node node0 = Node.newString("evtB", (-1217), 1897);
      nodeArray0[0] = node0;
      Node node1 = null;
      try {
        node1 = new Node(1, nodeArray0, 49, (-4238));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Node node0 = new Node(105, 105, 105);
      node0.isVar();
      node0.setChangeTime(105);
      node0.isCall();
      node0.setChangeTime(0);
      node0.getInputId();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseUnknownType();
      ObjectType objectType0 = ObjectType.cast(jSType0);
      JSType[] jSTypeArray0 = new JSType[6];
      jSTypeArray0[0] = (JSType) objectType0;
      jSTypeArray0[1] = (JSType) objectType0;
      jSTypeArray0[2] = (JSType) objectType0;
      jSTypeArray0[3] = (JSType) objectType0;
      jSTypeArray0[4] = (JSType) objectType0;
      jSTypeArray0[5] = (JSType) objectType0;
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType(objectType0, jSTypeArray0);
      TemplatizedType templatizedType1 = jSTypeRegistry0.createTemplatizedType((ObjectType) templatizedType0, (Map<TemplateType, JSType>) null);
      templatizedType1.getRestrictedTypeGivenToBooleanOutcome(false);
      jSTypeRegistry0.resetImplicitPrototype(jSType0, templatizedType1);
      // Undeclared exception!
      try { 
        ImmutableList.copyOf((Iterator<? extends JSType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableList", e);
      }
  }
}
