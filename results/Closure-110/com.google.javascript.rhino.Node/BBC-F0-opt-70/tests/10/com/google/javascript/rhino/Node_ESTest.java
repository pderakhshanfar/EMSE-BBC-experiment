/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 18 08:52:53 GMT 2021
 */

package com.google.javascript.rhino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.JSTypeExpression;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.TemplateTypeMap;
import com.google.javascript.rhino.jstype.TemplateTypeMapReplacer;
import com.google.javascript.rhino.jstype.UnionType;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Vector;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.removeProp(2);
      node0.isQualifiedName();
      Node node1 = new Node(31, node0, node0, node0, 57, 2);
      Node node2 = new Node(42);
      node1.copyInformationFromForTree(node2);
      node1.copyInformationFrom(node0);
      node0.isDebugger();
      node1.isBlock();
      node1.toStringTree();
      node0.isUnscopedQualifiedName();
      node0.isExprResult();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Node node0 = new Node(105);
      Node node1 = new Node(105, node0);
      node1.isEquivalentTo(node1, true, true, true);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.isQualifiedName();
      Node node1 = new Node(43, node0, node0, 31, 43);
      node1.copyInformationFrom(node0);
      node0.isDebugger();
      node1.isBlock();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      node1.getProp(93);
      node0.getAncestors();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node node0 = new Node(35);
      node0.getChildCount();
      Node node1 = new Node(560, node0, node0, node0, node0);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node2.getDirectives();
      Node.newNumber((double) 46, 43, 51);
      Node node3 = node2.setJSDocInfo((JSDocInfo) null);
      node0.useSourceInfoIfMissingFromForTree(node3);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newString("Object#Key");
      Node node1 = new Node(37, node0, node0, node0, 43, 0);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      Consumer<Node> consumer1 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer1);
      node1.checkTreeEquals(node0);
      node1.useSourceInfoFrom(node0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node node0 = Node.newNumber(881.9415283876026);
      node0.putIntProp(42, 42);
      Object object0 = new Object();
      node0.putProp(48, object0);
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 881.9415283876026 [side_effect_flags: com.google.javascript.rhino.Node$IntPropListItem@0000000002] [directives: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node node0 = new Node(33, 33, 33);
      Node node1 = new Node(32, node0, node0, node0);
      node0.addChildToFront(node1);
      node0.getQualifiedName();
      Node node2 = null;
      try {
        node2 = new Node(51, node0, node0, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node node0 = new Node(52);
      node0.mayMutateGlobalStateOrThrow();
      node0.isFromExterns();
      node0.cloneTree();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node node0 = new Node((-1220), (-1220), (-4110));
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(4, nodeArray0);
      Node node2 = new Node(42, node1, node1, node0);
      node2.isExprResult();
      node2.copyInformationFrom(node1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node node0 = new Node((-1739));
      Node node1 = new Node((-1739), node0, node0, node0);
      node1.mayMutateArguments();
      node1.getLastChild();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node node0 = new Node(85, 85, 85);
      node0.getQualifiedName();
      node0.isComma();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node node0 = new Node(95);
      Node node1 = new Node(4, node0, node0, node0, 52, 51);
      node1.cloneNode();
      node0.putProp(44, node1);
      // Undeclared exception!
      try { 
        node0.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 44
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.isQualifiedName();
      Node node1 = new Node(4, node0, node0, node0, 11, (-435));
      Node node2 = node1.copyInformationFrom(node0);
      Node node3 = new Node(50);
      node0.toStringTree();
      Node node4 = Node.newNumber((double) 2);
      node4.isUnscopedQualifiedName();
      Node node5 = Node.newString("Yix", 186, 4598);
      node5.setStaticSourceFile((StaticSourceFile) null);
      node5.getAncestors();
      // Undeclared exception!
      try { 
        node3.checkTreeEquals(node2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 50
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node node0 = Node.newNumber((-1462.395324));
      node0.isQualifiedName();
      Node node1 = new Node(130, node0, node0, node0, 126, 1202);
      node1.isUnscopedQualifiedName();
      Node node2 = node1.copyInformationFrom(node0);
      Node node3 = new Node(12);
      node1.toStringTree();
      node2.isUnscopedQualifiedName();
      node2.getAncestors();
      node0.checkTreeEquals(node2);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.isQualifiedName();
      Node node1 = new Node(31, node0, node0, node0, 57, 2);
      Node node2 = node1.copyInformationFrom(node0);
      Node node3 = new Node(30);
      node2.toStringTree();
      node0.isUnscopedQualifiedName();
      node0.getAncestors();
      node2.checkTreeEquals(node0);
      node0.removeChildren();
      node3.setSideEffectFlags(4095);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node node0 = new Node(33);
      node0.getLastSibling();
      node0.setVarArgs(true);
      // Undeclared exception!
      try { 
        node0.getQualifiedName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = new Node(33, 46, 108);
      Node node1 = Node.newString("7yqB|oH=&@CyMqdh");
      Node node2 = node0.srcrefTree(node1);
      node2.useSourceInfoIfMissingFrom(node1);
      node0.isOr();
      node0.isLocalResultCall();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Node node0 = new Node(86, 86, 86);
      node0.setLineno(82);
      Node node1 = new Node(102, node0, node0, node0);
      node0.isEquivalentTo(node1);
      node0.isNoSideEffectsCall();
      node0.isComma();
      node0.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node node0 = new Node(34);
      Node node1 = new Node(118, node0);
      node0.isEquivalentTo(node1, true, true, true);
      Node node2 = node1.getLastSibling();
      // Undeclared exception!
      try { 
        node2.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(26, nodeArray0, 26, 26);
      Node node1 = Node.newNumber((-877.940334926));
      node0.clonePropsFrom(node1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = Node.newNumber((double) 105);
      Node node1 = new Node(105, node0);
      Node node2 = node1.setJSDocInfo((JSDocInfo) null);
      node1.isEquivalentTo(node2, true, true, true);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = new Node((-1225), (-1225), (-1225));
      node0.setType(115);
      node0.isAdd();
      node0.isArrayLit();
      node0.isBreak();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      node1.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = new Node(155, 27591, (-224));
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node2.getBooleanProp(31);
      node1.setLineno(4);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = new Node(151);
      node0.setType(13);
      node0.isNE();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.isQualifiedName();
      Node node1 = new Node(31, node0, node0, node0, 57, 2);
      Node node2 = node1.copyInformationFrom(node0);
      node0.isDebugger();
      Object object0 = new Object();
      node1.useSourceInfoIfMissingFromForTree(node2);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.isQualifiedName();
      Node node1 = new Node(31, node0, node0, node0, 57, 2);
      Node node2 = node1.copyInformationFrom(node0);
      node0.isDebugger();
      node1.isBlock();
      node1.addChildrenAfter(node2, node0);
      node0.getIntProp((-928));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = new Node(102);
      Node node1 = Node.newNumber((double) 4095);
      Node node2 = new Node(8, node1, node0);
      Node node3 = node0.setJSDocInfo((JSDocInfo) null);
      node0.isEquivalentTo(node3, false, true, false);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(26, nodeArray0, 26, 26);
      node0.cloneTree();
      node0.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.isQualifiedName();
      Node node1 = new Node(31, node0, node0, node0, 57, 2);
      node1.copyInformationFrom(node0);
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)118;
      byteArray0[5] = (byte)0;
      Node node2 = new Node(38);
      node2.toStringTree();
      // Undeclared exception!
      try { 
        node2.isUnscopedQualifiedName();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node node0 = new Node(101);
      node0.setLineno(8388608);
      Node node1 = new Node(55, node0);
      node1.srcrefTree(node0);
      node0.mayMutateGlobalStateOrThrow();
      node0.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = new Node(60);
      Node node1 = new Node(51, node0, node0, node0, 2, 60);
      node1.isWith();
      node1.useSourceInfoFrom(node0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = new Node(111);
      Node node1 = new Node((-407), node0, node0, 132, 43);
      Node node2 = node0.copyInformationFromForTree(node1);
      node2.setSourceEncodedPositionForTree(119);
      node0.checkTreeTypeAwareEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = new Node(108, 108, 2527);
      node0.mayMutateArguments();
      Node node1 = new Node(684, node0, node0, node0, 36, 4);
      node1.removeFirstChild();
      // Undeclared exception!
      try { 
        node1.addChildrenAfter((Node) null, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node node0 = new Node(146);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte)96;
      byteArray0[6] = (byte)54;
      byteArray0[7] = (byte) (-87);
      byteArray0[8] = (byte)71;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node1 = new Node(2, node0, node0, node0);
      node1.setSourceEncodedPositionForTree(2549);
      node0.getAncestor(1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node.mergeLineCharNo((-273), (-273));
      Node.extractLineno((-1));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING;
      // Undeclared exception!
      try { 
        jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.javascript.rhino.jstype.UnionType cannot be cast to com.google.javascript.rhino.jstype.ObjectType
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = Node.newNumber((double) 33);
      Object object0 = new Object();
      node0.putProp(33, object0);
      // Undeclared exception!
      try { 
        node0.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 33
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = new Node(102);
      Node node1 = new Node(110, 29, (-1108));
      node0.isBlock();
      node1.isAdd();
      node1.srcrefTree(node0);
      node1.getLastChild();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = new Node(119);
      node0.isOnlyModifiesThisCall();
      Node node1 = Node.newNumber((-2357.31512));
      Node node2 = new Node(63, node0, node1);
      Node node3 = node0.setJSDocInfo((JSDocInfo) null);
      node3.isEquivalentTo(node2, false, false, true);
      Node.newString("", 46, 39);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(56);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setReturnsTainted();
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags(node_SideEffectFlags4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newString("Object#Element");
      Node node1 = new Node(4, 30, 53);
      Node node2 = new Node(36, node1, node1, node0);
      node2.getAncestor(0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = new Node(86, 86, 86);
      node0.isOr();
      Node node1 = Node.newString("r~w//'`#$", 1451, 47);
      node0.srcrefTree(node1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "x2rlwJQ'");
      Node node0 = new Node(124, 124, 124);
      node0.isBlock();
      Node node1 = new Node(29, node0, node0, node0, node0, 36, 56);
      node0.srcrefTree(node1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node node0 = Node.newNumber(861.898891893201);
      Node node1 = new Node(49, 151590, 16);
      node1.useSourceInfoFromForTree(node0);
      // Undeclared exception!
      try { 
        node0.removeChild(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node node0 = new Node(110);
      Node node1 = new Node(4722, 1, 85);
      Node node2 = new Node(42, node0, node0, node1, node1);
      node2.removeFirstChild();
      node0.getAncestor(3622);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "8|-:){zuSWJ*^nV3");
      Node node0 = new Node(1034);
      node0.putIntProp(53, 40);
      node0.setType(38);
      node0.isFalse();
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      Node node1 = Node.newString(54, "8|-:){zuSWJ*^nV3", 46, 54);
      node0.copyInformationFrom(node1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = new Node(126, 126, 126);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      Node node1 = Node.newNumber((double) 0);
      node0.clonePropsFrom(node1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = new Node(113);
      Node node1 = new Node(2, node0, node0, node0, 87, 2);
      node0.useSourceInfoIfMissingFrom(node1);
      node0.isNE();
      node0.getAncestor(113);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = Node.newNumber((double) 105);
      Node node1 = new Node(105, node0);
      node1.setChangeTime(56);
      node1.checkTreeEquals(node0);
      node1.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = Node.newNumber((double) 34);
      Node node1 = new Node(32, 4095, 100);
      node0.copyInformationFrom(node1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      node1.getQualifiedName();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Node node2 = new Node(57);
      node1.toStringTree();
      node1.isUnscopedQualifiedName();
      node1.useSourceInfoIfMissingFrom(node0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = Node.newNumber((double) 105);
      Node node1 = new Node(105, node0);
      node1.setChangeTime(56);
      node1.checkTreeEquals(node0);
      node1.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = new Node(47, (-135), (-135));
      node0.isBlock();
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(477, nodeArray0, 1150, 57);
      node0.clonePropsFrom(node1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = new Node(119, 643, (-4070));
      node0.isWith();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.getSourceOffset();
      node0.isWhile();
      node0.isNE();
      node0.isTrue();
      node0.isGetElem();
      node0.isIn();
      Node node1 = new Node(98, node0, node0, node0, node0, 154, (-1090));
      node1.useSourceInfoFromForTree(node0);
      node1.cloneTree();
      node1.isAssignAdd();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node0.isIn();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = Node.newNumber((-1.0));
      Object object0 = new Object();
      node0.putProp(43, object0);
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER -1.0 [is_constant_name: com.google.javascript.rhino.Node$ObjectPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node node0 = new Node(5845);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node0.setIsSyntheticBlock(false);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Node node1 = new Node(42, node0, 1322, 996);
      node1.useSourceInfoFrom(node0);
      node0.isDebugger();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newString("can't use .skipNulls() with maps");
      Node node1 = Node.newString(53, "can't use .skipNulls() with maps");
      Node node2 = new Node(51, node0, node1, node1, 13, 36);
      node1.getJsDocBuilderForNode();
      node0.siblings();
      node2.getLastSibling();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(39);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(52, nodeArray0, 2048, 33);
      Node node1 = new Node(43, node0, node0, (-266), (-492));
      node1.setType(39);
      Node node2 = node0.useSourceInfoFrom(node1);
      node2.isSyntheticBlock();
      node1.cloneTree();
      node0.detachChildren();
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // INSTANCEOF is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = new Node(101);
      Node node1 = Node.newString("S[*k7tR>7?Nr", 1234, (-3230));
      node0.copyInformationFromForTree(node1);
      node0.isOr();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node node0 = Node.newString(147, "com.google.javascript.rhino.Node$IntPropListItem", 55, 55);
      Node node1 = new Node(35, node0, node0, 0, 53);
      Node node2 = node0.detachFromParent();
      node2.isWith();
      node2.setQuotedString();
      node1.isEquivalentTo(node2, false, false, true);
      node2.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString("Nzr03O$,A9MC1)=C.%");
      Node node1 = new Node(125, node0, node0, node0, 9, 1205);
      Node node2 = node0.srcrefTree(node1);
      node1.useSourceInfoFromForTree(node0);
      int int0 = 2360;
      Node node3 = node2.copyInformationFrom(node1);
      node3.setOptionalArg(true);
      int int1 = 74;
      try { 
        node1.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // BLOCK 9 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte) (-27);
      byteArray0[6] = (byte) (-74);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = new Node(35);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      ObjectType objectType0 = jSTypeRegistry0.createObjectType((ObjectType) null);
      arrayList0.add((JSType) objectType0);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      node0.getIndexOfChild(node1);
      node0.useSourceInfoFrom(node1);
      node0.isFromExterns();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = Node.newNumber(2.4816890917497867);
      Node node1 = new Node(4, node0);
      Node node2 = node0.copyInformationFrom(node1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      node2.getQualifiedName();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Node node3 = new Node((-925));
      node2.toStringTree();
      node1.isUnscopedQualifiedName();
      node1.useSourceInfoIfMissingFrom(node3);
      node1.getSourceOffset();
      // Undeclared exception!
      try { 
        node3.addChildrenAfter(node1, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "q'^>dkYml^YGH!!Q");
      Node node0 = new Node(1034);
      node0.putIntProp(53, 40);
      node0.setType(38);
      node0.mayMutateGlobalStateOrThrow();
      node0.isFalse();
      node0.getSideEffectFlags();
      node0.getSourceOffset();
      node0.isEquivalentTo(node0, false, false, false);
      Node node1 = Node.newNumber((double) 32);
      node0.useSourceInfoFrom(node1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      Node node1 = new Node(1, node0, node0, node0, 39, 1591);
      node0.copyInformationFrom(node1);
      node0.isOr();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node node0 = Node.newNumber((double) 117, 117, 117);
      Node node1 = new Node(3293);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node1);
      Node node2 = new Node(39, node1, node1, node0, 4095, 56);
      node_NodeMismatch0.equals(node_NodeMismatch0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(1610612736);
      node0.isOnlyModifiesThisCall();
      Node node1 = new Node(0, node0, node0);
      node0.isAdd();
      node1.isFromExterns();
      Node node2 = node1.setJSDocInfo((JSDocInfo) null);
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node1.srcref(node2);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node node0 = new Node(35);
      Locale locale0 = Locale.TAIWAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      node0.setDirectives(set0);
      Node node1 = new Node(49, node0);
      node0.useSourceInfoIfMissingFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node node0 = new Node(117, 117, 117);
      Node node1 = new Node(3297);
      Node node2 = new Node(1, node1, node1, 2, 117);
      node0.putProp(31, node2);
      // Undeclared exception!
      try { 
        node0.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 31
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = new Node(124);
      Node node1 = new Node(56, 2987, 4095);
      node0.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node node0 = new Node(34);
      Node node1 = new Node(29, node0, node0);
      node0.setSourceFileForTesting("GREATEST_FUNCTION_TYPE");
      node0.useSourceInfoIfMissingFrom(node1);
      node0.isGetElem();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(26, nodeArray0, 26, 26);
      Node node1 = new Node((-2639), nodeArray0);
      node0.useSourceInfoFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node node0 = new Node(33, 33, 33);
      node0.toStringTree();
      node0.cloneTree();
      node0.isOr();
      node0.getSourceOffset();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node node0 = new Node(117, 117, 117);
      Node node1 = new Node(3293);
      Node node2 = new Node(1, node1, node1, 2, 117);
      node0.putProp(44, node2);
      // Undeclared exception!
      try { 
        node0.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 44
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = new Node(124);
      Node node1 = new Node(247, node0, node0, node0, 2, (-700));
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
      node_NodeMismatch0.equals(node1);
      node0.getLastSibling();
      // Undeclared exception!
      try { 
        node1.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 247
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node node0 = new Node(76, 76, 76);
      Node node1 = new Node(30);
      node1.getBooleanProp(51);
      node1.useSourceInfoFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node node0 = new Node(1785, 1785, 1785);
      node0.isCall();
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      Node node1 = new Node(41, node0, 4, 1443);
      node1.setSourceEncodedPositionForTree(4);
      node0.isDebugger();
      node1.useSourceInfoFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node node0 = Node.newNumber((double) 117, 117, 117);
      Node node1 = new Node(3293);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node1);
      Node node2 = Node.newNumber(444.3322091529224);
      Node node3 = new Node((-306), node1, node2, node1, node2, 36, 463);
      // Undeclared exception!
      try { 
        node3.addChildBefore(node1, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Object object0 = new Object();
      Node node0 = new Node(2182);
      Node node1 = new Node(46, node0, node0, (-1943), 49);
      node1.putProp(46, node0);
      try { 
        node1.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // SHNE [is_namespace: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node node0 = new Node(119);
      node0.isArrayLit();
      node0.cloneTree();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node node0 = new Node(117, 117, 117);
      node0.getChangeTime();
      node0.cloneNode();
      node0.isBreak();
      node0.mayMutateGlobalStateOrThrow();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node node0 = new Node(57);
      node0.isFor();
      Node node1 = Node.newNumber((double) 1);
      Node node2 = new Node(30, node1, node1);
      node0.isAdd();
      Node node3 = node2.setJSDocInfo((JSDocInfo) null);
      node3.isEquivalentTo(node1, true, true, true);
      node0.isObjectLit();
      node3.isWith();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "q'^>dkYml^YGH!!Q");
      Node node0 = new Node(1034);
      node0.putIntProp(53, 40);
      node0.setType(38);
      node0.isFalse();
      node0.isName();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Node node0 = new Node(154);
      Node node1 = new Node(1, node0, node0, 48, 49);
      Node node2 = node0.detachFromParent();
      node2.clonePropsFrom(node1);
      node2.clonePropsFrom(node0);
      node1.isWith();
      node0.isEquivalentTo(node0, false, false, false);
      // Undeclared exception!
      try { 
        node0.getChildAtIndex(46);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node node0 = new Node(103, 103, 103);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      Node node1 = Node.newString(54, "QBQ{8 uJih|W!c4|");
      nodeArray0[1] = node1;
      Node node2 = new Node(837, nodeArray0);
      node2.getJSDocInfo();
      node0.useSourceInfoIfMissingFromForTree(node2);
      node0.isOr();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Node node0 = new Node(101);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      Node node1 = new Node(41, node0);
      node1.isEquivalentToTyped(node0);
      node0.srcref(node1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Node node0 = new Node(33);
      node0.setSourceFileForTesting("Z`1[[wAoon|c3");
      Node node1 = new Node(51, node0, 54, 53);
      node0.srcref(node1);
      node0.setChangeTime(64);
      // Undeclared exception!
      try { 
        node0.getQualifiedName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node node0 = new Node(100, 100, 100);
      Node node1 = new Node((-400), node0, node0, 12, 41);
      node0.copyInformationFromForTree(node1);
      node0.isWith();
      node0.isGetElem();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node node0 = new Node(154);
      Node node1 = new Node(1, node0, node0, 48, 49);
      Node node2 = node0.detachFromParent();
      node1.isWith();
      node0.setChangeTime(53);
      node0.isEquivalentTo(node0, false, false, false);
      node2.cloneTree();
      // Undeclared exception!
      try { 
        node0.getChildAtIndex(46);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node.newString("Object#Element");
      Node.newString(46, "Object#Key");
      Node node0 = new Node(0);
      node0.isArrayLit();
      node0.isNoSideEffectsCall();
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "q'^>dkYml^YGH!!Q");
      Node node0 = new Node((-2927));
      Node node1 = Node.newNumber((-1466.05159094882));
      node0.addChildrenToBack(node1);
      node0.putIntProp(53, 40);
      node0.setType(38);
      node0.cloneTree();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newString("Object#Key");
      Node node1 = new Node(37, node0, node0, node0, 43, 0);
      node1.checkTreeEquals(node1);
      simpleErrorReporter0.warning((String) null, "com.google.javascript.rhino.Node$SiblingNodeIterable", 0, 8);
      node1.getCharno();
      node0.toString();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node node0 = new Node(3);
      Node node1 = new Node(38, node0, node0, node0);
      node1.clonePropsFrom(node0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = Node.newNumber((double) 117, 117, 117);
      Node node1 = new Node(3293);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node1);
      Node node2 = new Node(39, node1, node1, node0, 4095, 56);
      node0.checkTreeEqualsImpl(node2);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node2;
      Node node3 = new Node(39, nodeArray0, 53, 48);
      node2.detachFromParent();
      node3.isNoSideEffectsCall();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node node0 = Node.newNumber((double) 102);
      Node node1 = new Node(147, node0, node0);
      node1.isAdd();
      node1.setJSDocInfo((JSDocInfo) null);
      node1.isEquivalentTo(node0, true, false, false);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      node0.isTypeOf();
      node0.isObjectLit();
      node0.isQuotedString();
      Node node1 = Node.newString(2, "Node has existing properties.", 751619276, 64);
      node0.clonePropsFrom(node1);
      node1.isNoSideEffectsCall();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node node0 = new Node(86);
      Node node1 = new Node(148, node0, node0, node0, node0);
      node0.addChildrenToFront(node1);
      node0.isNoSideEffectsCall();
      node0.isComma();
      node1.getLastChild();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = new Node(120, 120, 120);
      Node node1 = new Node(27, node0, 4095, 54);
      node0.useSourceInfoFromForTree(node1);
      node0.setLength(120);
      node0.isScript();
      node0.isNoSideEffectsCall();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Node node0 = new Node(1610612736);
      node0.isFor();
      Node.newNumber(86.0);
      Node node1 = new Node(85, node0, node0);
      node0.isAdd();
      Node node2 = node1.setJSDocInfo((JSDocInfo) null);
      node1.isEquivalentTo(node2, false, false, false);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newString("Object#Element");
      node0.getInputId();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      FunctionType functionType0 = jSTypeRegistry1.createFunctionType((JSType) null, node0);
      node0.putProp(54, functionType0);
      node0.toString();
      node0.isIf();
      Node.newString(1882, "zm4Sr{Wmlc]*w:Q", 2881, (-489));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node node0 = new Node(117, 117, 117);
      node0.getChangeTime();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.setJSDocInfo(jSDocInfo0);
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = new Node(117, 117, 117);
      Node node1 = node0.cloneTree();
      node1.clonePropsFrom(node0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node node0 = new Node(154);
      Node node1 = new Node(1, node0, node0, 48, 49);
      node0.detachFromParent();
      node1.isWith();
      node0.isEquivalentTo(node0, false, false, false);
      // Undeclared exception!
      try { 
        node0.getChildAtIndex(46);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = new Node(88);
      node0.setType(31);
      Node node1 = new Node(38, node0, node0, node0);
      node1.useSourceInfoFromForTree(node0);
      node0.checkTreeEquals(node1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node node0 = new Node(131);
      Node node1 = new Node(54, node0, node0, node0, node0);
      node0.getAncestor(1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = new Node(0);
      node0.getAncestor(0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node node0 = Node.newNumber((-2710.70813711));
      Node node1 = new Node(37, node0, node0, node0, 1, 40);
      node0.getInputId();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      jSTypeRegistry0.createFunctionType((JSType) null, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.isEquivalentToTyped(node1);
      Node node2 = node1.setJSDocInfo(jSDocInfo0);
      node2.isEquivalentTo(node1, true, true, true);
      node1.getChildBefore(node0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node node0 = Node.newNumber((double) 105);
      Object object0 = new Object();
      node0.putProp(57, node0);
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 105.0 [reflected_object: com.google.javascript.rhino.Node$ObjectPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Node node0 = new Node(118);
      node0.getQualifiedName();
      node0.getChangeTime();
      node0.cloneTree();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = Node.newString("Object#Element");
      node0.isVar();
      node0.isTrue();
      node0.isGetElem();
      Node node1 = new Node(105, node0, 65522, 43);
      node1.useSourceInfoIfMissingFromForTree(node0);
      Node node2 = Node.newString(2, "Object#Element", 2749, 0);
      node0.setQuotedString();
      node1.isTry();
      node2.isThrow();
      node1.toString(true, false, false);
      node2.getSourcePosition();
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node1.srcrefTree(node3);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(111);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.srcref(node1);
      node0.checkTreeTypeAwareEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Node node0 = Node.newString(21, "Hb7vxYL[.]|Z}TC!Th~", (-2160), 54);
      Node node1 = new Node(21, node0, 42, (-536));
      Node node2 = new Node(21, node1, node1, node1, node1);
      node2.toStringTree();
      node2.getAncestors();
      Node node3 = node2.cloneTree();
      node3.getLength();
      node3.isBreak();
      node1.getAncestor(1346);
      // Undeclared exception!
      try { 
        node2.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node node0 = new Node(101);
      Node node1 = Node.newString(29, "Gn%W||nqo");
      node0.useSourceInfoFrom(node1);
      node0.isOr();
      Node.extractLineno(8232);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Node node0 = Node.newNumber((-2710.70813711));
      Node node1 = new Node(37, node0, node0, node0, 1, 40);
      node0.getInputId();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, node0);
      node1.putProp(47, functionType0);
      node1.toString();
      node0.isComma();
      node1.mayMutateGlobalStateOrThrow();
      node0.isNoSideEffectsCall();
      node1.useSourceInfoFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = new Node(153, (-1052), 153);
      node0.isFor();
      node0.isLabelName();
      Node node1 = new Node((-89), node0);
      node1.isOr();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(21, nodeArray0, 21, 21);
      Node node1 = new Node(2411, nodeArray0, (-842), 293);
      Node node2 = node0.srcrefTree(node1);
      node2.isBlock();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Node node0 = new Node(93);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      Node node1 = node0.setJSDocInfo((JSDocInfo) null);
      node0.isEquivalentTo(node1, true, true, true);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node node0 = new Node(102, 1824, (-2831));
      node0.isLabelName();
      Node node1 = new Node(48, node0, node0, node0);
      node0.clonePropsFrom(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType.toMaybeFunctionType((JSType) null);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createEnumType("OBJECT_TYPE", node0, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Node node0 = new Node(101);
      Node node1 = new Node(101);
      Node node2 = new Node(56, node1, node0);
      Node node3 = new Node(55, node2);
      Node node4 = Node.newString(38, "The existing child node of the parent should not be null.");
      node3.replaceChild(node2, node4);
      Node node5 = node1.getLastSibling();
      node5.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newString("Object#Key");
      Node node1 = new Node(37, node0, node0, node0, 43, 0);
      node1.copyInformationFrom(node0);
      node1.checkTreeEquals(node1);
      node1.isNE();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Node node0 = new Node(37);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      Node node1 = new Node(361, node0, node0, node0, (-565), 52);
      Node.NodeMismatch node_NodeMismatch1 = node1.checkTreeEqualsImpl(node0);
      node_NodeMismatch0.equals(node_NodeMismatch1);
      node0.isName();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = new Node(102);
      Node node1 = new Node(41, node0, 42, 29);
      node0.isIn();
      node1.getFirstChild();
      node1.getIntProp((-1));
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      node0.isFor();
      node0.isLabelName();
      Node node1 = node0.setJSDocInfo((JSDocInfo) null);
      node0.isEquivalentTo(node1, false, true, false);
      node1.isEquivalentToShallow(node0);
      node0.getSourcePosition();
      node1.getSourcePosition();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node node0 = new Node(5845);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)35;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.getQualifiedName();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Node node1 = new Node(47);
      node1.toStringTree();
      node1.isUnscopedQualifiedName();
      node1.useSourceInfoIfMissingFrom(node0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node node0 = Node.newNumber((double) 105);
      Node node1 = new Node(105, node0);
      node0.setWasEmptyNode(false);
      node1.mayMutateGlobalStateOrThrow();
      node1.setChangeTime(56);
      node1.copyInformationFrom(node0);
      try { 
        node1.setDouble(1.2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FUNCTION <invalid> [change_time: com.google.javascript.rhino.Node$IntPropListItem@0000000003] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Node node0 = Node.newNumber(1079.2);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte)118;
      byteArray0[5] = (byte)118;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.getQualifiedName();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Node node1 = new Node(26);
      node1.toStringTree();
      node0.isUnscopedQualifiedName();
      node1.useSourceInfoIfMissingFrom(node0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Node node0 = Node.newNumber((-3088.5881249911));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte) (-17);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      InputId inputId0 = new InputId("");
      Node node1 = new Node(32, node0, node0);
      node1.isContinue();
      node1.setJSDocInfo((JSDocInfo) null);
      node0.isEquivalentTo(node1, true, true, false);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Node node0 = new Node(117);
      node0.setType(117);
      Node node1 = new Node(41, node0, node0, node0, node0, 57, (-1250));
      node1.isFalse();
      node1.copyInformationFrom(node0);
      node1.getSourceOffset();
      node1.isEquivalentTo(node0, false, false, false);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedHashSet<TemplateType> linkedHashSet0 = new LinkedHashSet<TemplateType>();
      Iterator<TemplateType> iterator0 = linkedHashSet0.iterator();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node1 = new Node(152, node0, node0, 46, 52);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Object#Key");
      Node node2 = Node.newString("Object#Element");
      node2.setIsSyntheticBlock(true);
      node1.setWasEmptyNode(false);
      Node node3 = node1.useSourceInfoIfMissingFromForTree(node0);
      node0.isUnscopedQualifiedName();
      node1.siblings();
      node1.getChangeTime();
      node3.getDirectives();
      node0.siblings();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Node node0 = Node.newNumber(1079.2);
      Node node1 = Node.newNumber((double) 52);
      Node node2 = new Node(16, node1, node1);
      node0.isContinue();
      Node node3 = new Node(42, node2, node2, node0);
      Node node4 = node3.setJSDocInfo((JSDocInfo) null);
      Node node5 = Node.newNumber(1108.771689, 256, 32);
      node5.isEquivalentTo(node4, false, true, true);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Node node0 = new Node(21, 21, 53);
      Node node1 = new Node(21, node0, node0, node0, node0, 53, 37);
      Node node2 = new Node(30, 5845, 39);
      node1.useSourceInfoFromForTree(node2);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Node node0 = Node.newNumber((double) 117, 117, 117);
      Node node1 = new Node(3293);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node1);
      Node node2 = new Node(39, node1, node1, node0, 4095, 56);
      // Undeclared exception!
      try { 
        node2.replaceChildAfter(node0, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Node node0 = new Node(86);
      node0.getQualifiedName();
      node0.cloneTree();
      node0.isAssign();
      node0.isComma();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Node node0 = new Node(51);
      Node node1 = node0.cloneTree();
      node0.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newString("Object#Key");
      Node node1 = new Node(37, node0, node0, node0, 43, 0);
      node1.detachChildren();
      node1.clonePropsFrom(node0);
      node1.checkTreeEquals(node1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Node node0 = new Node(35);
      node0.getSourceOffset();
      Node node1 = new Node(50, node0);
      node0.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Node node0 = new Node(101);
      Node node1 = new Node(56, node0, node0);
      Node node2 = new Node(55, node1);
      node0.getProp((-734));
      node1.setLineno(2);
      node0.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      node0.cloneTree();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("is_constant_name", false);
      simpleSourceFile0.getLineOffset(48);
      node0.setStaticSourceFile(simpleSourceFile0);
      node0.isLabelName();
      node0.isScript();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Node node0 = new Node(124);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Node node1 = Node.newString("com.google.common.collect.ImmutableCollection$Builder");
      Node node2 = Node.newNumber((double) 37);
      node2.getDirectives();
      node1.checkTreeEquals(node2);
      node0.useSourceInfoIfMissingFromForTree(node2);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Node node0 = Node.newString(63, "oH");
      Node node1 = new Node(63, node0, node0, node0, node0);
      Node node2 = node1.setJSDocInfo((JSDocInfo) null);
      node1.putBooleanProp(49, false);
      node2.setChangeTime(54);
      node1.isAdd();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node2.toString(false, true, true);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags4.setReturnsTainted();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node_SideEffectFlags4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got ARRAYLIT
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Node node0 = new Node(86);
      Node node1 = new Node(42);
      node0.isDec();
      node1.useSourceInfoIfMissingFrom(node0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isTry();
      Node node1 = new Node(31, node0, node0, node0);
      node0.srcref(node0);
      Node node2 = Node.newString("String node not created with Node.newString");
      node0.isIf();
      node2.detachChildren();
      node0.isCatch();
      node1.getLastSibling();
      node2.clonePropsFrom(node1);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(26, nodeArray0, 26, 26);
      Node node1 = new Node(148, node0, 2405, (-1377));
      node0.srcref(node1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Node node0 = new Node(117, 117, 117);
      Node node1 = new Node(55);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node1);
      Node node2 = new Node(8, node1, node1, node1, 895, 39);
      node2.checkTreeEqualsImpl(node1);
      node_NodeMismatch0.equals(node0);
      node0.isName();
      node0.isAdd();
      node0.useSourceInfoIfMissingFrom(node2);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Node node0 = new Node(125, 125, 125);
      node0.isNoSideEffectsCall();
      node0.useSourceInfoIfMissingFrom(node0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Node node0 = new Node(111);
      node0.cloneTree();
      node0.isName();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Node node0 = new Node(43);
      node0.isDec();
      Node node1 = new Node(31, node0, node0, node0, node0, 16, 43);
      node0.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Node node0 = new Node(117, 117, 117);
      node0.getChangeTime();
      node0.setLineno(117);
      Node node1 = new Node(53, node0, node0, 29, 3092);
      node0.srcrefTree(node1);
      node0.isBreak();
      node0.isName();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Node node0 = new Node(86);
      Node node1 = new Node(51);
      node1.getBooleanProp((-2551));
      node1.isIn();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Node node0 = Node.newNumber(1079.2);
      Object object0 = new Object();
      node0.putProp(34, object0);
      // Undeclared exception!
      try { 
        node0.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 34
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Node node0 = new Node(86);
      Node node1 = new Node(38, node0, node0, 4095, 46);
      node0.copyInformationFromForTree(node1);
      node0.getStaticSourceFile();
      node0.getQualifiedName();
      node0.isAssign();
      node0.isComma();
      Node.extractCharno(83);
      node1.toString();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      Node node1 = node0.cloneNode();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node0.isDebugger();
      node1.siblings();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Node node0 = Node.newNumber((-2833.727836));
      node0.getAncestors();
      node0.getSideEffectFlags();
      node0.setWasEmptyNode(false);
      node0.removeProp(3282);
      Iterable<Node> iterable0 = node0.siblings();
      node0.getJsDocBuilderForNode();
      node0.putProp(53, iterable0);
      node0.getDouble();
      double double0 = (-1241.88353155);
      // Undeclared exception!
      try { 
        node0.getInputId();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.javascript.rhino.Node$SiblingNodeIterable cannot be cast to com.google.javascript.rhino.InputId
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      node0.isContinue();
      node0.isOr();
      Node node1 = Node.newNumber(3009.46438, 40, 123);
      node0.useSourceInfoIfMissingFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Node node0 = new Node(102);
      Node node1 = new Node(15, node0, node0);
      node1.removeChild(node0);
      node0.toString();
      Node node2 = new Node(2, node1, node0, node0, (-567), 794);
      node2.getIntProp(46);
      Node node3 = node0.detachFromParent();
      node3.toString();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Node node0 = new Node(107);
      node0.setType(112);
      node0.isCase();
      node0.isContinue();
      node0.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Node node0 = Node.newNumber((double) 117, 117, 117);
      node0.getBooleanProp(4);
      Node node1 = new Node(3293);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node1);
      Node node2 = new Node(39, node1, node1, node0, (-1832), 56);
      Node.NodeMismatch node_NodeMismatch1 = node0.checkTreeEqualsImpl(node2);
      node_NodeMismatch1.equals(node_NodeMismatch0);
      Node node3 = node1.cloneTree();
      node1.getParent();
      node3.srcref(node2);
      node1.mayMutateArguments();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Node node0 = Node.newNumber((-2710.70813711));
      Node node1 = new Node(37, node0, node0, node0, 46, 32);
      node0.getInputId();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      JSType[] jSTypeArray0 = new JSType[0];
      jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) null, jSTypeArray0);
      node0.mayMutateGlobalStateOrThrow();
      node1.srcrefTree(node0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Node node0 = new Node(76);
      node0.setType(31);
      Node node1 = node0.setJSDocInfo((JSDocInfo) null);
      node1.setIsSyntheticBlock(false);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newString("can't use .skipNulls() with maps");
      Node node1 = Node.newString(53, "can't use .skipNulls() with maps");
      Node node2 = new Node(51, node0, node1, node1, 13, 36);
      node1.getJsDocBuilderForNode();
      Node node3 = new Node(51, node2, (-486), (-3470));
      node3.siblings();
      node3.getLastSibling();
      // Undeclared exception!
      try { 
        node3.setSideEffectFlags(39);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got IN
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double double0 = 1.2;
      Node node0 = Node.newNumber(1.2);
      Object object0 = new Object();
      node0.putProp(41, object0);
      // Undeclared exception!
      try { 
        node0.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 41
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Node node0 = new Node(122, 122, 122);
      node0.mayMutateGlobalStateOrThrow();
      node0.children();
      Node node1 = new Node(16, node0, node0, 40, 51);
      Node node2 = node1.removeChildren();
      node2.getJsDocBuilderForNode();
      node1.isLocalResultCall();
      node1.isUnscopedQualifiedName();
      node2.isEquivalentToShallow(node0);
      node0.setVarArgs(false);
      // Undeclared exception!
      try { 
        node0.addChildrenAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Node node0 = new Node(103);
      node0.isOr();
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(15, node0, node0, node0, node0);
      Node node2 = node0.srcref(node1);
      node2.isEquivalentToTyped(node0);
      node1.isQualifiedName();
      node2.useSourceInfoFrom(node0);
      // Undeclared exception!
      try { 
        node1.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Node node0 = new Node((-7471), (-7471), (-7471));
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(52);
      node1.isIn();
      node1.useSourceInfoIfMissingFrom(node0);
      node1.isIn();
      node1.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Node node0 = Node.newString(1, "Gn'FjRb?rS?|' Gh0A");
      Node node1 = new Node(5839, node0, node0);
      Node node2 = new Node(5839, node1);
      // Undeclared exception!
      try { 
        node2.checkTreeEquals(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 5839
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      PriorityQueue<Node> priorityQueue0 = new PriorityQueue<Node>();
      Node node0 = Node.newString((-1072), "end-line: ", (-1072), 1035);
      node0.setCharno((-1072));
      Node node1 = new Node(51, node0, node0, node0, node0);
      node1.useSourceInfoIfMissingFrom(node0);
      node1.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Node node0 = new Node(101);
      Node node1 = new Node(55, node0);
      node1.srcrefTree(node0);
      node0.mayMutateGlobalStateOrThrow();
      node0.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Node node0 = new Node(43);
      node0.isLabel();
      node0.isThrow();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.createTemplateType("SyntaxError");
      Node node1 = new Node(30, node0, node0, node0);
      node0.srcrefTree(node1);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Node node0 = new Node(117);
      node0.isLabelName();
      node0.cloneTree();
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(1610612736);
      node0.isFor();
      Node node1 = Node.newNumber(1.0);
      Node node2 = new Node(898, node1, node1);
      node2.isContinue();
      Node node3 = node2.setJSDocInfo((JSDocInfo) null);
      node3.isEquivalentTo(node2, false, true, true);
      node3.isScript();
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList.of();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString("Object#Key");
      Node node1 = new Node(37, node0, node0, node0, 43, 0);
      node1.setSideEffectFlags(12);
      Node node2 = new Node((-843), node1, 50, 53);
      node2.isBlock();
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      node0.isContinue();
      node0.isBreak();
      node0.isName();
      Node.extractCharno(57);
      node0.cloneTree();
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Node node0 = new Node(117, 117, 117);
      node0.getChangeTime();
      Node node1 = Node.newString(42, "6m-L'/IFXe7");
      Node node2 = new Node(38, node0, node1, node1, node1, 2, 57);
      node0.useSourceInfoIfMissingFromForTree(node2);
      node0.setLineno(117);
      node0.isOr();
      node2.copyInformationFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      int int0 = Node.ORIGINALNAME_PROP;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(Integer.MAX_VALUE, nodeArray0);
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Node node0 = new Node(564);
      Node node1 = new Node(38);
      // Undeclared exception!
      try { 
        node1.getQualifiedName();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = Node.newString("ALWAYS_FALSE");
      Node node2 = new Node(47, node1);
      node2.useSourceInfoFromForTree(node0);
      node2.putProp(4, "ALWAYS_FALSE");
      node0.addChildToFront(node2);
      Node node3 = new Node(0, node0, node0, node0, node0);
      node3.isContinue();
      node3.addChildBefore(node3, node0);
      node0.isEquivalentToShallow(node0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Node node0 = new Node(101);
      Node node1 = new Node(56, node0, node0);
      Node node2 = new Node(55, node1);
      node0.srcrefTree(node1);
      Node node3 = Node.newString(38, "\"xR^8c*.");
      node2.replaceChild(node1, node3);
      node0.isOptionalArg();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Node node0 = new Node(117, 117, 117);
      node0.setLineno(117);
      node0.isTry();
      node0.isContinue();
      node0.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Node node0 = new Node(86);
      node0.isContinue();
      Node node1 = node0.setJSDocInfo((JSDocInfo) null);
      node1.isEquivalentTo(node0, false, false, true);
      node0.isEquivalentToShallow(node1);
      node0.isIn();
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Node node0 = new Node(102);
      Node node1 = new Node(4, node0, 15, 51);
      node0.isDec();
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      Node node3 = node2.srcrefTree(node1);
      // Undeclared exception!
      try { 
        node3.getChildBefore(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Node node0 = new Node(86, 86, 86);
      node0.getQualifiedName();
      Node node1 = new Node(86, 48, 36);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node0.isIn();
      node0.isComma();
      node0.getIndexOfChild(node2);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Node node0 = new Node(107);
      InputId inputId0 = new InputId("0no");
      node0.setInputId(inputId0);
      node0.setType(15);
      InputId inputId1 = node0.getInputId();
      node0.setInputId(inputId1);
      node0.isVar();
      node0.isNE();
      node0.removeChildren();
      node0.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = new Node(37, node0, node0, node0, 43, 0);
      node1.checkTreeEquals(node1);
      node0.isIn();
      node0.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Node node0 = new Node(102);
      node0.setSourceFileForTesting("o:m\rrAM#Qyl:DR^63");
      node0.isContinue();
      node0.isOr();
      Node node1 = new Node(57, node0, node0, node0, node0);
      node0.srcref(node1);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Node node0 = Node.newNumber(3418.0645695000044);
      node0.getDouble();
      Node node1 = Node.newNumber((double) 2);
      node1.setSourceFileForTesting("{N");
      node1.addChildrenToBack(node0);
      node1.isFromExterns();
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Node node0 = new Node(154);
      node0.isFor();
      node0.isContinue();
      Node node1 = node0.setJSDocInfo((JSDocInfo) null);
      node1.isEquivalentTo(node0, false, false, false);
      Node node2 = new Node(451);
      node0.toStringTree();
      node2.isLocalResultCall();
      node0.isUnscopedQualifiedName();
      node0.useSourceInfoIfMissingFrom(node2);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      int int0 = Node.STATIC_SOURCE_FILE;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType0;
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.checkTreeEquals(node1);
      node1.isFromExterns();
      EnumType enumType0 = jSTypeRegistry0.createEnumType("U$`\"OU'}YyQ(SYR", node1, jSType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      enumType0.getSlot("&XAgRi");
      enumElementType0.getOwnPropertyJSDocInfo("{...}");
      Node node2 = node1.setJSDocInfo((JSDocInfo) null);
      node2.copyInformationFrom(node0);
      Node.newString(40, "U$`\"OU'}YyQ(SYR");
      node2.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Node node0 = new Node(103);
      node0.isLabelName();
      node0.getProp(4100);
      node0.isEquivalentToTyped(node0);
      Node.extractCharno(43);
      Node node1 = Node.newNumber((-4.71411082322));
      node0.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Node node0 = new Node(5839);
      node0.cloneNode();
      node0.getSourceFileName();
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(38, node0, node0, node0, node0);
      node1.getLastSibling();
      // Undeclared exception!
      try { 
        node1.isQualifiedName();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Node node0 = Node.newNumber((-1166.8360068975435));
      Node node1 = new Node(8202);
      node0.putIntProp(465, (-941));
      node1.setType(39);
      node0.isFalse();
      node0.getSourceOffset();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "eZd5'@");
      node1.isEquivalentTo(node0, false, true, false);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Node node0 = new Node(33);
      node0.checkTreeTypeAwareEqualsImpl(node0);
      node0.isAdd();
      node0.isGetProp();
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Node node0 = Node.newNumber((-2710.70813711));
      Node node1 = new Node(37, node0, node0, node0, 46, 32);
      Node node2 = node1.copyInformationFromForTree(node0);
      node0.getInputId();
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node2, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      node0.isLabelName();
      node0.isEquivalentTo(node0, false, false, false);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.useSourceInfoIfMissingFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Node node0 = Node.newNumber((double) 102, 102, 102);
      node0.isVoid();
      Node node1 = new Node(3293);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node1);
      Node node2 = new Node(39, node1, node1, node0, (-1832), 56);
      Node.NodeMismatch node_NodeMismatch1 = node0.checkTreeEqualsImpl(node2);
      node_NodeMismatch1.equals(node_NodeMismatch0);
      node0.getAncestors();
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Node node0 = new Node(111);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.setJSDocInfo(jSDocInfo0);
      Node node1 = new Node(1, 1, 49);
      // Undeclared exception!
      try { 
        node0.replaceChild(node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(1133, 1133, 1133);
      node0.isCall();
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      Node node1 = new Node(151, node0, 40, 38);
      node1.getQualifiedName();
      node1.isDebugger();
      Node node2 = new Node(38);
      // Undeclared exception!
      try { 
        node2.setString("com.google.common.base.Equivalence$EquivalentToPredicate");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String node not created with Node.newString
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Node node0 = new Node(113);
      Node node1 = new Node(15, node0, node0, (-1906), (-606));
      node1.setCharno(4);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      node1.getIntProp(29);
      node0.isObjectLit();
      InputId inputId0 = new InputId("h&N]RXr:5o$_FO diC");
      node0.setInputId(inputId0);
      Node node3 = node2.getLastSibling();
      // Undeclared exception!
      try { 
        node3.addChildrenToFront(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      Node node1 = new Node(1621, node0, node0);
      node0.useSourceInfoFromForTree(node1);
      node0.isLabelName();
      node0.isEquivalentTo(node0, true, true, false);
      node0.toStringTree();
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Node node0 = new Node(117, 117, 117);
      node0.hasChild(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.useSourceInfoFromForTree(node1);
      node0.setLineno(117);
      node0.isBreak();
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Node node0 = new Node(38);
      node0.isDefaultCase();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      Node node2 = new Node(42);
      node2.isEquivalentTo(node1, false, true, false);
      node1.isEquivalentToShallow(node2);
      node0.getJSDocInfo();
      Node node3 = Node.newNumber(2362.1137876899106);
      node3.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(1133, 1133, 1133);
      node0.isWith();
      node0.isCall();
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      HashSet<JSType> hashSet1 = new HashSet<JSType>();
      Node node1 = new Node(151, node0, 40, 38);
      node1.isDebugger();
      node0.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Node node0 = new Node(111);
      Node node1 = new Node(1, 1, 49);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node2.isTrue();
      // Undeclared exception!
      try { 
        node0.replaceChild(node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Node node0 = Node.newNumber((-2710.70813711));
      Node node1 = new Node(37, node0, node0, node0, 46, 32);
      node0.getInputId();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      node0.isExprResult();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node1.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newString("Object#Element");
      Node node1 = new Node(105, node0, 4, 43);
      // Undeclared exception!
      try { 
        node1.appendStringTree((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Node node0 = new Node(66, 66, 66);
      node0.isDefaultCase();
      node0.setType(16);
      Node node1 = Node.newString((-783), "synthetic");
      Node node2 = new Node(30, node1, node0);
      // Undeclared exception!
      try { 
        node0.replaceChild(node2, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Node node0 = new Node(111);
      Node node1 = Node.newNumber(3426.9380330444);
      Node node2 = new Node(57, node1, 29, 29);
      node1.isDec();
      node0.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString(148, "uxnE[", (-2619), 150);
      node0.isGetterDef();
      node0.isSetterDef();
      node0.isBlock();
      Node node1 = Node.newString(49, "t+AieJ:!YNjU<uV-<");
      node0.addChildToFront(node1);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Node node0 = new Node(118);
      node0.isLabelName();
      node0.setJSDocInfo((JSDocInfo) null);
      boolean boolean0 = true;
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // VAR is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Node node0 = new Node(120, 120, 120);
      node0.isWith();
      Node.newString((-3521), "T]a'%uc&B6H0MhU");
      node0.isIn();
      node0.children();
      Node node1 = new Node(56);
      node0.copyInformationFromForTree(node1);
      node1.getSourceFileName();
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = new Node(111);
      node0.isBlock();
      node0.getLastSibling();
      Node node1 = new Node(1, 1, 49);
      // Undeclared exception!
      try { 
        node0.replaceChild(node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Node node0 = Node.newNumber((-2710.70813711));
      Node node1 = new Node(37, node0, node0, node0, 46, 32);
      node0.getInputId();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      node1.toString();
      node1.useSourceInfoIfMissingFrom(node0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Node node0 = Node.newNumber((-2710.70813711));
      Node node1 = new Node(37, node0, node0, node0, 46, 32);
      node0.getInputId();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node2 = new Node(1940, 12, 37);
      node0.isEquivalentTo(node2, false, false, false);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) null, jSTypeArray0);
      node1.putProp(47, functionType0);
      node1.toString();
      Node node3 = new Node(42, node1, 15, 49);
      node3.isWhile();
      node3.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Node node0 = new Node(126);
      node0.setOptionalArg(false);
      node0.isOnlyModifiesThisCall();
      Node node1 = new Node(152, node0, node0, node0, 46, 46);
      node1.cloneNode();
      Node node2 = node1.cloneTree();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)26;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("]@@uxSkMbF+=OH|", true);
      node2.setStaticSourceFile(simpleSourceFile0);
      node1.isLocalResultCall();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node1.mayMutateGlobalStateOrThrow();
      node0.getQualifiedName();
      node1.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Node node0 = new Node(33, 33, 33);
      node0.isVar();
      Node node1 = new Node(50, node0, node0, (-2606), 44);
      node0.useSourceInfoFromForTree(node1);
      // Undeclared exception!
      try { 
        node0.getQualifiedName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = "V5zD^* H";
      Node node0 = Node.newString(35, "V5zD^* H", 52, 154);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      node0.isFromExterns();
      node0.setDirectives(set0);
      node0.wasEmptyNode();
      node0.isUnscopedQualifiedName();
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // GETELEM V5zD^* H 52 [directives: com.google.javascript.rhino.Node$ObjectPropListItem@0000000002] is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Node node0 = Node.newString((-1227), "I][hqe");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(4095, nodeArray0, (-1227), 39);
      node1.isSyntheticBlock();
      node1.wasEmptyNode();
      node0.setSourceFileForTesting("{ ]bivZXo{");
      node0.setSourceEncodedPosition((-640));
      node1.siblings();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      node0.copyInformationFrom(node1);
      node0.checkTreeTypeAwareEqualsImpl(node0);
      // Undeclared exception!
      try { 
        node0.getDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1227
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList.of();
      Node node0 = Node.newString("Object#Key");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(51, nodeArray0, 32, 2801);
      node1.cloneNode();
      Node node2 = Node.newNumber((double) 29, 4570, 37);
      // Undeclared exception!
      try { 
        node0.removeChildAfter(node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")D?AL");
      Node node0 = new Node(154);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")D?AL");
      Node node1 = Node.newNumber(12.0);
      node1.setSourceFileForTesting(")D?AL");
      node1.isQualifiedName();
      node0.cloneNode();
      // Undeclared exception!
      try { 
        node0.replaceChildAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Node node0 = new Node(101);
      node0.isLabelName();
      Node node1 = node0.setJSDocInfo((JSDocInfo) null);
      node0.isEquivalentTo(node1, true, true, false);
      node0.isBreak();
      node0.cloneNode();
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Node node0 = new Node(108);
      node0.setJSDocInfo((JSDocInfo) null);
      Node node1 = Node.newString("com.google.javascript.rhino.Node$AncestorIterable$1");
      node1.getInputId();
      node1.isIf();
      node1.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Node node0 = new Node(102);
      Node node1 = new Node((-1972));
      node0.useSourceInfoFrom(node1);
      node0.isContinue();
      node0.isFromExterns();
      node0.isOr();
      node0.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Node node0 = new Node(101);
      node0.isFunction();
      node0.setLength(101);
      node0.isAnd();
      node0.isFromExterns();
      node0.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Node node0 = Node.newString(96, "aPp<Gr@>w$b+dA>v", 96, 96);
      Node node1 = Node.newString(":Yix");
      Node node2 = new Node(105, 51, 1);
      Node node3 = new Node(49, node1, node1, node2, node0, (-2814), 112);
      node0.checkTreeTypeAwareEqualsImpl(node3);
      node1.addChildrenToBack(node3);
      Node node4 = node3.getChildBefore(node2);
      node4.setWasEmptyNode(false);
      node4.isInc();
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Node node0 = new Node(101);
      node0.isLabelName();
      Node node1 = node0.setJSDocInfo((JSDocInfo) null);
      node0.isEquivalentTo(node1, true, true, false);
      node1.isEquivalentToShallow(node0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Node node0 = new Node(120, 120, 120);
      node0.isVar();
      Node node1 = new Node(46, node0, 50, 38);
      node1.isDec();
      node1.removeChildren();
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Node node0 = new Node(46, 46, 968);
      node0.isTrue();
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      node0.isFromExterns();
      node0.addChildToBack(node0);
      node0.checkTreeEquals(node0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Node node0 = new Node(86);
      node0.isVar();
      node0.isWith();
      node0.isGetElem();
      node0.isDec();
      Node node1 = new Node(34, node0, node0, node0, 53, (-968));
      node1.removeChildren();
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Node.newNumber((-894.0));
      Node node0 = Node.newString(37, "tUQ;B$P");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-433));
      node0.setSideEffectFlags(node_SideEffectFlags0);
      Node.newString("tUQ;B$P");
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      ImmutableList.of();
      Node node0 = new Node(154);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.isFor();
      node0.isLabelName();
      Node node1 = node0.setJSDocInfo((JSDocInfo) null);
      Node node2 = node1.copyInformationFrom(node0);
      node2.isOnlyModifiesThisCall();
      node2.setCharno(87855567);
      node1.isEquivalentTo(node0, false, false, false);
      node1.isEquivalentToShallow(node0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "jiHZ$l`=AF+NYm-kCW");
      Node node0 = new Node((-1737));
      node0.isLabelName();
      Node node1 = node0.setJSDocInfo((JSDocInfo) null);
      Node.newString("no message resource found for message property ");
      node0.getInputId();
      node0.getProp(56);
      node1.isEquivalentToTyped(node0);
      Node.extractLineno(33584907);
      Node.extractCharno(33);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Node node0 = new Node(102, 102, 102);
      node0.isLocalResultCall();
      node0.toString();
      node0.isFromExterns();
      node0.isOr();
      Node node1 = new Node(53, node0, node0, 38, (-2578));
      node1.isEquivalentToTyped(node0);
      node0.copyInformationFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Node node0 = new Node(86);
      node0.getQualifiedName();
      Node node1 = new Node(1863, node0, node0, node0, node0, (-1048), 86);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node2.isOptionalArg();
      node0.isNumber();
      node0.setLineno((-1401));
      node0.isBreak();
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Node node0 = new Node(33);
      node0.isAdd();
      node0.checkTreeTypeAwareEqualsImpl(node0);
      node0.getAncestor(33);
      // Undeclared exception!
      try { 
        node0.isQualifiedName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "W~ I");
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newString("Op+g75{Rc{6");
      Node node1 = new Node(119, node0, node0);
      nodeArray0[0] = node1;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node2 = new Node(119, nodeArray0, 1, 37);
      Node node3 = node2.getFirstChild();
      node1.isOptionalArg();
      // Undeclared exception!
      try { 
        node3.replaceChildAfter(node2, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = Node.newString("AWAY_FSNE");
      Node node2 = new Node(47, node1);
      node2.putProp(4, "AWAY_FSNE");
      node0.addChildToFront(node2);
      Node node3 = new Node(0, node0, node0, node0, node0);
      node3.isContinue();
      node1.isQualifiedName();
      node2.cloneTree();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Node node0 = new Node(102);
      node0.isGetElem();
      Node node1 = new Node(105, node0, 15, 35);
      node0.setLineno((-150));
      node1.isBreak();
      node1.cloneTree();
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Node node0 = new Node(120, 120, 120);
      Node node1 = new Node(111, 120, 37);
      node0.isVar();
      node1.isWith();
      Node node2 = new Node((-3075));
      node2.mayMutateArguments();
      node1.isIn();
      node1.clonePropsFrom(node2);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Node node0 = new Node(147);
      node0.setChangeTime(4095);
      node0.toStringTree();
      Node node1 = Node.newNumber((double) 30);
      node0.srcrefTree(node1);
      node0.setWasEmptyNode(false);
      node0.isCatch();
      node0.isDefaultCase();
      node1.useSourceInfoFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Node node0 = Node.newNumber(3069.460587959455);
      node0.isVar();
      node0.isWith();
      node0.isCall();
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      node0.isGetElem();
      HashSet<JSType> hashSet1 = new HashSet<JSType>();
      Node node1 = new Node(119, node0, 51, 410);
      node1.isInc();
      node0.isDebugger();
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      node2.isEquivalentToShallow(node0);
      node1.isIn();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[5];
      JSType.toMaybeTemplateType((JSType) null);
      JSType.toMaybeFunctionType((JSType) null);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createEnumType("#", node2, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Node node0 = new Node(114, 114, 114);
      node0.hasChild(node0);
      node0.setLineno(114);
      node0.isBreak();
      node0.isDo();
      Node.newString(50, "v*w[Ob_g");
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = new Node(39, 39, 1610612736);
      Node node1 = new Node(39, node0, node0, node0, node0, (-3827), 45);
      node0.useSourceInfoFromForTree(node1);
      String string0 = "gt2])sc ";
      // Undeclared exception!
      try { 
        node0.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Node node0 = Node.newString("Jw-|Uu:L$[V", 51, 51);
      node0.getAncestors();
      Node node1 = new Node(30, node0);
      node1.cloneTree();
      Node node2 = node0.useSourceInfoFrom(node1);
      Node node3 = node0.useSourceInfoFromForTree(node2);
      node3.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Node node0 = new Node(103);
      node0.isOr();
      Node node1 = Node.newString(55, "c= ,5F$L", (-3164), 15);
      node0.useSourceInfoFromForTree(node1);
      node0.isDelProp();
      node0.isWhile();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Node node0 = new Node(86);
      node0.getQualifiedName();
      node0.isInstanceOf();
      node0.isIn();
      node0.isComma();
      node0.isAssign();
      try { 
        node0.setString((String) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ASSIGN is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Node node0 = new Node(103);
      node0.cloneNode();
      Node node1 = Node.newString("incrdecr", 4095, 48);
      node1.children();
      node0.isOr();
      node0.isDelProp();
      node0.isWhile();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Node node0 = new Node((-1716));
      Node node1 = new Node(4095, node0);
      node1.removeChildren();
      // Undeclared exception!
      try { 
        node0.replaceChild(node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Node node0 = new Node(101);
      Node node1 = new Node(77);
      Node node2 = new Node(55, node1);
      Node node3 = Node.newString(38, "\"xR^8c*.");
      node2.replaceChild(node1, node3);
      node1.isIn();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Node node0 = new Node(120, 120, 120);
      Node node1 = Node.newString("^", 100, 100);
      node0.srcrefTree(node1);
      node0.setType(113);
      node0.isGetElem();
      Node node2 = Node.newString(",;PwGD");
      node2.isContinue();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.setLength(42);
      Node node1 = new Node(37, node0, node0, node0, 43, 0);
      node0.isAssign();
      Node node2 = Node.newNumber((-2710.70813711), 866, 40);
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node0, node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = Node.newString(46, "Object#Key");
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node0.setJSDocInfo(jSDocInfo0);
      Node node2 = new Node(3677, nodeArray0, 1595, 96);
      Node node3 = node2.removeChildAfter(node1);
      try { 
        node3.setDouble(2304.442);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST [jsdoc_info: com.google.javascript.rhino.Node$ObjectPropListItem@0000000340] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Node node0 = new Node(124, 124, 124);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      node0.isGetElem();
      Node node1 = new Node(53, node0, (-2494), 1);
      node0.isInc();
      node0.cloneNode();
      node0.isDebugger();
      node1.isGetterDef();
      // Undeclared exception!
      try { 
        node0.removeChild(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Node node0 = new Node((-7450));
      HashSet<JSType> hashSet0 = new HashSet<JSType>(39);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node1 = new Node(52);
      node1.isIn();
      node1.isInstanceOf();
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Node node0 = Node.newNumber((-1181.5240597873797));
      Node node1 = node0.cloneNode();
      node1.getInputId();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      node0.setLength((-1278));
      node0.getDouble();
      node1.isIn();
      node0.putProp(55, node1);
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER -1181.5240597873797 [length: com.google.javascript.rhino.Node$IntPropListItem@0000000335] [inferred: com.google.javascript.rhino.Node$ObjectPropListItem@0000000336] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Node node0 = Node.newNumber((double) 96);
      node0.getSourceOffset();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      JSType[] jSTypeArray0 = new JSType[4];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType0;
      jSTypeArray0[2] = jSType0;
      jSTypeArray0[3] = jSType0;
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node2 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node2.checkTreeEquals(node0);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Node node0 = new Node(102);
      node0.isFunction();
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      node0.isGetElem();
      Node node1 = new Node(31, node0, (-1352), 2821);
      node0.isInc();
      node1.isDebugger();
      node1.isGetterDef();
      // Undeclared exception!
      try { 
        node0.removeChild(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Node node0 = new Node(103);
      node0.isOr();
      node0.isCase();
      node0.mayMutateGlobalStateOrThrow();
      node0.isWhile();
      node0.isInc();
      Node node1 = Node.newNumber(1.0, 57, 8);
      node0.copyInformationFrom(node1);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = Node.newString("ALWAYS_FALSE");
      Node node2 = new Node(47, node1);
      node2.putProp(4, "ALWAYS_FALSE");
      node0.addChildToFront(node2);
      Node node3 = new Node(0, node0, node0, node0, node0);
      node3.isContinue();
      node3.addChildBefore(node3, node0);
      node0.isEquivalentToShallow(node0);
      node2.isRegExp();
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Node node0 = new Node(120);
      node0.isVar();
      node0.isWith();
      node0.isGetElem();
      node0.setLineno(120);
      node0.isIf();
      Node node1 = node0.getLastSibling();
      node1.getLength();
      node0.isIf();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Node node0 = new Node(120, 120, 120);
      node0.isLabelName();
      Node node1 = node0.setJSDocInfo((JSDocInfo) null);
      node0.isEquivalentTo(node1, false, false, false);
      node1.detachChildren();
      node1.children();
      node0.isWith();
      node1.isBreak();
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Node node0 = new Node(124, 124, 124);
      Node node1 = Node.newString("c= ,5F$L");
      node0.useSourceInfoFromForTree(node1);
      node0.isDefaultCase();
      node0.setType(16);
      node0.isAdd();
      node0.getBooleanProp(16);
      Node.newString(5760, "Z8tW2R)z7zJ=`U", 30, 12);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Node node0 = new Node(60, 60, 60);
      node0.isTypeOf();
      node0.detachChildren();
      Node node1 = new Node(16, node0);
      node1.isInc();
      node1.isOptionalArg();
      node0.isObjectLit();
      node1.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.setLength(42);
      Node node1 = new Node(37, node0, node0, node0, 43, 0);
      node0.isAssign();
      node1.checkTreeEquals(node1);
      node0.isExprResult();
      node1.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Node node0 = Node.newString((-2409), "Object#Key");
      node0.putBooleanProp(51, true);
      Node node1 = new Node(1318, node0, node0, node0, node0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Object#Key");
      node0.isLocalResultCall();
      node1.getLastChild();
      node0.isName();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        node1.srcrefTree(node0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node$IntPropListItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Node node0 = new Node(102);
      Node node1 = new Node(0);
      Node node2 = node0.copyInformationFrom(node1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte) (-91);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Node node3 = new Node((-4133));
      node0.toStringTree();
      node2.isLocalResultCall();
      node0.isUnscopedQualifiedName();
      node2.isContinue();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Node node0 = new Node(102);
      node0.isVar();
      node0.isGetElem();
      Node node1 = Node.newString(",;PwGD");
      node0.isContinue();
      node1.isDefaultCase();
      node0.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = Node.newString(118, "Yb", 57, 56);
      node0.isFunction();
      node1.isAnd();
      node0.cloneTree();
      Node node2 = Node.newString("Object#Element");
      node2.isExprResult();
      node0.isIn();
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Node node0 = new Node(4);
      node0.isFor();
      node0.isLabelName();
      node0.setJSDocInfo((JSDocInfo) null);
      Node node1 = Node.newNumber(0.0);
      node1.isEquivalentTo(node0, false, false, false);
      node1.detachChildren();
      node0.children();
      node0.isWith();
      node1.isBreak();
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      ImmutableList.of();
      Node node0 = new Node(154);
      node0.isFor();
      node0.isLabelName();
      Node node1 = node0.setJSDocInfo((JSDocInfo) null);
      node1.isEquivalentTo(node0, false, false, false);
      node1.detachChildren();
      node0.children();
      node0.isWith();
      node0.isBreak();
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = Node.newString(46, "Yb");
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node1;
      node1.getSourceFileName();
      nodeArray0[1] = node0;
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.addChildrenToBack(node2);
      Node node3 = new Node(3677, nodeArray0, 1595, 113);
      Node node4 = node3.removeChildAfter(node1);
      node4.getChildCount();
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Node node0 = new Node(103);
      node0.isOr();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      node0.setJSDocInfo(jSDocInfo0);
      node0.isWhile();
      node0.isWhile();
      node0.isInc();
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Node node0 = new Node(102);
      node0.isFunction();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.setLength(102);
      node0.isAnd();
      node0.isGetElem();
      Node node1 = new Node(42, node0, node0, node0, node0, 47, 39);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node1.isContinue();
      node1.useSourceInfoIfMissingFromForTree(node0);
      node1.isEquivalentTo(node0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList.of();
      Node node0 = Node.newString("Object#Key");
      Node node1 = new Node(39, node0, node0);
      node0.addChildToFront(node1);
      node1.getSourceFileName();
      node0.removeFirstChild();
      Node node2 = null;
      try {
        node2 = new Node(38, node1, node1, node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Node node0 = new Node(103);
      node0.isOr();
      node0.getJsDocBuilderForNode();
      Node node1 = new Node(15, node0, node0, node0, node0);
      node0.srcref(node1);
      node1.isQualifiedName();
      // Undeclared exception!
      try { 
        node1.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Node node0 = new Node(102);
      node0.isFunction();
      node0.getLength();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node1 = new Node(1, node0, node0, node0, node0);
      node0.useSourceInfoFromForTree(node1);
      node0.setLength(102);
      node0.isAnd();
      node0.isGetElem();
      Node node2 = null;
      try {
        node2 = new Node(42, node0, node0, node0, node0, 47, 39);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Node node0 = new Node(31);
      node0.cloneTree();
      node0.isBlock();
      node0.isComma();
      Node.newString("L)'fX]!NSdupfoJ_j1");
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Node node0 = new Node(120, 120, 120);
      Node node1 = new Node((-1056), node0, node0, node0, 38, 26);
      node0.useSourceInfoIfMissingFrom(node1);
      node0.setType(113);
      node0.isGetElem();
      Node node2 = Node.newString(",;PwGD");
      node2.isContinue();
      node2.isUnscopedQualifiedName();
      node0.isExprResult();
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Node node0 = new Node(111);
      node0.isVoid();
      node0.checkTreeTypeAwareEqualsImpl(node0);
      node0.isContinue();
      Node node1 = new Node(40, node0);
      node0.useSourceInfoFrom(node1);
      node0.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Node node0 = new Node(33);
      node0.isVar();
      // Undeclared exception!
      try { 
        node0.getQualifiedName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Node node0 = new Node(111);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node.extractLineno(12);
      node0.isCase();
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node1 = new Node((-87), node0);
      node1.getQualifiedName();
      node1.getSourceOffset();
      node0.addChildrenToBack(node1);
      simpleErrorReporter0.error("[DzH", "Object#Key", 323, (-370));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Object#Key");
      node1.isBlock();
      Node node2 = node1.detachFromParent();
      node0.isDec();
      Node node3 = node0.copyInformationFrom(node1);
      node3.isExprResult();
      node2.isDo();
      node1.removeFirstChild();
      Node node4 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node node5 = node2.useSourceInfoFrom(node4);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        node5.getDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -87
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Node node0 = new Node(124);
      Node node1 = new Node(39, node0, node0, node0, node0, 51, 0);
      Node node2 = node0.copyInformationFromForTree(node1);
      node0.isVoid();
      node0.isGetElem();
      node0.mayMutateGlobalStateOrThrow();
      node0.setLineno(124);
      node2.setLineno((-455));
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = Node.newNumber((double) 40);
      Node node2 = new Node(39, node0, node0, node1);
      node2.useSourceInfoIfMissingFrom(node0);
      node0.isOptionalArg();
      node2.getProp(57);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Node node0 = new Node(37);
      node0.isVoid();
      node0.setVarArgs(false);
      node0.isExprResult();
      node0.mayMutateGlobalStateOrThrow();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)117;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.setLineno((-1559));
      Node node1 = Node.newString(41, "com.google.common.base.Joiner$1");
      node0.srcref(node1);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Node node0 = Node.newString("Object#Element", (-1168), (-1168));
      JSTypeNative jSTypeNative0 = JSTypeNative.NULL_VOID;
      node0.setWasEmptyNode(false);
      node0.putProp((-1168), jSTypeNative0);
      node0.setLineno((-704));
      // Undeclared exception!
      try { 
        node0.getIntProp((-1168));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node$ObjectPropListItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      Node node0 = Node.newString("7A$", 54, (-904));
      node0.getQualifiedName();
      Node node1 = new Node(116);
      Node node2 = node1.copyInformationFrom(node0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)118;
      byteArray0[5] = (byte)89;
      byteArray0[6] = (byte)18;
      byteArray0[7] = (byte)89;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Node node3 = new Node(43);
      node2.toStringTree();
      node3.isLocalResultCall();
      node0.isUnscopedQualifiedName();
      node0.isDelProp();
      node3.isName();
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Node node0 = new Node(32, 122, (-605));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node0.srcref(node1);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      Iterable<Node> iterable0 = node0.children();
      simpleErrorReporter1.warning("Object#Key", "Object#Key", 36, 56);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) jSTypeRegistry1;
      jSTypeRegistry1.forwardDeclareType("Object#Element");
      objectArray0[1] = (Object) iterable0;
      objectArray0[2] = (Object) arrayList0;
      objectArray0[3] = (Object) "Object#Element";
      objectArray0[4] = (Object) "Object#Element";
      objectArray0[5] = (Object) simpleErrorReporter1;
      // Undeclared exception!
      try { 
        SimpleErrorReporter.getMessage("Object#Element", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property Object#Element
         //
         verifyException("com.google.javascript.rhino.SimpleErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Node node0 = new Node(124);
      Node node1 = Node.newString("EMPTY", 132, 1);
      node0.removeProp(29);
      node0.copyInformationFrom(node1);
      node0.isEmpty();
      node0.isEquivalentToTyped(node0);
      node0.isInc();
      node0.wasEmptyNode();
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Node node0 = new Node(103);
      node0.isOr();
      node0.isExprResult();
      node0.setLineno((-256));
      node0.isWhile();
      node0.isIn();
      Node node1 = Node.newString("pJ4|2?]");
      Node node2 = node0.clonePropsFrom(node1);
      node2.cloneTree();
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Node node0 = new Node((-7450));
      Node node1 = new Node(105, node0);
      node1.getQualifiedName();
      Node node2 = new Node(42);
      Node node3 = node0.copyInformationFrom(node2);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)63;
      node3.isSwitch();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Node node4 = new Node(49);
      // Undeclared exception!
      try { 
        node1.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -7450
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Node node0 = new Node(124, 124, 124);
      node0.isNE();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      node_AncestorIterable0.spliterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      int int0 = Node.INCRDECR_PROP;
      node0.isContinue();
      node0.cloneTree();
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newString("Object#Element");
      node0.isGetElem();
      Node node1 = new Node(105, node0, 65522, 43);
      Node node2 = node1.useSourceInfoIfMissingFrom(node0);
      node0.setQuotedString();
      node1.isCall();
      node2.mayMutateGlobalStateOrThrow();
      node0.isDo();
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Node node0 = new Node(129);
      node0.isEmpty();
      Node node1 = Node.newNumber((-1.0), 55, 3811);
      Node node2 = new Node(31, node0, node1, node1, node0);
      Node.newNumber((double) 55, 50, 65535);
      Node node3 = node2.cloneNode();
      node3.mayMutateGlobalStateOrThrow();
      node2.isName();
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((-1.0));
      node0.isRegExp();
      Node node1 = new Node(4);
      node1.clonePropsFrom(node0);
      Node node2 = Node.newString(36, "tUQ;B$P");
      int int0 = Node.LAST_PROP;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(39);
      // Undeclared exception!
      try { 
        node2.setSideEffectFlags(node_SideEffectFlags0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 36
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      String string0 = "synthetic";
      Node node0 = Node.newString("synthetic");
      Node node1 = new Node(51, node0, node0, node0, node0, 1, 36);
      node0.setSourceEncodedPosition(12);
      node1.srcrefTree(node0);
      Node node2 = null;
      try {
        node2 = new Node((-1439), node1, node0, node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Node node0 = new Node(34);
      node0.isVar();
      Node node1 = Node.newString("");
      node0.addChildrenToBack(node1);
      Node node2 = new Node(31);
      Node node3 = Node.newString((-1541), "");
      Node node4 = new Node((-2057), node0, node0, node3);
      // Undeclared exception!
      try { 
        node4.getChildBefore(node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Node node0 = Node.newString(160, "7A$", 160, 160);
      node0.isNoSideEffectsCall();
      node0.isEquivalentToTyped(node0);
      Node node1 = new Node(0, node0);
      Node node2 = node1.copyInformationFrom(node0);
      node1.isDefaultCase();
      node1.isInc();
      Node node3 = node1.copyInformationFromForTree(node0);
      // Undeclared exception!
      try { 
        node2.replaceChild(node1, node3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Node node0 = Node.newString("Object#Element", (-429), 119);
      node0.isObjectLit();
      node0.isRegExp();
      Node.newString("O^Yc");
      Node node1 = Node.newString(63, "S7:wu/k");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte)29;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node1.isExprResult();
      Node node2 = new Node(113, node1, node0);
      node2.srcrefTree(node1);
      node2.isContinue();
      node2.isTrue();
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Object object0 = new Object();
      node0.isEquivalentToShallow(node0);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node0.setDouble((-1.0));
      Node node1 = new Node(30, node0, node0, 54, 131);
      node1.setSourceEncodedPosition(1);
      node0.isEquivalentTo(node1);
      Node node2 = node1.clonePropsFrom(node0);
      node2.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Node node0 = new Node(46, 46, 983);
      node0.isTrue();
      Node node1 = Node.newNumber(3562.46203172131, 21, (-3331));
      node1.clonePropsFrom(node0);
      Node node2 = new Node(2, node0, node0, node0, node1, 31, 43);
      Node.newNumber(0.7);
      node2.hasOneChild();
      node2.isBlock();
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(26, nodeArray0, 26, 26);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node0.mayMutateGlobalStateOrThrow();
      Node node1 = new Node(709);
      Node node2 = node0.srcrefTree(node1);
      node0.hasOneChild();
      Node node3 = new Node(48, node1);
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node2, node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newString("Object#Element");
      node0.isGetElem();
      Node node1 = new Node(105, node0, 65522, 43);
      node0.setQuotedString();
      node1.isDec();
      node1.isFunction();
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Node node0 = Node.newNumber((-1181.5240597873797));
      Node node1 = node0.cloneNode();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      // Undeclared exception!
      try { 
        node1.copyInformationFrom((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Node node0 = new Node(160);
      Node node1 = new Node(155);
      node1.putIntProp(42, 53);
      node0.setType(2048);
      node0.isFalse();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8kT;s");
      node1.isCast();
      node0.isEquivalentTo(node1, true, false, false);
      node0.isObjectLit();
      node0.isOnlyModifiesArgumentsCall();
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Node node0 = Node.newNumber((double) 86, 86, (-634));
      Node node1 = new Node(86, node0, node0, node0, node0);
      Node node2 = new Node(86, node1, node1, 15, 43);
      Node node3 = Node.newString(4, "3/7')/VB(Aq7", 46, 47);
      Node node4 = node2.srcref(node3);
      node4.isIn();
      Node node5 = null;
      try {
        node5 = new Node(29, (Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Node node0 = new Node(41, 41, 41);
      node0.isTrue();
      Node node1 = new Node(31, node0, node0, node0, node0, 48, 43);
      Node.newNumber(1251.30514758635);
      node1.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Node node0 = Node.newString("Object#Element", (-429), 119);
      node0.isObjectLit();
      node0.setIsSyntheticBlock(true);
      Node.newString(31, "@U0O#LE_{n6m");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.getExistingIntProp(38);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.setLength(42);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.setAllFlags();
      int int0 = Node.STATIC_SOURCE_FILE;
      Node node1 = new Node(105, (-3329), 0);
      node1.isInc();
      node1.copyInformationFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Node node0 = new Node(60, 60, 60);
      Node node1 = new Node(60, node0, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(42);
      node1.isSyntheticBlock();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.valueOf();
      node0.detachChildren();
      node0.isArrayLit();
      Node.newString("RSH", 50, 40);
      node1.getLastChild();
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = Node.newString("ALWAYS_FALSE");
      Node node2 = new Node(47, node1);
      node2.putProp(4, "ALWAYS_FALSE");
      node0.addChildToFront(node2);
      Node node3 = new Node(0, node0, node0, node0, node0);
      node3.isContinue();
      node0.copyInformationFrom(node3);
      node3.addChildBefore(node3, node0);
      node0.isEquivalentToShallow(node0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Node node0 = new Node(124);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.setJSDocInfo(jSDocInfo0);
      node0.isArrayLit();
      node0.setLineno(124);
      node0.getStaticSourceFile();
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = Node.newString("ALWAYS_FALSE");
      Node node2 = new Node(47, node1);
      node2.putProp(4, "ALWAYS_FALSE");
      node0.addChildToFront(node2);
      Node node3 = new Node(0, node0, node0, node0, node0);
      node3.isContinue();
      node3.addChildBefore(node3, node0);
      node0.isEquivalentToShallow(node0);
      node0.removeChildren();
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Node node0 = new Node(31);
      node0.isVoid();
      node0.isThrow();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.createTemplateType("SyntaxError");
      Node node1 = new Node(30, node0, node0, node0);
      node0.srcrefTree(node1);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = Node.newString("ALWAYS_FALSE");
      Node node2 = new Node(47, node1);
      Node node3 = new Node((-2269), node0, 49, 50);
      node3.removeFirstChild();
      node2.getQualifiedName();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      // Undeclared exception!
      try { 
        node3.setDouble(40);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -2269
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Node node0 = new Node(120);
      node0.getJsDocBuilderForNode();
      node0.setType(113);
      node0.isStringKey();
      node0.isAnd();
      node0.isIf();
      Node node1 = node0.getLastSibling();
      node0.clonePropsFrom(node1);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(26, nodeArray0, 26, (-1721));
      Node node1 = node0.getLastSibling();
      // Undeclared exception!
      try { 
        node1.clonePropsFrom((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Node node0 = Node.newString(124, "7nAB", 124, 124);
      node0.setType(32);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.STRING_OBJECT_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      JSType[] jSTypeArray0 = new JSType[5];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType0;
      jSTypeArray0[2] = jSType0;
      jSTypeArray0[3] = jSType0;
      jSTypeArray0[4] = jSType0;
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      // Undeclared exception!
      try { 
        node1.removeChild(node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Node node0 = Node.newString(122, "synthetic", 122, 122);
      node0.isFunction();
      node0.setType(154);
      node0.isFalse();
      node0.getSourceOffset();
      node0.isCast();
      node0.isStringKey();
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Node node0 = new Node(120, 120, 120);
      node0.setType(113);
      node0.isDo();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.setJSDocInfo(jSDocInfo0);
      Node node1 = Node.newString(2670, "", 8, 428);
      // Undeclared exception!
      try { 
        node1.getDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2670
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Node node0 = Node.newString(124, "7nAB", 124, 124);
      node0.setType(32);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.STRING_OBJECT_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      JSType[] jSTypeArray0 = new JSType[5];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType0;
      jSTypeArray0[2] = jSType0;
      node0.toString(false, false, false);
      Node node1 = new Node(0, node0, node0);
      node0.isTypeOf();
      node0.isCatch();
      node1.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Node node0 = new Node((-7450));
      node0.isVar();
      Node node1 = new Node(50);
      Node node2 = new Node(38, node0, node0, node1, node1);
      Node node3 = node1.srcref(node0);
      Node.newString("");
      node0.isIf();
      node1.isCatch();
      Node node4 = node0.getLastSibling();
      node3.clonePropsFrom(node4);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Node node0 = new Node(34);
      node0.setType(34);
      InputId inputId0 = new InputId("");
      node0.setInputId(inputId0);
      node0.isVar();
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      Node node1 = new Node(40, node0, node0, node0, 48, (-3358));
      // Undeclared exception!
      try { 
        node1.setString("Object#Key");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String node not created with Node.newString
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node(120, 120, 120);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      node0.setType(113);
      node0.isDo();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2);
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(37);
      node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.clearSideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags2.clearAllFlags();
      int int0 = Node.STATIC_SOURCE_FILE;
      Node node1 = new Node(40, 2, 29);
      node0.isInc();
      node0.setLineno(25);
      node0.getLastSibling();
      node0.srcrefTree(node1);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Node node0 = new Node(111);
      node0.isVoid();
      node0.isThrow();
      node0.cloneNode();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.google.javascript.rhino.Node$AncestorIterable$1");
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node_NodeMismatch0.equals((Object) null);
      Node node1 = new Node(114, node0);
      // Undeclared exception!
      try { 
        node0.replaceChildAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Node node0 = new Node((-1653));
      node0.setType((-1653));
      node0.getInputId();
      node0.setInputId((InputId) null);
      node0.isVar();
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      node0.isCatch();
      Node node1 = node0.getLastSibling();
      node0.clonePropsFrom(node1);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.setLength(42);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags2.clearAllFlags();
      int int0 = Node.STATIC_SOURCE_FILE;
      Node node1 = new Node(105, (-3329), 0);
      node1.isInc();
      node0.isDefaultCase();
      node1.useSourceInfoFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Node node0 = new Node(86);
      node0.isAssignAdd();
      node0.getQualifiedName();
      node0.getJsDocBuilderForNode();
      node0.isInstanceOf();
      node0.mayMutateGlobalStateOrThrow();
      node0.isIn();
      node0.getQualifiedName();
      node0.isThrow();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node0.isInstanceOf();
      Node node1 = Node.newString("2;H)i", 4095, 57);
      Node node2 = node0.useSourceInfoFrom(node1);
      node0.useSourceInfoIfMissingFromForTree(node2);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node(120, 120, 120);
      node0.setType(113);
      node0.isDo();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2);
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(37);
      node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags2.clearAllFlags();
      int int0 = Node.STATIC_SOURCE_FILE;
      Node node1 = new Node(40, 2, 29);
      node0.isInc();
      node0.setLineno(25);
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Node node0 = new Node(86);
      node0.isAssignAdd();
      node0.getQualifiedName();
      node0.getJsDocBuilderForNode();
      node0.isInstanceOf();
      node0.isIn();
      node0.isComma();
      node0.isContinue();
      node0.cloneNode();
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Node node0 = new Node(34);
      node0.setType(34);
      InputId inputId0 = new InputId("");
      node0.setInputId(inputId0);
      node0.isVar();
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      Node node1 = Node.newString(42, "", 46, 51);
      node1.getQualifiedName();
      node1.isBreak();
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((-1.0));
      Node node1 = new Node(93, node0, node0, node0, node0, 38, (-1923));
      Node node2 = new Node(31);
      Node node3 = node1.srcref(node0);
      node0.setVarArgs(true);
      // Undeclared exception!
      try { 
        node2.addChildAfter(node3, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Node node0 = new Node(34);
      node0.isVar();
      node0.isWhile();
      Node node1 = new Node(32, node0, node0, node0, node0);
      node0.srcref(node1);
      Node node2 = Node.newString("prototype");
      node2.isIf();
      node1.isCatch();
      Node node3 = node2.getLastSibling();
      node1.clonePropsFrom(node3);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Node node0 = new Node(86);
      node0.isAssignAdd();
      node0.getQualifiedName();
      node0.getJsDocBuilderForNode();
      node0.isInstanceOf();
      node0.isIn();
      node0.isCatch();
      Node node1 = node0.getLastSibling();
      node1.clonePropsFrom(node0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Node node0 = new Node(120);
      node0.isVar();
      Node node1 = node0.srcref(node0);
      Node.newString("^H{iOAXE");
      node0.isIf();
      Node node2 = new Node(100, node0, node1, node0, node0);
      node2.isCatch();
      Node node3 = node0.getLastSibling();
      node3.clonePropsFrom(node0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Node node0 = new Node(41, 41, 41);
      node0.isTrue();
      Node node1 = new Node(31, node0, node0, node0, node0, 48, 43);
      Node node2 = new Node(15);
      Node node3 = node2.srcref(node0);
      node1.useSourceInfoIfMissingFrom(node3);
      node0.setVarArgs(false);
      node1.isDebugger();
      Node node4 = new Node((-3180), node2);
      node4.isWhile();
      node2.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Node node0 = new Node((-7450));
      node0.getInputId();
      node0.isVar();
      node0.isGetElem();
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node node1 = new Node(52);
      node1.isIn();
      node1.isComma();
      node0.isWith();
      node1.copyInformationFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Node node0 = Node.newNumber((double) 86, 86, 29);
      Node node1 = Node.newNumber(970.865992109919, 130, 49);
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      Node node3 = Node.newNumber((double) 49, 4095, 8);
      node0.isEquivalentTo(node3);
      Node node4 = new Node((-1901), node0, node1);
      node4.hasMoreThanOneChild();
      node2.toString();
      node1.isStringKey();
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isTry();
      Node node1 = new Node(1515, node0, node0, node0, node0);
      node0.srcref(node0);
      Node node2 = Node.newString("String node not created with Node.newString");
      node0.isIf();
      node0.isCatch();
      node1.getLastSibling();
      node2.clonePropsFrom(node1);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newString("Object#Element");
      node0.isGetElem();
      node0.setQuotedString();
      node0.isIn();
      node0.isQuotedString();
      node0.isBreak();
      node0.isTrue();
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Node node0 = Node.newNumber((double) 120, 29, 11);
      Node node1 = Node.newNumber(968.081, 85, 36);
      Node node2 = new Node(49);
      node2.checkTreeEquals(node0);
      node2.useSourceInfoIfMissingFromForTree(node1);
      try { 
        node1.setString("T5C");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 968.081 85 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newString(751619276, "Object#Element", 140, 751619276);
      node0.isFromExterns();
      node0.isGetterDef();
      node0.getQualifiedName();
      node0.isQuotedString();
      Node node1 = new Node(38, node0, node0, node0);
      Node node2 = node1.srcrefTree(node0);
      node1.isBreak();
      node2.toString();
      node1.isInc();
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Node node0 = new Node(120, 120, 120);
      node0.setType(113);
      node0.isFromExterns();
      node0.isAnd();
      node0.getDirectives();
      Node node1 = new Node(40, node0, node0, (-289), 1777);
      node0.isEquivalentTo(node1, false, false, false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.isUnscopedQualifiedName();
      node0.isObjectLit();
      Node node2 = node0.getParent();
      node2.isDefaultCase();
      node2.isOnlyModifiesArgumentsCall();
      // Undeclared exception!
      try { 
        node2.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String node not created with Node.newString
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.isWhile();
      node0.isNE();
      node0.isTrue();
      node0.isGetElem();
      node0.isQuotedString();
      node0.isIn();
      Node node1 = new Node(98, node0, node0, node0, node0, 154, (-1122));
      node1.mayMutateGlobalStateOrThrow();
      node1.isAssignAdd();
      node1.useSourceInfoIfMissingFromForTree(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node1.isContinue();
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Node node0 = Node.newNumber((-1181.5240597873797));
      Node node1 = node0.cloneNode();
      node1.isVar();
      node0.isWith();
      node0.isCall();
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      node0.isDo();
      node0.isGetElem();
      HashSet<JSType> hashSet1 = new HashSet<JSType>();
      node1.isGetElem();
      Node node2 = new Node(37, node0, 4095, 16);
      node1.isInc();
      node1.isDebugger();
      node2.isWhile();
      node2.cloneTree();
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>(117);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      Node node1 = new Node(117, node0, 54, (-495));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      node1.toString();
      node1.copyInformationFromForTree(node0);
      node1.getBooleanProp(30);
      node1.hasChildren();
      Node node2 = node1.copyInformationFrom(node0);
      try { 
        node2.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // CONTINUE is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = Node.newString(46, "Yb");
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      Node node2 = new Node(3677, nodeArray0, 1595, 113);
      Node node3 = node2.removeChildAfter(node1);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(108);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('=');
      charArrayWriter1.reset();
      node3.mayMutateArguments();
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      node_AncestorIterable0.iterator();
      node1.isWith();
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.getSourceOffset();
      node0.isWhile();
      Node node1 = new Node(56);
      node1.isGetElem();
      Node node2 = new Node(30, node0, node0, node0, node1);
      node2.isNew();
      node1.isIn();
      node2.toString(true, true, false);
      Node node3 = null;
      try {
        node3 = new Node(1414, node2, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Node node0 = new Node(120, 120, 120);
      node0.setType(112);
      node0.isDo();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.isAnd();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "'f>[@O*`B'yiHkuq|{";
      objectArray0[2] = (Object) "'f>[@O*`B'yiHkuq|{";
      objectArray0[4] = (Object) node0;
      objectArray0[5] = (Object) "'f>[@O*`B'yiHkuq|{";
      node0.isExprResult();
      Node node1 = Node.newString("Namespaces not supported yet (", 57, 43);
      node0.useSourceInfoFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Node node0 = Node.newString(124, "7AB", 124, 124);
      node0.isDefaultCase();
      node0.setType(32);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.STRING_OBJECT_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      JSType[] jSTypeArray0 = new JSType[5];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType0;
      jSTypeArray0[2] = jSType0;
      jSTypeArray0[3] = jSType0;
      jSTypeArray0[4] = jSType0;
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.checkTreeEquals(node1);
      node1.useSourceInfoFrom(node0);
      Node.newString(8, "Not declared as a type name");
      Node node2 = new Node(2135, node0, (-2019), 55);
      node2.isInc();
      node2.isDebugger();
      node1.isWhile();
      node2.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Node node0 = Node.newString(147, "index");
      node0.setChangeTime(4095);
      node0.isOnlyModifiesThisCall();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node((-1555), nodeArray0, 116, 32);
      node0.addChildrenToFront(node1);
      // Undeclared exception!
      try { 
        node0.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1555
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Node node0 = new Node(34);
      Node node1 = new Node(132, 52, 30);
      node0.isTrue();
      node0.isGetElem();
      Node node2 = new Node(124, node0, node1, node0, node1, 12, 56);
      Node node3 = node1.useSourceInfoFrom(node2);
      node2.srcref(node3);
      node1.setVarArgs(false);
      node1.isContinue();
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Node node0 = Node.newNumber((-1181.5240597873797));
      Node node1 = node0.cloneNode();
      node1.getInputId();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      JSType[] jSTypeArray0 = new JSType[0];
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) null, jSTypeArray0);
      node1.putProp(47, functionType0);
      node1.toString();
      Node node2 = new Node(1, (-490), 16);
      // Undeclared exception!
      try { 
        node2.addChildAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"pT>&!TO");
      Node node0 = Node.newNumber((-1.0));
      node0.isDefaultCase();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.addSuppression("\"pT>&!TO");
      node0.getCharno();
      node0.isGetProp();
      node0.addSuppression("\"pT>&!TO");
      Node.newNumber(0.5);
      node0.setDouble((-402.7));
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = new Node(0, node0, node0, node0, node0);
      node1.isEquivalentToTyped(node0);
      Node node2 = node0.detachFromParent();
      node2.isEquivalentToShallow(node0);
      node0.isEquivalentTo(node0, false, true, false);
      node1.isNoSideEffectsCall();
      // Undeclared exception!
      try { 
        node1.addChildBefore(node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Node node0 = new Node(34);
      node0.setType(34);
      InputId inputId0 = new InputId("");
      node0.setInputId(inputId0);
      node0.isGetProp();
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node0.getProp(34);
      Node node1 = new Node(46, 571, 49);
      Node node2 = new Node(42, node1, node1, node1, node0);
      node2.isCast();
      node2.isThis();
      node1.isEquivalentTo(node2, true, true, true);
      node2.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Node node0 = Node.newString(1272, "Object#Element", 124, 1272);
      node0.isEmpty();
      node0.isBlock();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null, false);
      node0.isExprResult();
      // Undeclared exception!
      try { 
        node0.toString(false, false, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1272
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(41, 41, 41);
      node0.isTrue();
      node0.isGetElem();
      Node node1 = new Node(31, node0, node0, node0, node0, 48, 43);
      Node node2 = node1.useSourceInfoFrom(node0);
      node2.srcref(node0);
      node0.setVarArgs(false);
      node1.addChildAfter(node2, node0);
      node1.isContinue();
      node1.removeFirstChild();
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((-1.0));
      node0.isObjectLit();
      Node node1 = new Node(4);
      node1.setIsSyntheticBlock(false);
      Node.newString(36, "tUQ;B$P");
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      Node node3 = Node.newNumber((double) 1);
      Node node4 = new Node(155, node3, node3, node2);
      try { 
        node4.setString("tUQ;B$P");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // CAST is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Node node0 = Node.newString("Object#Element", (-429), 119);
      node0.isObjectLit();
      node0.isLabelName();
      Node node1 = new Node(4, node0, node0, node0, 8, 31);
      node1.copyInformationFromForTree(node0);
      node0.isEquivalentToTyped(node1);
      node1.getDirectives();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node1.isNot();
      node0.getDirectives();
      node0.isOr();
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(41, 41, 41);
      node0.setType(33);
      node0.isFalse();
      node0.getSourceOffset();
      node0.isNot();
      // Undeclared exception!
      try { 
        node0.isUnscopedQualifiedName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(41, 41, 41);
      node0.isTrue();
      node0.isGetElem();
      Node node1 = new Node(31, node0, node0, node0, node0, 48, 43);
      Node node2 = node1.useSourceInfoFrom(node0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node3 = node2.useSourceInfoFrom(node0);
      Node node4 = Node.newString("quoted", 64, 83);
      node4.isNot();
      node3.isDelProp();
      node0.isName();
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Node node0 = new Node(1206);
      Node.newString("]LA}f+UYNq", 8, 1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte)50;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        node0.useSourceInfoIfMissingFrom((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Node node0 = Node.newString("Object#Element", (-429), 119);
      node0.isObjectLit();
      node0.isTry();
      Node node1 = new Node(2, node0, node0, node0, node0);
      Node node2 = node1.srcref(node0);
      node1.isAssign();
      node2.getQualifiedName();
      node1.isTry();
      node2.checkTreeEquals(node1);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node1;
      Node node3 = new Node(57, nodeArray0);
      node1.useSourceInfoFrom(node3);
      node1.isThrow();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node2);
      node0.isLabel();
      node1.isQuotedString();
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Node node0 = Node.newString(124, "7AB", 124, 124);
      node0.isDefaultCase();
      node0.setType(32);
      node0.isFalse();
      node0.getSourceOffset();
      node0.isNot();
      node0.isFor();
      node0.isNew();
      node0.isScript();
      node0.isWhile();
      node0.isLabelName();
      node0.getCharno();
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1);
      ImmutableList.of();
      Node node0 = Node.newString("Object#Element");
      node0.isVar();
      node0.isTrue();
      node0.isGetElem();
      Node node1 = new Node(105, node0, 65522, 43);
      Node node2 = Node.newString(2, "Object#Element", 2749, 0);
      node0.setQuotedString();
      node1.isTry();
      node2.isThrow();
      node1.toString(true, false, false);
      node2.getSourcePosition();
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList.of();
      Node node0 = Node.newString("Object#Element");
      node0.isVar();
      node0.isTrue();
      node0.isGetElem();
      Node node1 = new Node(105, node0, 65522, 43);
      Node node2 = node1.useSourceInfoFrom(node0);
      Node node3 = node2.srcref(node1);
      node2.setVarArgs(false);
      // Undeclared exception!
      try { 
        node3.addChildAfter(node1, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isTry();
      Node node1 = new Node(98, node0, node0, node0, node0);
      node1.setLength(46);
      // Undeclared exception!
      try { 
        node1.replaceChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Node node0 = new Node(120, 120, 120);
      node0.setType(113);
      node0.isDo();
      node0.isGetElem();
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      node0.isGetElem();
      Node.newString((-429), ",;PwGD");
      node0.cloneTree();
      node0.isGetProp();
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.setLength(42);
      LinkedHashSet<TemplateType> linkedHashSet0 = new LinkedHashSet<TemplateType>();
      Iterator<TemplateType> iterator0 = linkedHashSet0.iterator();
      ImmutableList<TemplateType> immutableList1 = ImmutableList.copyOf((Iterator<? extends TemplateType>) iterator0);
      jSTypeRegistry0.createTemplateTypeMap(immutableList1, immutableList0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags2.clearAllFlags();
      int int0 = Node.STATIC_SOURCE_FILE;
      Node node1 = new Node(105, (-3329), 0);
      node1.isInc();
      node0.setLineno(30);
      node0.copyInformationFromForTree(node1);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Node node0 = new Node(120, 120, 120);
      node0.setType(113);
      node0.isDo();
      node0.isGetElem();
      Node node1 = node0.cloneNode();
      node0.useSourceInfoFrom(node1);
      // Undeclared exception!
      try { 
        node1.srcref((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Node node0 = Node.newString(131, "7A$", 131, 131);
      node0.isVoid();
      node0.isQuotedString();
      node0.isNoSideEffectsCall();
      node0.isLabelName();
      node0.removeProp(9);
      node0.getQualifiedName();
      node0.isSwitch();
      node0.isExprResult();
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      Node node0 = Node.newString(122, "synthetic", 122, 122);
      node0.setSourceEncodedPosition((-1215));
      node0.getJsDocBuilderForNode();
      node0.isContinue();
      node0.getStaticSourceFile();
      node0.isVar();
      try { 
        node0.setDouble(Double.POSITIVE_INFINITY);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // VOID synthetic 1048575 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      Node[] nodeArray0 = new Node[2];
      Node node0 = Node.newString((-2063), ",naXK_bU]x-TpCAh");
      nodeArray0[0] = node0;
      Node node1 = Node.newString(4, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "p-??");
      Node.newString(47, ",naXK_bU]x-TpCAh", 116, 628);
      node1.isReturn();
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      Node node0 = new Node(85);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isGetElem();
      Node node1 = node0.cloneNode();
      Node node2 = node1.useSourceInfoFrom(node0);
      Node node3 = new Node(39, node0, node0, node0);
      node1.removeProp(54);
      node2.isEquivalentToTyped(node0);
      node0.cloneNode();
      node1.isThis();
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(110);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-101);
      byteArray0[6] = (byte) (-101);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-101);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "CharMatcher.forPredicate(");
      node0.setCharno(152);
      node0.isQualifiedName();
      node0.isWith();
      node0.isOr();
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      node0.isWith();
      Node node1 = new Node(15, node0, node0, node0, node0);
      node0.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Node node0 = Node.newNumber(3418.0645695000044, 0, 3178);
      node0.getDouble();
      Node node1 = node0.getAncestor(0);
      Node node2 = new Node(57, 0, 0);
      node2.clonePropsFrom(node1);
      Node node3 = new Node(32);
      node0.isQuotedString();
      node0.isCatch();
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Node node0 = new Node(120);
      node0.isWith();
      node0.isName();
      node0.isTrue();
      node0.isGetElem();
      node0.isQuotedString();
      node0.isIn();
      node0.toStringTree();
      Node node1 = new Node(77, node0, node0, node0, node0, (-3332), (-1315));
      node1.isAssignAdd();
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        node0.appendStringTree(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      Node node0 = new Node((-3332));
      Node node1 = new Node(63, node0, node0, 12, 15);
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_TYPE;
      node_NodeMismatch0.equals(jSTypeNative0);
      node1.isCase();
      node1.children();
      Node node2 = node0.detachFromParent();
      node0.isNoSideEffectsCall();
      node1.isIn();
      node0.getIndexOfChild(node2);
      Node.newString(2, "node is not a child");
      node1.cloneTree();
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      String string0 = "-M;&>5)6O*|B~q";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-M;&>5)6O*|B~q");
      Node node0 = new Node(954, nodeArray0);
      Node node1 = new Node(39, node0);
      node1.isOptionalArg();
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      // Undeclared exception!
      try { 
        node2.addChildrenAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(41, 41, 41);
      node0.isTrue();
      node0.isGetElem();
      Node node1 = node0.cloneNode();
      Node node2 = new Node(47, node0, node0, node0, node1, 30, 29);
      node2.srcref(node0);
      Node.newString("ARRAY_TYPE");
      int int0 = Node.SIDE_EFFECT_FLAGS;
      node0.isInc();
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((double) 3178, 3178, 3178);
      node0.getDouble();
      Node node1 = node0.getAncestor(0);
      node1.getAncestors();
      Node node2 = node0.clonePropsFrom(node1);
      Node node3 = new Node(30);
      node3.useSourceInfoIfMissingFrom(node2);
      node0.isGetterDef();
      node0.isCatch();
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      Node node0 = Node.newString(124, "7AB", 124, 124);
      node0.isDefaultCase();
      node0.setType(32);
      node0.isFalse();
      node0.getSourceOffset();
      Node node1 = new Node(49, node0, node0, node0, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node node3 = node2.srcref(node0);
      node1.isAssign();
      node1.getQualifiedName();
      node2.isTry();
      node3.checkTreeEquals(node1);
      node1.isThrow();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node3, node3);
      node1.getParent();
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newString("Object#Element");
      node0.isGetElem();
      Node node1 = new Node(105, node0, 65522, 43);
      Node node2 = Node.newString(2, "Object#Element", 1, 0);
      node0.setQuotedString();
      node1.isDec();
      node0.getParent();
      // Undeclared exception!
      try { 
        node2.getDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Node node0 = new Node(34);
      node0.isVar();
      node0.isWith();
      node0.isQualifiedName();
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      node0.getQualifiedName();
      Node node1 = new Node(43);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node0.isNot();
      node0.getDirectives();
      node1.srcref(node0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = new Node(0, node0, 2, 12);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("{8'lvp1PNh<_7eL");
      node1.isRegExp();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      Node node2 = node0.getParent();
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node1.getLastChild();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Yb");
      node2.isIn();
      node3.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      Node node0 = Node.newString(2451, "w{!v2Fsky");
      node0.getInputId();
      Node node1 = new Node(42, node0, 4095, 4095);
      node1.isQualifiedName();
      // Undeclared exception!
      try { 
        node1.getExistingIntProp((-3444));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: -3444
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node.newNumber((-1780.0));
      Node node0 = Node.newNumber((double) 56, 36, 4095);
      node0.isDec();
      node0.toString(false, true, false);
      Node node1 = new Node(2);
      node1.isTypeOf();
      node0.isCatch();
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList.of();
      Node node0 = Node.newString("Object#Element");
      node0.isVar();
      node0.isTrue();
      node0.isGetElem();
      Node node1 = new Node(105, node0, 65522, 43);
      Node.newString(2, "Object#Element", 2720, 0);
      node0.setQuotedString();
      node1.isTry();
      JSType[] jSTypeArray0 = new JSType[1];
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.EVAL_ERROR_FUNCTION_TYPE;
      JSType jSType0 = jSTypeRegistry1.getNativeType(jSTypeNative0);
      jSTypeArray0[0] = jSType0;
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node2.checkTreeEquals(node1);
      node0.isThrow();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = node2;
      nodeArray0[1] = node2;
      nodeArray0[2] = node2;
      nodeArray0[3] = node2;
      nodeArray0[4] = node0;
      Node node3 = null;
      try {
        node3 = new Node(29, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      Node node1 = new Node(0, node0, node0, node0, node0);
      node1.isEquivalentToTyped(node0);
      node0.useSourceInfoFrom(node1);
      node0.removeFirstChild();
      node0.isEquivalentTo(node0, false, true, false);
      node1.addChildBefore(node1, node0);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      node0.isSwitch();
      node1.isExprResult();
      node0.isScript();
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      Node node0 = Node.newString(5839, "w{!v2Fsky");
      node0.getInputId();
      Node node1 = Node.newString("w{!v2Fsky", 15, (-1797));
      node1.getJsDocBuilderForNode();
      Node node2 = new Node(38, node1, node0, node1, node0);
      // Undeclared exception!
      try { 
        node2.isQualifiedName();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Node node0 = Node.newNumber((double) 2);
      node0.isFromExterns();
      Node node1 = new Node(2, node0, node0, node0, 50, 4);
      node1.getAncestors();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node2 = node1.setJSDocInfo(jSDocInfo0);
      jSDocInfo0.getAssociatedNode();
      // Undeclared exception!
      try { 
        node2.srcrefTree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-45);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte) (-35);
      byteArray0[7] = (byte)57;
      byteArray0[8] = (byte)114;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = new Node(41);
      node0.isExprResult();
      node0.isGetElem();
      Node node1 = node0.cloneNode();
      Node node2 = node1.useSourceInfoFrom(node0);
      Node node3 = new Node(39, node0, node1);
      node1.detachFromParent();
      node1.isNull();
      node1.isInstanceOf();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("=8A", false);
      // Undeclared exception!
      try { 
        node2.getExistingIntProp(98);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 98
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      Node node0 = new Node(120);
      node0.isWith();
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      node0.isGetElem();
      node0.getQualifiedName();
      node0.isSwitch();
      node0.isExprResult();
      Node node1 = Node.newString("Object#Key", 29, 45);
      node0.useSourceInfoFrom(node1);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(110);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-101);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node0.isEquivalentToTyped(node0);
      node0.isGetElem();
      node0.getQualifiedName();
      node0.isSwitch();
      node0.isExprResult();
      // Undeclared exception!
      try { 
        Node.newString((-1878), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(110);
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte) (-115);
      Node node1 = new Node(8, node0, 85, (-3736));
      Node node2 = new Node(2725, node1, node1, node1);
      node2.isDo();
      node2.isGetElem();
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      node0.getQualifiedName();
      node2.isTrue();
      Node.newString(4095, " Ph!_K<!TL~c-");
      node1.hasChild((Node) null);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Node node0 = new Node((-7450));
      node0.getInputId();
      node0.setInputId((InputId) null);
      node0.isVar();
      node0.isGetElem();
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      Node node1 = new Node(52);
      node1.isIn();
      node0.isWith();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node1.setJSDocInfo(jSDocInfo0);
      node0.isAdd();
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.getSourceOffset();
      node0.isWhile();
      node0.isNE();
      node0.isTrue();
      node0.isGetElem();
      node0.isQuotedString();
      node0.isIn();
      Node node1 = new Node(98, node0, node0, node0, node0, 154, (-1122));
      node1.cloneTree();
      node1.isAssignAdd();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node0.isIn();
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      Node node0 = new Node(120, 120, 120);
      node0.setType(113);
      node0.isDo();
      node0.isGetElem();
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      node0.isGetElem();
      Node.newString((-429), ",;PwGD");
      Node node1 = node0.cloneNode();
      node1.isThis();
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(41);
      node0.putIntProp(93, 93);
      node0.isDec();
      node0.isNoSideEffectsCall();
      node0.isLabelName();
      node0.removeProp(93);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashSet<UnionType> hashSet0 = new HashSet<UnionType>();
      LinkedHashSet<UnionType> linkedHashSet0 = new LinkedHashSet<UnionType>(hashSet0);
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) linkedHashSet0);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node0.isEquivalentToTyped(node1);
      node1.isOnlyModifiesArgumentsCall();
      int int0 = Node.INPUT_ID;
      node1.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.setLength(42);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node.newString((-597), "DElo$0Dg&");
      node1.isTry();
      Node node2 = new Node(50, node0, node1, node0, node0);
      Node node3 = node2.srcref(node0);
      node1.isAssign();
      node1.getQualifiedName();
      node3.isTry();
      node2.checkTreeEquals(node3);
      node3.isThrow();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node3, node2);
      node0.getParent();
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      Node node0 = new Node(120);
      node0.isWith();
      node0.isGetElem();
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      node0.isDo();
      Node.newString(4095, "com.google.javascript.rhino.jstype.JSTypeNative");
      Node node1 = new Node(119, 51, 50);
      node1.isTry();
      Node node2 = new Node(110, node0, node0, node0, node1);
      Node node3 = node1.srcref(node2);
      node3.isAssign();
      node2.getQualifiedName();
      node0.isTry();
      node3.isThrow();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node0);
      node0.getParent();
      node2.isEquivalentTo(node1);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      Node node0 = new Node(120);
      node0.isWith();
      node0.isGetElem();
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node node1 = new Node(36);
      node0.isGetterDef();
      node1.isSwitch();
      node0.isCatch();
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Node node0 = Node.newString("Object#Element", (-668), (-2042));
      Node node1 = new Node(398, node0, node0);
      node0.getInputId();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node1.getAncestor(1713);
      node1.isNew();
      node1.getChildCount();
      Node node2 = Node.newNumber(3568.3139066214176, 53, 57);
      node0.isEquivalentTo(node2);
      node1.hasMoreThanOneChild();
      // Undeclared exception!
      try { 
        node1.toString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 398
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((-1.0));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setAllFlags();
      node0.isDec();
      node0.isAnd();
      node0.setLength((-3291));
      node0.detachChildren();
      Node node1 = new Node(40, node0, node0, 4095, 49);
      node1.isTrue();
      node1.isCase();
      node1.isFor();
      node0.isNew();
      node0.getLength();
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      Node[] nodeArray0 = new Node[2];
      Node node0 = Node.newString((-2063), ",naXK_bU]x-TpCAh");
      nodeArray0[0] = node0;
      Node node1 = Node.newString(4, "");
      nodeArray0[1] = node1;
      Node node2 = new Node((-2063), nodeArray0);
      node2.copyInformationFromForTree(node0);
      node2.isSetterDef();
      node1.isAdd();
      node2.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newString(4509, "Object#Key", 36, (-1680));
      node0.isVoid();
      node0.isQuotedString();
      node0.isNoSideEffectsCall();
      node0.isLabelName();
      node0.removeProp(120);
      node0.putBooleanProp((-1680), false);
      node0.isStringKey();
      node0.isSetterDef();
      node0.isAdd();
      node0.getCharno();
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      Node node0 = new Node(118);
      node0.detachChildren();
      node0.setType(118);
      InputId inputId0 = new InputId("pfoq;");
      node0.setInputId(inputId0);
      node0.isVar();
      node0.isGetElem();
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      node0.getQualifiedName();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      try { 
        node0.setDouble(1350.26385937553);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // VAR [input_id: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      Node node0 = new Node(34);
      node0.isVar();
      Node node1 = new Node(55, 29, 4);
      node1.setType(39);
      InputId inputId0 = new InputId("DNf185trK)NOn");
      node1.setInputId(inputId0);
      node0.isVar();
      node0.isGetElem();
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      node0.getQualifiedName();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      // Undeclared exception!
      try { 
        node1.setDouble((-1340.2591222322));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      Node node0 = new Node(120, 120, 120);
      node0.setType(113);
      node0.isDo();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      node0.isGetElem();
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      node0.getQualifiedName();
      node0.isQuotedString();
      node0.isWhile();
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(41);
      node0.putIntProp(93, 93);
      node0.isDec();
      node0.setInputId((InputId) null);
      node0.isVar();
      node0.isGetElem();
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      Node node1 = new Node(112, node0, node0, node0, 1003, 46);
      node1.getQualifiedName();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node1.clonePropsFrom(node0);
      // Undeclared exception!
      try { 
        node1.setDouble((-2740.0));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 93
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      Node node0 = new Node(34, 34, 34);
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      Node node1 = new Node(42);
      node1.setCharno(2097152);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte) (-109);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Node node2 = new Node(8);
      node1.toStringTree();
      node1.isUnscopedQualifiedName();
      node2.isVarArgs();
      node0.isObjectLit();
      node2.isLabel();
      node1.getIndexOfChild(node2);
      node0.isInc();
      node2.srcrefTree(node0);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      Node node0 = new Node(83, 83, 83);
      int int0 = Node.OPT_ARG_NAME;
      Node node1 = new Node(31, node0, 12, 8388608);
      node1.getJSDocInfo();
      node1.setIsSyntheticBlock(false);
      Node node2 = node1.srcref(node0);
      node2.setVarArgs(false);
      // Undeclared exception!
      try { 
        node0.addChildAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      Node node0 = new Node(34, 34, 34);
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      node0.isQualifiedName();
      HashSet<JSType> hashSet1 = new HashSet<JSType>();
      node0.getQualifiedName();
      Node node1 = new Node(126);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)124;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Node node2 = new Node((-655));
      Node.newNumber((double) 16);
      node1.isUnscopedQualifiedName();
      node1.isObjectLit();
      node1.isLabel();
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      Node node0 = new Node((-3));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList.of();
      node0.putIntProp(16777216, 237);
      node0.isDec();
      node0.isAnd();
      node0.setLength(508028);
      node0.detachChildren();
      node0.isTrue();
      Node node1 = new Node(429, node0, node0, node0, 3, 50);
      node1.isCase();
      node0.isFor();
      node1.hasChild(node0);
      node0.getLength();
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(41);
      node0.isTrue();
      node0.isGetElem();
      Node node1 = node0.cloneNode();
      Node node2 = node1.useSourceInfoFrom(node0);
      node2.srcref(node0);
      node0.setVarArgs(false);
      // Undeclared exception!
      try { 
        node1.addChildAfter(node2, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      Node node0 = new Node(83, 83, 83);
      int int0 = Node.OPT_ARG_NAME;
      Node node1 = new Node(31, node0, 12, 8388608);
      node1.getJSDocInfo();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node1.isOnlyModifiesArgumentsCall();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags3.clearSideEffectFlags();
      node_SideEffectFlags2.clearAllFlags();
      // Undeclared exception!
      try { 
        node1.addChildrenAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(41);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Node node1 = Node.newString("CONSTRUCTOR");
      Node node2 = node0.useSourceInfoFrom(node1);
      node2.setOptionalArg(false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      node0.isOnlyModifiesArgumentsCall();
      try { 
        node0.setDouble((-2299.93618));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NULL is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "a(!Tr");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString(124, "]&F;?C,EoQ", 124, 124);
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(39, nodeArray0, 56, 53);
      node0.isEmpty();
      node0.isBlock();
      Node node2 = new Node(40, 55, 1);
      Node node3 = node1.copyInformationFromForTree(node2);
      Node node4 = new Node(101, node1, 31, 46);
      node1.isWith();
      node3.detachChildren();
      node0.isTrue();
      node2.isCase();
      node3.isFor();
      node2.isNew();
      node3.getJSType();
      node4.isFromExterns();
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(41);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Node node1 = Node.newNumber((double) 29, 4095, 118);
      node0.useSourceInfoIfMissingFromForTree(node1);
      try { 
        node1.setString("xFu");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER 29.0 4095 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      Node node0 = new Node(0, 4841, 4841);
      node0.setCharno(4841);
      Node node1 = new Node(0, node0, node0, node0, node0);
      Node node2 = new Node(0, node1);
      node1.isEquivalentToTyped(node2);
      node2.checkTreeTypeAwareEqualsImpl(node1);
      node2.getLength();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(4);
      char char0 = '=';
      // Undeclared exception!
      try { 
        node1.removeChildAfter(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no next sibling.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((-1.0));
      node0.isQualifiedName();
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      node0.getQualifiedName();
      Node node1 = new Node((-565));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte) (-109);
      byteArray0[5] = (byte)89;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Node node2 = new Node(38);
      node2.toStringTree();
      // Undeclared exception!
      try { 
        node2.isUnscopedQualifiedName();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      Node node0 = new Node(34);
      Node node1 = new Node(8);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte)55;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Node node2 = new Node(4390);
      node0.isUnscopedQualifiedName();
      Node node3 = Node.newString("Object#Element", 50, 4095);
      node3.addSuppression("J**vFN9x%CUgy;T$m");
      node0.isObjectLit();
      node2.isLabel();
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(41);
      byte[] byteArray0 = new byte[0];
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      jSTypeRegistry0.resetForTypeCheck();
      node0.setType(33);
      node0.isFalse();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Object#Element");
      node0.getSourceOffset();
      node0.isCast();
      node0.cloneNode();
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(791);
      node0.putIntProp(8202, 8202);
      node0.isDec();
      node0.isAnd();
      Node node1 = Node.newNumber((double) 47);
      node0.setType((-1));
      Node node2 = new Node(47, 308, 1);
      node2.isFalse();
      node1.getSourceOffset();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "t[etp=B1R;h^xwV9");
      node0.isCast();
      Node node3 = node2.cloneNode();
      node3.isThis();
      node0.isEquivalentTo(node2, false, false, false);
      node2.isQualifiedName();
      node2.hasOneChild();
      node1.children();
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.getSourceOffset();
      node0.isWhile();
      node0.isNE();
      node0.isTrue();
      node0.isGetElem();
      node0.isQuotedString();
      node0.isIn();
      Node node1 = new Node(98, node0, node0, node0, node0, 154, (-1122));
      node1.isAssignAdd();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.error((String) null, (String) null, (-1430), 48);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      node0.isIn();
      node1.useSourceInfoIfMissingFrom(node0);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((-1780.0));
      Node node1 = Node.newNumber(393.0, 36, 4095);
      node1.isDec();
      node1.setSourceEncodedPositionForTree(57);
      Node node2 = new Node((-1656), node0, node0, node0, node0);
      Node node3 = node2.srcref(node1);
      node1.isAssign();
      Node node4 = new Node(39, 4, 39);
      node4.getQualifiedName();
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node3;
      nodeArray0[1] = node0;
      nodeArray0[2] = node4;
      nodeArray0[3] = node1;
      nodeArray0[4] = node2;
      nodeArray0[5] = node2;
      nodeArray0[6] = node1;
      Node node5 = null;
      try {
        node5 = new Node(55, nodeArray0, 29, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((-1780.0));
      node0.isAssignAdd();
      node0.setCharno(2);
      node0.isSetterDef();
      node0.isEquivalentTo(node0);
      node0.copyInformationFrom(node0);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      node0.setCharno(0);
      node0.isEquivalentToTyped(node0);
      node0.checkTreeTypeAwareEqualsImpl(node0);
      boolean boolean0 = false;
      node0.addChildrenToBack(node0);
      Node node1 = Node.newString(57, "CharMatcher.and(");
      node1.removeFirstChild();
      node0.getSourceOffset();
      Node.newString("CharMatcher.and(", 30, 1);
      node0.setSourceEncodedPosition(39);
      node1.setQuotedString();
      // Undeclared exception!
      try { 
        node0.checkTreeTypeAwareEqualsImpl((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.getJsDocBuilderForNode();
      node0.isFalse();
      node0.isContinue();
      node0.isFunction();
      node0.setLength(2);
      node0.getDouble();
      node0.getJSDocInfo();
      node0.setType(26);
      node0.isEquivalentToTyped(node0);
      Node node1 = node0.srcref(node0);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      node0.toString();
      node0.getDirectives();
      node0.isEmpty();
      node0.isDec();
      node1.getQualifiedName();
      node0.isQuotedString();
      InputId inputId0 = new InputId((String) null);
      node0.toString();
      node0.isNot();
      node0.getDirectives();
      node1.isDelProp();
      node1.isVar();
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(110);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-101);
      byteArray0[6] = (byte) (-101);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-101);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "CharMatcher.forPredicate(");
      node0.setCharno(152);
      Node node1 = new Node(38, node0);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      Node node3 = null;
      try {
        node3 = new Node((-417), node0, node0, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      Node node0 = new Node(120);
      node0.isVar();
      Node node1 = Node.newString(124, "Z0{tZJT'!Y5", 32, 2);
      node0.getFirstChild();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1072));
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(117);
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node0.isOnlyModifiesArgumentsCall();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags3.clearSideEffectFlags();
      node_SideEffectFlags1.clearAllFlags();
      node1.addChildrenAfter(node0, (Node) null);
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // CATCH is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = Node.newString(43, "b");
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append((String) null);
      node1.isRegExp();
      Node node2 = new Node(46, node0, node0, node0, node1);
      Node node3 = node2.srcref(node1);
      node2.isAssign();
      node1.getQualifiedName();
      node3.isTry();
      node1.isThrow();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node2);
      node1.getParent();
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-100), nodeArray0, 118, 1048576);
      node0.isNoSideEffectsCall();
      node0.addSuppression("numberToAdvance must be nonnegative");
      Node node1 = new Node(5552, node0, node0, node0);
      node1.setSourceEncodedPosition(33);
      node1.isEquivalentToTyped(node0);
      node0.getJSDocInfo();
      node1.isVarArgs();
      node1.children();
      node0.checkTreeEqualsImpl(node1);
      Node node2 = Node.newNumber(1265.21835303, 122, 51);
      node2.toString();
      // Undeclared exception!
      try { 
        node1.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      Node node0 = new Node(87);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList.of();
      node0.putIntProp(508028, 16777216);
      node0.isDec();
      node0.isAnd();
      node0.setLength(87);
      node0.detachChildren();
      node0.isTrue();
      node0.isCase();
      node0.isFor();
      node0.isNew();
      node0.getLength();
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(110);
      node0.children();
      Node node1 = node0.cloneNode();
      Node node2 = node0.useSourceInfoFrom(node1);
      Node node3 = node1.srcref(node2);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      // Undeclared exception!
      try { 
        node0.removeChildAfter(node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node.newNumber((double) 46);
      node0.setLength(42);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setMutatesArguments();
      Node node1 = new Node(65522, node0, 32, (-2090));
      Node node2 = Node.newString(29, "free_call", 39, 155);
      node2.setQuotedString();
      node0.isTry();
      node2.isThrow();
      node2.toString(false, true, false);
      node1.isTrue();
      node0.isComma();
      node1.isHook();
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList.of();
      Node node0 = Node.newString("Object#Element");
      node0.isVar();
      node0.isTrue();
      Node node1 = Node.newString("Object#Key", 155, 51);
      node0.isEquivalentTo(node1, true, true, true);
      // Undeclared exception!
      try { 
        node1.addChildBefore(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node_SideEffectFlags0.setReturnsTainted();
      node0.setType(410);
      node0.isFalse();
      node0.getSourceOffset();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Object#Element");
      node0.isCast();
      Node node1 = node0.cloneNode();
      node1.isThis();
      node1.isEquivalentTo(node0, true, true, false);
      node0.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList.of();
      Node node0 = Node.newString("Object#Element");
      node0.isGetElem();
      node0.isTry();
      Node node1 = new Node(105, node0, node0, node0, node0);
      Node node2 = node1.srcref(node0);
      node0.isAssign();
      node0.getQualifiedName();
      node2.isTry();
      node1.isThrow();
      Node node3 = Node.newString((-2569), "Object#Key", 30, 1298);
      Node node4 = null;
      try {
        node4 = new Node(36, node1, node0, node0, node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      Node node0 = new Node((-2921));
      node0.putIntProp((-2921), 89);
      node0.isDec();
      node0.isAnd();
      Node node1 = Node.newNumber((double) 57);
      node1.setType((-2921));
      node1.isFalse();
      node1.getSourceOffset();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "t[etp=B1R;h^xwV9");
      node0.isCast();
      Node node2 = node0.cloneNode();
      node0.isThis();
      node1.isEquivalentTo(node2, false, false, false);
      node2.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.google.common.collect.LinkedHashMultimap");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node((-2921));
      node0.putIntProp(89, 8202);
      node0.isDec();
      node0.isAnd();
      Node node1 = Node.newNumber((double) 53);
      node0.setType(32);
      node1.isFalse();
      node1.getSourceOffset();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "t[etp=B1R;h^xwV9");
      node1.isCast();
      Node node2 = node0.cloneNode();
      node2.isThis();
      node2.isEquivalentTo(node0, false, false, false);
      node2.isQualifiedName();
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      Node node0 = new Node(34);
      node0.isVar();
      node0.isWith();
      node0.isQualifiedName();
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      node0.getQualifiedName();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node node1 = new Node(43);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.clearAllFlags();
      int int0 = Node.STATIC_SOURCE_FILE;
      Node node2 = new Node((-1307), 8388608, 42);
      node0.isInc();
      Node node3 = new Node(4095, node2, node2, 43, 1);
      node3.isDebugger();
      // Undeclared exception!
      try { 
        Node.newString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList.of();
      Node node0 = Node.newString("Object#Element");
      node0.isComma();
      node0.isGetElem();
      node0.siblings();
      node0.setCharno(2736);
      Node node1 = Node.newString(49, "Object#Element", 30, 1796);
      simpleErrorReporter0.error("Object#Key", "Object#Key", (-1806), 8199);
      node0.mayMutateGlobalStateOrThrow();
      Node node2 = Node.newString(51, "Object#Key", 36, 8);
      node2.setQuotedString();
      InputId inputId0 = new InputId("null");
      node2.setInputId(inputId0);
      node1.isTry();
      node1.getLineno();
      try { 
        node2.setDouble(1.0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // IN Object#Key 36 [quoted: com.google.javascript.rhino.Node$IntPropListItem@0000000339] [input_id: com.google.javascript.rhino.Node$ObjectPropListItem@0000000341] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList.of();
      Node node0 = Node.newString("Object#Element");
      node0.isVar();
      node0.isTrue();
      node0.isGetElem();
      Node node1 = new Node(105, node0, 65522, 43);
      Node node2 = Node.newString(2, "Object#Element", 2720, 0);
      node0.setQuotedString();
      node1.isTry();
      node0.getAncestors();
      node1.cloneNode();
      node2.isStringKey();
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      Node node0 = new Node(120);
      node0.setType(113);
      node0.isOnlyModifiesThisCall();
      node0.toStringTree();
      Node node1 = new Node(43);
      node1.addChildToFront(node0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node2 = node1.useSourceInfoFrom(node0);
      // Undeclared exception!
      try { 
        node2.addChildBefore(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      Node node0 = Node.newString("", 83, 31);
      node0.setSourceEncodedPosition(48);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte) (-122);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)71;
      byteArray0[7] = (byte)93;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node1 = new Node(83, node0, node0);
      node1.useSourceInfoFrom(node0);
      node1.getNext();
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      Node node0 = Node.newString(57, "NULL_VOID", 57, (-1582));
      node0.isCall();
      node0.isReturn();
      Node node1 = null;
      // Undeclared exception!
      try { 
        node0.removeChildAfter((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.isGetProp();
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node0;
      node0.isQuotedString();
      node0.isIn();
      Node node1 = new Node(103, node0, node0, node0, node0, 29, 52);
      node0.isOnlyModifiesThisCall();
      node0.getDouble();
      node0.isHook();
      node0.getParent();
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      Node[] nodeArray0 = new Node[2];
      Node node0 = Node.newString((-2063), ",naXK_bU]x-TpCAh");
      nodeArray0[0] = node0;
      Node node1 = Node.newString(4, "");
      nodeArray0[1] = node1;
      Node node2 = new Node(77, node1, node0);
      node2.isTry();
      node0.isThrow();
      node2.toString(true, true, true);
      Node.extractLineno(1);
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      node0.setChangeTime(0);
      node0.isFromExterns();
      node0.setType(26);
      node0.getSourceOffset();
      node0.isCast();
      node0.cloneNode();
      node0.isRegExp();
      node0.isCall();
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      node0.setType(26);
      node0.isEquivalentToTyped(node0);
      node0.getLineno();
      node0.isAnd();
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      Node node0 = new Node(120);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.setType(113);
      node0.isDo();
      InputId inputId0 = new InputId("");
      node0.setInputId(inputId0);
      node0.isVar();
      node0.isGetElem();
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      node0.setType(152);
      node0.isFalse();
      node0.getSourceOffset();
      Node node1 = new Node(51, node0, node0, node0);
      Node node2 = new Node((-1), node1);
      node2.useSourceInfoIfMissingFrom(node1);
      node2.isCast();
      Node node3 = node0.cloneNode();
      node3.isThis();
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node((-2921));
      node0.putIntProp(89, 8202);
      node0.isDec();
      node0.isAnd();
      Node node1 = Node.newNumber((double) 53);
      node0.setType(30);
      node1.isFalse();
      node1.getSourceOffset();
      node1.isCast();
      Node node2 = node0.cloneNode();
      node2.isThis();
      node2.isEquivalentTo(node0, false, false, false);
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      Node node0 = new Node(120);
      node0.isVar();
      node0.isWith();
      node0.isGetElem();
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      node0.getQualifiedName();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node.extractLineno(8);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node_NodeMismatch0.equals((Object) null);
      Node node1 = node0.cloneTree();
      node0.addChildToFront(node1);
      node0.isNoSideEffectsCall();
      node1.mayMutateGlobalStateOrThrow();
      node1.addSuppression("");
      node1.addChildToFront(node0);
      Node.extractCharno(57);
      Node node2 = null;
      try {
        node2 = new Node(31, node0, node0, 37, 2567);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      Node node0 = Node.newString("2mF1@F{SH");
      node0.isCatch();
      Node node1 = new Node(115, node0, node0, node0, 38, 36);
      Node node2 = node0.srcrefTree(node1);
      node1.detachChildren();
      node1.children();
      node2.putIntProp(40, 48);
      node1.isStringKey();
      Node node3 = new Node(52, node0, 1170, 56);
      node3.isWith();
      node2.detachChildren();
      node1.setWasEmptyNode(true);
      node0.isTrue();
      node2.isCase();
      node1.isFor();
      node3.isNew();
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      Node node0 = Node.newString(122, "{s@=sQ!y|v&cqdv?|JN", 122, 122);
      node0.isVoid();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.setThrows();
      node0.isInc();
      Node node1 = new Node(1, node0, node0);
      node1.isDebugger();
      Node.newString("{s@=sQ!y|v&cqdv?|JN");
      node0.isName();
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = Node.newString(46, "Yb");
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("{8'lvp1PNh<_7eL");
      node1.isRegExp();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      node0.isHook();
      node0.getParent();
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node1.getLastChild();
      node2.getParent();
      node2.setLineno((-1462));
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(34);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-101);
      Locale locale0 = Locale.CANADA;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      node0.setDirectives(set0);
      node0.isNE();
      node0.isComma();
      node0.hasChildren();
      node0.getCharno();
      node0.getInputId();
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString(124, "]&F;?C,EoQ", 124, 124);
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(39, nodeArray0, 56, 53);
      node0.isEmpty();
      node0.isBlock();
      node1.getQualifiedName();
      node1.isQuotedString();
      node1.setCharno(4095);
      node0.wasEmptyNode();
      node0.isLabelName();
      Node node2 = node1.cloneTree();
      // Undeclared exception!
      try { 
        node2.getDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = Node.newString(43, "b");
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append((String) null);
      node1.isRegExp();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("b", true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node2 = new Node(751619276, node0, node0, node1, node0);
      node0.isBreak();
      node2.isQualifiedName();
      node1.setLineno(55);
      node0.getJsDocBuilderForNode();
      node1.getNext();
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString(124, "]&F;?C,EoQ", 124, 124);
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(39, nodeArray0, 56, 53);
      node0.isIf();
      Node node2 = Node.newString(">i$p", 48, 52);
      Node node3 = new Node(0, node0);
      node3.setLineno((-5208));
      node2.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newString("2mF1@F{SH");
      node0.isCatch();
      Node node1 = new Node(115, node0, node0, node0, 38, 36);
      Node node2 = node0.srcrefTree(node1);
      node1.detachChildren();
      node1.children();
      node2.putIntProp(40, 48);
      Node node3 = Node.newString(113, "is_dispatcher", 43, 223);
      // Undeclared exception!
      try { 
        node3.srcref(node0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node$IntPropListItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      Node.extractCharno(262144);
      Node node0 = Node.newString(0, "Should not happen\n", 48, 113);
      Node node1 = Node.newString("Should not happen\n", 4095, 32);
      // Undeclared exception!
      try { 
        node0.replaceChild(node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      Node node0 = new Node(85);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = Node.newString("wC", (-3420), (-1630));
      node0.useSourceInfoIfMissingFromForTree(node1);
      node0.isScript();
      node0.copyInformationFrom(node1);
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      Node node0 = new Node(87);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList.of();
      node0.putIntProp(508028, 16777216);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setMutatesThis();
      node0.detachChildren();
      Node node1 = Node.newString(87, "", 87, 31);
      // Undeclared exception!
      try { 
        node1.checkTreeEquals(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 508028
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node0 = Node.newString(43, "b");
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append((String) null);
      node0.isRegExp();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FALSE b [jsdoc_info: com.google.javascript.rhino.Node$ObjectPropListItem@0000000341] is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      String string0 = "";
      node0.toStringTree();
      Node node1 = Node.newNumber((-3247.99649));
      node1.addChildToFront(node0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.useSourceInfoFrom(node1);
      // Undeclared exception!
      try { 
        node1.addChildBefore((Node) null, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newString(":Yix");
      Node node1 = new Node((-1716), node0, node0, node0, node0, 0, 55);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node0);
      node1.removeProp(2);
      node0.isGetterDef();
      node0.addChildrenToBack(node1);
      Node node2 = new Node(1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node1.useSourceInfoFrom(node2);
      // Undeclared exception!
      try { 
        node0.addChildBefore(node2, (Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      Node node0 = new Node(120);
      node0.isVar();
      node0.isWith();
      node0.isGetElem();
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      node0.getQualifiedName();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node node1 = new Node(56);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node node2 = new Node((-2794));
      node2.isIn();
      node0.useSourceInfoIfMissingFromForTree(node1);
      node1.getType();
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      Node node0 = Node.newString("T\"5", 547, 65536);
      Node node1 = new Node(709, node0, 1485, 639);
      node1.useSourceInfoFromForTree(node0);
      node0.setString("\"AR|9");
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      Node[] nodeArray0 = new Node[2];
      Node node0 = Node.newString((-2063), ",naXK_bU]x-TpCAh");
      nodeArray0[0] = node0;
      Node node1 = Node.newString(4, "");
      nodeArray0[1] = node1;
      Node node2 = new Node((-2063), nodeArray0);
      node2.isSetterDef();
      node1.isAdd();
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((-1.0));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.valueOf();
      node0.isInc();
      node0.isDebugger();
      Node node1 = Node.newString(1, "k{R3E<:J$|(H2cH", 29, 33);
      node1.isReturn();
      node1.setString("O.P@gS96$C/-Yb.");
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      Node node0 = Node.newString(124, "7AB", 124, 124);
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(125, nodeArray0, 4095, 49);
      node0.useSourceInfoFrom(node1);
      Node node2 = new Node(31, nodeArray0);
      Node node3 = new Node(4, node0, node0, node2, node1);
      node1.srcref(node3);
      node2.setVarArgs(false);
      Node node4 = new Node(54, nodeArray0);
      // Undeclared exception!
      try { 
        node4.addChildAfter(node0, node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isContinue();
      node0.isFunction();
      Node node1 = Node.newNumber((double) 12);
      Node node2 = Node.newNumber((double) 2);
      node0.setType(52);
      node1.isFalse();
      node0.getSourceOffset();
      Node node3 = new Node(36, node2, node0, node1);
      node3.isCast();
      node0.cloneNode();
      node3.isThis();
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      Node node0 = Node.newString(147, "Number node not created with Node.newNumber");
      node0.setChangeTime(126);
      node0.isOnlyModifiesThisCall();
      node0.toStringTree();
      Node node1 = Node.newNumber(1747.064206072);
      node1.addChildToFront(node0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.useSourceInfoFrom(node1);
      // Undeclared exception!
      try { 
        node0.addChildBefore((Node) null, (Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      Node node0 = new Node(87);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList.of();
      node0.putIntProp(508028, 16777216);
      node0.isDec();
      node0.isAnd();
      Node node1 = Node.newNumber((double) 40);
      node1.setType(12);
      node0.isFalse();
      Node node2 = new Node(38, node1, node1, node1);
      node2.isCast();
      node2.cloneNode();
      node2.isThis();
      node0.hasMoreThanOneChild();
      node0.children();
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      Node node0 = new Node(72, 72, 72);
      node0.children();
      Node node1 = node0.cloneNode();
      Node node2 = node1.useSourceInfoFrom(node0);
      Node node3 = node2.srcref(node1);
      node1.siblings();
      node3.setVarArgs(true);
      Node node4 = new Node(39, node1);
      // Undeclared exception!
      try { 
        node1.addChildAfter(node3, node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList.of();
      Node node0 = Node.newString("Object#Element");
      node0.isVar();
      node0.isTrue();
      node0.isGetElem();
      Node node1 = new Node(105, node0, 65522, 43);
      Node.newString(2, "Object#Element", 2720, 0);
      node0.setQuotedString();
      node1.isTry();
      node1.isDec();
      node1.toString(true, false, false);
      node1.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(2520);
      node0.isFor();
      node0.wasEmptyNode();
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Node node0 = Node.newString("-xE{3mqv~dU3 Ro");
      node0.setType((-1063));
      Node.newNumber((double) 38, 15, (-1063));
      node0.getChangeTime();
      node0.removeProp((-1666));
      Node node1 = null;
      // Undeclared exception!
      try { 
        node0.addChildrenToFront((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(41);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "CharMatcher.forPredicate(");
      node0.setCharno((byte) (-101));
      Node.extractCharno((-2654));
      Node node1 = Node.newString("CharMatcher.forPredicate(", 32, 102);
      node1.useSourceInfoIfMissingFromForTree(node0);
      node1.isCatch();
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      Node node0 = Node.newString(124, "7AB", 124, 124);
      node0.getDirectives();
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      node0.getQualifiedName();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node node1 = new Node(36);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Node node2 = new Node(4095);
      node1.isIn();
      node2.isComma();
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node1;
      nodeArray0[4] = node0;
      nodeArray0[5] = node0;
      nodeArray0[6] = node2;
      nodeArray0[7] = node1;
      node0.setChangeTime((-418));
      Node node3 = new Node((-1525), node1);
      nodeArray0[8] = node3;
      node3.copyInformationFrom(node0);
      Node node4 = null;
      try {
        node4 = new Node(4194304, nodeArray0, 15, (-1881));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      Node node0 = new Node(83, 83, 83);
      int int0 = Node.OPT_ARG_NAME;
      node0.getProp(0);
      // Undeclared exception!
      try { 
        node0.isEquivalentToShallow((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "yn+~ctOuQ{mw'T)D.[");
      Node node0 = new Node(87);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      node0.setCharno((byte) (-101));
      node0.isQualifiedName();
      node0.isOr();
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      Node node1 = Node.newString("ilC#Xxuqx");
      Node node2 = new Node(3230);
      Node node3 = new Node(38, node1, node2, node1);
      node0.checkTreeEquals(node3);
      node2.isScript();
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newString((-689), "\n\nSubtree2: ", (-689), (-689));
      Node node1 = new Node((-2648), node0, 1, 1);
      node1.useSourceInfoFromForTree(node0);
      node1.getSourceFileName();
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      Node node0 = new Node(83, 83, 83);
      int int0 = Node.OPT_ARG_NAME;
      Node node1 = new Node(31, node0, 12, 53);
      node1.getJSDocInfo();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)93;
      node1.setCharno(51);
      node1.isQualifiedName();
      node0.setVarArgs(false);
      node0.isThrow();
      node0.isObjectLit();
      node0.mayMutateGlobalStateOrThrow();
      node1.addSuppression("");
      node1.hasChild(node0);
      node1.removeChild(node0);
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      Node node0 = Node.newNumber(12.0, 147, 147);
      node0.getStaticSourceFile();
      node0.setType(63);
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.getDirectives();
      node0.isOnlyModifiesArgumentsCall();
      node0.isExprResult();
      node0.isVoid();
      Node node1 = null;
      // Undeclared exception!
      try { 
        node0.addChildBefore((Node) null, (Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      Node node0 = Node.newString(124, "]&F;?C,EoQ", 124, 124);
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(39, nodeArray0, 56, 53);
      node0.isEmpty();
      node0.isDec();
      node1.getQualifiedName();
      Node node2 = Node.newString(428, "null");
      node0.isTry();
      node1.siblings();
      Node node3 = new Node(63, node1, node0, node0, node2);
      Node node4 = node0.srcref(node2);
      node2.isAssign();
      node2.getQualifiedName();
      node3.isTry();
      node3.isThrow();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node4, node0);
      node3.wasEmptyNode();
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      node0.setDirectives(set0);
      node0.isNE();
      node0.isFor();
      node0.wasEmptyNode();
      node0.isVar();
      node0.cloneTree();
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      Node node0 = new Node(120);
      node0.setType(113);
      node0.isDo();
      InputId inputId0 = new InputId("HtId1");
      node0.setInputId(inputId0);
      node0.isVar();
      node0.isWith();
      node0.isGetElem();
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      node0.getQualifiedName();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node node1 = new Node(56);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // WHILE [input_id: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003] is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      Node node0 = Node.newString(124, "7AB", 124, 124);
      node0.getDirectives();
      node0.isVoid();
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node node1 = new Node(0, node0, node0);
      node1.hasChild(node0);
      Node node2 = new Node(55, node1, node1);
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.getJsDocBuilderForNode();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = Node.newString("");
      node0.isQualifiedName();
      node0.isWith();
      node1.isName();
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("com.google.common.collect.EmptyImmutableBiMap", false);
      Vector<JSType> vector0 = new Vector<JSType>();
      SimpleSourceFile[] simpleSourceFileArray0 = new SimpleSourceFile[9];
      simpleSourceFileArray0[0] = simpleSourceFile0;
      SimpleSourceFile simpleSourceFile1 = new SimpleSourceFile("com.google.common.collect.EmptyImmutableBiMap", false);
      simpleSourceFileArray0[1] = simpleSourceFile1;
      simpleSourceFileArray0[2] = simpleSourceFile0;
      simpleSourceFileArray0[3] = simpleSourceFile0;
      simpleSourceFileArray0[4] = simpleSourceFile0;
      simpleSourceFileArray0[5] = simpleSourceFile0;
      simpleSourceFileArray0[6] = simpleSourceFile0;
      simpleSourceFileArray0[7] = simpleSourceFile0;
      simpleSourceFileArray0[8] = simpleSourceFile0;
      vector0.toArray(simpleSourceFileArray0);
      Node node2 = new Node(2654, node0, node0, node0, node1);
      node2.isBreak();
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-250));
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.areAllFlagsSet();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = Node.newString((-250), "", 54, 54);
      node0.isQuotedString();
      node0.hasOneChild();
      node_SideEffectFlags0.setThrows();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node1 = Node.newString(32, "", 16, 126);
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node1.setCharno(43);
      node2.isSyntheticBlock();
      node1.setWasEmptyNode(false);
      node0.isQuotedString();
      Node node3 = Node.newString("com.google.javascript.rhino.Node$IntPropListItem");
      node3.getQualifiedName();
      node0.isIf();
      node3.isStringKey();
      // Undeclared exception!
      try { 
        Node.newString(5031, (String) null, 54, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      node0.setCharno(0);
      node0.isEquivalentToTyped(node0);
      Node node1 = new Node(43, node0, 11, 41);
      node0.getJSDocInfo();
      node0.setIsSyntheticBlock(false);
      Node.extractCharno(38);
      node1.clonePropsFrom(node0);
      Node node2 = Node.newString("qO}", 2, 2273);
      node2.removeFirstChild();
      Node node3 = node0.useSourceInfoIfMissingFromForTree(node2);
      // Undeclared exception!
      try { 
        node3.setString("Vd_kU66A)/p");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      Node node0 = Node.newNumber((-1181.5240597873797));
      Node node1 = node0.cloneNode();
      node1.getInputId();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      JSType[] jSTypeArray0 = new JSType[0];
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) null, jSTypeArray0);
      node1.putProp(32, functionType0);
      node1.setWasEmptyNode(true);
      try { 
        node1.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER -1181.5240597873797 [incrdecr: com.google.javascript.rhino.Node$ObjectPropListItem@0000000341] [empty_block: com.google.javascript.rhino.Node$IntPropListItem@0000000342] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.getProp(0);
      node0.getSourceFileName();
      node0.isEquivalentToShallow(node0);
      node0.getInputId();
      node0.toString();
      node0.isOnlyModifiesArgumentsCall();
      // Undeclared exception!
      try { 
        node0.addChildToFront((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.setLength(38);
      Node node1 = Node.newString("Object#Key");
      Node node2 = new Node(8, node1, node1, node0, node0);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("?");
      node1.isRegExp();
      Node node3 = new Node(43, node2, node2);
      Node node4 = node3.useSourceInfoIfMissingFromForTree(node0);
      try { 
        node4.setString("]");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FALSE is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      Node node0 = Node.newNumber((-3309.1922597), (-7450), (-7450));
      node0.isVar();
      node0.isWith();
      node0.isGetElem();
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append((String) null);
      Node node1 = new Node(52);
      node_FileLevelJsDocBuilder0.append("O\"");
      node0.isRegExp();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.areAllFlagsSet();
      // Undeclared exception!
      try { 
        node0.clonePropsFrom(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Node has existing properties.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.getJsDocBuilderForNode();
      node0.isFalse();
      node0.isContinue();
      node0.setLength(2);
      node0.getDouble();
      node0.getJSDocInfo();
      node0.setType(26);
      node0.isEquivalentToTyped(node0);
      Node node1 = node0.srcref(node0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      node0.toString();
      node0.getDirectives();
      node0.isEmpty();
      node0.isDec();
      node1.getQualifiedName();
      node0.isQuotedString();
      node1.getInputId();
      node0.toString();
      node0.isNot();
      Node node2 = Node.newString("com.google.common.collect.Lists$StringAsImmutableList", 49, 53);
      node2.toString(false, false, true);
      // Undeclared exception!
      try { 
        node2.setString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      Node node0 = Node.newNumber((-3309.1922597), (-7450), (-7450));
      node0.getInputId();
      node0.setInputId((InputId) null);
      node0.isVar();
      node0.isWith();
      node0.isGetElem();
      Node node1 = Node.newString(12, "Named type with empty name component");
      node0.isEquivalentToTyped(node1);
      Node node2 = node0.srcref(node1);
      node2.toString();
      node1.getDirectives();
      node1.isEmpty();
      node2.isDec();
      node1.getQualifiedName();
      node1.isQuotedString();
      node0.getInputId();
      node2.toString();
      node1.isNot();
      node2.getDirectives();
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      node0.getJsDocBuilderForNode();
      node0.isFalse();
      node0.isContinue();
      Node node1 = new Node(50, node0, node0, node0, node0);
      node1.isFunction();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      node0.isThis();
      Node node2 = Node.newString("");
      node2.isInc();
      node0.isDebugger();
      node1.isLabel();
      node0.isName();
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      Node node0 = Node.newString(124, "]&F;?C,EoQ", 124, 124);
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(39, nodeArray0, 56, 53);
      node0.isEmpty();
      node0.isBlock();
      node1.getQualifiedName();
      Node node2 = new Node(42);
      Node node3 = new Node(40, 43, 42);
      // Undeclared exception!
      try { 
        node3.addChildToBack((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      Node node0 = Node.newString(124, "]&F;?C,EoQ", 124, 124);
      node0.toString();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags4.clearAllFlags();
      int int0 = Node.STATIC_SOURCE_FILE;
      node0.isInc();
      node0.isDebugger();
      Node node1 = Node.newString("EvalError");
      node1.isLabel();
      node0.isName();
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      Node node0 = null;
      Node node1 = null;
      try {
        node1 = new Node(39, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      node0.setDirectives(set0);
      node0.isNE();
      Node.newString("K");
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      Node node0 = Node.newString(124, "]&F;?C,EoQ", 124, 124);
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(39, nodeArray0, 56, 53);
      node0.isEmpty();
      node0.isBlock();
      node1.getQualifiedName();
      Node node2 = new Node((-434), node1, node1, node0, 463, 1048);
      node2.isQuotedString();
      node1.setCharno(4095);
      node2.wasEmptyNode();
      node0.isLabelName();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      node0.getType();
      node2.getType();
      node1.isDelProp();
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.getJsDocBuilderForNode();
      node0.isContinue();
      node0.isFunction();
      node0.getAncestors();
      node0.isContinue();
      node0.isQualifiedName();
      node0.isNot();
      Node node1 = new Node(50, node0, node0, (-1482), 4095);
      node1.isVar();
      Node node2 = Node.newString(49, "com.google.common.collect.ImmutableCollection");
      node2.isWith();
      node2.isOr();
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      Node node3 = new Node(36);
      Node node4 = Node.newString("]4lk/");
      Node node5 = new Node(2771, node4, node3);
      node5.isIn();
      node5.isGetterDef();
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(41);
      node0.putIntProp(89, 89);
      node0.isDec();
      node0.isAnd();
      Node node1 = Node.newNumber((-1.0));
      node1.addChildrenToBack(node0);
      node1.setType(88);
      node1.addSuppression("");
      node0.isFalse();
      node1.getSourceOffset();
      node0.isCast();
      Node node2 = node0.cloneNode();
      node2.isThis();
      node0.getLastSibling();
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isWith();
      node0.isOnlyModifiesArgumentsCall();
      node0.isGetElem();
      Node node1 = Node.newString("wC", 29, 307);
      node1.isScript();
      node0.isString();
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      Node node0 = new Node(123);
      node0.hasOneChild();
      node0.isThis();
      Node node1 = new Node(123);
      node1.setType(1);
      // Undeclared exception!
      try { 
        node1.copyInformationFromForTree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = Node.newString(1439, "Object#Element");
      node0.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Vector<UnionType> vector0 = new Vector<UnionType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) vector0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      vector0.trimToSize();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node node1 = new Node((-1667), node0, node0, node0, node0);
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_FUNCTION_TYPE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      node1.isOptionalArg();
      Node node2 = node1.srcrefTree(node0);
      // Undeclared exception!
      try { 
        node2.setString("Object#Key");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1667
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      Node node0 = Node.newString(2043, "com.google.jjv]script.rhino.Wstype.NoResolvedType", 1486, 2043);
      node0.getFirstChild();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-411));
      node0.isOnlyModifiesArgumentsCall();
      node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags0.clearAllFlags();
      node0.isWith();
      node0.isOr();
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      Node node1 = new Node(111);
      Node node2 = Node.newString("already specified useForNull");
      Node node3 = new Node(52, node0, node2, node1);
      node3.siblings();
      node3.isIn();
      node0.isContinue();
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(41);
      node0.putIntProp(89, 89);
      node0.isDec();
      node0.setCharno(2736);
      Node node1 = Node.newString(0, "G3w~Y'}-ihbcI@", 30, 89);
      node0.mayMutateGlobalStateOrThrow();
      node0.useSourceInfoIfMissingFrom(node1);
      // Undeclared exception!
      try { 
        node0.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      SimpleSourceFile[] simpleSourceFileArray0 = new SimpleSourceFile[3];
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Object#Key", true);
      simpleSourceFileArray0[0] = simpleSourceFile0;
      SimpleSourceFile simpleSourceFile1 = new SimpleSourceFile("Object#Element", true);
      simpleSourceFileArray0[1] = simpleSourceFile1;
      SimpleSourceFile simpleSourceFile2 = new SimpleSourceFile("Object#Key", false);
      simpleSourceFileArray0[2] = simpleSourceFile2;
      vector0.toArray(simpleSourceFileArray0);
      Node node1 = new Node(21, node0, node0, node0, node0);
      node1.isBreak();
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      Node node0 = new Node(87);
      Node node1 = new Node(87, node0, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(42);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      node_SideEffectFlags4.setThrows();
      node1.removeChildren();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags5.valueOf();
      node1.detachChildren();
      node1.isArrayLit();
      node1.checkTreeEquals(node0);
      // Undeclared exception!
      try { 
        node0.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      byte[] byteArray0 = new byte[5];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte)35;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Iterator<UnionType> iterator0 = (Iterator<UnionType>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      immutableList0.reverse();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.getJSType();
      node0.removeChildren();
      int int0 = 2095;
      int int1 = (-2014);
      Node node1 = new Node(16);
      Node node2 = node0.srcrefTree(node1);
      JSType.toMaybeTemplatizedType((JSType) null);
      // Undeclared exception!
      try { 
        node2.setSideEffectFlags(38);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got PARAM_LIST
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      Node node0 = Node.newString(124, "]&F;?C,EoQ", 124, 124);
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(39, nodeArray0, 56, 53);
      node0.isEmpty();
      node0.isDec();
      node1.getQualifiedName();
      Node node2 = new Node((-434), node1, node1, node0, 463, 1060);
      node2.isQuotedString();
      Node node3 = new Node(124, node2, node2, 40, 50);
      // Undeclared exception!
      try { 
        node3.addChildrenToFront(node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      Node.mergeLineCharNo((-3309), (-3309));
      String string0 = "";
      Node node0 = Node.newString(122, "", 95, (-2644));
      Node node1 = new Node((-3309), node0, node0, node0, node0, 49, 0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      jSTypeRegistry0.createFunctionType((JSType) null, (List<JSType>) immutableList0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.setLength(42);
      Node node1 = Node.newString(116, "", 30, 2218);
      node1.isWhile();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(43);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags4.areAllFlagsSet();
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = Node.newString("Object#Key");
      node0.isQualifiedName();
      node0.isNot();
      node0.isVar();
      node0.isWith();
      node0.isName();
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node node1 = new Node((-589));
      node1.isWhile();
      Node node2 = new Node(49, node1, node1, node1, node1);
      node2.getChildAtIndex(1);
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      Node node0 = new Node(85);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      InputId inputId0 = new InputId("5jI*He]Mh4Pwt7?9,WE");
      inputId0.toString();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.setInputId(inputId0);
      node0.getSourceOffset();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wW1UXSa&/)7FP@|");
      node0.putProp(122, "wW1UXSa&/)7FP@|");
      // Undeclared exception!
      try { 
        node0.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 122
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList.of();
      Node node0 = Node.newString("Object#Element");
      node0.isVar();
      node0.isTrue();
      node0.isGetElem();
      Node node1 = new Node(105, node0, 65522, 43);
      node1.removeChildren();
      Node node2 = Node.newString(2, "Object#Element", 2720, 0);
      node0.setQuotedString();
      node1.isTry();
      node2.isThrow();
      node1.toString(true, false, false);
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-411));
      node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node node0 = null;
      try {
        node0 = new Node((-3457), (Node) null, (Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.getJsDocBuilderForNode();
      node0.isFalse();
      node0.isContinue();
      node0.isFunction();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)30;
      node0.isThis();
      Node.newString("M<}DoZ7m4ys");
      node0.isInc();
      node0.isDebugger();
      node0.isLabel();
      node0.isName();
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      Node node0 = new Node(87);
      Node node1 = new Node(87, node0, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      jSTypeRegistry0.isForwardDeclaredType("85cF=CeM.pxM;");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(38);
      node_SideEffectFlags0.setAllFlags();
      Node node2 = Node.newString("", 9, 53);
      node1.setSourceEncodedPosition(911);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node2.isGetProp();
      Node node3 = node1.getFirstChild();
      node3.isThrow();
      node0.toString(false, false, true);
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isContinue();
      node0.isFunction();
      Node node1 = Node.newNumber((double) 12);
      node1.addSuppression((String) null);
      node1.setLength(573);
      node1.getJSDocInfo();
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node2.setType(34);
      node2.isEquivalentToTyped(node0);
      node2.isNew();
      node0.getStaticSourceFile();
      node0.isAnd();
      node0.isWhile();
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      Node node0 = new Node(0);
      node0.setCharno(0);
      Node node1 = new Node(0, node0, node0, node0, node0);
      node1.isEquivalentToTyped(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.error("side_effect_flags", "n|M;EFjwa52+D", 0, 29);
      Node node2 = Node.newNumber((double) 16);
      node0.setLength(2);
      node2.getJSDocInfo();
      node1.isNew();
      node0.isDec();
      node0.isString();
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      Node node0 = Node.newString("k");
      node0.isDo();
      node0.isThis();
      Node node1 = new Node(40, node0, node0, node0, 30, 54);
      node0.addChildToBack(node1);
      node1.isHook();
      node0.getParent();
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      Node node0 = new Node(85);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      InputId inputId0 = new InputId("5jI*He]Mh4Pwt7?9,WE");
      node0.setInputId(inputId0);
      String string0 = "wW1UXSa&/)7FP@|";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wW1UXSa&/)7FP@|");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node1 = new Node(102, node0, 37, 108);
      node1.isWith();
      node1.detachChildren();
      node1.isTrue();
      node0.isCase();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      Node node2 = node0.cloneTree();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node1.addChildrenToBack(node2);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createEnumType("", node1, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      Node node0 = Node.newString(124, "]&F;?C,EoQ", 124, 124);
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(39, nodeArray0, 56, 53);
      node0.isEmpty();
      node0.isBlock();
      node1.getQualifiedName();
      Node node2 = new Node((-434), node1, node1, node0, 463, 1048);
      node2.isQuotedString();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", false);
      node0.isDo();
      node0.isDec();
      node1.getQualifiedName();
      node1.isQuotedString();
      node0.isAnd();
      node0.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      Node node0 = new Node(123);
      node0.hasOneChild();
      node0.isThis();
      Node node1 = new Node(123);
      Node node2 = null;
      try {
        node2 = new Node(42, node1, (Node) null, node0, 52, 50);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      String string0 = "<r<5W>e~";
      int int0 = (-141);
      Node node0 = Node.newString("<r<5W>e~", (-141), 112);
      node0.getInputId();
      node0.getIntProp(112);
      Node node1 = null;
      // Undeclared exception!
      try { 
        node0.isEquivalentTo((Node) null, true, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      Node node0 = new Node((-823));
      node0.isHook();
      node0.setWasEmptyNode(true);
      Node node1 = new Node(49, node0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node1.isEquivalentToTyped(node0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node1.isVarArgs();
      node0.hasChild(node1);
      node0.getJsDocBuilderForNode();
      node1.getAncestor(49);
      node1.setWasEmptyNode(false);
      // Undeclared exception!
      try { 
        node1.addChildBefore((Node) null, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.getProp(86);
      Node node1 = null;
      // Undeclared exception!
      try { 
        node0.addChildAfter((Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isStringKey();
      node0.hasChild(node0);
      Node node1 = Node.newNumber((double) 12);
      node1.setLength(573);
      node1.getJSDocInfo();
      Node node2 = new Node(47, 0, 1);
      node2.setType(4095);
      node2.isEquivalentToTyped(node0);
      node0.isRegExp();
      node2.putBooleanProp(38, false);
      node1.getDirectives();
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      Node node0 = new Node(120);
      node0.isDo();
      node0.isThis();
      Node node1 = new Node(42, node0, node0, node0, 32, 50);
      node0.addChildToBack(node1);
      node1.isHook();
      node1.getParent();
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      Node node0 = Node.newNumber((-2710.70813711));
      Node node1 = new Node(37, node0, node0, node0, 46, 32);
      node0.getInputId();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      node1.getProp(1073741823);
      node0.isEquivalentToShallow(node1);
      node0.toString();
      node1.isCall();
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      Node node0 = Node.newNumber(0.6827128797526324);
      node0.getProp(0);
      node0.getSourceFileName();
      node0.isEquivalentToShallow(node0);
      node0.isThis();
      Node node1 = Node.newString("");
      node1.isInc();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Node.newString(12, "", 0, 49);
      node1.isDebugger();
      node1.isLabel();
      node0.isName();
      node1.isSwitch();
      node1.isCall();
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      Node node0 = new Node(0);
      node0.setCharno(0);
      Node node1 = new Node(0, node0, node0, node0, node0);
      node1.isEquivalentToTyped(node0);
      node1.isEquivalentTo(node0, false, true, false);
      node1.addChildBefore(node1, node0);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      Consumer<Node> consumer0 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.iterator();
      node1.isCall();
      node0.getType();
      node0.isIf();
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = Node.newString("Object#Key");
      node0.isFunction();
      simpleErrorReporter0.error(">fTN:ZKV;", ">fTN:ZKV;", 54, 5942);
      Node node1 = Node.newNumber((-1.0));
      node1.setLength((-3728));
      node0.getJSDocInfo();
      node0.isNew();
      node1.isDec();
      node0.isString();
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isContinue();
      node0.isQualifiedName();
      node0.isNot();
      node0.isVar();
      Node node1 = Node.newString(1054, "com.google.common.collect.ImmutableCollection");
      node1.isWith();
      node0.isOr();
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      Node node2 = new Node(6);
      Node node3 = Node.newString("]4lk/");
      node3.isIn();
      node1.isComma();
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.getProp(0);
      node0.getSourceFileName();
      node0.isHook();
      node0.isEquivalentToShallow(node0);
      node0.getInputId();
      node0.toString();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags((-2162));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      Node node0 = Node.newString(124, "7AB", 124, 124);
      node0.getDirectives();
      node0.isVoid();
      node0.isQuotedString();
      node0.isSwitch();
      node0.isCatch();
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.getJsDocBuilderForNode();
      node0.isFalse();
      node0.isContinue();
      node0.isNot();
      Node node1 = Node.newNumber(3562.46203172131, 3216, 0);
      node1.setLength(2);
      node1.getDouble();
      node1.getJSDocInfo();
      node1.setType(4096);
      Node node2 = node1.srcref(node0);
      Node node3 = new Node((-1), node2);
      node1.isIn();
      Node node4 = new Node((-765), node3, 53, 54);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      node_SideEffectFlags2.valueOf();
      node0.detachChildren();
      node0.isArrayLit();
      node1.checkTreeEquals(node2);
      // Undeclared exception!
      try { 
        node4.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)30;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = Node.newString("");
      node0.isInc();
      node0.isWhile();
      node0.isLabel();
      node0.isName();
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.setLength(42);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isSyntheticBlock();
      node0.isComma();
      node1.isNE();
      node1.isTrue();
      node0.isGetElem();
      node1.siblings();
      node0.isQuotedString();
      Node node2 = Node.newString("Object#Element");
      node0.isIn();
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node3.isAssignAdd();
      Node node4 = Node.newString(53, "");
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("");
      node2.isRegExp();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setMutatesGlobalState();
      node3.isEquivalentTo(node4, false, false, false);
      node0.isReturn();
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      Node node0 = Node.newString(4836, "`f9T");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "v'Pg3b<");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node1 = node0.cloneTree();
      Node node2 = node1.srcref(node0);
      Node node3 = node2.copyInformationFromForTree(node0);
      node3.detachChildren();
      node1.putProp(52, (Object) null);
      node0.isFromExterns();
      Node.extractLineno(12);
      node0.isLabelName();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node.extractLineno(8202);
      node0.isQuotedString();
      node3.getProp(57);
      node0.getDirectives();
      Node node4 = node2.useSourceInfoIfMissingFrom(node1);
      node4.getQualifiedName();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "`f9T");
      node2.getJSType();
      node4.isFunction();
      node3.addSuppression("com.google.javascript.rhino.Node$NodeMismatch");
      node3.isObjectLit();
      // Undeclared exception!
      try { 
        node0.setDouble((-1.0));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 4836
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      Node node0 = Node.newString("BqJ8X26A_");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isNull();
      Node node1 = new Node((-1805), node0, node0, node0, node0, 2, 47);
      Node node2 = node1.srcref(node0);
      node0.setString("+q\"S~{");
      Node.newNumber((double) 30);
      node0.isWhile();
      Node.newString("");
      node2.getChildAtIndex((-4670));
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = Node.newString("Object#Key");
      node0.isQualifiedName();
      node0.isNot();
      node0.isVar();
      node0.isWith();
      node0.isName();
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node node1 = new Node((-589));
      Node node2 = Node.newString("");
      node2.isIn();
      node2.isComma();
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.setLength(42);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node1.isInstanceOf();
      Node node2 = Node.newString((-597), "DElo$0Dg&");
      ImmutableList.of();
      immutableList0.toArray();
      node1.getAncestors();
      Node node3 = Node.newString(12, ".QGGTa\u0000%*VX", 30, 463);
      node1.mayMutateGlobalStateOrThrow();
      Node node4 = node1.useSourceInfoIfMissingFrom(node0);
      node3.isVoid();
      node2.isNumber();
      node4.getType();
      // Undeclared exception!
      try { 
        node2.setSideEffectFlags(56);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -597
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.isGetProp();
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node0;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.isForwardDeclaredType("");
      node0.isNot();
      Node node1 = Node.newNumber(1.2);
      Node node2 = new Node(4, node1);
      node0.removeChildren();
      node1.isParamList();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node1.addChildrenToFront(node2);
      jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node2.getStaticSourceFile();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node1.checkTreeTypeAwareEqualsImpl(node2);
      node2.getIndexOfChild(node1);
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      Node node0 = new Node(87);
      Node node1 = new Node(87, node0, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(42);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      node_SideEffectFlags0.clearAllFlags();
      node1.isVar();
      node0.isWith();
      node1.isGetElem();
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.new FileLevelJsDocBuilder();
      Node node2 = new Node(47);
      Node node3 = Node.newString("Ry=Yu<@i[H2=AY?K&g;");
      node3.isIn();
      node0.isComma();
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.setLength(42);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isSyntheticBlock();
      node0.isComma();
      node1.isNE();
      node1.isTrue();
      node0.isGetElem();
      node1.siblings();
      node0.isQuotedString();
      Node node2 = Node.newString("Object#Element");
      node0.isIn();
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node3.isAssignAdd();
      Node.newString(53, "");
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("");
      node2.isRegExp();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.areAllFlagsSet();
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      Node node0 = Node.newString("BqJ8X26A_");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isNull();
      Node node1 = new Node((-1783), node0, node0, node0, node0, 2, 47);
      node1.isFor();
      Node node2 = node1.srcref(node0);
      Node.newString("", 40, (-243));
      node1.useSourceInfoIfMissingFromForTree(node0);
      // Undeclared exception!
      try { 
        node2.toStringTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1783
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      Node node0 = new Node(87);
      Node node1 = new Node(87, node0, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(42);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags4.valueOf();
      node1.isArrayLit();
      node1.checkTreeEquals(node0);
      // Undeclared exception!
      try { 
        node0.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(41);
      node0.putIntProp(89, 89);
      node0.isDec();
      node0.isAnd();
      Node node1 = Node.newNumber((-1.0));
      node1.setType(88);
      node0.isFalse();
      node1.getSourceOffset();
      node0.isCast();
      Node node2 = node0.cloneNode();
      node2.isThis();
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)30;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = Node.newString("");
      Node node1 = Node.newString(16, "$)[@ ZSLu{\"A");
      // Undeclared exception!
      try { 
        node0.removeChildAfter(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      Node node0 = new Node(87);
      Node node1 = new Node(87, node0, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      jSTypeRegistry0.isForwardDeclaredType("85cF=CeM.pxM;");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(38);
      node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      int int0 = Node.NO_SIDE_EFFECTS;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.setReturnsTainted();
      node1.getIntProp(4921);
      node0.isSetterDef();
      node0.mayMutateGlobalStateOrThrow();
      node0.isNull();
      node0.getSourcePosition();
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList.of();
      Node node0 = Node.newString("Object#Element");
      node0.isVar();
      node0.isTrue();
      node0.isGetElem();
      Node node1 = new Node(105, node0, 65522, 43);
      Node node2 = Node.newString(2, "Object#Element", 2720, 0);
      node0.setQuotedString();
      node1.isTry();
      node2.isThrow();
      node1.toString(true, false, false);
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isContinue();
      node0.isFunction();
      Node node1 = Node.newNumber((double) 12);
      node1.setLength(573);
      node1.getJSDocInfo();
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node2.setType(34);
      node0.isEquivalentToTyped(node0);
      node0.setSourceFileForTesting("StringNode: str is null");
      node2.isNew();
      node0.getStaticSourceFile();
      node1.getJsDocBuilderForNode();
      node0.isAnd();
      try { 
        node0.setDouble(2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000342] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      Node node0 = new Node(87);
      Node node1 = new Node(87, node0, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      jSTypeRegistry0.isForwardDeclaredType("8b5cF=CeM.pxM;");
      node0.isNot();
      Node node2 = Node.newNumber((-351.4667181520224));
      Node node3 = node1.copyInformationFrom(node2);
      node2.removeChildren();
      node3.isParamList();
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node4 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      node0.getStaticSourceFile();
      node0.checkTreeEqualsImpl(node4);
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      Node node0 = Node.newString(124, "]&F;?C,EoQ", 124, 124);
      node0.getJsDocBuilderForNode();
      node0.isFalse();
      node0.isContinue();
      node0.isFunction();
      Node node1 = Node.newNumber((double) 57, 120, 781);
      node0.setLength(40);
      Node node2 = Node.newString((-1043), "%o@3AQJ=G1LAqD", 29, 68);
      Node node3 = node2.copyInformationFrom(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      node3.setType(63);
      Node node4 = new Node(43);
      node4.isFalse();
      node4.cloneTree();
      node0.getSourceOffset();
      node4.isOptionalArg();
      node2.isCast();
      node1.isTry();
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      Node node0 = Node.newNumber((-3309.1922597), (-7450), (-7450));
      node0.isOnlyModifiesArgumentsCall();
      node0.isGetElem();
      node0.siblings();
      node0.setCharno(2736);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      immutableList0.toArray();
      Node node1 = Node.newString(51, "Node tree inequality:\nTree1:\n", 11, 1436);
      node1.mayMutateGlobalStateOrThrow();
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node1.isVoid();
      node0.isNumber();
      node2.getType();
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      Node node0 = Node.newString(124, "7AB", 124, 124);
      // Undeclared exception!
      try { 
        node0.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isContinue();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "n52U");
      node0.isFunction();
      Node node1 = Node.newNumber((double) 12);
      node1.setLength(573);
      node1.getJSDocInfo();
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node2.isNot();
      Node node3 = Node.newNumber(1.2);
      Node node4 = node2.copyInformationFrom(node3);
      node1.removeChildren();
      node4.isParamList();
      Vector<JSType> vector0 = new Vector<JSType>();
      ObjectType objectType0 = jSTypeRegistry0.createObjectType("change_time", node1, (ObjectType) null);
      // Undeclared exception!
      try { 
        ImmutableList.of((JSType) objectType0, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 1
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = new Node((-1), (-1), 44);
      node0.isNull();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node node1 = new Node(2, 30, 112);
      node0.isEquivalentTo(node1, true, false, true);
      node1.isVarArgs();
      node0.copyInformationFromForTree(node1);
      String string0 = null;
      try { 
        node0.setString((String) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ERROR 30 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      Node node0 = Node.newNumber((-448.45888719), 118, 117);
      Node node1 = Node.newNumber((double) 30, 48, 1811);
      Node node2 = null;
      node1.srcrefTree(node0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte) (-58);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node3 = Node.newNumber((double) 57);
      node3.setCharno(47);
      Node node4 = Node.newNumber((double) 1);
      node0.getIndexOfChild((Node) null);
      // Undeclared exception!
      try { 
        node4.clonePropsFrom((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      Node node0 = Node.newString(124, "]&F;?C,EoQ", 124, 124);
      node0.getJsDocBuilderForNode();
      node0.isFalse();
      node0.isContinue();
      node0.isFunction();
      Node node1 = Node.newNumber((double) 57, 120, 781);
      node0.setLength(40);
      Node node2 = Node.newString((-1043), "%o@3AQJ=G1LAqD", 29, 57);
      Node node3 = node2.copyInformationFrom(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      node3.setType(63);
      Node node4 = new Node(43);
      node4.isFalse();
      node0.getSourceOffset();
      node4.isOptionalArg();
      node2.isCast();
      node4.cloneNode();
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      Node node0 = new Node(87);
      Node node1 = new Node(87, node0, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(42);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      node_SideEffectFlags4.setMutatesArguments();
      node_SideEffectFlags4.setThrows();
      node_SideEffectFlags1.setReturnsTainted();
      Node node2 = Node.newNumber((double) 1);
      Node node3 = new Node(2, node2, node2, node2, 43, 53);
      node3.getIndexOfChild(node1);
      node3.mayMutateGlobalStateOrThrow();
      Node node4 = node0.useSourceInfoFromForTree(node2);
      node4.wasEmptyNode();
      node4.isLabelName();
      node1.getType();
      node3.isGetElem();
      node3.isOptionalArg();
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      Node node0 = Node.newString(124, "]&F;?C,EoQ", 124, 124);
      node0.getDirectives();
      node0.isEmpty();
      node0.isQuotedString();
      node0.isSwitch();
      node0.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      Node node0 = Node.newNumber((-448.45888719), 118, 117);
      Node node1 = Node.newNumber((double) 30, 48, 1811);
      Node node2 = node1.srcrefTree(node0);
      Node node3 = new Node(52, node2, 1361, (-529));
      Node node4 = Node.newString(55, "", (-1617), 37);
      node4.setQuotedString();
      node2.isTry();
      node3.isThrow();
      node3.toString(true, false, true);
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wFths");
      Node node0 = Node.newString(65535, "", 65535, 65535);
      node0.hasChildren();
      node0.isLabelName();
      node0.getBooleanProp(4095);
      node0.setOptionalArg(false);
      node0.setQuotedString();
      node0.isTry();
      Node node1 = new Node((-1617), 55, 47);
      node1.isThrow();
      // Undeclared exception!
      try { 
        node1.toString(false, false, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1617
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      Node node0 = Node.newNumber((-448.45888719), 118, 117);
      Node node1 = Node.newNumber((double) 30, 48, 1811);
      node1.srcrefTree(node0);
      Node node2 = Node.newNumber((double) 57);
      node2.setCharno(47);
      Node node3 = Node.newNumber((double) 1);
      node0.getIndexOfChild((Node) null);
      node1.mayMutateGlobalStateOrThrow();
      // Undeclared exception!
      try { 
        node3.useSourceInfoFromForTree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      Node node0 = new Node(85);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isTry();
      Node node1 = new Node(49, node0, node0, node0, node0);
      Node node2 = node0.srcref(node1);
      Node node3 = null;
      try {
        node3 = new Node(8202, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isWith();
      node0.isOnlyModifiesArgumentsCall();
      node0.isGetElem();
      Node node1 = Node.newString("(F%y{");
      node0.siblings();
      node0.setCharno(2736);
      Node.newNumber((double) 1, 2, 41);
      node0.setLength(1);
      Node.newString(57, "Object#Key", 47, 635);
      Node node2 = node0.copyInformationFrom(node1);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1, false);
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      node1.setType(1610612736);
      node2.isFalse();
      node0.getSourceOffset();
      node0.isOptionalArg();
      node2.isCast();
      node0.cloneNode();
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node(39, 0, 0);
      nodeArray0[0] = node0;
      Node node1 = node0.cloneNode();
      node1.getInputId();
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = null;
      jSTypeArray0[1] = null;
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) null, jSTypeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionParamBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.setLength(42);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-39);
      byteArray0[4] = (byte) (-113);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node2 = Node.newString((-613), "DElo$0Dg&");
      Node node3 = Node.newString("DElo$0Dg&");
      node3.isTry();
      Node node4 = new Node(50, node0, node1, node0, node0);
      node4.srcref(node0);
      Node node5 = new Node(39, node4);
      node5.isIn();
      Node node6 = new Node(50, node2, 2912, (-7450));
      node6.wasEmptyNode();
      node3.isLabelName();
      node2.getType();
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      Node node0 = Node.newString("BqJ8X26A_");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isNull();
      Node node1 = new Node((-1805), node0, node0, node0, node0, 2, 47);
      node1.isFor();
      node1.srcref(node0);
      InputId inputId0 = new InputId("BqJ8X26A_");
      Node node2 = Node.newString("", 40, (-243));
      node1.useSourceInfoIfMissingFromForTree(node0);
      node2.setString(".");
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<UnionType> arrayList0 = new ArrayList<UnionType>(1);
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) arrayList0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = new Node(1152, node0, node0, node0, node0);
      node1.isSetterDef();
      // Undeclared exception!
      try { 
        node1.getExistingIntProp((-1641));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: -1641
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.getJsDocBuilderForNode();
      node0.isFalse();
      node0.isContinue();
      node0.isFunction();
      Node node1 = Node.newNumber(3562.46203172131, 3216, 0);
      node1.setLength(2);
      node1.getDouble();
      node1.getJSDocInfo();
      Node node2 = new Node(38, node0, node1, node0, 57, 8);
      Node node3 = node2.useSourceInfoIfMissingFromForTree(node0);
      node3.isScript();
      node2.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      Node node0 = Node.newString(124, "]&F;?C,EoQ", 124, 124);
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(39, nodeArray0, 56, 53);
      node0.isEmpty();
      node0.isBlock();
      node1.getQualifiedName();
      Node node2 = new Node((-434), node1, node1, node0, 463, 1048);
      node2.isQuotedString();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", false);
      node2.setStaticSourceFile(simpleSourceFile0);
      Node node3 = Node.newString("");
      node3.addChildrenToFront(node2);
      node0.isAssignAdd();
      node3.isFromExterns();
      Node node4 = null;
      try {
        node4 = new Node(54, node3, (Node) null, node2, 144, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node1.isWith();
      node0.isOnlyModifiesArgumentsCall();
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node0;
      Node node2 = new Node(4095, 1, 393);
      nodeArray0[1] = node2;
      nodeArray0[2] = node0;
      Node node3 = null;
      try {
        node3 = new Node(1, nodeArray0, 93, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isWith();
      node0.isOnlyModifiesArgumentsCall();
      node0.isGetElem();
      Node node1 = Node.newString("iterators");
      node1.siblings();
      node0.setCharno(38);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setMutatesArguments();
      int int0 = Node.NO_SIDE_EFFECTS;
      node_SideEffectFlags1.setThrows();
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags2.setReturnsTainted();
      node0.getIntProp(29);
      node0.isSetterDef();
      Node node2 = node0.getLastSibling();
      node2.useSourceInfoFromForTree(node0);
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)30;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = Node.newString("");
      node0.isInc();
      node0.isOptionalArg();
      node0.isTry();
      node0.getBooleanProp((byte)30);
      node0.isAssignAdd();
      node0.addSuppression("");
      // Undeclared exception!
      try { 
        node0.isEquivalentTo((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isWith();
      node0.isOnlyModifiesArgumentsCall();
      node0.isGetElem();
      Node node1 = Node.newString("(F%y{");
      node0.siblings();
      node0.setCharno(2736);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isWith();
      node0.isGetElem();
      node0.getDirectives();
      node1.getDirectives();
      Node.newNumber(0.5);
      Node node2 = Node.newNumber(0.0);
      Node node3 = new Node(48, node2, node0, node0);
      Node node4 = null;
      try {
        node4 = new Node(1, node1, node3, node0, node1, 39, 57);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      Node node0 = Node.newString(2043, "com.google.javascript.rhino.jstype.NoResolvedType", 1486, 2043);
      node0.getFirstChild();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-411));
      node0.isOnlyModifiesArgumentsCall();
      node_SideEffectFlags0.setReturnsTainted();
      Node.newString((-7450), "com.google.javascript.rhino.jstype.NoResolvedType", 4, (-3867));
      node0.isCatch();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) hashSet0);
      jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
  }

  @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node(0, 0, 0);
      nodeArray0[0] = node0;
      Locale locale0 = Locale.ITALY;
      locale0.getUnicodeLocaleKeys();
      Node node1 = new Node(0);
      node1.setIsSyntheticBlock(true);
      node0.setSourceEncodedPositionForTree(3239);
      node1.addChildrenToBack(node0);
      node0.cloneTree();
      node0.isSyntheticBlock();
      node0.getAncestor(50);
      // Undeclared exception!
      try { 
        node1.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.getProp(0);
      Node node1 = Node.newString("^3 -c$;vY19wI");
      node1.isFromExterns();
      node0.setChangeTime(12);
      Node node2 = node1.useSourceInfoFrom(node0);
      Node node3 = new Node(1872, node2, node1, node0, node1);
      // Undeclared exception!
      try { 
        node3.setSideEffectFlags((Node.SideEffectFlags) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isWith();
      node0.isOnlyModifiesArgumentsCall();
      node0.isGetElem();
      node0.siblings();
      node0.setCharno(2736);
      immutableList0.toArray();
      Node node1 = Node.newString(49, "\")", 30, 1777);
      node0.mayMutateGlobalStateOrThrow();
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node0.checkTreeEquals(node2);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(256);
      node0.isVoid();
      node0.isObjectLit();
      node0.getType();
  }

  @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList.of();
      Node node0 = Node.newString("Object#Element");
      node0.isWith();
      node0.isOnlyModifiesArgumentsCall();
      node0.isGetElem();
      node0.siblings();
      node0.setCharno(2736);
      Node node1 = Node.newString(49, "\")", 30, 1777);
      node0.mayMutateGlobalStateOrThrow();
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node2.setQuotedString();
      node1.isTry();
      node2.isLocalResultCall();
      node2.getParent();
      try { 
        node2.setDouble(1.0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING Object#Element 30 [quoted: com.google.javascript.rhino.Node$IntPropListItem@0000000338] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      ImmutableList<JSType> immutableList1 = immutableList0.reverse();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList1);
      node1.getJsDocBuilderForNode();
      node1.isFalse();
      node1.isContinue();
      Node node2 = new Node(4095, node1, node0, 53, (-30));
      node2.isFunction();
      node2.setLength(152);
      node0.getDouble();
      node0.getJSDocInfo();
      node2.setType(148);
      node2.isEquivalentToTyped(node1);
      Node node3 = node0.srcref(node1);
      node1.toString();
      node0.getDirectives();
      node2.isEmpty();
      node1.isDec();
      node1.getQualifiedName();
      node0.isQuotedString();
      InputId inputId0 = new InputId("");
      node3.toString();
      node3.isNot();
      node2.getDirectives();
  }

  @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      Node node0 = Node.newNumber((-1181.5240597873797));
      Node node1 = new Node(47, node0);
      Node node2 = new Node((-1264), 1, 0);
      Locale locale0 = Locale.ITALY;
      locale0.getScript();
      Locale locale1 = Locale.KOREAN;
      locale0.getDisplayLanguage(locale1);
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      node0.setDirectives(set0);
      node0.isNE();
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      node1.getChildCount();
      node1.isDefaultCase();
      node0.isGetElem();
  }

  @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isWith();
      node0.isOnlyModifiesArgumentsCall();
      node0.isGetElem();
      Node node1 = Node.newString("(F%y{");
      node0.siblings();
      node0.setCharno(2736);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesArguments();
      int int0 = Node.NO_SIDE_EFFECTS;
      node_SideEffectFlags2.setThrows();
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      node_SideEffectFlags4.setMutatesThis();
      node_SideEffectFlags3.setReturnsTainted();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("NO_TYPE");
      node1.hasChild(node0);
      node0.clonePropsFrom(node1);
  }

  @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newString("com.google.common.collect.Platform", (-798), 668);
      Node node1 = new Node(668, node0, node0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-29);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node2 = new Node(309, node1, 50, 4095);
      node2.siblings();
      node0.setSourceEncodedPositionForTree((-798));
      node2.getStaticSourceFile();
      node2.setStaticSourceFile((StaticSourceFile) null);
      Node node3 = null;
      try {
        node3 = new Node(87, node2, node1, node1, 390, 119);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      Node node0 = new Node(87);
      Node node1 = new Node(87, node0, node0);
      node1.getIntProp(124);
      node1.getChildBefore(node0);
      node1.isAssignAdd();
      node1.isAdd();
  }

  @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      int int0 = 119;
      Node[] nodeArray0 = new Node[2];
      Node node0 = null;
      try {
        node0 = new Node(119, nodeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      Node node0 = Node.newString(2043, "com.google.javascript.rhino.jstype.NoResolvedType", 1486, 2043);
      Node node1 = new Node(55, 57, 2043);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-411));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.clearSideEffectFlags();
      node_SideEffectFlags1.clearAllFlags();
      node0.getChangeTime();
      // Undeclared exception!
      try { 
        node0.addChildrenAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.google.javascript.rhino.Node$SiblingNodeIterable");
      Node node0 = Node.newString(65535, "I=fk=~U?a", 118, 65535);
      node0.mayMutateArguments();
      node0.isLabelName();
      node0.isNumber();
      node0.setChangeTime(118);
      node0.setOptionalArg(false);
      node0.siblings();
      node0.isContinue();
      node0.isGetElem();
      node0.isQualifiedName();
      node0.getSourceFileName();
      node0.getStaticSourceFile();
      node0.getInputId();
  }

  @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isWith();
      node0.isTrue();
      node0.isGetElem();
      node0.siblings();
      node0.isQuotedString();
      Node node1 = Node.newString("Object#Element");
      node1.isIn();
      node0.isAssignAdd();
      Node node2 = Node.newString(57, "");
      node2.getSourceOffset();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("fDstIR^ixlZ$");
  }

  @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      Node node0 = Node.newNumber(1747.064206072);
      node0.getJsDocBuilderForNode();
      node0.isFalse();
      node0.isContinue();
      node0.isFunction();
      Node node1 = Node.newNumber((double) 36);
      node1.setLength(2);
      node1.getJSDocInfo();
      node1.setType(26);
      node1.isCase();
      node0.isEquivalentToTyped(node1);
      node0.srcref(node1);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      node0.toString();
      node0.getDirectives();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      node_SideEffectFlags4.setMutatesThis();
      node_SideEffectFlags1.setReturnsTainted();
      node1.getIntProp((-4583));
  }

  @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      Node node0 = new Node(39, 0, 0);
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      node0.setDirectives(set0);
      node0.isNE();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags0.valueOf();
      node_SideEffectFlags3.setThrows();
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      node0.isTrue();
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(32, node0, node0, 4095, 57);
      node1.useSourceInfoIfMissingFromForTree(node0);
      node1.isScript();
  }

  @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      Node node0 = new Node(39, 0, 0);
      Locale locale0 = Locale.ITALY;
      Locale locale1 = Locale.KOREAN;
      locale0.getDisplayLanguage(locale1);
      node0.getJSDocInfo();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      node0.setDirectives(set0);
      node0.isNE();
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      node0.getChildCount();
  }

  @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.google.javascript.rhino.Node$SiblingNodeIterable");
      // Undeclared exception!
      try { 
        Node.newString(65535, (String) null, 124, 118);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      Node node0 = Node.newNumber(1747.064206072);
      node0.getJsDocBuilderForNode();
      node0.isFalse();
      node0.isContinue();
      node0.isFunction();
      node0.isGetElem();
      node0.siblings();
      node0.setCharno(2736);
      Node.newString(57, "", 16, 12);
      Node node1 = Node.newNumber(1.2);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node1.checkTreeEquals(node0);
      node1.getDirectives();
      node0.isEquivalentTo(node2, false, false, false);
  }

  @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isWith();
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = Node.newNumber((double) 43);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[2];
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
      jSTypeArray0[0] = (JSType) objectType0;
      TemplateTypeMap templateTypeMap0 = jSTypeRegistry0.createTemplateTypeMap((ImmutableList<TemplateType>) null, immutableList0);
      TemplateTypeMapReplacer templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry1, templateTypeMap0);
      JSType jSType0 = templateTypeMapReplacer0.caseAllType();
      jSTypeArray0[1] = jSType0;
      Node node2 = jSTypeRegistry1.createOptionalParameters(jSTypeArray0);
      node2.setLength((-1011));
      node0.getJSDocInfo();
      node2.setType(30);
      node2.isEquivalentToTyped(node0);
      node2.isEquivalentToTyped(node1);
      Node node3 = node0.srcref(node1);
      node0.toString();
      node0.getDirectives();
      node1.isTrue();
      Node node4 = node2.useSourceInfoIfMissingFromForTree(node3);
      node4.isScript();
  }

  @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = Node.newString("Object#Key");
      jSTypeRegistry0.isForwardDeclaredType("");
      Node node1 = Node.newString(15, "_)rua1", 43, 15);
      node1.isParamList();
      Node node2 = Node.newString("FALSE");
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      jSDocInfo0.getAssociatedNode();
      // Undeclared exception!
      try { 
        node2.replaceChildAfter((Node) null, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isWith();
      node0.isOnlyModifiesArgumentsCall();
      node0.isGetElem();
      node0.siblings();
      node0.setCharno(2736);
      Node node1 = Node.newString(49, "\")", 30, 1777);
      node0.mayMutateGlobalStateOrThrow();
      node0.useSourceInfoIfMissingFrom(node1);
      Node node2 = new Node(40, node1, node1, node1, node1, 49, 39);
      node2.isBlock();
      Node node3 = node2.cloneNode();
      node2.isLabelName();
      // Undeclared exception!
      try { 
        node3.getChildBefore(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      Node node0 = Node.newNumber((-1181.5240597873797));
      Node node1 = new Node(47, node0);
      Node node2 = node0.cloneNode();
      node1.getInputId();
      node0.getDouble();
      node1.getJSDocInfo();
      node2.setType((-4186));
      Node node3 = new Node(2, node2, node1, 4095, (-246));
      Node node4 = new Node(47, node3, node3);
      node3.srcref(node4);
      Node node5 = null;
      try {
        node5 = new Node(16384, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.getJsDocBuilderForNode();
      node0.isFalse();
      node0.isContinue();
      node0.isFunction();
      Node node1 = Node.newNumber(3562.46203172131, 3216, 0);
      node1.setLength(2);
      node1.getDouble();
      node1.getJSDocInfo();
      node1.setType(26);
      Node node2 = node1.srcref(node0);
      Node node3 = new Node((-1), node2);
      node1.isIn();
      node0.putProp(50, node3);
      try { 
        node0.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER -1.0 [free_call: com.google.javascript.rhino.Node$ObjectPropListItem@0000000006] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isWith();
      node0.isOnlyModifiesArgumentsCall();
      node0.isGetElem();
      node0.siblings();
      node0.setCharno(2736);
      node0.setIsSyntheticBlock(true);
      try { 
        node0.setString("RangeError");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST [synthetic: com.google.javascript.rhino.Node$IntPropListItem@0000000338] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.google.javascript.rhino.Node$SiblingNodeIterable");
      Node node0 = Node.newString(65535, "I=fk=~U?a", 118, 65535);
      node0.mayMutateArguments();
      node0.isLabelName();
      node0.isNumber();
      node0.setOptionalArg(false);
      node0.siblings();
      node0.isContinue();
      node0.isGetElem();
      node0.isQualifiedName();
      node0.getStaticSourceFile();
      node0.getInputId();
  }

  @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      Node node0 = Node.newNumber((-1181.5240597873797));
      Node node1 = new Node(47, node0);
      Node node2 = node0.cloneNode();
      node1.getInputId();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-887));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node node3 = null;
      try {
        node3 = new Node(37, node1, node1, node2, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.setLength(42);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node2 = Node.newString((-613), "DElo$0Dg&");
      Node node3 = Node.newString("DElo$0Dg&");
      node3.isTry();
      Node node4 = new Node(50, node0, node1, node0, node0);
      Node node5 = node4.srcref(node0);
      Node node6 = new Node(39, node4);
      node6.isIn();
      Node node7 = new Node(50, node2, 2912, (-7450));
      Node node8 = Node.newString(673, "Object#Element", 36, 608);
      node8.setQuotedString();
      node4.isTry();
      node4.isThrow();
      node5.removeChildren();
  }

  @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      Node node0 = Node.newString(124, "]&F;?C,EoQ", 124, 124);
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(39, nodeArray0, 56, 53);
      node0.isEmpty();
      node0.isDec();
      node1.getQualifiedName();
      Node node2 = new Node((-434), node1, node1, node0, 463, 1060);
      node2.isQuotedString();
      Node node3 = Node.newString("");
      node3.addChildrenToFront(node2);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node4 = node2.cloneTree();
      Node node5 = Node.newString("FU3M!7A5O", 46, (-638));
      Node node6 = new Node(4095, node3);
      Node node7 = node5.useSourceInfoFromForTree(node6);
      node5.isCast();
      node4.isThis();
      node7.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      Node node0 = new Node(85);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "wC";
      Node node1 = Node.newString("wC", (-3420), (-1630));
      node0.getQualifiedName();
      // Undeclared exception!
      try { 
        node1.getExistingIntProp(12288);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 12288
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test613()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.getJsDocBuilderForNode();
      node0.isFalse();
      node0.isContinue();
      node0.isFunction();
      Node node1 = Node.newNumber(3562.46203172131, 3216, 0);
      node1.setLength(2);
      node1.getDouble();
      node1.getJSDocInfo();
      node1.setType(26);
      node0.isEquivalentToTyped(node1);
      Node node2 = node0.srcref(node1);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      node0.toString();
      node0.getDirectives();
      node1.isEmpty();
      node0.isDec();
      node2.getQualifiedName();
      node0.isQuotedString();
      InputId inputId0 = new InputId((String) null);
      node0.toString();
      node1.isNot();
      node0.getDirectives();
  }

  @Test(timeout = 4000)
  public void test614()  throws Throwable  {
      Node node0 = Node.newString("");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-102);
      StringWriter stringWriter0 = new StringWriter(4095);
      node0.appendStringTree(stringWriter0);
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-26);
      node0.setQuotedString();
      byteArray0[3] = (byte) (-107);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      node0.setLineno(39);
      node0.isDo();
      Node node1 = new Node((byte) (-107), node0, node0);
      node0.cloneTree();
      Node node2 = Node.newString("", 0, (-981));
      Node node3 = node2.useSourceInfoFromForTree(node1);
      node1.addChildrenToFront(node3);
      node0.isCast();
      node1.isThis();
  }

  @Test(timeout = 4000)
  public void test615()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newString("2mF1@F{SH");
      node0.isCatch();
      Node node1 = new Node(115, node0, node0, node0, 38, 36);
      Node node2 = node0.srcrefTree(node1);
      Node.newNumber((double) 48);
      node1.detachChildren();
      node1.children();
      node2.putIntProp(40, (-383));
      node1.isStringKey();
      // Undeclared exception!
      try { 
        node1.getChildAtIndex(29);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test616()  throws Throwable  {
      Node node0 = Node.newString("", 83, 83);
      Node node1 = new Node((-320), node0, node0, node0, node0, 65535, 54);
      Node node2 = Node.newNumber(0.0);
      node1.clonePropsFrom(node2);
  }

  @Test(timeout = 4000)
  public void test617()  throws Throwable  {
      Node node0 = new Node(49, 49, 1300);
      Node node1 = new Node((-1736), node0, node0, node0);
      Node node2 = node0.copyInformationFrom(node1);
      node1.getSourceOffset();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node2.isOnlyModifiesThisCall();
      // Undeclared exception!
      try { 
        node0.checkTreeEquals(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1736
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test618()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isWith();
      node0.isOnlyModifiesArgumentsCall();
      node0.isGetElem();
      node0.siblings();
      node0.setCharno(2736);
      Node node1 = Node.newString(49, "\")", 30, 1777);
      node0.mayMutateGlobalStateOrThrow();
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node0.checkTreeEquals(node2);
      node0.getDirectives();
      node0.isEquivalentTo(node2, false, true, true);
  }

  @Test(timeout = 4000)
  public void test619()  throws Throwable  {
      Node node0 = new Node(39, 0, 0);
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      node0.setDirectives(set0);
      node0.isNE();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags0.valueOf();
      node_SideEffectFlags3.setThrows();
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setReturnsTainted();
      node0.getIntProp(3);
  }

  @Test(timeout = 4000)
  public void test620()  throws Throwable  {
      Node node0 = Node.newString(124, "]&F;?C,EoQ", 124, 124);
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(39, nodeArray0, 56, 53);
      node0.isEmpty();
      node0.isDec();
      node1.getQualifiedName();
      Node node2 = new Node((-434), node1, node1, node0, 463, 1060);
      node2.isQuotedString();
      Node node3 = Node.newString("");
      node3.addChildrenToFront(node2);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf(jSTypeArray0);
      Node node4 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node4.isDefaultCase();
      node3.isIf();
  }

  @Test(timeout = 4000)
  public void test621()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newString("", 1562, (-7450));
      node0.getString();
  }

  @Test(timeout = 4000)
  public void test622()  throws Throwable  {
      Node node0 = Node.newString(2043, "com.google.javascript.rhino.jstype.NoResolvedType", 1486, 2043);
      Node node1 = new Node(55, 57, 2043);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-411));
      node0.isOnlyModifiesArgumentsCall();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.clearSideEffectFlags();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.clearAllFlags();
      // Undeclared exception!
      try { 
        node0.addChildrenAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test623()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.getProp(0);
      Node node1 = Node.newString("^3 -c$;vY19wI");
      Node node2 = Node.newNumber((double) 1, 38, 130);
      Node node3 = Node.newString(52, "com.google.javascript.rhino.jstype.TernaryValue", 65535, 1);
      node3.setLength(2);
      node2.getDouble();
      node3.getJSDocInfo();
      node3.setType((-2492));
      node3.isEquivalentToTyped(node2);
      node3.isEquivalentToTyped(node2);
      Node node4 = node3.srcref(node2);
      node2.toString();
      node1.getDirectives();
      Node[] nodeArray0 = new Node[0];
      Node node5 = new Node(54, nodeArray0, 9, 88);
      node5.isEmpty();
      node4.isDec();
      node0.getQualifiedName();
      node1.isQuotedString();
      Node.newString("");
      node1.addChildrenToFront(node4);
      node2.isObjectLit();
      node5.isEquivalentTo(node3);
  }

  @Test(timeout = 4000)
  public void test624()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.getJsDocBuilderForNode();
      node0.isFalse();
      node0.isContinue();
      node0.isFunction();
      Node node1 = Node.newNumber(3562.46203172131, 3216, 0);
      node1.setLength(2);
      node1.getDouble();
      node1.getJSDocInfo();
      node1.setType(26);
      Node node2 = node1.srcref(node0);
      Node node3 = new Node((-1), node2);
      node1.isIn();
      Node node4 = new Node((-765), node3, 53, 54);
      Node node5 = Node.newString(223, "OQX@'XYCjhM", 112, 1);
      node5.setQuotedString();
      node3.isTry();
      node5.isThrow();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node3, node0);
      node_NodeMismatch0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test625()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isWith();
      node0.isTrue();
      node0.isGetElem();
      node0.siblings();
      node0.wasEmptyNode();
      node0.isLabelName();
  }

  @Test(timeout = 4000)
  public void test626()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)30;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = Node.newString("");
      node0.isInc();
      node0.isTry();
      node0.getBooleanProp((byte)30);
      node0.isAssignAdd();
      node0.addSuppression("");
  }

  @Test(timeout = 4000)
  public void test627()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node0.isWith();
      node0.isOnlyModifiesArgumentsCall();
      node0.isGetElem();
      node0.siblings();
      node1.setCharno(235);
      Node.newString(8, "Object#Key", 16, 57);
      node0.mayMutateGlobalStateOrThrow();
      node1.useSourceInfoIfMissingFrom(node0);
      Node node2 = new Node(223, node1, node0, node0, 30, 117);
      // Undeclared exception!
      try { 
        node2.checkTreeEquals(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 223
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test628()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isWith();
      node0.isOnlyModifiesArgumentsCall();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = Node.newString("0Ec?", 55, 57);
      // Undeclared exception!
      try { 
        node1.useSourceInfoIfMissingFromForTree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test629()  throws Throwable  {
      Node node0 = new Node(85);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = Node.newString("wC", (-3420), (-1630));
      node0.useSourceInfoIfMissingFromForTree(node1);
      node0.isScript();
      node0.useSourceInfoIfMissingFrom(node1);
  }

  @Test(timeout = 4000)
  public void test630()  throws Throwable  {
      Node node0 = Node.newString(2175, "jVWx^APo{F", 1539, 2175);
      node0.isParamList();
      Node node1 = Node.newString("jVWx^APo{F");
      // Undeclared exception!
      try { 
        node0.replaceChildAfter(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test631()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.setLength(42);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node1.isInstanceOf();
      Node node2 = Node.newString((-597), "DElo$0Dg&");
      node1.isTry();
      Node node3 = new Node(50, node0, node1, node0, node0);
      Node node4 = node3.srcref(node0);
      Node node5 = new Node(38, node2);
      node3.isIn();
      Node node6 = new Node(46, node4, 49, (-95));
      node0.isAdd();
      node2.isWhile();
  }

  @Test(timeout = 4000)
  public void test632()  throws Throwable  {
      Node node0 = Node.newString(124, "]&F;?C,EoQ", 124, 124);
      node0.putBooleanProp(1049, true);
  }

  @Test(timeout = 4000)
  public void test633()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.setLength(42);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node1.isInstanceOf();
      Node node2 = Node.newString((-597), "DElo$0Dg&");
      node2.getString();
      Node node3 = node1.useSourceInfoIfMissingFrom(node0);
      Node node4 = node1.cloneNode();
      node1.setSourceEncodedPositionForTree(15);
      Node node5 = node3.clonePropsFrom(node1);
      node3.addSuppression("Object#Element");
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = node4;
      nodeArray0[1] = node5;
      nodeArray0[2] = node2;
      nodeArray0[3] = node4;
      nodeArray0[4] = node5;
      nodeArray0[5] = node1;
      nodeArray0[6] = node3;
      nodeArray0[7] = node3;
      nodeArray0[8] = node2;
      Node node6 = null;
      try {
        node6 = new Node(49, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test634()  throws Throwable  {
      Node node0 = Node.newNumber((-1181.5240597873797));
      Node node1 = new Node(57, 39, 57);
      Node node2 = node0.cloneNode();
      node2.getInputId();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      JSType[] jSTypeArray0 = new JSType[0];
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) null, jSTypeArray0);
      node2.putProp(32, functionType0);
      node2.isTry();
      Node node3 = new Node(51, node2, node1, node2, node1);
      node3.srcref(node1);
      Node node4 = null;
      try {
        node4 = new Node(26, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test635()  throws Throwable  {
      Node node0 = null;
      Node node1 = null;
      try {
        node1 = new Node(3900, (Node) null, 3900, 256);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test636()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.getJsDocBuilderForNode();
      node0.isFalse();
      node0.isContinue();
      node0.isFunction();
      Node node1 = Node.newNumber(3562.46203172131, 3216, 0);
      node1.setLength(2);
      node1.getDouble();
      node1.getJSDocInfo();
      node1.setType(26);
      node0.isEquivalentToTyped(node1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+/=:1]mKP8Rrb!T");
      node0.isEquivalentToTyped(node1);
      Node node2 = node0.srcref(node1);
      Node[] nodeArray0 = new Node[2];
      node2.setLineno((-2731));
      nodeArray0[0] = node0;
      node0.toString();
      node0.getDirectives();
      node0.isDec();
      node2.getQualifiedName();
      node0.isQuotedString();
      Node node3 = Node.newString("");
      node3.isIn();
      node3.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test637()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList.of();
      Node node0 = Node.newString("Object#Element");
      node0.isWith();
      node0.isOnlyModifiesArgumentsCall();
      node0.isGetElem();
      node0.siblings();
      node0.setCharno(2736);
      Node node1 = node0.cloneNode();
      node0.setSourceEncodedPositionForTree(46);
      Node node2 = node0.clonePropsFrom(node1);
      node2.addSuppression("Object#Key");
      Node node3 = Node.newString(1777, "Object#Element");
      // Undeclared exception!
      try { 
        node1.checkTreeEquals(node3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1777
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test638()  throws Throwable  {
      Node node0 = Node.newNumber(1747.064206072);
      node0.getJsDocBuilderForNode();
      node0.isFalse();
      node0.isContinue();
      node0.isFunction();
      Node node1 = Node.newNumber((double) 36);
      node1.setLength(2);
      node1.getJSDocInfo();
      node1.setType(26);
      node0.isEquivalentToTyped(node1);
      node0.isEquivalentToTyped(node1);
      Node node2 = node0.srcref(node1);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      node0.toString();
      node0.getDirectives();
      node2.isTrue();
      node2.getQualifiedName();
      // Undeclared exception!
      try { 
        node2.getExistingIntProp(3216);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 3216
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test639()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = Node.newNumber((double) 49);
      Node.newString(1180, "\")", 1143, 1364);
      node0.mayMutateGlobalStateOrThrow();
      Node node2 = new Node(0, node0, node0, node1, node1, 2180, 46);
      node2.useSourceInfoIfMissingFrom(node0);
      Node node3 = new Node(47, 52, 113);
      // Undeclared exception!
      try { 
        node0.checkTreeEquals(node3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test640()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node(39, 0, 0);
      Locale locale0 = Locale.ITALY;
      locale0.getUnicodeLocaleKeys();
      Node node1 = new Node(0);
      node1.setIsSyntheticBlock(true);
      node0.setSourceEncodedPositionForTree(3239);
      // Undeclared exception!
      try { 
        node1.addChildrenToBack(nodeArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test641()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.setLength(42);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node1.isInstanceOf();
      Node node2 = Node.newString((-597), "DElo$0Dg&");
      node1.isTry();
      Node node3 = new Node(50, node0, node1, node0, node0);
      node3.srcref(node0);
      node0.setSourceEncodedPositionForTree(16);
      node1.useSourceInfoIfMissingFromForTree(node3);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setMutatesArguments();
      // Undeclared exception!
      try { 
        node2.setSideEffectFlags(node_SideEffectFlags4);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -597
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test642()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.setLength(42);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node2 = Node.newString((-637), "DElo$0Dg&");
      Node node3 = Node.newString("DElo$0Dg&");
      node3.isTry();
      Node node4 = new Node(50, node0, node1, node0, node0);
      node4.srcref(node0);
      Node node5 = new Node(39, node4);
      node2.isIn();
      Node node6 = null;
      try {
        node6 = new Node(29, node0, 39, (-3013));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test643()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.setLength(42);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node2 = Node.newString((-637), "DElo$0Dg&");
      Node.newString("DElo$0Dg&");
      Node node3 = node0.srcref(node0);
      node2.isIn();
      Node node4 = new Node(57, node3, (-1), (-2617));
      node1.isAdd();
  }

  @Test(timeout = 4000)
  public void test644()  throws Throwable  {
      int int0 = (-1016);
      Node[] nodeArray0 = new Node[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Node node0 = new Node((-212), nodeArray0);
      Node node1 = new Node(2912, node0, node0, node0, node0);
      node1.copyInformationFrom(node0);
      Node node2 = null;
      try {
        node2 = new Node((-212), node1, node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test645()  throws Throwable  {
      Node node0 = new Node(0, 4841, 4841);
      node0.setCharno(4841);
      Node node1 = new Node(0, node0, node0, node0, node0);
      Node node2 = new Node(0, node1);
      node1.isEquivalentToTyped(node2);
      Node.newString(36, "com.google.common.collect.ObjectArrays");
      node2.checkTreeTypeAwareEqualsImpl(node1);
      node2.getLength();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(4);
      charArrayWriter0.append('=');
      charArrayWriter0.reset();
      node2.getInputId();
      node0.isNew();
      node2.isIn();
      // Undeclared exception!
      try { 
        node0.setDouble(16);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test646()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.isWith();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(97);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got PARAM_LIST
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test647()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-112);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = Node.newString("");
      node0.getLength();
      node0.getJsDocBuilderForNode();
      Node node1 = Node.newString(51, "", 50, 4);
      node1.isCatch();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) hashSet0);
      jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
  }

  @Test(timeout = 4000)
  public void test648()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 2065;
      Node.mergeLineCharNo(115, 2065);
      int int1 = 29;
      Node node0 = new Node(29, 115, 473105);
      int int2 = 133;
      int int3 = 112;
      int int4 = (-95);
      node0.toString(false, true, false);
      Node node1 = null;
      // Undeclared exception!
      try { 
        node0.addChildBefore((Node) null, (Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test649()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      node0.setCharno(0);
      Node node1 = new Node(0, node0, node0, node0, node0);
      node1.isEquivalentToTyped(node0);
      node1.isEquivalentTo(node0, false, true, false);
      node1.addChildBefore(node1, node0);
      Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
      Consumer<Node> consumer0 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.iterator();
      node1.isLabelName();
      node0.getType();
  }

  @Test(timeout = 4000)
  public void test650()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList.of();
      Node node0 = Node.newString("Object#Element");
      node0.isWith();
      node0.isOnlyModifiesArgumentsCall();
      node0.isGetElem();
      node0.siblings();
      node0.setCharno(2736);
      Node node1 = new Node(30);
      node0.toString();
      node1.getDirectives();
      node1.isEmpty();
      node0.isDec();
      node0.getQualifiedName();
      Node node2 = Node.newString("\")");
      node2.isQuotedString();
      node0.isVoid();
      node2.isThrow();
      JSType.toMaybeTemplateType((JSType) null);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createEnumType((String) null, node0, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test651()  throws Throwable  {
      Node node0 = Node.newNumber(3069.460587959455, (-7450), (-7450));
      node0.getInputId();
      node0.setInputId((InputId) null);
      // Undeclared exception!
      try { 
        node0.getAncestor((-7450));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test652()  throws Throwable  {
      Node node0 = Node.newString(1451, "BgbJn%qiUS");
      Node node1 = node0.cloneTree();
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      nodeArray0[1] = node1;
      Node node2 = new Node(1, nodeArray0);
      node2.useSourceInfoFromForTree(node1);
      node1.children();
      node1.getString();
      node1.detachFromParent();
      Node node3 = null;
      try {
        node3 = new Node(983, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test653()  throws Throwable  {
      Node node0 = Node.newString(124, "]&F;?C,EoQ", 124, 124);
      node0.isWhile();
  }

  @Test(timeout = 4000)
  public void test654()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.setLength(42);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node2 = new Node(1, node1, node1);
      Node node3 = Node.newString("DElo$0Dg&");
      node3.isTry();
      int int0 = 39;
      Node node4 = null;
      try {
        node4 = new Node(50, node0, node1, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test655()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.getJsDocBuilderForNode();
      node0.isFalse();
      node0.isContinue();
      node0.isFunction();
      Node node1 = Node.newNumber(3562.46203172131, 3216, 0);
      node1.setLength(2);
      node1.getDouble();
      node0.getSourceOffset();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "synthetic");
      Node node2 = Node.newString("synthetic", 43, 102);
      Node node3 = node2.cloneTree();
      Node node4 = Node.newNumber((double) 52, (-2952), 112);
      node3.useSourceInfoFrom(node4);
      Node node5 = new Node(8, node3, node3, node2, 54, 50);
      node1.checkTreeTypeAwareEqualsImpl(node5);
      Node node6 = null;
      try {
        node6 = new Node(36, node5, node1, node3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test656()  throws Throwable  {
      int int0 = 1949;
      boolean boolean0 = false;
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      jSDocInfo0.getAssociatedNode();
      jSDocInfo0.setDisposedParameter("GE");
      Node node0 = null;
      try {
        node0 = new Node(132, (Node) null, (Node) null, 3920, 5173);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test657()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList.of();
      Node node0 = Node.newString("Object#Element");
      node0.isWith();
      node0.isOnlyModifiesArgumentsCall();
      node0.isGetElem();
      node0.siblings();
      node0.setCharno(2736);
      Node node1 = Node.newString(49, "\")", 30, 1777);
      node0.mayMutateGlobalStateOrThrow();
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node0.checkTreeEquals(node2);
      node0.getDirectives();
  }

  @Test(timeout = 4000)
  public void test658()  throws Throwable  {
      Node node0 = Node.newNumber(3069.460587959455, (-7450), (-7450));
      node0.getInputId();
      node0.setInputId((InputId) null);
      node0.isHook();
      node0.isWith();
      node0.isGetElem();
      Node node1 = node0.getLastSibling();
      node0.isIf();
      node0.isSetterDef();
      Node node2 = node0.srcrefTree(node1);
      node0.isEmpty();
      node1.isEquivalentTo(node0, true, true, true);
      node1.isVoid();
      node2.isAssign();
      node1.checkTreeEqualsImpl(node2);
      node0.isEquivalentTo(node2, false, false, false);
      node2.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test659()  throws Throwable  {
      Node node0 = Node.newString("BqJ8X26A_");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isNull();
      Node node1 = new Node((-1805), node0, node0, node0, node0, 2, 47);
      node1.isFor();
      Node node2 = node1.srcref(node0);
      InputId inputId0 = new InputId("BqJ8X26A_");
      node0.setInputId(inputId0);
      node0.getSourceOffset();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "synthetic");
      // Undeclared exception!
      try { 
        node2.setSideEffectFlags(31);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1805
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test660()  throws Throwable  {
      Node node0 = new Node((-1504));
      node0.isOptionalArg();
      node0.isAssignAdd();
      node0.isWith();
      node0.isGetElem();
      Node node1 = Node.newString((-6030), "", 89, 56);
      Node node2 = node1.copyInformationFrom(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      node2.setType(56);
      node0.isFalse();
      node0.getSourceOffset();
      node1.isOptionalArg();
      node1.isCast();
  }

  @Test(timeout = 4000)
  public void test661()  throws Throwable  {
      Node node0 = Node.newString("BqJ8X26A_");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = new Node((-1805), node0, node0, node0, node0, 2, 47);
      node1.isFor();
      Node node2 = node1.srcref(node0);
      InputId inputId0 = new InputId("BqJ8X26A_");
      node0.setInputId(inputId0);
      node0.getSourceOffset();
      // Undeclared exception!
      try { 
        node2.setSideEffectFlags(31);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1805
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test662()  throws Throwable  {
      Node node0 = new Node((-6382));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = Node.newString("I{Xd(HTIk?]f`,o", (-486), 16);
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      node0.isScript();
      node2.srcrefTree(node1);
  }

  @Test(timeout = 4000)
  public void test663()  throws Throwable  {
      Node node0 = Node.newString("");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-102);
      StringWriter stringWriter0 = new StringWriter(4095);
      node0.appendStringTree(stringWriter0);
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-26);
      node0.setQuotedString();
      byteArray0[3] = (byte) (-107);
      Node[] nodeArray0 = new Node[6];
      Node node1 = new Node((byte) (-102), node0, node0, 115, 1975);
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      nodeArray0[5] = node0;
      Node node2 = null;
      try {
        node2 = new Node(43, nodeArray0, 1400, 103);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test664()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.getJsDocBuilderForNode();
      node0.isFalse();
      node0.isContinue();
      node0.isFunction();
      Node node1 = Node.newNumber(3562.46203172131, 3216, 0);
      node1.setLength(2);
      node1.getDouble();
      node1.getJSDocInfo();
      node1.setType(26);
      node0.isEquivalentToTyped(node1);
      node0.isEquivalentToTyped(node1);
      Node node2 = node0.srcref(node1);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      node0.toString();
      node0.getDirectives();
      node1.isEmpty();
      node0.isDec();
      node2.getQualifiedName();
      node0.isQuotedString();
      Node node3 = Node.newString("");
      node3.addChildrenToFront(node2);
      node0.isDefaultCase();
      node0.isIf();
  }

  @Test(timeout = 4000)
  public void test665()  throws Throwable  {
      Node node0 = Node.newString(":Yix");
      Node node1 = new Node((-1716), node0, node0, node0, node0, 0, 3);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node0);
      node1.removeProp(2);
      node0.isSetterDef();
      node0.toStringTree();
      node0.addChildrenToBack(node1);
      Node node2 = node0.removeFirstChild();
      node2.getSourceOffset();
      Node.newString("'(W)SGx", 83, 2916);
      node2.setSourceEncodedPosition(49);
      // Undeclared exception!
      try { 
        node2.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test666()  throws Throwable  {
      Node node0 = Node.newNumber((-1181.5240597873797));
      Node node1 = new Node(47, node0);
      Node node2 = node0.cloneNode();
      node2.getInputId();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      node0.isOnlyModifiesArgumentsCall();
      node2.setType(48);
      node1.getJSDocInfo();
      node0.isOptionalArg();
      node1.putIntProp((-1678), 16);
      Node node3 = new Node(39, node1);
      Node node4 = node3.srcref(node2);
      node1.getLength();
      node0.getJSType();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.clearAllFlags();
      node4.addChildToFront(node2);
      node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      // Undeclared exception!
      try { 
        node2.addChildToBack(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test667()  throws Throwable  {
      Node.newString(2133, "STRING_VALUE_OR_OBJECT_TYPE", 536870912, 32);
      Node node0 = Node.newString(37, "STRING_VALUE_OR_OBJECT_TYPE");
      // Undeclared exception!
      try { 
        node0.isEquivalentToTyped((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test668()  throws Throwable  {
      Node node0 = Node.newNumber((-1181.5240597873797));
      Node node1 = new Node(47, node0);
      Node node2 = node0.cloneNode();
      node2.getInputId();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      JSType[] jSTypeArray0 = new JSType[0];
      jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) null, jSTypeArray0);
      node2.putProp(38, (Object) null);
      try { 
        node2.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER -1181.5240597873797 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test669()  throws Throwable  {
      Node node0 = Node.newString(":Yix");
      Node node1 = new Node((-1716), node0, node0, node0, node0, 0, 3);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node0);
      node1.removeProp(2);
      node0.isSetterDef();
      node0.addChildrenToBack(node1);
      Node node2 = node0.removeFirstChild();
      node2.getSourceOffset();
      Node.newString("'(W)SGx", 83, 2916);
      node2.setSourceEncodedPosition(49);
      // Undeclared exception!
      try { 
        node2.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test670()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      node0.setCharno(0);
      Node node1 = new Node(0, node0, node0, node0, node0);
      node1.isEquivalentToTyped(node0);
      node1.checkTreeTypeAwareEqualsImpl(node1);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        node1.addChildrenToBack(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test671()  throws Throwable  {
      Node node0 = new Node(159744);
      Node node1 = new Node((-3984), node0);
      node1.isEquivalentTo(node0, false, false, true);
      node1.setVarArgs(false);
      // Undeclared exception!
      try { 
        node1.addChildBefore(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test672()  throws Throwable  {
      Node node0 = Node.newString(1316, "");
      node0.isOnlyModifiesThisCall();
      Node node1 = Node.newNumber((-2239.125855928817));
      node0.removeProp(33);
      node1.getBooleanProp(4718);
      node0.isEquivalentToShallow(node1);
      node0.isOnlyModifiesArgumentsCall();
      node0.setType(1316);
      node0.getJSDocInfo();
      node0.isOptionalArg();
      node0.addChildToBack(node1);
      node0.putIntProp(1316, 0);
      Node node2 = node0.srcref(node1);
      node1.getLength();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      node0.setLineno(1);
      node0.isContinue();
      node0.getInputId();
      node2.isNew();
      node2.isIn();
      // Undeclared exception!
      try { 
        node0.setDouble(1932.06302516401);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1316
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test673()  throws Throwable  {
      Node node0 = new Node(5);
      Node node1 = Node.newNumber((double) 49);
      node1.useSourceInfoFromForTree(node0);
      Node node2 = node0.copyInformationFromForTree(node1);
      node0.wasEmptyNode();
      node2.isEquivalentToShallow(node2);
      int int0 = Node.VAR_ARGS_NAME;
  }

  @Test(timeout = 4000)
  public void test674()  throws Throwable  {
      Node node0 = Node.newString(":Yix");
      Node node1 = new Node((-1716), node0, node0, node0, node0, 0, 0);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node0);
      node1.removeProp(2);
      node0.isGetterDef();
      node0.addChildrenToBack(node1);
      Node node2 = new Node(1);
      String string0 = "'(Gx";
      // Undeclared exception!
      try { 
        node1.getChildBefore(node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test675()  throws Throwable  {
      Node node0 = Node.newNumber((-3309.1922597), (-7450), (-7450));
      node0.getInputId();
      node0.setInputId((InputId) null);
      node0.isVar();
      node0.isWith();
      node0.isGetElem();
      Node node1 = new Node(29, 85, 46);
      node0.isEquivalentTo(node1, false, false, false);
      node1.isVarArgs();
      Node node2 = node0.copyInformationFromForTree(node1);
      node2.setIsSyntheticBlock(false);
      try { 
        node2.setString((String) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER -3309.1922597 85 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test676()  throws Throwable  {
      Node node0 = new Node(16);
      node0.hasChildren();
      Node node1 = Node.newString("slash_v");
      node1.setCharno((-4096));
      // Undeclared exception!
      try { 
        node0.getChildBefore(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test677()  throws Throwable  {
      Node node0 = Node.newString("");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-102);
      StringWriter stringWriter0 = new StringWriter(4095);
      node0.appendStringTree(stringWriter0);
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-26);
      node0.setQuotedString();
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte) (-110);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      node0.setLineno(39);
      node0.isDo();
      Node node1 = new Node((byte) (-107), node0, node0);
      node0.cloneTree();
      Node node2 = Node.newString("", 0, (-981));
      node2.useSourceInfoFromForTree(node1);
      node0.isCast();
      node1.isThis();
  }

  @Test(timeout = 4000)
  public void test678()  throws Throwable  {
      Node node0 = new Node(0);
      node0.isFromExterns();
      node0.setType(26);
      node0.isEquivalentToTyped(node0);
  }

  @Test(timeout = 4000)
  public void test679()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node(39, 0, 0);
      nodeArray0[0] = node0;
      Locale locale0 = Locale.ITALY;
      locale0.getUnicodeLocaleKeys();
      Node node1 = new Node(0);
      Node node2 = Node.newString(12, "Sc'n#b6kM|Yal@o4HdF", 63, 42);
      Node node3 = node0.copyInformationFrom(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      node0.setType(43);
      node3.isFalse();
      node0.getSourceOffset();
      node2.isGetProp();
      node3.isCast();
  }

  @Test(timeout = 4000)
  public void test680()  throws Throwable  {
      Node node0 = new Node((-1504));
      node0.isOptionalArg();
      node0.isVar();
      node0.isWith();
      node0.isGetElem();
      Node node1 = new Node(120, node0, node0, node0, (-862), 696);
      Node node2 = null;
      try {
        node2 = new Node(16384, node0, node1, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test681()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-328), nodeArray0, (-3052), (-3052));
      node0.getSourceOffset();
      Node node1 = Node.newString("");
      node1.isEquivalentToTyped(node0);
      // Undeclared exception!
      try { 
        node0.setDouble((-448.45888719));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -328
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test682()  throws Throwable  {
      Node node0 = Node.newNumber(3568.3139066214176, 3216, 0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(38);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.valueOf();
      node0.detachChildren();
      node0.isArrayLit();
      Node node1 = Node.newNumber((-448.45888719));
      node0.checkTreeEquals(node1);
      // Undeclared exception!
      try { 
        node1.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test683()  throws Throwable  {
      Node node0 = Node.newString(1725, "\n\nSubtree1: ", 4, 4);
      Node node1 = new Node(1725, node0, node0, node0);
      Node node2 = node1.copyInformationFromForTree(node0);
      Locale locale0 = Locale.ITALY;
      locale0.getUnicodeLocaleKeys();
      Node node3 = new Node(16);
      node2.setIsSyntheticBlock(true);
      node0.setSourceEncodedPositionForTree(51);
      node3.addChildrenToBack(node1);
      Node node4 = node2.cloneTree();
      node4.isSyntheticBlock();
      node1.getAncestor(984);
      // Undeclared exception!
      try { 
        node1.removeChild(node4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test684()  throws Throwable  {
      Node node0 = Node.newNumber((-3309.1922597), (-7450), (-7450));
      node0.getInputId();
      node0.setInputId((InputId) null);
      node0.isQuotedString();
      node0.isSwitch();
      node0.isGetElem();
      Node node1 = Node.newString((-7450), "", 1, 0);
      node1.setCharno(1922);
      Node.newString((-766), "", 49, 27);
      node0.mayMutateGlobalStateOrThrow();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSTypeNative jSTypeNative0 = JSTypeNative.DATE_FUNCTION_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      boolean boolean0 = true;
      JSType[] jSTypeArray0 = new JSType[4];
      jSTypeArray0[2] = jSType0;
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createFunctionTypeWithVarArgs(jSType0, jSTypeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionParamBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test685()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/FOh@0W");
      Node node0 = Node.newString("", 49, 31);
      node0.isSyntheticBlock();
      node0.mayMutateArguments();
      node0.isNot();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      jSDocInfo0.getType();
      jSDocInfo0.addImplementedInterface((JSTypeExpression) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSDocInfo0.setNoCompile(false);
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      jSDocInfo0.setReturnType((JSTypeExpression) null);
      node1.getJSDocInfo();
      // Undeclared exception!
      try { 
        node1.clonePropsFrom(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Node has existing properties.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test686()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = Node.newNumber((double) 49);
      Node node2 = node0.copyInformationFromForTree(node1);
      node0.wasEmptyNode();
      node2.isLabelName();
      node1.getType();
  }

  @Test(timeout = 4000)
  public void test687()  throws Throwable  {
      Node node0 = Node.newString(0, "", 3216, (-375));
      Node node1 = null;
      Node node2 = null;
      try {
        node2 = new Node(53, node0, node0, (Node) null, 2939, 31);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test688()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.setLength(117);
      node0.isInstanceOf();
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // PARAM_LIST [length: com.google.javascript.rhino.Node$IntPropListItem@0000000337] is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test689()  throws Throwable  {
      Node node0 = Node.newNumber(3562.46203172131, 3216, 0);
      node0.hasChildren();
      node0.isCast();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createOptionalParameters((JSType[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionParamBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test690()  throws Throwable  {
      Node node0 = Node.newString(1316, "");
      node0.isOnlyModifiesThisCall();
      Node node1 = Node.newNumber((-2239.125855928817));
      node0.removeProp(33);
      node1.getBooleanProp(4718);
      node0.isEquivalentToShallow(node1);
      node0.isOnlyModifiesArgumentsCall();
      node0.setType(1316);
      node0.getJSDocInfo();
      node0.isOptionalArg();
      node0.putIntProp(1316, 0);
      Node node2 = node0.srcref(node1);
      node1.getLength();
      node2.getJSType();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node1.addChildToFront(node0);
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      node2.addChildToBack(node1);
      node_SideEffectFlags2.valueOf();
      node2.detachChildren();
      node0.isArrayLit();
      Node node3 = Node.newNumber(1.0);
      // Undeclared exception!
      try { 
        node3.checkTreeEquals(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1316
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test691()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = Node.newNumber((-1.0));
      node0.getSourceOffset();
      node0.isWhile();
      node0.isNE();
      node0.isTrue();
      node0.isGetElem();
      ArrayList<Node> arrayList0 = new ArrayList<Node>();
      node0.isQuotedString();
      node0.isIn();
      Node node1 = new Node(98, node0, node0, node0, node0, 154, (-1122));
      node1.isAssignAdd();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      node0.getDouble();
      node1.isHook();
      node1.getParent();
  }

  @Test(timeout = 4000)
  public void test692()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Node node0 = Node.newNumber(3069.460587959455, (-7450), (-7450));
      node0.getInputId();
      node0.setInputId((InputId) null);
      node0.isHook();
      node0.isWith();
      node0.isGetElem();
      Node node1 = Node.newNumber((double) 2);
      node0.copyInformationFrom(node1);
      int int0 = (-1526);
      Node node2 = Node.newNumber(1970.91572946, 52, (-1526));
      // Undeclared exception!
      try { 
        node2.getChildBefore(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test693()  throws Throwable  {
      Node node0 = Node.newNumber(3069.460587959455, (-7450), (-7450));
      node0.getInputId();
      node0.setInputId((InputId) null);
      node0.isHook();
      node0.isWith();
      node0.isGetElem();
      Node node1 = Node.newNumber((double) 2);
      Node node2 = node0.copyInformationFrom(node1);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      Consumer<Node> consumer0 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.forEach(consumer0);
      node_AncestorIterable0.iterator();
      node2.isUnscopedQualifiedName();
      node1.detachChildren();
      node1.isFalse();
      node2.isOnlyModifiesArgumentsCall();
      node1.setDouble(920.655);
  }

  @Test(timeout = 4000)
  public void test694()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node(39, 0, 0);
      nodeArray0[0] = node0;
      CharBuffer charBuffer0 = CharBuffer.allocate(33);
      // Undeclared exception!
      try { 
        node0.appendStringTree(charBuffer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test695()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2725);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags2.clearSideEffectFlags();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags3.valueOf();
      Node node0 = new Node(2725);
      node0.setSourceEncodedPosition(103);
      node0.isOptionalArg();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node2 = node0.useSourceInfoFrom(node1);
      node2.getNext();
      node2.removeFirstChild();
      node1.isThis();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node2.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test696()  throws Throwable  {
      Node node0 = Node.newNumber(3562.46203172131, 3216, 0);
      node0.getDouble();
      Node node1 = node0.getAncestor(0);
      // Undeclared exception!
      try { 
        node0.removeChild(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test697()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node node0 = new Node(1323, 0, 2851);
      node0.isOptionalArg();
      node0.isVar();
      node0.isWith();
      node0.isGetElem();
      Node node1 = Node.newString(485, "", 15, 3011);
      Node node2 = node1.copyInformationFrom(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      node2.setType(124);
      node0.isFalse();
      node1.getSourceOffset();
      node0.isGetProp();
      node0.isCast();
  }

  @Test(timeout = 4000)
  public void test698()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.getSideEffectFlags();
      node0.setLength((-1348));
      node0.isInstanceOf();
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING  [length: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test699()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(21);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags4.setThrows();
      node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setThrows();
      node_SideEffectFlags5.setMutatesGlobalState();
      node_SideEffectFlags5.valueOf();
      Node node0 = Node.newString("9\"4q1xxvt/");
      node0.getSideEffectFlags();
      node0.setLength(21);
      node0.isInstanceOf();
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING 9\"4q1xxvt/ [length: com.google.javascript.rhino.Node$IntPropListItem@0000000003] is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test700()  throws Throwable  {
      Node node0 = Node.newString(1316, "");
      node0.isOnlyModifiesThisCall();
      Node node1 = Node.newNumber((-2239.125855928817));
      node0.removeProp(33);
      node1.getBooleanProp(4718);
      node0.isEquivalentToShallow(node1);
      node0.isThis();
      node0.setType(1316);
      node0.getJSDocInfo();
      node0.isOptionalArg();
      node0.putIntProp(1316, 0);
      Node node2 = node0.srcref(node1);
      node1.getLength();
      node2.getJSType();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node1.addChildToFront(node0);
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      node2.addChildToBack(node1);
      node_SideEffectFlags2.valueOf();
      node2.detachChildren();
      node0.isArrayLit();
      node2.setType(52);
      node1.isFalse();
      node2.getSourceOffset();
      node0.isGetProp();
      node0.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test701()  throws Throwable  {
      Node node0 = Node.newString("");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-26);
      node0.setQuotedString();
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte) (-110);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      node0.setLineno(39);
      node0.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node0.isContinue();
      node0.getInputId();
      node0.isNew();
      node0.isIn();
      try { 
        node0.setDouble((byte) (-102));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING  39 [quoted: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test702()  throws Throwable  {
      Node node0 = Node.newString((-694), "z!k'UI7tF_n3=J+o2'");
      Node node1 = node0.cloneTree();
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node2.children();
      node2.getString();
      // Undeclared exception!
      try { 
        node2.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test703()  throws Throwable  {
      Node node0 = new Node(3201);
      node0.isTry();
      node0.isIn();
      node0.isAdd();
      node0.putBooleanProp(3201, false);
  }

  @Test(timeout = 4000)
  public void test704()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(41);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node1 = null;
      // Undeclared exception!
      try { 
        node0.useSourceInfoFrom((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test705()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2725);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags3.clearSideEffectFlags();
      node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags4.setThrows();
      node_SideEffectFlags4.valueOf();
      Node node0 = new Node(2725);
      node0.setSourceEncodedPosition(118);
      node0.isOptionalArg();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node2 = node0.useSourceInfoFrom(node1);
      node2.getNext();
      node1.isThis();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node2.setJSDocInfo(jSDocInfo0);
      node0.getLineno();
  }

  @Test(timeout = 4000)
  public void test706()  throws Throwable  {
      Node node0 = new Node(0, 4841, 4841);
      node0.setCharno(4841);
      Node node1 = new Node(0, node0, node0, node0, node0);
      node1.isEquivalentToTyped(node0);
      Node.extractLineno(31);
      node1.isParamList();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(47);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.clearSideEffectFlags();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node_SideEffectFlags2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test707()  throws Throwable  {
      Node node0 = Node.newNumber(3562.46203172131, 3216, 0);
      node0.getDouble();
      node0.getJSDocInfo();
      node0.setType(26);
      Node[] nodeArray0 = new Node[2];
      node0.isArrayLit();
  }

  @Test(timeout = 4000)
  public void test708()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0), 89, 89);
      int int0 = 28;
      // Undeclared exception!
      try { 
        node0.checkTreeEquals((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test709()  throws Throwable  {
      Node node0 = Node.newString("");
      node0.setSourceEncodedPosition((-729));
      Node node1 = node0.cloneTree();
      node1.getJSDocInfo();
      Node node2 = Node.newNumber((-1.0));
      node2.getInputId();
      node2.isFromExterns();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      JSType[] jSTypeArray0 = new JSType[7];
      JSType.toMaybeTemplateType((JSType) null);
      ObjectType.cast((JSType) null);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, (List<JSType>) arrayList0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("", node2, functionType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      ObjectType objectType0 = enumType1.getImplicitPrototype();
      jSTypeArray0[0] = (JSType) objectType0;
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_RESOLVED_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      jSTypeArray0[1] = jSType0;
      JSType[] jSTypeArray1 = new JSType[2];
      jSTypeArray1[0] = (JSType) functionType0;
      jSTypeArray1[1] = (JSType) enumType0;
      FunctionType functionType1 = jSTypeRegistry0.createConstructorType((JSType) functionType0, false, jSTypeArray1);
      jSTypeArray0[2] = (JSType) functionType1;
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createTemplatizedType((ObjectType) functionType1, jSTypeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 3
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test710()  throws Throwable  {
      Node node0 = new Node(3201);
      Node node1 = new Node(47, node0, node0, node0, node0, 3177, 3337);
      node1.detachChildren();
      node1.isNoSideEffectsCall();
      Node node2 = node0.copyInformationFrom(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      // Undeclared exception!
      try { 
        node2.replaceChild(node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test711()  throws Throwable  {
      Node node0 = new Node((-1504));
      node0.isOptionalArg();
      node0.isVar();
      node0.isWith();
      node0.isGetElem();
      Node node1 = Node.newString((-6030), "", 89, 56);
      Node node2 = node1.copyInformationFrom(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      node2.setType(48);
      node0.isFalse();
      node0.getSourceOffset();
      node0.isGetProp();
      node2.isCast();
  }

  @Test(timeout = 4000)
  public void test712()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = new Node((-7450));
      // Undeclared exception!
      try { 
        node0.toString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -7450
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test713()  throws Throwable  {
      Node node0 = new Node(0, 4841, 4841);
      node0.setCharno(4841);
      Node node1 = new Node(0, node0, node0, node0, node0);
      node1.getSourceOffset();
      // Undeclared exception!
      try { 
        Node.newString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test714()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-328), nodeArray0, (-3052), (-3052));
      node0.getSourceOffset();
      Node node1 = Node.newString("");
      node1.isEquivalentToTyped(node0);
      Node.extractLineno(979);
      node0.isParamList();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1431));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.clearSideEffectFlags();
      // Undeclared exception!
      try { 
        node1.setSideEffectFlags(node_SideEffectFlags1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test715()  throws Throwable  {
      Node node0 = Node.newNumber((-3308.458875909329), (-7450), (-7450));
      node0.getJSDocInfo();
      node0.setIsSyntheticBlock(true);
      node0.removeChildren();
      node0.getLength();
      // Undeclared exception!
      try { 
        node0.checkTreeEqualsImpl((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test716()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-328), nodeArray0, (-3052), (-3052));
      node0.getSourceOffset();
      Node.newString("");
      node0.isUnscopedQualifiedName();
      node0.setSourceFileForTesting("");
      node0.setIsSyntheticBlock(true);
      // Undeclared exception!
      try { 
        node0.setString((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -328
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test717()  throws Throwable  {
      Node node0 = Node.newNumber((double) 4641);
      Node node1 = new Node(4641, node0, node0, node0);
      Node node2 = null;
      try {
        node2 = new Node(47, node1, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test718()  throws Throwable  {
      Node node0 = null;
      try {
        node0 = new Node(20, (Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test719()  throws Throwable  {
      Node node0 = Node.newNumber((double) 4641);
      Node node1 = new Node(4641, node0, node0, node0);
      node1.useSourceInfoIfMissingFrom(node0);
  }

  @Test(timeout = 4000)
  public void test720()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      node0.setCharno(0);
      Node node1 = new Node(0, node0, node0, node0, node0);
      node1.isEquivalentToTyped(node0);
      node1.checkTreeTypeAwareEqualsImpl(node1);
      node1.isEquivalentTo(node0, false, false, false);
      node0.setVarArgs(false);
      node1.addChildBefore(node1, node0);
      Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
      Consumer<Node> consumer0 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node_AncestorIterable0.iterator();
      node0.isUnscopedQualifiedName();
      // Undeclared exception!
      try { 
        node1.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test721()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-328), nodeArray0, (-3052), (-3052));
      node0.getSourceOffset();
      Node node1 = Node.newString("");
      node0.isUnscopedQualifiedName();
      node0.setIsSyntheticBlock(true);
      node1.mayMutateArguments();
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(44);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 44
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test722()  throws Throwable  {
      Node node0 = Node.newNumber((-1181.5240597873797));
      Node node1 = new Node(47, node0);
      Node node2 = node0.cloneNode();
      node2.getInputId();
      Node node3 = new Node(1436, node1);
      // Undeclared exception!
      try { 
        node3.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1436
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test723()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(746);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesGlobalState();
      node_SideEffectFlags4.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags6.setReturnsTainted();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags1.setThrows();
      node_SideEffectFlags2.setThrows();
      node_SideEffectFlags4.setMutatesGlobalState();
      node_SideEffectFlags7.valueOf();
      Node node0 = Node.newString("9\"4q1xxvt/");
      node0.getSideEffectFlags();
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      Node node1 = null;
      try {
        node1 = new Node(56, nodeArray0, 4095, 1073741824);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test724()  throws Throwable  {
      Node node0 = Node.newNumber((-3309.1922597), (-7450), (-7450));
      node0.getInputId();
      node0.setInputId((InputId) null);
      node0.isVar();
      node0.isWith();
      node0.isGetElem();
      Node node1 = Node.newString((-7450), "", 1, 0);
      node0.copyInformationFrom(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      node1.setType(55);
      node1.isFalse();
      node1.getSourceOffset();
      node1.isGetProp();
      node0.isCast();
  }

  @Test(timeout = 4000)
  public void test725()  throws Throwable  {
      Node.newString((-1253), "igE?BBYX", 112, 112);
      Node.newString((-1552), "com.google.javascript.rhino.JSDocInfo$NamePosition", 1, 3009);
      Node node0 = null;
      try {
        node0 = new Node(55, (Node[]) null, 1, 47);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test726()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.isFunction();
      Node node1 = Node.newNumber((double) 4095, 1486, 55);
      node0.setLength(77);
      node0.getDouble();
      node1.getJSDocInfo();
      node1.setType(1245);
      node0.isEquivalentToTyped(node1);
      Node node2 = new Node(50, node0, node1, node1, node1);
      Node node3 = new Node(29, node2, node2);
      node2.srcref(node3);
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node1;
      Node node4 = Node.newNumber(0.0);
      nodeArray0[1] = node4;
      nodeArray0[2] = node3;
      nodeArray0[3] = node0;
      Node node5 = null;
      try {
        node5 = new Node(2, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test727()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.getProp(0);
      Node node1 = Node.newString("^3 -c$;vY19wI");
      // Undeclared exception!
      try { 
        node1.addChildAfter(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test728()  throws Throwable  {
      Node node0 = Node.newString(2556, "");
      Node node1 = new Node(2556, node0, 2517, 21);
      node1.getProp(114);
  }

  @Test(timeout = 4000)
  public void test729()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-3373));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags3.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setThrows();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags6.setMutatesGlobalState();
      node_SideEffectFlags5.clearSideEffectFlags();
      node_SideEffectFlags7.setThrows();
      node0.getParent();
  }

  @Test(timeout = 4000)
  public void test730()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node(39, 0, 0);
      nodeArray0[0] = node0;
      Locale locale0 = Locale.ITALY;
      locale0.getUnicodeLocaleKeys();
      Node node1 = new Node(0);
      node1.setIsSyntheticBlock(true);
      node0.setSourceEncodedPositionForTree(3239);
      node1.addChildrenToBack(node0);
      node0.cloneTree();
      node0.isSyntheticBlock();
      node0.getAncestor(50);
      // Undeclared exception!
      try { 
        node1.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test731()  throws Throwable  {
      Node node0 = Node.newString((-1253), "igE?BBYX", 112, 112);
      Node node1 = new Node(57, node0, node0, node0);
      Node node2 = node0.copyInformationFromForTree(node1);
      node1.setLength(370);
      node0.setIsSyntheticBlock(false);
      node1.setSourceEncodedPositionForTree((-4246));
      node0.addChildrenToBack(node1);
      Node node3 = Node.newString((-1), "igE?BBYX");
      node3.cloneTree();
      node3.isSyntheticBlock();
      Node node4 = node0.getAncestor(98);
      // Undeclared exception!
      try { 
        node2.removeChild(node4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test732()  throws Throwable  {
      Node node0 = Node.newNumber((-3309.1922597), (-7450), (-7450));
      node0.getJSDocInfo();
      node0.setIsSyntheticBlock(true);
      node0.removeChildren();
      int int0 = Node.VAR_ARGS_NAME;
      node0.isParamList();
      node0.getStaticSourceFile();
  }

  @Test(timeout = 4000)
  public void test733()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.getJsDocBuilderForNode();
      node0.isFalse();
      node0.isContinue();
      node0.isFunction();
      Node node1 = Node.newNumber(3562.46203172131, 3216, 0);
      node1.setLength(2);
      node1.getDouble();
      node1.getJSDocInfo();
      node1.setType(26);
      node0.setType(43);
      node0.detachChildren();
      node1.isFalse();
      node1.isEquivalentTo(node0, false, false, false);
      node0.isOnlyModifiesArgumentsCall();
      node1.setDouble(56);
  }

  @Test(timeout = 4000)
  public void test734()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.getJSDocInfo();
      node0.setIsSyntheticBlock(true);
      Node.extractCharno(2);
      node0.isParamList();
      node0.getStaticSourceFile();
      node0.isAnd();
      // Undeclared exception!
      try { 
        node0.srcref((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test735()  throws Throwable  {
      Node node0 = Node.newNumber((-1181.5240597873797));
      Node node1 = new Node(47, node0);
      Node node2 = node0.cloneNode();
      node2.getInputId();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      JSType[] jSTypeArray0 = new JSType[0];
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) null, jSTypeArray0);
      node2.putProp(32, functionType0);
      try { 
        node2.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER -1181.5240597873797 [incrdecr: com.google.javascript.rhino.Node$ObjectPropListItem@0000000342] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test736()  throws Throwable  {
      // Undeclared exception!
      try { 
        Node.newString(159, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test737()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-328), nodeArray0, (-3052), (-3052));
      node0.setType((-328));
      node0.getSourceOffset();
      Node.newString(48, "");
      node0.isUnscopedQualifiedName();
      node0.setIsSyntheticBlock(true);
      // Undeclared exception!
      try { 
        node0.setString((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -328
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test738()  throws Throwable  {
      Node node0 = Node.newString(2043, "com.google.javascript.rhino.jstype.NoResolvedType", 1486, 2043);
      node0.getFirstChild();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-411));
      node0.isOnlyModifiesArgumentsCall();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.clearSideEffectFlags();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags3.clearAllFlags();
      // Undeclared exception!
      try { 
        node0.addChildrenAfter((Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test739()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = new Node(0, node0, node0);
      Node node2 = node1.cloneNode();
      Node node3 = node2.clonePropsFrom(node1);
      node0.getFirstChild();
      InputId inputId0 = new InputId("?d+ya!+F");
      node1.setInputId(inputId0);
      Node node4 = null;
      try {
        node4 = new Node(50, (Node) null, node3, node2, (Node) null, 38, 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test740()  throws Throwable  {
      Node node0 = Node.newString(2133, "STRING_VALUE_OR_OBJECT_TYPE", 536870912, 32);
      Node node1 = null;
      // Undeclared exception!
      try { 
        node0.srcrefTree((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test741()  throws Throwable  {
      Node node0 = Node.newString("");
      Node node1 = new Node(0, node0, node0);
      node1.getSourceFileName();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        node1.addChildToFront(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test742()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2725);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags2.clearSideEffectFlags();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags3.valueOf();
      Node node0 = new Node(2725);
      node0.setSourceEncodedPosition(103);
      node0.isOptionalArg();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node2 = node0.useSourceInfoFrom(node1);
      node2.getNext();
      node1.isThis();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node2.setJSDocInfo(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test743()  throws Throwable  {
      Node node0 = Node.newNumber(335.311);
      Node node1 = Node.newString(54, "");
      node0.clonePropsFrom(node1);
      node0.getJSType();
  }

  @Test(timeout = 4000)
  public void test744()  throws Throwable  {
      int int0 = (-862);
      Node node0 = new Node((-862));
      node0.isStringKey();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags((-862));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -862
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test745()  throws Throwable  {
      int int0 = 0;
      Node[] nodeArray0 = new Node[3];
      Node node0 = new Node(0);
      nodeArray0[0] = node0;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      String string0 = "";
      JSType jSType0 = null;
      ImmutableList.of();
      // Undeclared exception!
      try { 
        node0.getDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test746()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.Node$StringNode", 0, 1);
      Node node1 = new Node(1, node0, node0, node0, 40, (-2006));
      Node node2 = new Node(0, node1, 55, 55);
      Node node3 = new Node(0, node2, node2, 46, 0);
      node3.setWasEmptyNode(true);
  }

  @Test(timeout = 4000)
  public void test747()  throws Throwable  {
      int int0 = 0;
      Node node0 = new Node((-1229), 0, 0);
      Node node1 = new Node((-5443), node0, node0, node0, (-3232), (-440));
      Node node2 = null;
      try {
        node2 = new Node(0, node0, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test748()  throws Throwable  {
      String string0 = "igE?BBYX";
      Node node0 = Node.newString("igE?BBYX", (-1253), 1293);
      node0.setIsSyntheticBlock(false);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(56);
      char char0 = '\\';
      int int0 = 49;
      charArrayWriter0.write("igE?BBYX");
      try { 
        node0.setDouble(58.26977890475639);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING igE?BBYX is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test749()  throws Throwable  {
      int int0 = 544;
      Node node0 = Node.newString(544, "dWU/5fZ", 544, 544);
      Node node1 = new Node((-692), 49, 35);
      // Undeclared exception!
      try { 
        node0.removeChild(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test750()  throws Throwable  {
      Node node0 = new Node(0, 0, 638);
      // Undeclared exception!
      try { 
        node0.getString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test751()  throws Throwable  {
      Node node0 = new Node((-1504), 0, 4494);
      node0.isOptionalArg();
      // Undeclared exception!
      try { 
        node0.detachFromParent();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test752()  throws Throwable  {
      Node[] nodeArray0 = new Node[1];
      Node node0 = new Node(39, 0, 0);
      nodeArray0[0] = node0;
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      node0.setDirectives(set0);
      Node node1 = new Node(0, nodeArray0, 29, (-1678));
      node1.isSyntheticBlock();
      node1.isComma();
      node0.isNE();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags5.valueOf();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.putProp((-645), node_SideEffectFlags3);
      // Undeclared exception!
      try { 
        node1.replaceChild(node2, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test753()  throws Throwable  {
      Node node0 = Node.newNumber((-1181.5240597873797));
      Node node1 = new Node(47, node0);
      Node node2 = node0.cloneNode();
      node2.getInputId();
      try { 
        node2.getString();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NUMBER -1181.5240597873797 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test754()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.isGetProp();
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      nodeArray0[5] = node0;
      nodeArray0[6] = node0;
      Node node1 = null;
      try {
        node1 = new Node(1, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test755()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node0.isNot();
      node0.getDirectives();
  }

  @Test(timeout = 4000)
  public void test756()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
      Node node1 = new Node(0, node0, node0, 10, 4);
      Node node2 = new Node(0, node1);
      node2.isGetProp();
  }

  @Test(timeout = 4000)
  public void test757()  throws Throwable  {
      Node node0 = new Node(102);
      node0.isLabelName();
      Node node1 = node0.setJSDocInfo((JSDocInfo) null);
      Node node2 = Node.newString("com.google.javascript.rhino.Node$AncestorIterable$1");
      node2.getInputId();
      node1.getProp(4095);
      node1.isEquivalentToTyped(node0);
  }

  @Test(timeout = 4000)
  public void test758()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.isGetProp();
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node0;
      boolean boolean0 = false;
      node0.isEquivalentTo(node0, true, false, false);
      node0.setVarArgs(false);
      // Undeclared exception!
      try { 
        node0.addChildBefore(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test759()  throws Throwable  {
      Node node0 = new Node(0, 4841, 4841);
      node0.setCharno(4841);
      Node node1 = new Node(0, node0, node0, node0, node0);
      Node node2 = new Node(0, node1);
      node1.isEquivalentToTyped(node2);
      node2.checkTreeTypeAwareEqualsImpl(node1);
      node2.getLength();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(4);
      charArrayWriter0.append('=');
      charArrayWriter0.reset();
      node1.mayMutateArguments();
      Node.AncestorIterable node_AncestorIterable0 = node2.getAncestors();
      node_AncestorIterable0.iterator();
  }

  @Test(timeout = 4000)
  public void test760()  throws Throwable  {
      Node node0 = Node.newNumber((-3309.1922597), (-7450), (-7450));
      node0.getInputId();
      node0.setInputId((InputId) null);
      node0.isVar();
      node0.isWith();
      node0.isGetElem();
      Node node1 = Node.newString((-7450), "", 1, 0);
      node0.copyInformationFrom(node1);
      node1.setCharno(1910);
      Node.newString((-766), "", 49, 49);
      node0.mayMutateGlobalStateOrThrow();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createParametersWithVarArgs((JSType[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test761()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = Node.newString(46, "Yb");
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      Node node2 = Node.newNumber(402.1769, 31, 49);
      Node node3 = new Node(51, node2, node2, node2, node1);
      node0.isContinue();
      node3.addChildBefore(node0, node1);
      // Undeclared exception!
      try { 
        node3.addChildBefore(node0, (Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test762()  throws Throwable  {
      Node node0 = Node.newString(":Yix");
      Node node1 = new Node((-1716), node0, node0, node0, node0, 0, 0);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node0);
      node1.removeProp(2);
      node0.isGetterDef();
      node0.addChildrenToBack(node1);
      Node node2 = node0.removeFirstChild();
      node2.getSourceOffset();
      Node.newString("'(Gx", 83, 2916);
      node2.setSourceEncodedPosition(49);
      // Undeclared exception!
      try { 
        node2.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test763()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      node0.setCharno(0);
      Node node1 = new Node(0, node0, node0, node0, node0);
      node1.isEquivalentToTyped(node0);
      node1.checkTreeTypeAwareEqualsImpl(node1);
      node0.getAncestor(127);
      node0.setSourceEncodedPositionForTree(0);
      Node node2 = null;
      try {
        node2 = new Node(54, (Node) null, node0, node1, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test764()  throws Throwable  {
      Node node0 = Node.newString((-2646), "R@<~9H", (-1417), 540);
      node0.isComma();
      MockPrintStream mockPrintStream0 = new MockPrintStream("R@<~9H");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(objectOutputStream0);
      Node node1 = Node.newString(") ", 37, 16);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      String string0 = "S?vMCyK$\"cHR\"P";
      node0.checkTreeEqualsImpl(node2);
      objectOutputStream0.write((-1027));
      OutputStreamWriter outputStreamWriter0 = null;
      try {
        outputStreamWriter0 = new OutputStreamWriter(mockPrintStream1, "S?vMCyK$\"cHR\"P");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test765()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.getJsDocBuilderForNode();
      node0.isFalse();
      node0.isContinue();
      node0.isFunction();
      Node node1 = Node.newNumber(3562.46203172131, 3216, 0);
      node1.setLength(2);
      node1.getDouble();
      node1.getJSDocInfo();
      node1.setType(26);
      node0.isEquivalentToTyped(node1);
      Node node2 = node0.srcref(node1);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      node0.toString();
      node0.getDirectives();
      node1.isEmpty();
      node0.isDec();
      node2.getQualifiedName();
      node0.isQuotedString();
      node0.isVoid();
      node0.isThrow();
      node1.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test766()  throws Throwable  {
      Node node0 = Node.newNumber((-2239.125855928817), 1316, 1316);
      node0.getBooleanProp(4718);
      node0.getLength();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(12);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('&');
      charArrayWriter1.reset();
      node0.mayMutateArguments();
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      node_AncestorIterable0.iterator();
  }

  @Test(timeout = 4000)
  public void test767()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.isGetProp();
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      node0.getAncestor(42);
      node0.setSourceEncodedPositionForTree(3023);
      // Undeclared exception!
      try { 
        node0.addChildBefore(node0, (Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test768()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.getJsDocBuilderForNode();
      node0.isFalse();
      node0.isContinue();
      node0.isFunction();
      Node node1 = Node.newNumber(3562.46203172131, 3216, 0);
      node1.setLength(2);
      node1.getDouble();
      node1.getJSDocInfo();
      node1.setType(26);
      node0.isEquivalentToTyped(node1);
      Node node2 = node0.srcref(node1);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      nodeArray0[1] = node1;
      Node node3 = new Node(4456, nodeArray0);
      Node node4 = null;
      try {
        node4 = new Node(63, node3, node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test769()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-328), nodeArray0, (-3052), (-3052));
      Node node1 = new Node(31, node0);
      node0.isEquivalentToTyped(node1);
      String string0 = " is not a number node";
      Node node2 = Node.newString(37, " is not a number node");
      node2.checkTreeTypeAwareEqualsImpl(node0);
      node2.setVarArgs(false);
      node1.addChildBefore(node2, node0);
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      // Undeclared exception!
      try { 
        node_AncestorIterable0.forEach((Consumer<? super Node>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test770()  throws Throwable  {
      Node node0 = new Node(0, 4841, 4841);
      node0.setCharno(4841);
      Node node1 = new Node(0, node0, node0, node0, node0);
      Node node2 = new Node(0, node1);
      node1.isEquivalentToTyped(node2);
      node2.checkTreeTypeAwareEqualsImpl(node1);
      node0.setVarArgs(false);
      node1.addChildBefore(node2, node0);
      Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
      Consumer<Node> consumer0 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      node_AncestorIterable0.forEach(consumer0);
  }

  @Test(timeout = 4000)
  public void test771()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.setLength(42);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node1.isInstanceOf();
      Node node2 = Node.newString((-597), "DElo$0Dg&");
      Node node3 = new Node(47, node1, node2, node0, node1, (-649), 30);
      node3.isTry();
      int int0 = 39;
      Node node4 = null;
      try {
        node4 = new Node(50, node0, node1, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test772()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(0);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags4.setThrows();
      node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setThrows();
      node_SideEffectFlags5.setMutatesGlobalState();
      node_SideEffectFlags5.valueOf();
      Node node0 = Node.newString("9\"4q1xxvt/");
      node0.getSideEffectFlags();
      node0.setLength(0);
      node0.isInstanceOf();
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // STRING 9\"4q1xxvt/ is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test773()  throws Throwable  {
      int int0 = 0;
      int int1 = 56;
      Node[] nodeArray0 = new Node[5];
      Node node0 = new Node(0, 56, 47);
      Node node1 = new Node(0, node0, node0, node0, 1952, 16);
      nodeArray0[0] = node1;
      // Undeclared exception!
      try { 
        Node.newString((String) null, 49, (-57));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test774()  throws Throwable  {
      int int0 = 1725;
      Node node0 = Node.newString(1725, "\n\nSubtree1: ", 4, 4);
      Node node1 = new Node(1725, node0, node0, node0);
      Node node2 = node1.copyInformationFromForTree(node0);
      node2.setLength(2);
      node0.setIsSyntheticBlock(false);
      node0.setSourceEncodedPositionForTree(37);
      node0.addChildrenToBack(node1);
      // Undeclared exception!
      try { 
        node0.cloneTree();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test775()  throws Throwable  {
      int int0 = 1048576;
      Node node0 = new Node(1048576);
      // Undeclared exception!
      try { 
        node0.getDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1048576
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test776()  throws Throwable  {
      Node node0 = new Node((-818));
      Node node1 = new Node((-353), node0);
      node0.clonePropsFrom(node1);
      Object object0 = new Object();
      node0.putProp((-183), object0);
      Node node2 = null;
      try {
        node2 = new Node((-2450), node0, node0, 0, (-3272));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test777()  throws Throwable  {
      Node node0 = Node.newNumber((-3309.1922597), (-7450), (-7450));
      node0.getInputId();
      node0.setInputId((InputId) null);
      node0.isVar();
      node0.isWith();
      node0.isGetElem();
      Node node1 = Node.newString((-7450), "", 1, 0);
      Node node2 = node0.copyInformationFrom(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Collection<? extends JSType>) hashSet0);
      Node node3 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      // Undeclared exception!
      try { 
        node2.replaceChild(node1, node3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test778()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-2481), nodeArray0, 0, 0);
      assertEquals(0, node0.getSourcePosition());
      assertEquals((-2481), node0.getType());
  }

  @Test(timeout = 4000)
  public void test779()  throws Throwable  {
      Node node0 = new Node(8287);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[9];
      JSTypeNative jSTypeNative0 = JSTypeNative.DATE_FUNCTION_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      JSTypeNative jSTypeNative1 = JSTypeNative.URI_ERROR_TYPE;
      jSTypeNativeArray0[1] = jSTypeNative1;
      JSTypeNative jSTypeNative2 = JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE;
      jSTypeNativeArray0[2] = jSTypeNative2;
      JSTypeNative jSTypeNative3 = JSTypeNative.NO_OBJECT_TYPE;
      jSTypeNativeArray0[3] = jSTypeNative3;
      JSTypeNative jSTypeNative4 = JSTypeNative.NO_OBJECT_TYPE;
      jSTypeNativeArray0[4] = jSTypeNative4;
      JSTypeNative jSTypeNative5 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
      jSTypeNativeArray0[5] = jSTypeNative5;
      JSTypeNative jSTypeNative6 = JSTypeNative.ERROR_FUNCTION_TYPE;
      jSTypeNativeArray0[6] = jSTypeNative6;
      JSTypeNative jSTypeNative7 = JSTypeNative.OBJECT_PROTOTYPE;
      jSTypeNativeArray0[7] = jSTypeNative7;
      JSTypeNative jSTypeNative8 = JSTypeNative.EVAL_ERROR_TYPE;
      jSTypeNativeArray0[8] = jSTypeNative8;
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      node0.setJSType(jSType0);
      Node node1 = new Node(29, node0, node0, node0, node0, 2144, (-281));
      Node node2 = new Node((-791), node1, 32, (-3594));
      Node node3 = null;
      try {
        node3 = new Node((-791), node2, node0, 619, 4095);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test780()  throws Throwable  {
      Node node0 = Node.newNumber(965.0, 83, 83);
      // Undeclared exception!
      try { 
        node0.getExistingIntProp(83);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 83
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test781()  throws Throwable  {
      Node node0 = Node.newString(20, "]&F;?C,EoQ", 141, 141);
      node0.hasMoreThanOneChild();
      assertEquals(20, node0.getType());
      assertEquals(577677, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test782()  throws Throwable  {
      Node.newString((-4096), "input_id", (-4096), 0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = Node.newString(55, "c,}ZKCXnk4oZ<)P:", 562, (-4096));
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createEnumType("input_id", node0, (JSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test783()  throws Throwable  {
      Node node0 = Node.newString((-493), "DeC?", 3, (-493));
      node0.isVarArgs();
      node0.setOptionalArg(true);
      Node node1 = new Node(57, node0, node0, node0, 0, 4096);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("2nHpkc2X@o", false);
      int int0 = 0;
      // Undeclared exception!
      try { 
        simpleSourceFile0.getLineOffset(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Should not call getLineOffset with line number 0
         //
         verifyException("com.google.javascript.rhino.jstype.SimpleSourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test784()  throws Throwable  {
      String string0 = "NO_OBJECT_TYPE";
      Node node0 = Node.newString("NO_OBJECT_TYPE", 4, 4);
      Node node1 = Node.newString(16384, "jsOx V3-", 12, 29);
      // Undeclared exception!
      try { 
        node0.addChildBefore(node1, node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
}
