/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 12 10:07:15 GMT 2021
 */

package com.google.javascript.rhino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.TemplateTypeMap;
import com.google.javascript.rhino.jstype.TemplateTypeMapReplacer;
import com.google.javascript.rhino.jstype.TemplatizedType;
import java.io.CharArrayWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Node node0 = Node.newString(2510, " is not a string node");
      node0.setSourceFileForTesting(" is not a string node");
      node0.isLabelName();
      node0.getProp(0);
      node0.isComma();
      node0.getSourceOffset();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Node node0 = new Node(0, 0, 700);
      Node node1 = new Node(0, node0);
      node1.setIsSyntheticBlock(false);
      Node.newString((-1220), "");
      node1.isOr();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.isFalse();
      node2.getJsDocBuilderForNode();
      node1.setLength((-1248));
      node1.cloneNode();
      node2.checkTreeEquals(node1);
      node1.isCall();
      node2.addChildrenAfter(node1, node0);
      node2.setIsSyntheticBlock(false);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      String string0 = null;
      Node node0 = new Node((-759), (Node) null, (Node) null, (Node) null, (-759), 1234);
      String string1 = node0.toStringTree();
      String string2 = "";
      // Undeclared exception!
      try { 
        SimpleErrorReporter.getMessage1(string2, string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node.mergeLineCharNo(304, 304);
      Node node0 = null;
      Node node1 = new Node(304, (Node) null, (Node) null, (Node) null);
      int int0 = 0;
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = Node.newNumber(0.5);
      node0.isOnlyModifiesArgumentsCall();
      boolean boolean0 = node0.isSetterDef();
      node0.getSourceFileName();
      Node node1 = node0.getChildAtIndex(44);
      node1.isNoSideEffectsCall();
      // Undeclared exception!
      try { 
        node1.setVarArgs(boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = 12;
      String string0 = ")hpdB3`n8^y\\7:@9+";
      Node node0 = Node.newString(")hpdB3`n8^y\u0007:@9+");
      Node node1 = new Node(12, node0, node0, 1421, 1402);
      Node node2 = new Node(12, node1, node1, node0, node0);
      int int1 = (-1543);
      // Undeclared exception!
      try { 
        node1.toString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node node0 = new Node((-2410));
      Node node1 = new Node((-2412), node0, node0, node0, 2526, 51);
      node1.siblings();
      node1.isOr();
      node1.getInputId();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags1.setMutatesArguments();
      Node node0 = Node.newNumber(0.0);
      Node node1 = Node.newString(2, "");
      Node node2 = new Node(1598, node0, node1, node1, node1, 56, 37);
      Node node3 = new Node(0, node2, 49, 302);
      node3.isNull();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node node0 = new Node(0, (-43), (-43));
      node0.setChangeTime(0);
      node0.type = (-43);
      node0.isSyntheticBlock();
      node0.toString(false, false, false);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Class<JSType> class0 = JSType.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<JSType> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      Iterator<JSType> iterator0 = serviceLoader0.iterator();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      nodeArray0[0] = node0;
      Node node1 = new Node(0, node0, node0, node0);
      nodeArray0[1] = node1;
      Node node2 = Node.newString("Object#Key", 401, 0);
      nodeArray0[2] = node2;
      Node node3 = new Node(117, nodeArray0);
      String string0 = "The existing child node of the parent should not be null.";
      JSType jSType0 = null;
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, node1, jSType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      // Undeclared exception!
      try { 
        enumElementType0.autoboxesTo();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node node0 = Node.newString("", 0, 27);
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      node0.appendStringTree(mockPrintWriter1);
      Node node1 = new Node(47, node0, node0, 0, (-4216));
      node1.isDebugger();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node node0 = new Node((-3956));
      node0.getSourceOffset();
      node0.isEmpty();
      node0.setType((-3956));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      jSTypeRegistry0.clearTemplateTypeNames();
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      boolean boolean0 = false;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "Object#Key");
      node2.appendStringTree(charArrayWriter1);
      node2.setVarArgs(boolean0);
      // Undeclared exception!
      try { 
        node2.isVarArgs();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -3956
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node node0 = new Node((-2833), 0, 0);
      node0.isUnscopedQualifiedName();
      node0.setChangeTime(0);
      boolean boolean0 = false;
      node0.setVarArgs(false);
      int int0 = (-1772);
      Node node1 = node0.getAncestor((-1772));
      Node node2 = node1.removeChildAfter(node0);
      node1.getChildBefore(node2);
      // Undeclared exception!
      try { 
        node1.getExistingIntProp(node0.OPT_ARG_NAME);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node node0 = new Node(110);
      Node node1 = new Node(0);
      Node node2 = node0.clonePropsFrom(node1);
      node2.useSourceInfoFromForTree(node1);
      node2.getJsDocBuilderForNode();
      node0.setLineno(41);
      node0.setVarArgs(true);
      node0.children();
      node0.setSourceEncodedPositionForTree(0);
      node1.isNoSideEffectsCall();
      node2.isVarArgs();
      String string0 = "";
      node0.setString("");
      int int0 = 118;
      Node.newNumber((double) node1.LENGTH, node1.LAST_PROP, int0);
      node0.mayMutateGlobalStateOrThrow();
      node0.isLocalResultCall();
      // Undeclared exception!
      try { 
        node2.isBreak();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // SWITCH 0 [var_args_name: com.google.javascript.rhino.Node$IntPropListItem@0000000004] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(36);
      node_SideEffectFlags0.clearAllFlags();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType.toMaybeTemplateType((JSType) null);
      JSType[] jSTypeArray0 = new JSType[6];
      jSTypeArray0[0] = (JSType) null;
      jSTypeArray0[1] = null;
      jSTypeArray0[2] = (JSType) null;
      JSTypeNative jSTypeNative0 = JSTypeNative.GLOBAL_THIS;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      jSTypeArray0[3] = jSType0;
      jSTypeArray0[4] = null;
      jSTypeArray0[5] = (JSType) null;
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType((ObjectType) null, jSTypeArray0);
      ImmutableList<JSType> immutableList0 = templatizedType0.getTemplateTypes();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      // Undeclared exception!
      try { 
        node0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(98, nodeArray0, 83, 83);
      node0.isTypeOf();
      Node node1 = Node.newNumber((double) 83, 2, 1631);
      node0.addChildrenAfter(node1, node1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 981, 1089);
      node0.setWasEmptyNode(false);
      node0.isNull();
      node0.isContinue();
      Node node1 = Node.newString(49, "Ir*FH4xU=xs", 57, 2237);
      node0.removeChild(node1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = (-1698);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-1698));
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags1.setThrows();
      Node node0 = new Node((-959), (Node) null, (Node) null, (Node) null, (Node) null);
      node0.getAncestors();
      String string0 = null;
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node1 = Node.newNumber(0.0);
      Node node2 = new Node(3516, node0, node0, 0, (-2024));
      node2.isQualifiedName();
      node0.isIf();
      node1.toString();
      node2.getLastChild();
      node1.isAssign();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.clearSideEffectFlags();
      node2.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Node node0 = Node.newString("node is not a child", 0, 0);
      Node node1 = new Node((-2345), node0, node0, 91, 155);
      Node node2 = node0.getLastSibling();
      node0.isEquivalentTo(node2, true, false, false);
      node2.getDirectives();
      node1.isFalse();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = Node.newNumber((-3244.094885895745));
      node0.isReturn();
      node0.children();
      node0.toString(true, false, false);
      node0.isStringKey();
      node0.isDec();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setMutatesThis();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = (-1853);
      Node node0 = Node.newString("", (-1853), 0);
      node0.setLength((-1853));
      Node node1 = new Node(0, node0, node0, 51, (-2528));
      node0.addChildToFront(node1);
      node0.getLength();
      node0.setSourceFileForTesting("");
      node0.isCall();
      node0.toStringTree();
      String string0 = "7V@r<gb";
      Node node2 = Node.newString(int0, string0);
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node2);
      node_AncestorIterable0.iterator();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = new Node(79);
      Node node1 = Node.newString((-487), "rdL'^m0+.");
      node1.getProp(4);
      node0.putProp(79, (Object) null);
      node1.cloneTree();
      node1.isEquivalentToTyped(node0);
      node1.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.isFalse();
      node0.getJsDocBuilderForNode();
      node0.getLength();
      node0.setIsSyntheticBlock(false);
      node0.removeProp((-3789));
      node0.setSourceEncodedPosition((-3789));
      node0.getBooleanProp(0);
      Node node1 = new Node((-1884), node0, node0, node0);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      Node node2 = node0.srcrefTree(node1);
      node1.mayMutateArguments();
      node2.setSourceFileForTesting("$uc~5?");
      node1.isDefaultCase();
      Node node3 = node1.getChildAtIndex(42);
      node3.children();
      int int0 = 152;
      node1.removeProp(int0);
      // Undeclared exception!
      try { 
        node3.mayMutateArguments();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      String string0 = ",obg`vbV.1j";
      Node node0 = Node.newNumber((double) 99, (-189), 105);
      Node node1 = new Node((-1906), node0, node0, node0, 12, 56);
      Node node2 = new Node(99, node1, node1, node1, node1);
      ObjectType objectType0 = FunctionType.getTopDefiningInterface((ObjectType) null, "Object#Element");
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, node2, objectType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
      Node node3 = enumElementType1.getRootNode();
      // Undeclared exception!
      try { 
        node3.cloneTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionType", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = Node.newString((-1561), "", (-1561), (-1561));
      node0.getSourceFileName();
      Node node1 = Node.newNumber((double) 51);
      node1.getAncestors();
      node0.getStaticSourceFile();
      node1.setCharno(0);
      node0.setOptionalArg(true);
      node0.addChildrenToFront((Node) null);
      node0.isQualifiedName();
      node0.isString();
      node1.isWhile();
      node0.isBlock();
      // Undeclared exception!
      try { 
        node0.removeChildAfter(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = Node.newString(1391, "", 152, 98);
      Node node1 = new Node(15, node0, node0, node0, node0, (-199), 52);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      node1.setJSType(jSType0);
      node0.getDirectives();
      node1.isString();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = 0;
      Node node0 = new Node((-139), 0, 154);
      node0.getSideEffectFlags();
      Node node1 = null;
      node0.addChildAfter((Node) null, (Node) null);
      node0.useSourceInfoIfMissingFromForTree(node1);
      Node node2 = null;
      try {
        node2 = new Node(int0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(122);
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setReturnsTainted();
      Node node0 = Node.newNumber((double) 122, 122, 1363);
      node0.isGetElem();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = 262;
      Node[] nodeArray0 = new Node[8];
      Node node0 = null;
      try {
        node0 = new Node(262, nodeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = Node.newString(1398, "The new child node already has a parent.", 0, 0);
      node0.isEmpty();
      node0.isLocalResultCall();
      Node node1 = node0.cloneNode();
      node1.getInputId();
      node1.getAncestors();
      node1.isInc();
      node0.setWasEmptyNode(true);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = 15;
      Node node0 = Node.newString(1391, "", 152, 98);
      int int1 = (-199);
      Node node1 = new Node(51);
      node0.addChildAfter(node1, node1);
      Node node2 = new Node(int0, node0, node0, node0, node0, int1, node0.LENGTH);
      node0.getProp(node2.SIDE_EFFECT_FLAGS);
      node2.isComma();
      node0.getSourceOffset();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = Node.newNumber((-3244.094885895745));
      node0.isReturn();
      node0.children();
      node0.toString(true, false, false);
      node0.isStringKey();
      node0.isDec();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      node0.isBlock();
      node0.removeChildAfter((Node) null);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = true;
      Node node0 = new Node(100);
      Node node1 = node0.clonePropsFrom((Node) null);
      node0.useSourceInfoFromForTree(node1);
      // Undeclared exception!
      try { 
        node1.getJsDocBuilderForNode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = new Node(124, 124, 124);
      Node node1 = Node.newNumber((double) 43, 12, (-3217));
      node0.setWasEmptyNode(false);
      node0.isNull();
      node1.isContinue();
      node1.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      Node node1 = Node.newString(86, "~aoCq,?Ts;>", 981, 52);
      Node node2 = new Node(54, node0, node0, node1);
      Node node3 = Node.newString("Object#Element", 47, 15);
      Node[] nodeArray0 = new Node[0];
      Node node4 = new Node(1876, nodeArray0);
      JSType jSType0 = null;
      EnumType enumType0 = jSTypeRegistry0.createEnumType("~aoCq,?Ts;>", node3, (JSType) null);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      enumElementType0.autoboxesTo();
      node3.setJSType(jSType0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = new Node(117, 117, 44);
      node0.isUnscopedQualifiedName();
      node0.setChangeTime(44);
      node0.setVarArgs(false);
      Node node1 = node0.getAncestor(52);
      Node node2 = node0.removeChildAfter((Node) null);
      Node node3 = node1.getChildBefore(node2);
      node3.getExistingIntProp(node2.INPUT_ID);
      node1.isEquivalentToTyped(node3);
      // Undeclared exception!
      try { 
        node0.getLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = Node.newNumber((-3244.094885895745));
      boolean boolean0 = node0.isReturn();
      node0.children();
      node0.toString(true, false, false);
      node0.isStringKey();
      Node node1 = Node.newString("NUMBER -3244.094885895745", 307, (-546));
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = node1;
      nodeArray0[1] = node1;
      nodeArray0[2] = node1;
      Node node2 = Node.newNumber((double) 43, (-1857), 150);
      nodeArray0[3] = node2;
      nodeArray0[4] = node1;
      nodeArray0[5] = node0;
      nodeArray0[6] = node0;
      nodeArray0[7] = node0;
      nodeArray0[8] = node1;
      Node node3 = new Node(51, nodeArray0);
      JSType jSType0 = null;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, boolean0);
      String string0 = "PJ/O";
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, nodeArray0[8], jSType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      // Undeclared exception!
      try { 
        enumElementType0.autoboxesTo();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node node0 = new Node(110);
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node1 = Node.newNumber((double) 36);
      nodeArray0[2] = node1;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      Node node2 = new Node(11, node1, node0, node0);
      nodeArray0[5] = node2;
      Node node3 = new Node((-4096), nodeArray0, 12, 30);
      nodeArray0[2].isTypeOf();
      int int0 = (-1);
      int int1 = 303;
      Node.newNumber((double) node3.DECR_FLAG, int0, int1);
      nodeArray0[5].addChildrenAfter(node3, node3);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(98, nodeArray0, 83, 83);
      node0.isTypeOf();
      node0.putProp(51, "VAR");
      Node node1 = Node.newNumber((double) 83, 2, 1631);
      node1.setIsSyntheticBlock(false);
      node0.addChildrenAfter(node1, node1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(122);
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesThis();
      Node node0 = Node.newString("jsdoc_info");
      node0.getProp(24);
      node0.putProp(24, node_SideEffectFlags0);
      Node node1 = node0.cloneTree();
      node1.isEquivalentToTyped(node0);
      node0.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node node0 = Node.newString("", (-1853), 0);
      node0.setLength((-1853));
      Node node1 = new Node(0, node0, node0, 51, (-2528));
      node0.addChildToFront(node1);
      node0.getLength();
      node0.setSourceFileForTesting("");
      node0.isCall();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(6);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);
      node0.appendStringTree(charArrayWriter0);
      int int0 = 54;
      int int1 = 9;
      int int2 = (-470);
      Node node2 = new Node(int0, node0, node0, int1, int2);
      String string0 = null;
      Node node3 = Node.newString(string0);
      node3.isDebugger();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node node0 = Node.newString("", 0, (-4));
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0);
      node0.toStringTree();
      Node node1 = Node.newString(1, ".");
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      node_AncestorIterable0.iterator();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      node0.isCatch();
      node0.isLocalResultCall();
      Node.newString("The new child node already has a parent.", 42, (-2140));
      Node node1 = node0.cloneNode();
      node1.getAncestor(29);
      node1.getInputId();
      node1.getAncestors();
      node1.isInc();
      node0.setWasEmptyNode(true);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node1 = Node.newNumber(0.0);
      Node node2 = new Node(3516, node0, node0, 37, (-2024));
      node2.isQualifiedName();
      node0.isIf();
      node2.siblings();
      node1.toString();
      Node node3 = node2.getLastChild();
      node3.toString(false, false, false);
      node1.isAssign();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.clearSideEffectFlags();
      node2.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = Node.newString("node is not a child", 0, 0);
      Node node1 = Node.newNumber(1.0, 3517, 36);
      Node node2 = new Node(0, node0, node0);
      Node node3 = new Node((-917), node0, node1, node0, node0);
      Node node4 = node3.getLastSibling();
      boolean boolean0 = false;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, boolean0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node5 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        node5.isEquivalentTo(node4, boolean0, boolean1, boolean1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = Node.newString("node is not a child", 0, 0);
      Node node1 = new Node(57, node0, node0, 55, 2809);
      node1.getLastSibling();
      node1.isEquivalentTo(node0, true, false, false);
      node0.getDirectives();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = Node.newString(2510, " is not a string node");
      node0.setSourceFileForTesting(" is not a string node");
      node0.isLabelName();
      node0.getProp(0);
      node0.setSideEffectFlags(2510);
      node0.isComma();
      node0.getSourceOffset();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setAllFlags();
      node_SideEffectFlags5.valueOf();
      Node node0 = new Node(126, 1625, (-146));
      Node node1 = new Node(1625, node0, node0, node0);
      Node node2 = new Node(0, node1, node1, 2, 0);
      Node node3 = Node.newString("VAR", 43, (-2344));
      Node node4 = new Node(0, node2, node2, node0, node3);
      node4.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = new Node(0, 0, 700);
      Node node1 = new Node(31, node0, node0, node0);
      node1.setIsSyntheticBlock(false);
      Node node2 = new Node(112, node0, node0, node0, node1, 5, 54);
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.getType(jSTypeRegistry0.OBJECT_INDEX_TEMPLATE);
      node1.setJSType(jSType0);
      // Undeclared exception!
      try { 
        node0.getDirectives();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = Node.newString(1391, "", 152, 98);
      Node node1 = Node.newString(36, "slash_v");
      node1.isOr();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.isFalse();
      node0.getJsDocBuilderForNode();
      node0.setLength(39);
      Node node3 = node0.cloneNode();
      node0.checkTreeEquals(node3);
      node0.isCall();
      Node node4 = Node.newString(52, "slash_v");
      Node node5 = new Node((-2140), node4, node4, 54, 29);
      Node node6 = new Node(152, (Node) null, node5, node0, node5);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node4;
      int int0 = (-1206);
      Node node7 = new Node(node5.DIRECT_EVAL, nodeArray0, node5.JSDOC_INFO_PROP, int0);
      node6.addChildrenAfter(node3, node7);
      node1.isDebugger();
      String string0 = "";
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      int int0 = 83;
      Node node0 = new Node(98, nodeArray0, 83, 83);
      node0.toStringTree();
      node0.isArrayLit();
      node0.setDouble((-3207.20229));
      int int1 = 1631;
      // Undeclared exception!
      try { 
        Node.newNumber((double) int0, node0.POST_FLAG, int1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // HOOK 83 is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node node0 = new Node(124, 124, 124);
      node0.toString(true, false, true);
      node0.isStringKey();
      node0.isDec();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      node0.isBlock();
      node0.removeChildAfter((Node) null);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node node0 = Node.newNumber((-3244.094885895745));
      node0.isReturn();
      node0.children();
      boolean boolean0 = true;
      Node node1 = new Node(46, node0, node0, 15, 12);
      Node node2 = new Node(36, node0, node0, node1);
      boolean boolean1 = false;
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = new Node(124, 124, 124);
      node0.removeProp(1895);
      node0.setSourceEncodedPosition(98);
      node0.getBooleanProp(32);
      Node node1 = new Node(52, node0, node0, node0);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      Node node2 = node1.srcrefTree(node0);
      node2.mayMutateArguments();
      node2.setSourceFileForTesting("change_time");
      node1.isDefaultCase();
      Node node3 = node2.getChildAtIndex(57);
      node1.children();
      int int0 = 97;
      node3.removeProp(int0);
      node1.mayMutateArguments();
      // Undeclared exception!
      try { 
        node1.isSwitch();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Node node0 = Node.newString(2510, " is not a string node");
      node0.setSourceFileForTesting(" is not a string node");
      node0.isLabelName();
      node0.getProp(0);
      node0.isComma();
      node0.setWasEmptyNode(false);
      node0.getBooleanProp(2510);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      JSType[] jSTypeArray0 = new JSType[4];
      LinkedHashSet<TemplateType> linkedHashSet0 = new LinkedHashSet<TemplateType>();
      HashSet<TemplateType> hashSet0 = new HashSet<TemplateType>(linkedHashSet0);
      ImmutableList<TemplateType> immutableList0 = ImmutableList.copyOf((Iterable<? extends TemplateType>) hashSet0);
      ImmutableList<TemplateType> immutableList1 = immutableList0.reverse();
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("", node0, immutableList1);
      TemplatizedType templatizedType0 = JSType.toMaybeTemplatizedType((JSType) functionType0);
      jSTypeArray0[0] = (JSType) templatizedType0;
      String string0 = "'\"v[*jm?NtHo(";
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, node0, jSTypeArray0[0]);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      // Undeclared exception!
      try { 
        enumElementType0.getTemplateTypes();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = Node.newString(1398, "/H?).*ovw,Lj=P)F|h");
      node0.setSourceFileForTesting("");
      node0.isLabelName();
      node0.getProp((-241));
      Node node1 = Node.newString(46, "UirPes_JdR&", 42, 29);
      Node node2 = node0.copyInformationFromForTree(node1);
      node2.setSourceEncodedPosition(16);
      node0.isComma();
      node0.getSourceOffset();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node node0 = Node.newString(2510, "The new child node already has a parent.", 0, 126);
      node0.isEmpty();
      node0.isLocalResultCall();
      Node node1 = node0.cloneNode();
      node1.getInputId();
      node0.getAncestors();
      node0.isInc();
      Node node2 = new Node(39, node1, node0, (Node) null, node0, 1, 101);
      boolean boolean0 = true;
      node2.setWasEmptyNode(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node node0 = new Node(110);
      Node node1 = Node.newString(42, "var_args_name", 57, 100);
      node0.getSourceFileName();
      Node node2 = Node.newNumber((double) 0);
      node1.getAncestors();
      Node node3 = null;
      node1.getStaticSourceFile();
      boolean boolean0 = true;
      node2.setCharno(32);
      Node node4 = new Node(53, (Node) null);
      node4.setOptionalArg(boolean0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      boolean boolean1 = true;
      JSTypeRegistry jSTypeRegistry0 = null;
      try {
        jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, boolean1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node1 = Node.newNumber(0.0);
      Node node2 = new Node(3516, node0, node0, 0, (-2024));
      simpleErrorReporter0.warning(" is not a number node", "string", 56, 40);
      node2.isQualifiedName();
      node2.isNull();
      node2.isContinue();
      Node.newString(32, "Object#Element", 30, 29);
      node0.removeChild(node1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = Node.newString(1398, "The new child node already has a parent.", 0, 0);
      node0.isEmpty();
      node0.isLocalResultCall();
      Node node1 = node0.cloneNode();
      node1.getInputId();
      node1.getAncestors();
      node1.isInc();
      node1.mayMutateArguments();
      node0.isSwitch();
      node0.isCase();
      Node.extractCharno(30);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      node0.isCatch();
      node0.isLocalResultCall();
      Node node1 = Node.newString("The new child node already has a parent.", 42, (-2140));
      Node node2 = node0.cloneNode();
      node2.getAncestor(29);
      node2.getInputId();
      node2.getAncestors();
      node2.isInc();
      node1.removeChildAfter(node2);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(98, nodeArray0, 83, 83);
      node0.isTypeOf();
      Node node1 = new Node(1, nodeArray0);
      Node node2 = Node.newString("hbE|2bY$!GMb)");
      node0.getIndexOfChild(node2);
      Node node3 = Node.newString(55, "hbE|2bY$!GMb)", (-225), (-3840));
      Node node4 = new Node(38, node2, node0);
      node3.addChildrenToBack(node4);
      Node.NodeMismatch node_NodeMismatch0 = node3.checkTreeTypeAwareEqualsImpl(node2);
      node1.isCast();
      node4.setLineno(57);
      node_NodeMismatch0.equals((Object) null);
      node4.isNoSideEffectsCall();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node node0 = Node.newString(1391, "", 152, 98);
      Node node1 = Node.newString(36, "slash_v");
      node1.isOr();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.isFalse();
      node0.getJsDocBuilderForNode();
      node0.setLength(39);
      Node node3 = new Node(2238);
      node2.addChildAfter(node3, (Node) null);
      Node node4 = new Node(98, node1, node3, node1, (Node) null, 52, (-1421));
      node1.getProp(node4.VAR_ARGS_NAME);
      node2.isComma();
      node0.getSourceOffset();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = Node.newString(1391, "", 152, 98);
      Node node1 = node0.cloneNode();
      Node node2 = Node.newString("");
      String string0 = node2.checkTreeEquals(node0);
      node2.isCall();
      Node node3 = null;
      Node.newString(node1.LAST_PROP, string0);
      int int0 = 751619276;
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node node0 = Node.newString("node is not a child", 0, 0);
      Node node1 = new Node(55, node0, node0, node0);
      node1.getLastSibling();
      Node node2 = new Node(49, node1, node1);
      node0.getDirectives();
      node2.isGetterDef();
      node2.isDebugger();
      node1.isName();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(122);
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesThis();
      Node node0 = Node.newString("jsdoc_info");
      node0.getProp(24);
      node0.putProp(24, node_SideEffectFlags0);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(30, nodeArray0, 24, (-2978));
      node0.getProp((-794));
      node1.isComma();
      node1.getSourceOffset();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = new Node(0, 1398, 1398);
      node0.isEmpty();
      node0.setLineno(56);
      node0.isLocalResultCall();
      Node node1 = node0.cloneNode();
      node1.getInputId();
      node1.getAncestors();
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node1;
      nodeArray0[1] = node1;
      nodeArray0[2] = node0;
      node0.cloneTree();
      node0.isEquivalentToTyped(node0);
      node0.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node node0 = new Node(110);
      Node node1 = new Node(0);
      Node node2 = node0.clonePropsFrom(node1);
      Node node3 = node2.useSourceInfoFromForTree(node1);
      node2.getJsDocBuilderForNode();
      node0.setLineno(41);
      node0.setVarArgs(true);
      node0.children();
      node0.setSourceEncodedPositionForTree(0);
      node3.isUnscopedQualifiedName();
      node2.isVarArgs();
      node1.setDouble(0.0);
      double double0 = 15.6267;
      int int0 = 310;
      int int1 = 16;
      Node.newNumber(double0, int0, int1);
      node0.isEquivalentToTyped(node3);
      // Undeclared exception!
      try { 
        node1.isVarArgs();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(98, nodeArray0, 83, 83);
      node0.toStringTree();
      node0.isArrayLit();
      Node node1 = Node.newNumber(1585.6295014, 154, 5);
      node1.mayMutateGlobalStateOrThrow();
      node0.isLocalResultCall();
      node1.isBreak();
      node1.isIf();
      node0.setDouble(0.5);
      node1.replaceChild(node0, node0);
      node1.isDefaultCase();
      int int0 = 80;
      String string0 = "B5Lap";
      Node node2 = Node.newString(int0, string0);
      node2.getChildBefore(node1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      node0.isCatch();
      node0.isLocalResultCall();
      node0.isLabelName();
      node0.getProp(16777216);
      node0.isComma();
      Node node1 = new Node(10, node0, 797, 56);
      node1.getSourceOffset();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node node0 = Node.newString(1398, "The new child node already has a parent.", 0, 0);
      node0.isEmpty();
      node0.isLocalResultCall();
      node0.getInputId();
      Node[] nodeArray0 = new Node[3];
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      Node node1 = new Node((-1473), nodeArray0, 2, 57);
      node1.getProp(node0.SIDE_EFFECTS_ALL);
      node0.isComma();
      node0.getSourceOffset();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = Node.newString(1391, "", 152, 98);
      Node node1 = new Node(15, node0, node0, node0, node0, (-199), 52);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      jSType0.hasAnyTemplateTypes();
      node1.setJSType(jSType0);
      node0.getDirectives();
      node1.isString();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node node0 = Node.newString(2510, " is not a string node");
      node0.setSourceFileForTesting(" is not a string node");
      node0.isLabelName();
      Node node1 = Node.newNumber((-1.0), 56, 30);
      node1.getJsDocBuilderForNode();
      node1.setLength(3000);
      node1.cloneNode();
      Node[] nodeArray0 = new Node[3];
      Node node2 = new Node((-2945), node0, node0);
      nodeArray0[0] = node2;
      nodeArray0[1] = node1;
      nodeArray0[2] = node1;
      Node node3 = new Node(4095, nodeArray0, 0, 2147483645);
      node0.checkTreeEquals(node3);
      node0.isCall();
      nodeArray0[0].addChildrenAfter(nodeArray0[2], node3);
      nodeArray0[0].isDebugger();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(15);
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesThis();
      Node node0 = Node.newString("", 15, 15);
      node0.getProp(86);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      node0.putProp(15, node1);
      Node node2 = new Node(300, node0, node1, (-3857), 57);
      node2.cloneTree();
      node2.isEquivalentToTyped(node0);
      node1.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node node0 = Node.newString(1391, "", 152, 98);
      Node node1 = new Node(1, node0, node0, node0);
      node1.isOr();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.isFalse();
      node0.getJsDocBuilderForNode();
      node0.setLength(39);
      Node node3 = node0.cloneNode();
      node0.checkTreeEquals(node3);
      node0.isCall();
      Node node4 = Node.newString(52, "slash_v");
      node4.setSourceFileForTesting("slash_v");
      node4.isDefaultCase();
      Node node5 = Node.newString(54, "", 37, 1391);
      node5.getLength();
      node4.isQualifiedName();
      node5.isString();
      node2.isWhile();
      node2.isBlock();
      Node.newNumber((double) 2);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.isFalse();
      node0.getJsDocBuilderForNode();
      node0.getLength();
      node0.setIsSyntheticBlock(false);
      node0.removeProp((-3774));
      node0.setSourceEncodedPosition((-3774));
      node0.getBooleanProp(0);
      Node node1 = new Node((-1884), node0, node0, node0);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      Node node2 = node0.srcrefTree(node1);
      node1.mayMutateArguments();
      String string0 = "$uc~5\\?";
      Node node3 = new Node((-2304), node2, node0, 2, 1153);
      int int0 = (-532);
      Node node4 = new Node(int0, node1, node2, node3, node3);
      Node[] nodeArray0 = null;
      int int1 = 21;
      Node node5 = null;
      try {
        node5 = new Node(node3.MAX_COLUMN_NUMBER, nodeArray0, int1, node4.FLAG_LOCAL_RESULTS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node node0 = Node.newString("node is not a child", 0, 0);
      Node node1 = new Node(57, node0, node0, 55, 2809);
      Node node2 = node1.getLastSibling();
      node2.addChildrenToFront(node0);
      node2.isQualifiedName();
      node2.isString();
      Node node3 = null;
      try {
        node3 = new Node(node0.POST_FLAG, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node node0 = Node.newString((-1561), "", (-1561), (-1561));
      node0.getSourceFileName();
      Node node1 = Node.newNumber((double) 51);
      node1.getAncestors();
      node1.setCharno(0);
      node0.putBooleanProp(52, false);
      node0.setOptionalArg(true);
      node0.addChildrenToFront((Node) null);
      node0.isQualifiedName();
      node0.isString();
      node1.isWhile();
      node0.isBlock();
      node0.removeChildAfter(node1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node node0 = Node.newString(1398, "/H?).*ovw,Lj=P)F|h");
      String string0 = "";
      node0.setSourceFileForTesting("");
      node0.isLabelName();
      node0.getProp((-241));
      Node node1 = Node.newString(46, "UirPes_JdR&", 42, 29);
      node1.setSideEffectFlags(306);
      Node node2 = node0.copyInformationFromForTree(node1);
      String string1 = "_:n@:|P1/c!Lnrw";
      boolean boolean0 = false;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string1, boolean0);
      node2.setStaticSourceFile(simpleSourceFile0);
      // Undeclared exception!
      try { 
        node2.setSourceEncodedPosition(node0.FLAG_LOCAL_RESULTS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got SHNE
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Node node0 = Node.newString(1398, "/H?).*ovw,Lj=P)F|h");
      node0.setSourceFileForTesting("");
      node0.isLabelName();
      node0.getProp((-241));
      node0.setSourceFileForTesting("UirPes_JdR&");
      node0.isDefaultCase();
      Node node1 = node0.getChildAtIndex(1398);
      node0.isQualifiedName();
      node1.isString();
      node1.isWhile();
      node1.isBlock();
      // Undeclared exception!
      try { 
        Node.newNumber((double) node0.FREE_CALL);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.isFalse();
      node0.getJsDocBuilderForNode();
      node0.getLength();
      node0.setIsSyntheticBlock(false);
      node0.removeProp((-3774));
      node0.setSourceEncodedPosition((-3774));
      node0.getBooleanProp(0);
      Node node1 = new Node((-1884), node0, node0, node0);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node0.srcrefTree(node1);
      node1.mayMutateArguments();
      Node node2 = Node.newString(1, "", 1, 0);
      Node node3 = node0.copyInformationFromForTree(node2);
      node0.setSourceEncodedPosition(21);
      node3.isComma();
      node2.getSourceOffset();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Node node0 = Node.newString("node is not a child", 0, 0);
      Node node1 = new Node(57, node0, node0, 55, 2809);
      node1.getLastSibling();
      node1.isCase();
      Node.extractCharno(241);
      node1.isNot();
      node1.isFunction();
      node0.isDelProp();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(98, nodeArray0, 83, 83);
      node0.isTypeOf();
      Node node1 = new Node(1, nodeArray0);
      Node node2 = new Node(8, node0, node1, 30, 8287);
      node0.addChildrenToFront(node2);
      node1.getLastSibling();
      node1.isEquivalentTo(node0, true, true, false);
      node1.getDirectives();
      node1.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Node node0 = Node.newString("node is not a child", 0, 0);
      Node node1 = Node.newString("hbE|2bY$!GMb)");
      node0.getIndexOfChild(node1);
      Node node2 = Node.newString(8, "node is not a child", 574, 48);
      Node node3 = new Node(4095, node2, node1);
      Node node4 = Node.newString("\"Dx9F$E#y", 98, 4823);
      node1.addChildrenToBack(node4);
      Node.NodeMismatch node_NodeMismatch0 = node4.checkTreeTypeAwareEqualsImpl(node1);
      node0.isCast();
      node4.setLineno(124);
      node_NodeMismatch0.equals(node0);
      node4.isNoSideEffectsCall();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(122);
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesThis();
      Node node0 = Node.newString("jsdoc_info");
      Node node1 = new Node((-313), node0, node0, 4095, 29);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node2 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node node3 = new Node((-2259), node1, node2, node2, node2, 7, 4);
      node1.addChildrenToFront(node3);
      node3.getLastSibling();
      node3.isEquivalentTo(node2, true, true, true);
      Node node4 = new Node(1, node0, node0, node3, 1, 52);
      node4.getDirectives();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node node0 = Node.newString((String) null, (-2616), 77);
      int int0 = 3594;
      Node node1 = null;
      Node node2 = null;
      try {
        node2 = new Node(int0, node0, node1, node0.COLUMN_MASK, node0.CHANGE_TIME);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Node node0 = new Node(152, 1391, 152);
      Node node1 = new Node(1, node0, node0, node0);
      node1.isOr();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.isFalse();
      node0.getJsDocBuilderForNode();
      node0.setLength(39);
      Node node3 = node0.cloneNode();
      node0.checkTreeEquals(node3);
      node0.isCall();
      Node node4 = Node.newString(52, "slash_v");
      node4.setSourceFileForTesting("slash_v");
      node4.isDefaultCase();
      Node node5 = Node.newString(54, "", 37, 1391);
      node5.getLength();
      node4.isQualifiedName();
      node5.isString();
      node2.isWhile();
      node2.isBlock();
      Node.newNumber((double) 2);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Node node0 = Node.newString(1398, "UirPes_JdR&");
      node0.getQualifiedName();
      node0.getDouble();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node node0 = Node.newString("node is not a child", 0, 0);
      Node node1 = new Node(57, node0, node0, 55, 2816);
      Node node2 = node1.getLastSibling();
      node1.isEquivalentTo(node0, true, false, false);
      node0.getDirectives();
      node2.isOptionalArg();
      node1.cloneNode();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      node0.isCatch();
      node0.isLocalResultCall();
      node0.isLabelName();
      node0.getProp(16777216);
      node0.isComma();
      Node node1 = new Node(266, node0, node0, 48, 4);
      Node node2 = new Node(266, node1, node0, node1, 50, 42);
      node2.isQualifiedName();
      node0.isOptionalArg();
      // Undeclared exception!
      try { 
        node1.isNew();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = Node.newString("", (-1853), 0);
      node0.setLength((-1853));
      Node node1 = new Node(0, node0, node0, 51, (-2528));
      node1.getLastSibling();
      node1.isEquivalentTo(node0, true, true, true);
      node1.getDirectives();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node node0 = Node.newString("node is not a child", 0, 0);
      Node node1 = new Node(57, node0, node0, 55, 2809);
      Node node2 = node1.getLastSibling();
      node1.isCase();
      Node.extractCharno(241);
      Node.newNumber((double) 57, 4095, 100);
      node0.isGetElem();
      node2.getJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = 1;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Node node0 = new Node(1, 63, 501075);
      node0.mayMutateGlobalStateOrThrow();
      InputId inputId0 = new InputId("h`=OH;'/k?<");
      String string0 = inputId0.toString();
      inputId0.toString();
      Node node1 = new Node(1391, node0, node0, node0);
      Node node2 = node0.srcref(node1);
      node0.putProp(98, inputId0);
      node0.setQuotedString();
      node0.isString();
      int int1 = 4;
      FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      node0.setSideEffectFlags(int1);
      Node node3 = Node.newNumber((double) int0);
      node0.isEquivalentTo(node3);
      node2.getLineno();
      node3.isScript();
      // Undeclared exception!
      try { 
        node3.isEquivalentToShallow(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(122);
      node_SideEffectFlags0.setMutatesGlobalState();
      Node node0 = Node.newString((-241), (String) null);
      String string0 = "";
      node0.setSourceFileForTesting(string0);
      // Undeclared exception!
      try { 
        node0.isLabelName();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = Node.newString(1398, "UirPes_JdR&");
      node0.isOptionalArg();
      node0.putIntProp(1398, (-3132));
      node0.getQualifiedName();
      node0.getDouble();
      Node.extractLineno(node0.DIRECTIVES);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Node node0 = Node.newString(55, "missing prop: ");
      node0.setSourceFileForTesting(" is not a string node");
      node0.isLabelName();
      node0.getProp(55);
      node0.isCase();
      Node.extractCharno(3884);
      node0.isIn();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(98, nodeArray0, 83, 83);
      node0.isTypeOf();
      Node node1 = new Node(1, nodeArray0);
      Node node2 = new Node(8, node0, node1, 30, 46);
      node2.getLastChild();
      node0.isAssign();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags3.clearSideEffectFlags();
      node1.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node1 = Node.newNumber(0.0);
      Node node2 = new Node(3516, node0, node0, 0, 0);
      node2.isQualifiedName();
      node0.isIf();
      node1.toString();
      node1.addChildrenToFront(node2);
      Node node3 = node0.getLastSibling();
      node3.isEquivalentTo(node0, false, true, true);
      node2.getDirectives();
      node2.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node node0 = Node.newString(55, "missing prop: ");
      node0.setSourceFileForTesting(" is not a string node");
      node0.isLabelName();
      node0.isComma();
      node0.getSourceOffset();
      node0.getChildCount();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(122);
      node_SideEffectFlags0.setMutatesGlobalState();
      Node node0 = Node.newString((-241), "source_file");
      node0.getQualifiedName();
      node0.getDouble();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(3516);
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags1.setReturnsTainted();
      Node node0 = Node.newString(3516, "9!8/c", 3543, 19);
      Node node1 = node0.getLastSibling();
      node1.isCase();
      Node.extractCharno(57);
      node0.isNot();
      node1.isFunction();
      node0.isDelProp();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node node0 = Node.newString("node is not a child", 0, 0);
      Node node1 = new Node(57, node0, node0, 55, 2809);
      Node node2 = Node.newNumber(0.0, 1, 16);
      node2.isGetElem();
      node1.clonePropsFrom(node2);
      node1.setSideEffectFlags((-707));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = Node.newString(34, " is not a string node", 34, 34);
      node0.setSourceFileForTesting(" is not a string node");
      node0.isLabelName();
      node0.getProp(34);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node0.setJSDocInfo(jSDocInfo0);
      node0.isComma();
      node0.getSourceOffset();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node node0 = new Node(0, 0, 700);
      Node node1 = new Node(0, node0);
      node1.setIsSyntheticBlock(false);
      Node.newString((-1220), "");
      node1.isOr();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.getJsDocBuilderForNode();
      node2.checkTreeEquals(node0);
      node2.useSourceInfoIfMissingFromForTree(node0);
      double double0 = 1478.57;
      int int0 = 16;
      int int1 = 124;
      Node.newNumber(double0, int0, int1);
      int int2 = 917;
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node node0 = Node.newString(1391, "", 152, 98);
      Node node1 = new Node(15, node0, node0, node0, node0, (-199), 52);
      node0.setOptionalArg(true);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node2 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node1.addChildrenToFront(node2);
      node1.isQualifiedName();
      node2.isString();
      node1.isWhile();
      node2.isBlock();
      node1.removeChildAfter(node0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(98, nodeArray0, 83, 83);
      node0.isTypeOf();
      Node node1 = new Node(1, nodeArray0);
      Node node2 = new Node(47, node1, node0, 16, 4095);
      node2.isCase();
      node2.useSourceInfoFrom(node0);
      Node.extractCharno((-1320));
      node1.isNot();
      node1.isGetterDef();
      node2.isDebugger();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Node node0 = new Node(2887, 122, 152);
      String string0 = "slash_v";
      Node node1 = new Node(54, node0, node0, node0);
      node0.isOr();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node0.isFalse();
      node1.getJsDocBuilderForNode();
      node0.setLength(42);
      Node node3 = node1.cloneNode();
      node1.checkTreeEquals(node3);
      node2.isCall();
      String string1 = "";
      Node.newString(node0.SLASH_V, string1);
      // Undeclared exception!
      try { 
        node3.setSourceFileForTesting(string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 54
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node node0 = Node.newString(1398, "The new child node already has a parent.", 0, 0);
      node0.isEmpty();
      node0.isLocalResultCall();
      node0.getInputId();
      node0.getAncestors();
      node0.isInc();
      node0.isRegExp();
      node0.isSwitch();
      node0.isCase();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Node node0 = new Node(950, (-2159), 0);
      Node node1 = new Node(40, node0);
      node0.setIsSyntheticBlock(false);
      Node node2 = Node.newString(32, "node is not a child");
      Node node3 = node0.useSourceInfoFromForTree(node2);
      node0.isFalse();
      node3.getJsDocBuilderForNode();
      node3.setLength(4095);
      Node node4 = node3.cloneNode();
      node3.checkTreeEquals(node1);
      node0.isCall();
      node4.addChildrenAfter(node3, node3);
      node2.isDebugger();
      node2.isCast();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      // Undeclared exception!
      try { 
        node_SideEffectFlags0.setThrows();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 950
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newString("pattern", 0, 0);
      Node node1 = new Node((-2651), node0, node0, 16, 2);
      Node node2 = node1.getLastSibling();
      node1.isCase();
      Node.extractCharno((-241));
      node0.isNot();
      node0.isFunction();
      node0.isDelProp();
      node0.srcrefTree(node2);
      node1.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(122);
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesThis();
      Node node0 = Node.newString("jsdoc_info");
      node0.getProp(24);
      node0.putProp(24, node_SideEffectFlags0);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(30, nodeArray0, 24, (-2978));
      node0.addChildToBack(node1);
      node0.getProp((-794));
      node1.isComma();
      node1.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = new Node(152, 1391, 152);
      Node node1 = new Node(1, node0, node0, node0);
      node1.isOr();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.isFalse();
      node0.cloneNode();
      node2.getInputId();
      node2.getAncestors();
      Node node3 = new Node((-1340), (-606), 52);
      Node node4 = node3.cloneTree();
      node0.isEquivalentToTyped(node4);
      node1.getSourceOffset();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Node node0 = new Node(0, 1398, 1398);
      Node node1 = Node.newString(4095, "node is not a child");
      node0.isEquivalentToTyped(node1);
      node0.isEmpty();
      node0.setLineno(56);
      node0.isLocalResultCall();
      node0.getJsDocBuilderForNode();
      node0.setLength(769);
      Node node2 = node0.cloneNode();
      node2.checkTreeEquals(node0);
      node0.isCall();
      Node node3 = Node.newString(1002, "rq#v,do#");
      node2.setSourceFileForTesting("^@4f6s`~]9)U");
      node2.isDefaultCase();
      node3.setIsSyntheticBlock(false);
      Node node4 = Node.newString(1, "RJst", 42, 57);
      node4.removeChildren();
      node3.getLength();
      node0.isQualifiedName();
      node4.isString();
      node0.isWhile();
      node2.isBlock();
      Node.newNumber(0.0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = "node is not a child";
      Node node0 = Node.newString("node is not a child");
      Node node1 = Node.newNumber((double) 16, 4095, 29);
      Node node2 = new Node(105, node1, node1, (-1600), 8232);
      node0.addChildToFront(node1);
      node2.getLength();
      node2.setSourceFileForTesting(string0);
      node1.setDouble(node2.COLUMN_MASK);
      double double0 = 3191.4685;
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node node0 = Node.newString("", (-1853), 0);
      node0.setLength((-1853));
      Node node1 = new Node(30, node0, node0, 1398, 56);
      Node node2 = node1.getLastSibling();
      node0.isCase();
      Node.extractCharno((-3813));
      node0.isNot();
      node0.isFunction();
      node2.isDelProp();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Node node0 = new Node(152, 1391, 152);
      Node node1 = new Node(1, node0, node0, node0);
      node1.isOr();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.isFalse();
      node0.getJsDocBuilderForNode();
      node0.setLength(39);
      Node node3 = node0.cloneNode();
      node0.checkTreeEquals(node3);
      node0.isCall();
      Node node4 = Node.newString(52, "slash_v");
      node4.setSourceFileForTesting("slash_v");
      node0.isOnlyModifiesThisCall();
      Node node5 = Node.newString(54, "", 37, 1391);
      node5.getLength();
      node4.isQualifiedName();
      node5.isString();
      node2.isWhile();
      node2.isBlock();
      Node.newNumber((double) 2);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node node0 = Node.newString("jsdoc_info");
      Node node1 = new Node(52, node0, node0, node0, node0);
      node1.getProp(47);
      node0.putProp(101, node_SideEffectFlags2);
      Node node2 = node1.cloneTree();
      node2.isEquivalentToTyped(node0);
      node0.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(122);
      Node node0 = new Node(122, 111, 111);
      Node node1 = new Node(2, node0);
      node0.setIsSyntheticBlock(true);
      Node node2 = Node.newString(16, "EMPTY");
      node1.isOr();
      Node node3 = node1.useSourceInfoFromForTree(node0);
      node1.isFalse();
      node1.getJsDocBuilderForNode();
      node0.setLength((-278));
      node1.cloneNode();
      Node node4 = new Node(52, node2, node3, node3, 8, (-1372));
      Node node5 = Node.newString("");
      node4.checkTreeEquals(node5);
      node5.isCall();
      String string0 = ":yG4r;z@0-a";
      int int0 = 29;
      int int1 = (-2);
      Node.newString(string0, int0, int1);
      Node.newNumber((double) node4.OPT_ARG_NAME, node4.IS_DISPATCHER, node2.FLAG_NO_THROWS);
      SimpleErrorReporter simpleErrorReporter0 = null;
      try {
        simpleErrorReporter0 = new SimpleErrorReporter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(122);
      node_SideEffectFlags0.setMutatesArguments();
      Node node0 = Node.newString(122, "source_file", (-272), 122);
      node0.getQualifiedName();
      node0.getDouble();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node1 = Node.newNumber(0.0);
      Node node2 = new Node(3516, node0, node0, 0, 0);
      node2.isQualifiedName();
      node0.isIf();
      node1.toString();
      node1.addChildrenToFront(node2);
      node0.getLastSibling();
      node1.getQualifiedName();
      node1.getDouble();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node node0 = Node.newString("node is not a child", 0, 0);
      node0.setSourceEncodedPosition(0);
      Node node1 = new Node(57, node0, node0, 55, 2809);
      node1.getLastSibling();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte) (-46);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node1.isCase();
      Node.extractCharno(241);
      node1.isNot();
      Node.newString(56, "com.google.javascript.rhino.Node$ObjectPropListItem");
      Node node2 = new Node(1282, 48, 36);
      node2.getChildBefore(node1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node node0 = Node.newNumber(1585.6295014, 154, 21);
      node0.mayMutateGlobalStateOrThrow();
      node0.isQuotedString();
      node0.isIf();
      node0.isDefaultCase();
      node0.isDebugger();
      Node node1 = Node.newString((String) null, 40, 5);
      node1.useSourceInfoIfMissingFrom(node0);
      node0.hasChild(node1);
      node1.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Node node0 = new Node(152, 1391, 152);
      Node node1 = new Node(1, node0, node0, node0);
      node1.isOr();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.isFalse();
      node0.getJsDocBuilderForNode();
      node0.setLength(39);
      Node node3 = node0.cloneNode();
      node2.getProp(2580);
      node3.putProp(12, node2);
      node3.cloneTree();
      node1.isEquivalentToTyped(node0);
      node3.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Node node0 = Node.newString(1398, "The new child node already has a parent.", 0, 0);
      node0.isEmpty();
      node0.isLocalResultCall();
      node0.getInputId();
      node0.getAncestors();
      node0.isInc();
      Node node1 = Node.newNumber((double) 1, 38, 39);
      node0.copyInformationFrom(node1);
      node0.isRegExp();
      node0.isSwitch();
      node0.isCase();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(3516);
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setThrows();
      int int0 = (-1949);
      Node node0 = Node.newNumber(0.0, (-1949), Integer.MIN_VALUE);
      node0.setSideEffectFlags(node_SideEffectFlags1);
      node0.isGetElem();
      node0.setSideEffectFlags(int0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(122);
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.extractCharno(2722);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node0.isNot();
      node0.isFunction();
      node0.isDelProp();
      Node node1 = new Node(15, node0, node0, node0, 37, 46);
      Node node2 = node1.srcrefTree(node0);
      node2.isDefaultCase();
      node0.getIntProp(2040);
      node1.isSyntheticBlock();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Node node0 = Node.newString((-2345), "node is not a child");
      Node node1 = new Node((-2345), node0, node0, 91, 155);
      Node.newString("node is not a child", 16, 49);
      node1.isWith();
      Set<String> set0 = new LinkedHashSet<String>();
      node1.isFalse();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Node node0 = Node.newString(1391, "", 152, 98);
      Node node1 = new Node(1, node0, node0, node0);
      Node node2 = Node.newNumber((-1.0));
      Node node3 = new Node(31, node2, node2, (-620), 1);
      node3.isQualifiedName();
      boolean boolean0 = node1.isIf();
      node3.toString();
      node1.addChildrenToFront(node0);
      Node node4 = node0.getLastSibling();
      boolean boolean1 = true;
      boolean boolean2 = false;
      node2.isEquivalentTo(node4, boolean0, boolean2, boolean1);
      node0.getDirectives();
      node1.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.isOr();
      Node node1 = Node.newNumber(816.937564, 31, 1);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node2.isFalse();
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node2;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.google.common.collect.AbstractMultimap");
      nodeArray0[1] = node0;
      Node node3 = new Node(102, nodeArray0, 110, (-1783));
      node3.getJsDocBuilderForNode();
      int int0 = (-3956);
      nodeArray0[1].setLength(int0);
      node0.cloneNode();
      node2.checkTreeEquals(node0);
      // Undeclared exception!
      try { 
        node2.isCall();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Node node0 = new Node(1398, 0, 0);
      node0.isEmpty();
      node0.isLocalResultCall();
      node0.getInputId();
      node0.getAncestors();
      node0.isInc();
      Node node1 = Node.newNumber((double) 1, 38, 39);
      node0.copyInformationFrom(node1);
      node0.isRegExp();
      node0.isSwitch();
      node0.isString();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      node0.isCatch();
      node0.isUnscopedQualifiedName();
      Node node1 = Node.newString("The new child node already has a parent.", 42, (-2140));
      Node node2 = node0.cloneNode();
      node2.getAncestor(29);
      node2.getInputId();
      node2.getAncestors();
      Node.extractCharno(2);
      node1.isIn();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Node node0 = Node.newString(1391, "", 152, 98);
      Node node1 = new Node(1, node0, node0, node0);
      node1.isOr();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.isFalse();
      node0.getJsDocBuilderForNode();
      node0.setLength(39);
      node0.cloneNode();
      Node.extractCharno(55);
      node2.isNot();
      node0.isGetterDef();
      Node node3 = Node.newString("");
      node3.isDebugger();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(122);
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesThis();
      Node node0 = Node.newString("jsdoc_info");
      node0.getProp(24);
      node0.putProp(24, node_SideEffectFlags0);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      Node node1 = new Node(30, nodeArray0, 24, (-2978));
      node0.getProp((-794));
      node1.isComma();
      node1.isVarArgs();
      node0.isHook();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Node node0 = Node.newString("node is not a child", 0, 0);
      Node node1 = new Node(57, node0, node0, 55, 2809);
      node1.getLastSibling();
      node1.isCase();
      Node.extractCharno(0);
      node1.isNot();
      node0.isGetterDef();
      node1.isDebugger();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Node node0 = Node.newString("", (-1853), 0);
      node0.setLength((-1853));
      Node node1 = Node.newNumber((double) 1);
      Node node2 = new Node(1929, node0, node1, 42, 31);
      node1.isQualifiedName();
      node2.isIf();
      node0.toString();
      node2.addChildrenToFront(node1);
      Node node3 = node0.getLastSibling();
      node0.getQualifiedName();
      node2.getDouble();
      // Undeclared exception!
      try { 
        node3.checkTreeTypeAwareEqualsImpl(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Node node0 = Node.newString("node is not a child", 0, 0);
      Node node1 = Node.newString("hbE|2bY$!GMb)");
      node0.getIndexOfChild(node1);
      Node node2 = Node.newString(8, "node is not a child", 574, 48);
      Node node3 = new Node(4095, node2, node1);
      Node node4 = new Node(1, node3);
      node4.isQualifiedName();
      node3.isIf();
      Node node5 = new Node((-794), node4, node1, 962, 2);
      node5.toString();
      node3.addChildrenToFront(node2);
      node1.getQualifiedName();
      node4.getDouble();
      node4.getSourceOffset();
      // Undeclared exception!
      try { 
        node5.isFalse();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node1 = Node.newNumber(0.0);
      Node node2 = new Node(3516, node0, node0, 0, 0);
      Node.newString("Object#Element", 32, (-2045));
      node0.addChildrenToBack(node2);
      node2.checkTreeTypeAwareEqualsImpl(node1);
      node2.isCast();
      node0.setLineno(1462);
      Node node3 = new Node(51, node1, 36, 1616);
      node3.isNoSideEffectsCall();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Node node0 = new Node((-3956));
      node0.getSourceOffset();
      node0.isEmpty();
      node0.setType((-3956));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      jSTypeRegistry0.clearTemplateTypeNames();
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Node node3 = Node.newString((-1949), "Object#Element");
      node3.setSourceFileForTesting(".,L) ");
      node0.isDefaultCase();
      node3.setIsSyntheticBlock(true);
      Node node4 = Node.newString(57, "\"n", 8, 115);
      Node node5 = new Node((-3433), node4, 12, 31);
      node5.removeChildren();
      node2.getLength();
      node5.isQualifiedName();
      node2.isString();
      node4.isWhile();
      node3.isBlock();
      Node.newNumber((double) 55);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(98, nodeArray0, 83, 83);
      Node node1 = new Node(1, nodeArray0);
      Node node2 = new Node(8, node0, node1, 30, 46);
      node2.getLastChild();
      node0.isAssign();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags0.setThrows();
      Node.extractLineno(30);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateArguments();
      node0.getDirectives();
      double double0 = 892.24;
      int int0 = 1444;
      String string0 = "Type names cannot contain template annotations.";
      Node.newString((-666), "ois)4C.M:UH)", 57, 12);
      node0.detachFromParent();
      node0.setSourceFileForTesting(string0);
      Node.newNumber(double0, int0, node0.FLAG_LOCAL_RESULTS);
      boolean boolean0 = true;
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.getJsDocBuilderForNode();
      node0.setLength((-675));
      Node node1 = node0.cloneNode();
      node0.checkTreeEquals(node1);
      node0.isCall();
      Node node2 = Node.newString(105, "com.google.common.collect.RegularImmutableSet");
      node2.setSourceFileForTesting("Object#Element");
      node2.isOnlyModifiesThisCall();
      Node node3 = Node.newString(2, "2IFr2l,", 4095, 4095);
      node3.getLength();
      node2.isQualifiedName();
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      nodeArray0[1] = node1;
      Node node4 = new Node(47, nodeArray0);
      node4.isString();
      node1.isWhile();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      jSTypeRegistry0.createFunctionTypeWithVarArgs(jSType0, jSTypeArray0);
      node2.isBlock();
      Node.newNumber((double) 4);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Node node0 = Node.newNumber(1842.60233, 1432, 300);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("", false);
      node0.setStaticSourceFile(simpleSourceFile0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Node node0 = Node.newString("node is not a child", 0, 0);
      Node node1 = new Node(55, node0, node0, node0);
      Node node2 = node1.getLastSibling();
      node0.isEquivalentToShallow(node1);
      node0.setOptionalArg(true);
      node2.getLength();
      node1.getString();
      node2.isNoSideEffectsCall();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(98, nodeArray0, 83, 83);
      node0.isTypeOf();
      Node node1 = new Node(1, nodeArray0);
      Node.newNumber((double) 40, 55, 46);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(12);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node1.setSideEffectFlags(node_SideEffectFlags2);
      node1.isGetElem();
      // Undeclared exception!
      try { 
        node0.setSideEffectFlags(node1.INPUT_ID);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte) (-24);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(3516);
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setThrows();
      Node node0 = Node.newString("ZV>HoSP0H:%0^EwkxU");
      node0.isVoid();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Node node0 = Node.newString("node is not a child", 0, 0);
      Node node1 = Node.newString("hbE|2bY$!GMb)");
      node0.getIndexOfChild(node1);
      Node node2 = Node.newString(8, "node is not a child", 574, 48);
      Node node3 = new Node(4095, node2, node1);
      node1.setIsSyntheticBlock(true);
      Node node4 = Node.newString("\"Dx9F$E#y", 98, 4801);
      node1.addChildrenToBack(node4);
      int int0 = Node.EMPTY_BLOCK;
      node0.isNot();
      node1.isFunction();
      node1.isDelProp();
      node3.removeFirstChild();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Node node0 = Node.newString("", (-1853), 0);
      node0.setLength((-1853));
      Node node1 = new Node(30, node0, node0, 1398, 56);
      Node node2 = node1.getLastSibling();
      node0.isCase();
      node1.checkTreeTypeAwareEqualsImpl(node2);
      node1.isCast();
      node0.setLineno(110);
      node0.isNoSideEffectsCall();
      node0.getJsDocBuilderForNode();
      node1.isBreak();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Node node0 = Node.newString("", (-1853), 0);
      node0.setLength((-1853));
      Node node1 = new Node(30, node0, node0, 1398, 56);
      Node node2 = node1.getLastSibling();
      node0.isCase();
      node1.useSourceInfoIfMissingFromForTree(node0);
      Node.extractCharno((-3813));
      node0.isNot();
      node0.isFunction();
      node2.isDelProp();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node((-2304));
      node0.getSourcePosition();
      Node node1 = Node.newNumber((double) 32, 56, (-2304));
      node1.toString();
      node0.addChildrenToFront(node1);
      node0.isLabel();
      node1.toStringTree();
      node1.copyInformationFrom(node0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      node0.isFalse();
      node0.getJsDocBuilderForNode();
      node0.getLength();
      node0.setIsSyntheticBlock(false);
      node0.setWasEmptyNode(false);
      node0.isNull();
      node0.isContinue();
      Node node1 = Node.newString(36, "^!2=?-f/", 0, 57);
      node1.removeChild(node0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Node node0 = Node.newString("", (-1853), (-1853));
      node0.setLength((-1853));
      Node node1 = new Node(30, node0, node0, 1398, 50);
      Node node2 = node1.getLastSibling();
      node0.isCase();
      node1.checkTreeTypeAwareEqualsImpl(node2);
      node1.isCast();
      node0.setLineno(110);
      node0.isNoSideEffectsCall();
      node0.getJsDocBuilderForNode();
      node0.isSyntheticBlock();
      node0.getNext();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node1 = new Node(3516, node0, node0, 0, 0);
      node1.getProp(12);
      node1.isQualifiedName();
      node0.isIf();
      node0.toString(false, true, false);
      Node.newString((-1853), "Object#Key");
      node0.setSourceFileForTesting("Object#Key");
      node0.isDefaultCase();
      Node.newString(40, "", 30, 42);
      Node node2 = new Node(80, node0, 30, 674);
      node0.getSourceOffset();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Node node0 = Node.newString("", (-1853), 0);
      node0.setLength((-1853));
      Node node1 = new Node(30, node0, node0, 1398, 48);
      Node node2 = node1.getLastSibling();
      node2.isQualifiedName();
      node1.useSourceInfoIfMissingFromForTree(node0);
      Node.extractCharno((-3813));
      node0.isNot();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node2.isDelProp();
      Node node3 = Node.newString("", 565, 39);
      node0.hasChild(node3);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Node node0 = Node.newString((-1561), "", (-1561), (-1561));
      node0.getSourceFileName();
      Node node1 = Node.newNumber((double) 51);
      node1.getAncestors();
      node1.setCharno(0);
      node0.putBooleanProp(52, false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node[] nodeArray0 = new Node[2];
      Node node2 = Node.newString("aXkxh)", 21, 158);
      nodeArray0[0] = node2;
      nodeArray0[1] = node1;
      Node node3 = new Node((-814), nodeArray0);
      node2.isString();
      node1.isWhile();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      JSType[] jSTypeArray0 = new JSType[6];
      jSTypeArray0[0] = jSType0;
      jSTypeArray0[1] = jSType0;
      JSType jSType1 = modificationVisitor0.caseNoType();
      jSTypeArray0[2] = jSType1;
      jSTypeArray0[3] = jSType0;
      jSTypeArray0[4] = jSType0;
      jSTypeArray0[5] = jSType0;
      jSTypeRegistry1.createFunctionTypeWithVarArgs(jSType0, jSTypeArray0);
      node1.isBlock();
      Node.newNumber(1.2);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte) (-24);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(3516);
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setThrows();
      Node node0 = Node.newString("ZV>HoSP0H:%0^EwkxU");
      node0.getInputId();
      node0.setInputId((InputId) null);
      node0.isVoid();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Node node0 = Node.newString("", (-1853), 0);
      Node node1 = new Node((-148), node0, node0, node0);
      Node node2 = node1.getLastSibling();
      node2.isEquivalentToShallow(node1);
      node1.setOptionalArg(true);
      node2.getLength();
      node0.getString();
      node0.isNoSideEffectsCall();
      node1.hasMoreThanOneChild();
      node1.getBooleanProp(38);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Node node0 = Node.newString("node is not a child", 0, 0);
      node0.setLength(39);
      Node node1 = new Node(4095, node0, node0, 2244, 37);
      Node node2 = node0.getLastSibling();
      node0.isCase();
      Node node3 = new Node(Integer.MIN_VALUE, node2, node0);
      node0.useSourceInfoIfMissingFromForTree(node3);
      int int0 = 1250;
      Node.extractCharno(int0);
      node2.isNot();
      // Undeclared exception!
      try { 
        node3.isFunction();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Node node0 = Node.newString("node is not a child", 0, 0);
      Node node1 = Node.newString("hbE|2bY$!GMb)");
      node0.getIndexOfChild(node1);
      Node node2 = Node.newString(8, "node is not a child", 574, 48);
      Node node3 = new Node(4095, node2, node1);
      node1.setIsSyntheticBlock(true);
      Node node4 = Node.newString("\"Dx9F$E#y", 98, 4801);
      Node node5 = node2.cloneNode();
      node1.checkTreeEquals(node5);
      node4.isCall();
      node2.addChildrenAfter(node4, node0);
      node4.isDebugger();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(122);
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.extractCharno(2722);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node0.isFunction();
      node0.isDelProp();
      Node node1 = node0.srcrefTree(node0);
      node1.isDefaultCase();
      node0.getIntProp(2040);
      node0.isSyntheticBlock();
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newNumber(0.0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[4];
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseBooleanType();
      EnumType enumType0 = jSTypeRegistry0.createEnumType("->-", node0, jSType0);
      jSTypeArray0[0] = (JSType) enumType0;
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSTypeRegistry1.canPropertyBeDefined(jSType0, "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets");
      EnumType enumType1 = jSTypeRegistry1.createEnumType("Not declared as a constructor", node0, jSType0);
      jSTypeArray0[1] = (JSType) enumType1;
      enumType1.isInvariant(enumType0);
      ObjectType objectType0 = enumType1.getImplicitPrototype();
      jSTypeArray0[2] = (JSType) objectType0;
      JSType jSType1 = jSTypeRegistry1.createOptionalNullableType(jSTypeArray0[1]);
      jSTypeArray0[3] = jSType1;
      Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node0.addChildBefore(node1, node1);
      node0.isVoid();
      node1.siblings();
      node0.getNext();
      EnumElementType enumElementType0 = enumType0.getElementsType();
      // Undeclared exception!
      try { 
        enumElementType0.getOwnerFunction();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Node node0 = Node.newString("@f");
      node0.addChildrenToBack((Node) null);
      Node node1 = null;
      // Undeclared exception!
      try { 
        node0.getIndexOfChild(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      int int0 = (-71);
      int int1 = 1382;
      Node node0 = Node.newString((-962), (String) null, 1382, (-962));
      node0.getExistingIntProp(int1);
      String string0 = "directives";
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Node node0 = new Node(0, 1398, 1398);
      node0.isEmpty();
      node0.setLineno(56);
      node0.isLocalResultCall();
      Node node1 = node0.cloneNode();
      Node node2 = Node.newString("");
      node2.isIf();
      node2.toString();
      node1.addChildrenToFront(node0);
      Node node3 = node0.getLastSibling();
      Node node4 = Node.newString("HI");
      node2.isEquivalentTo(node4, false, true, true);
      node3.getDirectives();
      node4.isObjectLit();
      node1.addChildToFront(node3);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Node node0 = new Node(124, 124, 124);
      node0.toString(true, false, true);
      Node node1 = Node.newString("EMPTY 124", 53, 124);
      node0.isEquivalentTo(node1);
      node0.isStringKey();
      node0.isDec();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node0.isBlock();
      node0.getChildAtIndex(43);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node((-2304));
      node0.getSourcePosition();
      Node node1 = Node.newNumber((double) 32, 56, (-2304));
      node1.toString();
      node1.getLength();
      node0.addChildrenToFront(node1);
      node0.isLabel();
      node1.toStringTree();
      node1.copyInformationFrom(node0);
      node0.isParamList();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Node node0 = new Node(0, 1398, 1398);
      node0.isEmpty();
      node0.setLineno(56);
      node0.isLocalResultCall();
      Node node1 = node0.cloneNode();
      node1.getInputId();
      node1.getAncestors();
      node1.setLength(0);
      Node node2 = node1.cloneNode();
      node0.checkTreeEquals(node1);
      Node node3 = new Node(42, node2, node0);
      node0.isEquivalentTo(node3, false, false, false);
      Node.extractLineno(1688);
      node2.isEquivalentTo(node1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(153);
      Node node1 = new Node(154, node0, node0, node0, 12, 52);
      Node node2 = new Node(154, node1, node1, node1);
      Node node3 = new Node((-1501), node2);
      node3.getSideEffectFlags();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      node3.detachChildren();
      node3.getLength();
      Node node4 = new Node(56, node1, node2, 52, 1286);
      node0.addChildToFront(node4);
      node2.getDouble();
      node2.isQuotedString();
      node0.getLength();
      // Undeclared exception!
      try { 
        node3.isIf();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Node node0 = Node.newString("node is not a child", 0, 0);
      Node node1 = new Node(57, node0, node0, 55, 2809);
      node1.getLastSibling();
      node1.isCase();
      Node.extractCharno(0);
      node1.isInstanceOf();
      node0.isGetterDef();
      node1.isDebugger();
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Node node0 = new Node(461845907, 461845907, 461845907);
      Node node1 = new Node(57, node0, node0, node0, 40, 57);
      node1.addChildToBack(node0);
      // Undeclared exception!
      try { 
        node0.removeChild(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Node node0 = Node.newString(34, " is not a string node", 34, 34);
      node0.setSourceFileForTesting(" is not a string node");
      node0.isLabelName();
      node0.getProp(34);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      node1.wasEmptyNode();
      node1.setString((String) null);
      node0.isComma();
      node0.getSourceOffset();
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Node node0 = Node.newString(1398, "UirPes_JdR&");
      node0.isOptionalArg();
      node0.getLastSibling();
      node0.isCase();
      Node.extractCharno(2863);
      node0.isInstanceOf();
      node0.isGetterDef();
      node0.isDebugger();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Node node0 = Node.newString("node is not a child", 0, 0);
      Node node1 = new Node(57, node0, node0, 55, 2809);
      node0.putIntProp(1220, 299);
      node1.getQualifiedName();
      node0.getDouble();
      Node.extractLineno(node0.FLAG_ARGUMENTS_UNMODIFIED);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Node node0 = Node.newString(55, "missing prop: ");
      node0.setSourceFileForTesting(" i not a tring node");
      node0.isLabelName();
      node0.getProp(55);
      node0.isCase();
      node0.isInc();
      Node node1 = Node.newNumber((double) 36);
      node1.isNew();
      node1.hasChildren();
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newNumber(0.0);
      Node node1 = Node.newString("hbE|2bY$!GMb)");
      node1.getIndexOfChild(node0);
      Node node2 = Node.newString(56, "", (-2628), 29);
      Node node3 = new Node((-317), node2, node2);
      node0.setIsSyntheticBlock(true);
      Node node4 = Node.newString("\"Dx9F$E#y", 50, 56);
      Node node5 = node4.cloneNode();
      node1.checkTreeEquals(node5);
      node3.isCall();
      node0.addChildrenAfter(node3, node3);
      int int0 = 87;
      Node node6 = new Node(node4.SIDE_EFFECTS_ALL, node2, node0, node3, node4.CHANGE_TIME, int0);
      node6.isDebugger();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int int0 = 148;
      Node node0 = Node.newString("pjqpE", 730, 148);
      node0.setLength(730);
      Node node1 = new Node(204856, node0, node0, 2165, (-372));
      node0.addChildToFront(node1);
      node0.getLength();
      node0.setSourceFileForTesting("slash_v");
      Node node2 = Node.newString("slash_v");
      Node node3 = new Node(1371, node2, node0, node1);
      node3.setDouble(node2.SYNTHETIC_BLOCK_PROP);
      double double0 = 0.0;
      Node node4 = Node.newNumber(double0, int0, node2.FLAG_NO_THROWS);
      node4.isEquivalentToTyped(node1);
      node0.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      int int0 = 1391;
      String string0 = "";
      Node node0 = Node.newString(1391, "", 152, 98);
      node0.getSideEffectFlags();
      Node node1 = new Node(57, node0, node0, node0, node0, 37, 2);
      node1.isOr();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.isFalse();
      node0.getJsDocBuilderForNode();
      node0.setLength(39);
      Node node3 = node0.cloneNode();
      node1.addSuppression("slash_v");
      node0.checkTreeEquals(node3);
      node1.isCall();
      Node node4 = Node.newString(52, "slash_v");
      node4.setSourceFileForTesting("slash_v");
      node4.isDefaultCase();
      node2.useSourceInfoIfMissingFrom(node0);
      Node node5 = node4.getChildBefore(node0);
      node5.isOr();
      Node node6 = Node.newString(node4.SLASH_V, string0, node3.OPT_ARG_NAME, int0);
      // Undeclared exception!
      try { 
        node6.getLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      node0.isCatch();
      node0.isUnscopedQualifiedName();
      Node node1 = Node.newNumber((double) 53);
      Node node2 = new Node(122, node1, node1, 0, 51);
      node2.isQualifiedName();
      node1.isIf();
      node0.toString();
      node0.addChildrenToFront(node1);
      // Undeclared exception!
      try { 
        node1.getLastSibling();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Node node0 = new Node(0, 0, 700);
      Node node1 = new Node(0, node0);
      node1.setIsSyntheticBlock(false);
      Node node2 = Node.newString((-1220), "");
      node1.isOr();
      node1.useSourceInfoFromForTree(node0);
      node2.isCase();
      Node.extractCharno(4095);
      node1.isInstanceOf();
      node1.isGetterDef();
      node1.isDebugger();
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Node node0 = new Node(152, 1391, 152);
      Node node1 = new Node(1, node0, node0, node0);
      node1.isOr();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.isFalse();
      node0.getJsDocBuilderForNode();
      node0.setLength(39);
      Node node3 = node0.cloneNode();
      node2.getProp((-3694));
      Node.newString(53, ";:J?%~8z=m", 57, 2023);
      Node node4 = new Node(124);
      Node node5 = node4.copyInformationFromForTree(node3);
      node5.setSourceEncodedPosition(2);
      node4.isComma();
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Node node0 = new Node(152, 1391, 152);
      Node node1 = new Node(1, node0, node0, node0);
      node1.isOr();
      node1.useSourceInfoFromForTree(node0);
      node0.isTrue();
      node0.getJsDocBuilderForNode();
      node0.setLength(39);
      Node node2 = node0.cloneNode();
      node0.checkTreeEquals(node2);
      node0.isCall();
      Node node3 = Node.newString(52, "");
      node3.setSourceFileForTesting("");
      node0.isOnlyModifiesThisCall();
      Node node4 = Node.newString(54, "", 37, 1391);
      node4.isInstanceOf();
      node2.isGetterDef();
      Node node5 = Node.newString("");
      node5.isDebugger();
      node3.isExprResult();
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(98, nodeArray0, 83, 83);
      node0.isCatch();
      Node node1 = node0.cloneNode();
      Node node2 = Node.newString("', '");
      node1.isIf();
      node0.toString();
      node0.addChildrenToFront(node2);
      Node node3 = node2.getLastSibling();
      Node node4 = new Node(4, node0, 2, 38);
      node4.isEquivalentTo(node3, false, true, true);
      node0.getDirectives();
      node2.isObjectLit();
      node1.addChildToFront(node2);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(104, nodeArray0, 83, 83);
      Node node1 = new Node(1, nodeArray0);
      Node node2 = new Node(8, node0, node1, 30, 46);
      node2.getLastChild();
      node0.isAssign();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags4.clearSideEffectFlags();
      Node.extractLineno(130);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(98, nodeArray0, 83, 83);
      Node node1 = new Node(32, node0, node0, node0);
      node1.isOr();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node0.isFalse();
      node1.getJsDocBuilderForNode();
      node2.setLength(1);
      Node node3 = node0.cloneNode();
      node2.checkTreeEquals(node1);
      node2.isCall();
      Node.newString(2325, (String) null);
      String string0 = "c\\iq''PLA?@&fn[";
      node0.setSourceFileForTesting(string0);
      // Undeclared exception!
      try { 
        node3.isDefaultCase();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      int int0 = Node.JSDOC_INFO_PROP;
      Node node0 = Node.newString(29, "hbE|2bY$!GMb)");
      node0.getLineno();
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node1 = Node.newNumber(0.0);
      Node node2 = new Node(3516, node0, node0, 0, 0);
      node2.isParamList();
      node0.isIf();
      node1.toString();
      node1.addChildrenToFront(node2);
      Node node3 = node0.getLastSibling();
      node3.isEquivalentTo(node0, false, true, true);
      node2.getDirectives();
      node2.isObjectLit();
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(121);
      node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags0.setMutatesThis();
      Node node0 = Node.newString("jsdoc_info");
      node0.getProp(39);
      node0.putProp(39, node_SideEffectFlags0);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = node0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node1 = new Node(30, nodeArray0, 39, (-2978));
      node0.getProp(55);
      node1.isComma();
      node1.isVarArgs();
      node0.isHook();
      node0.isName();
      node0.isAdd();
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Node node0 = new Node(0, 1398, 1398);
      node0.isEmpty();
      node0.setLineno(56);
      node0.isLocalResultCall();
      Node node1 = node0.cloneNode();
      Node node2 = Node.newString("");
      node2.isIf();
      node2.toString();
      node1.addChildrenToFront(node0);
      Node node3 = node0.getLastSibling();
      node2.checkTreeEqualsImpl(node1);
      Node node4 = Node.newString("HI");
      node2.isEquivalentTo(node4, false, true, true);
      node3.getDirectives();
      node4.isObjectLit();
      node1.isParamList();
      node1.addChildToFront(node3);
      node4.isNot();
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Node node0 = Node.newString(1391, "The new child node already has a parent.", (-281), (-281));
      node0.isEmpty();
      node0.isGetProp();
      Node node1 = Node.newNumber((double) 1391);
      node1.getInputId();
      node1.getAncestors();
      node0.isSwitch();
      node0.isCase();
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Node node0 = Node.newString(42, "", 51, (-580));
      Node node1 = Node.newNumber(0.0);
      Node node2 = new Node(1570, node0, node1, node1, node0, 29, 56);
      node0.setOptionalArg(true);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      JSType[] jSTypeArray0 = new JSType[4];
      JSType jSType0 = node2.getJSType();
      jSTypeArray0[0] = null;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, jSTypeArray0);
      TemplatizedType templatizedType0 = jSTypeRegistry0.createTemplatizedType((ObjectType) functionType0, jSTypeArray0);
      jSTypeArray0[1] = (JSType) templatizedType0;
      EnumType enumType0 = jSTypeRegistry0.createEnumType(functionType0.EMPTY_TYPE_COMPONENT, node1, jSType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      FunctionType functionType1 = enumType1.getConstructor();
      jSTypeArray0[2] = (JSType) functionType1;
      Node node3 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      node1.addChildrenToFront(node3);
      // Undeclared exception!
      try { 
        node2.isQualifiedName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Node node0 = Node.newNumber((-3244.094885895745));
      node0.isEquivalentToShallow(node0);
      node0.children();
      boolean boolean0 = true;
      Node node1 = new Node(46, node0, node0, 15, 12);
      Node node2 = new Node(36, node0, node0, node1);
      boolean boolean1 = false;
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Node node0 = Node.newString("ARi", 147, 1304);
      Node node1 = new Node(1304, node0, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node1.setSourceEncodedPositionForTree(0);
      simpleErrorReporter0.error("ARi", ",HouYoNY.|", 56, (-474));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node2 = jSTypeRegistry0.createParameters((JSType[]) null);
      int int0 = 33;
      node2.setType(int0);
      node1.addChildToFront(node2);
      Node node3 = node1.useSourceInfoIfMissingFromForTree(node2);
      node0.isOr();
      node3.replaceChildAfter(node0, node2);
      node2.removeProp(node3.FLAG_NO_THROWS);
      // Undeclared exception!
      try { 
        node2.addChildrenAfter(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node1 = null;
      // Undeclared exception!
      try { 
        node0.isEquivalentToShallow((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Node node0 = Node.newString("node is not a child", 0, 0);
      Node node1 = new Node(57, node0, node0, 55, 2809);
      Node node2 = node1.getLastSibling();
      node1.isCase();
      node1.setSourceFileForTesting("$uc~5?");
      node2.isDefaultCase();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(9);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.clearSideEffectFlags();
      node1.getChangeTime();
      node2.isReturn();
      node0.isTry();
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Node node0 = Node.newString("node is not a child", 0, 0);
      node0.getIndexOfChild(node0);
      Node node1 = Node.newString("hbE|2bY$!GMb)");
      node0.isIf();
      node0.toString();
      node0.addChildrenToFront(node1);
      Node node2 = node1.getLastSibling();
      node2.checkTreeEqualsImpl(node1);
      Node node3 = Node.newString((String) null);
      boolean boolean0 = true;
      boolean boolean1 = false;
      boolean boolean2 = false;
      // Undeclared exception!
      try { 
        node2.isEquivalentTo(node3, boolean0, boolean1, boolean2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      Node node1 = new Node(0, node0);
      node1.setIsSyntheticBlock(false);
      Node.newString((-1220), "");
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.isFalse();
      node2.getJsDocBuilderForNode();
      node1.setLength(4095);
      node1.cloneNode();
      node2.checkTreeEquals(node1);
      node1.isCall();
      node2.addChildrenAfter(node1, node0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(98, nodeArray0, 83, 83);
      Node node1 = new Node(29, 50, 0);
      Node node2 = new Node(8, node0, node1, 30, 46);
      node2.getLastChild();
      node0.isAssign();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags3.clearSideEffectFlags();
      node1.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Node node0 = Node.newString(1398, "The new child node already has a parent.", 1, 1);
      node0.isEmpty();
      node0.isLocalResultCall();
      node0.getInputId();
      Node node1 = new Node(47, node0, node0, 113, 102);
      node0.addChildrenToFront(node1);
      node0.isQualifiedName();
      node1.isString();
      node0.isWhile();
      node0.isBlock();
      node0.removeChildAfter(node1);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Node node0 = new Node(0, 1398, 1398);
      node0.isEmpty();
      node0.setLineno(56);
      node0.isLocalResultCall();
      Node node1 = node0.cloneNode();
      Node node2 = Node.newString("");
      node2.isIf();
      node2.toString();
      node2.setString("");
      node1.addChildrenToFront(node0);
      node0.getLastSibling();
      Node node3 = Node.newString("HI");
      Node node4 = Node.newNumber((double) 57, 57, 54);
      node4.setCharno(4);
      node0.isEquivalentToTyped(node3);
      node0.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(98, nodeArray0, 83, 83);
      boolean boolean0 = node0.isTypeOf();
      Node node1 = new Node(130, nodeArray0);
      Node node2 = Node.newString("hbE|2bY$!GMb)");
      node0.getIndexOfChild(node2);
      Node node3 = Node.newString(886, "com.google.javascript.rhino.Node$NodeMismatch", 46, 55);
      Node node4 = new Node(54, node1, node1, node2);
      Node node5 = new Node(55, node0, node4);
      node3.addChildrenToBack(node1);
      double double0 = 2152.756;
      Node.newNumber(double0, node2.OPT_ARG_NAME, node5.DIRECTIVES);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, boolean0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Node node0 = Node.newString((-4316), "");
      int int0 = Node.IS_DISPATCHER;
      Node node1 = Node.newString(1, "", 0, 274);
      Node node2 = new Node(4, node0, node1);
      node1.setIsSyntheticBlock(true);
      Node node3 = node2.cloneNode();
      node0.isEquivalentTo(node2, false, true, false);
      node1.getDirectives();
      node2.isParamList();
      node3.addChildToFront(node2);
      node0.isNot();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.getJsDocBuilderForNode();
      node0.setLength((-675));
      Node node1 = node0.cloneNode();
      node0.checkTreeEquals(node1);
      node0.isCall();
      Node node2 = Node.newString(36, "com.google.common.collect.RegularImmutableSet", 30, 30);
      node2.setSourceFileForTesting("Object#Element");
      node2.isOnlyModifiesThisCall();
      Node node3 = Node.newString(2, "2IFr2l,", 4095, 4095);
      node3.getLength();
      node2.isQualifiedName();
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      nodeArray0[1] = node1;
      Node node4 = new Node(47, nodeArray0);
      node4.isString();
      node1.isWhile();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      jSTypeRegistry0.createFunctionTypeWithVarArgs(jSType0, jSTypeArray0);
      node1.isSwitch();
      Node.newNumber((double) 4);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Node node0 = new Node(0, 1398, 1398);
      node0.isEmpty();
      node0.setLineno(56);
      node0.isLocalResultCall();
      Node node1 = node0.cloneNode();
      Node node2 = Node.newString("");
      node2.isIf();
      node2.toString();
      node1.addChildrenToFront(node0);
      Node node3 = node0.getLastSibling();
      node1.isInc();
      node2.isRegExp();
      node2.isSwitch();
      node3.isCase();
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Node node0 = Node.newString("", (-1853), 0);
      node0.setLength((-1853));
      Node node1 = new Node(0, node0, node0, 51, (-2528));
      node0.siblings();
      node0.addChildToFront(node1);
      node0.getLength();
      node0.isComma();
      node0.isVarArgs();
      node1.isHook();
      node1.isName();
      node1.isAdd();
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(98, nodeArray0, 83, 83);
      Node node1 = new Node(32, node0, node0, node0);
      node1.isOr();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node0.isFalse();
      node1.getJsDocBuilderForNode();
      node2.setLength(1);
      Node node3 = node0.cloneNode();
      node2.checkTreeEquals(node1);
      node2.isDelProp();
      node3.srcrefTree(node0);
      node2.isDefaultCase();
      node0.getIntProp(15);
      node0.isSyntheticBlock();
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.getJsDocBuilderForNode();
      node0.setLength((-675));
      Node node1 = node0.cloneNode();
      node0.checkTreeEquals(node1);
      node0.isCall();
      Node node2 = Node.newString(105, "com.google.common.collect.RegularImmutableSet");
      node2.setSourceFileForTesting("Object#Element");
      node2.isOnlyModifiesThisCall();
      Node node3 = Node.newString(2, "2IFr2l,", 4095, 4095);
      node3.getLength();
      Node node4 = node0.getLastSibling();
      node2.useSourceInfoIfMissingFrom(node4);
      Node node5 = Node.newString("Object#Key");
      node0.isQualifiedName();
      node5.isEquivalentTo(node0, true, true, true);
      node3.getDirectives();
      node1.isObjectLit();
      node3.addChildToFront(node2);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Node node0 = Node.newString("", (-1853), 0);
      node0.children();
      Node node1 = new Node(54, node0, node0, (-1853), 47);
      Node node2 = new Node(62, node1, node1, node0);
      boolean boolean0 = false;
      boolean boolean1 = false;
      boolean boolean2 = false;
      // Undeclared exception!
      try { 
        node0.isEquivalentTo(node2, boolean1, boolean2, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Node.extractCharno(2682);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node0.isFunction();
      node0.isDelProp();
      node0.isDefaultCase();
      Node node1 = Node.newString(100, "Object#Key", 36, 851);
      node1.hasMoreThanOneChild();
      node0.getBooleanProp(47);
      node0.isVar();
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      node0.isUnscopedQualifiedName();
      Node node1 = Node.newNumber((double) 39, 1993, Integer.MAX_VALUE);
      node0.isGetElem();
      node1.setSideEffectFlags(56);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Node node0 = Node.newString((-199), "", (-1561), 948);
      node0.getSourceFileName();
      Node node1 = Node.newNumber((double) 55);
      node1.getAncestors();
      node1.setCharno(39);
      node0.putBooleanProp(57, true);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      node0.getDirectives();
      EnumType enumType0 = jSTypeRegistry1.createEnumType("Object#Key", node1, jSType0);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      enumElementType0.getPropertyNode("ASSIGN_ADD");
      Node node2 = new Node(30, (Node) null, (Node) null, (-2982), (-1315));
      node2.isString();
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Node node0 = Node.newString("node is not a child", 0, 0);
      Node node1 = new Node(57, node0, node0, 55, 2809);
      node1.useSourceInfoIfMissingFromForTree(node0);
      node1.getIntProp(43);
      node1.getQualifiedName();
      node0.getDouble();
      Node.extractLineno(node0.FLAG_ARGUMENTS_UNMODIFIED);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(122);
      node_SideEffectFlags0.setMutatesGlobalState();
      int int0 = Node.CHANGE_TIME;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node0.isNot();
      node0.isFunction();
      node0.isDelProp();
      Node node1 = new Node(15, node0, node0, node0, 37, 46);
      Node node2 = node1.srcrefTree(node0);
      node2.isDefaultCase();
      Node.extractLineno(39);
      node2.isNew();
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Node node0 = Node.newString("", (-1853), 0);
      node0.setLength((-1853));
      node0.setLength(111);
      Node node1 = new Node(12, node0, node0, 4095, 56);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node1.getLength();
      Node node2 = Node.newString("18-C!~=A");
      node2.isCall();
      Node.newString(32, "18-C!~=A");
      node1.removeChild(node0);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("Object#Key");
      node2.getBooleanProp((-4198));
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Node node0 = Node.newString("node is not a child", 0, 0);
      Node node1 = new Node(57, node0, node0, 55, 2809);
      Node node2 = node1.getLastSibling();
      node1.isCase();
      node0.setIsSyntheticBlock(true);
      Node node3 = Node.newString("$uc~5?", 32, 2313);
      node1.addChildrenToBack(node2);
      int int0 = Node.EMPTY_BLOCK;
      node0.isStringKey();
      node3.isFunction();
      node1.isDelProp();
      node0.removeFirstChild();
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(98, nodeArray0, 83, 83);
      node0.isTypeOf();
      Node node1 = new Node(1, nodeArray0);
      Node node2 = Node.newString("hbE|2bY$!GMb)");
      node0.getIndexOfChild(node2);
      Node node3 = Node.newString(55, "hbE|2bY$!GMb)", (-225), (-3840));
      Node node4 = new Node(38, node2, node0);
      node3.addChildrenToBack(node4);
      Node node5 = node4.copyInformationFromForTree(node3);
      node3.setSourceEncodedPosition(2);
      node5.isComma();
      node4.getSourceOffset();
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = Node.newNumber(0.0);
      node0.toString();
      node0.getQualifiedName();
      node0.getDouble();
      node0.isFunction();
      node0.setDouble(0.0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(98, nodeArray0, 83, 83);
      node0.isCatch();
      Node node1 = node0.cloneNode();
      Node.newString("', '");
      node1.isIf();
      node0.toString();
      node0.putIntProp(50, (-180));
      node1.getQualifiedName();
      node0.getDouble();
      int int0 = 37;
      Node.extractLineno(int0);
      node0.isNew();
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(98, nodeArray0, 83, 83);
      node0.isCatch();
      Node node1 = node0.cloneNode();
      Node node2 = Node.newString("', '");
      node1.isIf();
      node0.toString();
      node0.addChildrenToFront(node2);
      node1.getIndexOfChild(node2);
      Object object0 = new Object();
      node1.isCase();
      node2.isInc();
      Node node3 = Node.newNumber((double) 12);
      Node.newString("2T{.<M[W", 38, (-1391));
      node0.isDebugger();
      node3.isExprResult();
      node3.isTrue();
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Node node0 = Node.newNumber((-3244.094885895745));
      Node node1 = Node.newString("QkfT_D0", 12, 55);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node2 = node0.setJSDocInfo(jSDocInfo0);
      node0.getSideEffectFlags();
      node0.getSideEffectFlags();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node1.setOptionalArg(true);
      node0.toStringTree();
      node0.isCatch();
      node0.isCase();
      Node node3 = node1.copyInformationFrom(node0);
      node3.isEquivalentToTyped(node1);
      node0.addSuppression("QkfT_D0");
      node1.isContinue();
      Node.newString("QkfT_D0");
      Node.newNumber(0.0, 57, 46);
      Node.newString(207, "", 2860, 663);
      node3.isLabel();
      node1.checkTreeTypeAwareEqualsImpl(node2);
      node2.setSideEffectFlags((-4944));
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(117);
      Node node1 = new Node((-1849), node0, node0);
      node1.setSourceEncodedPositionForTree(305);
      node1.setLineno((-1849));
      Node node2 = new Node((-173), node1, node1, 36, (-1986));
      Node.newNumber(158.317802826, (-418), 43);
      Node node3 = node2.useSourceInfoFromForTree(node1);
      HashSet<String> hashSet0 = new HashSet<String>();
      node3.setDirectives(hashSet0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(121, nodeArray0, 83, 83);
      Node node1 = new Node(32, node0, node0, node0);
      node1.isLabelName();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node0.isFalse();
      node1.getJsDocBuilderForNode();
      node2.setLength(1);
      Node node3 = new Node(48, node2, node1, node2, node2);
      node2.checkTreeEquals(node1);
      node1.hasOneChild();
      node3.srcrefTree(node0);
      node2.isDefaultCase();
      node0.getIntProp(15);
      node0.isSyntheticBlock();
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Node node0 = Node.newString(83, "5onGOH$ac>%Ag");
      node0.getJsDocBuilderForNode();
      node0.getLength();
      node0.setIsSyntheticBlock(true);
      node0.removeProp(50);
      node0.setSourceEncodedPosition(0);
      node0.mayMutateGlobalStateOrThrow();
      Node node1 = new Node(1005, node0, node0, node0);
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node1.srcrefTree(node0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((JSType[]) null);
      node2.mayMutateArguments();
      int int0 = Node.JSDOC_INFO_PROP;
      node0.isNot();
      node1.isGetterDef();
      node1.isDebugger();
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = "The new child node already has a parent.";
      Node node0 = new Node(0, 0, 0);
      node0.isCatch();
      node0.isUnscopedQualifiedName();
      Node node1 = Node.newString("The new child node already has a parent.", 42, (-2140));
      node0.getLength();
      Node node2 = node0.cloneNode();
      node2.getAncestor(29);
      node2.getInputId();
      node2.copyInformationFrom(node1);
      node2.getAncestors();
      Node.extractCharno(2);
      node1.isIn();
      node2.getChildBefore(node0);
      Node.newString(string0);
      node2.getString();
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Node node0 = Node.newNumber((-3244.094885895745));
      node0.isName();
      node0.children();
      Node node1 = new Node(40, node0);
      node0.toStringTree();
      node0.isArrayLit();
      node0.setDouble(852.799058629493);
      Node node2 = Node.newNumber(1359.1573884, 3272, 43);
      node2.isEquivalentToTyped(node0);
      int int0 = 12;
      Node node3 = new Node(2983, node1, node2, (-603), 55);
      Node node4 = new Node(0, node3, node0, node2, node3);
      Node node5 = new Node(int0, node0, node3, node4);
      node5.isVarArgs();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Node node0 = Node.newString("node is not a child", 0, 0);
      Node node1 = new Node(57, node0, node0, 55, 2809);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node1.mayMutateGlobalStateOrThrow();
      node1.getLastSibling();
      node1.isInstanceOf();
      node0.isGetterDef();
      node1.isDebugger();
      node1.isThrow();
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Node node0 = Node.newString("$uc~5?");
      node0.isQuotedString();
      node0.getJSType();
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(160);
      Node node0 = Node.newString(122, "\"Dx9F$E#y", 115, (-360));
      node0.isDebugger();
      node0.isSetterDef();
      node0.getLength();
      Node node1 = Node.newString(0, "\"Dx9F$E#y", 53, 4095);
      node1.getString();
      node1.isNoSideEffectsCall();
      Node node2 = new Node(39);
      node2.hasMoreThanOneChild();
      Node node3 = new Node(49, node1, node2, node0, 1, 31);
      node3.getBooleanProp(112);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      boolean boolean0 = true;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry1.createParameters(jSTypeArray0);
      Node node1 = Node.newNumber((double) 50);
      Node node2 = new Node(1024, node0, node0, 53, 57);
      node1.isNoSideEffectsCall();
      node0.isParamList();
      node1.isIf();
      node2.toString();
      node2.addChildrenToFront(node1);
      // Undeclared exception!
      try { 
        node1.getLastSibling();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1024
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Node node0 = Node.newNumber((-3244.094885895745));
      Node node1 = Node.newString("QkfT_D0", 12, 55);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node2 = node0.setJSDocInfo(jSDocInfo0);
      node0.getSideEffectFlags();
      node0.getSideEffectFlags();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node1.setOptionalArg(true);
      node0.toStringTree();
      node0.isCatch();
      node0.isCase();
      Node node3 = node1.copyInformationFrom(node0);
      Node node4 = new Node(12, node2, node3, 38, 16);
      node3.isEquivalentToShallow(node2);
      node1.setOptionalArg(false);
      node4.addChildBefore(node1, node0);
      node1.getLength();
      node2.getString();
      node2.isNoSideEffectsCall();
      // Undeclared exception!
      try { 
        node0.setSourceEncodedPositionForTree(node4.ORIGINALNAME_PROP);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-554));
      Node node0 = Node.newString(77, "jCw1gS`:", 123, 2860);
      node0.isDebugger();
      node0.isFalse();
      node0.getJsDocBuilderForNode();
      node0.setLength(123);
      Node node1 = Node.newNumber((double) 43);
      Node node2 = node1.cloneNode();
      node1.checkTreeEquals(node2);
      node0.isDelProp();
      node1.srcrefTree(node2);
      node2.isDefaultCase();
      Node node3 = new Node(4095);
      node2.getIntProp(4);
      node0.isSyntheticBlock();
      node1.isGetElem();
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(121, nodeArray0, 83, 83);
      Node node1 = new Node(32, node0, node0, node0);
      node1.isLabelName();
      Node node2 = new Node(57, node0);
      node0.isFalse();
      // Undeclared exception!
      try { 
        node1.getJsDocBuilderForNode();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Node node0 = Node.newString("we_gdPwQ", 0, (-1853));
      Node node1 = new Node(29, node0, node0, node0);
      Node node2 = node1.getLastSibling();
      node2.isEquivalentToShallow(node1);
      node1.setOptionalArg(true);
      node1.getLength();
      node1.getString();
      node2.isNoSideEffectsCall();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Node node0 = Node.newNumber((-3244.094885895745));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node0.hasMoreThanOneChild();
      node0.isVar();
      node0.isLocalResultCall();
      node0.isNE();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      int int0 = 93;
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(93, nodeArray0, 83, 83);
      node0.isCatch();
      Node node1 = node0.cloneNode();
      node1.isIf();
      node0.toString();
      node1.getQualifiedName();
      node0.getDouble();
      int int1 = 125;
      // Undeclared exception!
      try { 
        node0.putIntProp(int0, int1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ASSIGN_ADD 83 is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Node node0 = Node.newString("Z*", 1307, 5760);
      node0.toString();
      node0.getLineno();
      node0.setIsSyntheticBlock(false);
      Node node1 = Node.newString(42, "VoB#6fjU4D", 31, 76);
      Node node2 = node0.copyInformationFromForTree(node1);
      node1.isGetElem();
      node0.isGetterDef();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node1.useSourceInfoFrom(node3);
      node0.mayMutateGlobalStateOrThrow();
      node0.getBooleanProp(40);
      node0.getSourceOffset();
      Node node4 = node2.useSourceInfoIfMissingFromForTree(node1);
      node4.isFor();
      node2.toStringTree();
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Node node0 = Node.newString(147, "D|iEm=zm/GH");
      node0.getDirectives();
      node0.isOr();
      node0.isAssignAdd();
      node0.isCase();
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Node node0 = Node.newNumber((-3244.094885895745));
      node0.isName();
      node0.children();
      Node node1 = new Node(40, node0);
      node0.toStringTree();
      node0.isArrayLit();
      Node node2 = node0.detachFromParent();
      node2.setJSDocInfo((JSDocInfo) null);
      node0.setDouble(852.799058629493);
      Node node3 = Node.newNumber(1359.1573884, 3272, 43);
      node3.isEquivalentToTyped(node0);
      Node node4 = Node.newString("NUMBER -3244.094885895745\n", 12, 33);
      node4.isDebugger();
      node3.isExprResult();
      node1.isTrue();
      node4.removeChild(node3);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Node node0 = Node.newString("", (-1853), (-1853));
      node0.setLength((-1853));
      Node node1 = new Node(30, node0, node0, 1398, 50);
      node1.setLength(57);
      Node node2 = node1.cloneNode();
      node2.checkTreeEquals(node1);
      Node node3 = Node.newString(40, "");
      node3.setSourceFileForTesting("F3tF");
      node0.isOnlyModifiesThisCall();
      Node.newString(1143, "Node tree inequality:\nTree1:\nNEW 1398 [length: com.google.javascript.rhino.Node$IntPropListItem@0000000004]\n\n\nTree2:\nNEW 1398 [length: com.google.javascript.rhino.Node$IntPropListItem@0000000004]\n    STRING  [length: com.google.javascript.rhino.Node$IntPropListItem@0000000002]\n\n\nSubtree1: NEW 1398 [length: com.google.javascript.rhino.Node$IntPropListItem@0000000004]\n\n\nSubtree2: NEW 1398 [length: com.google.javascript.rhino.Node$IntPropListItem@0000000004]\n    STRING  [length: com.google.javascript.rhino.Node$IntPropListItem@0000000002]\n", 4, 2143250971);
      node1.isInstanceOf();
      node1.isGetterDef();
      Node.newString("zJDeti@");
      node0.isDebugger();
      node3.isExprResult();
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.getJsDocBuilderForNode();
      node0.setLength((-675));
      Node node1 = node0.cloneNode();
      node0.checkTreeEquals(node1);
      node0.isCall();
      Node node2 = Node.newString(36, "com.google.common.collect.RegularImmutableSet", 30, 30);
      Node node3 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node3.copyInformationFromForTree(node1);
      node2.isGetElem();
      node1.isGetterDef();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node4 = jSTypeRegistry1.createParametersWithVarArgs((List<JSType>) stack0);
      node1.useSourceInfoFrom(node4);
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter1);
      TemplateType templateType0 = null;
      TemplateType templateType1 = null;
      ImmutableList.of((TemplateType) null, (TemplateType) null, (TemplateType) null, (TemplateType) null, (TemplateType) null, (TemplateType) null);
      JSType jSType0 = null;
      FunctionType functionType0 = JSType.toMaybeFunctionType(jSType0);
      // Undeclared exception!
      try { 
        JSType.toMaybeTemplateType((JSType) functionType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.getJsDocBuilderForNode();
      node0.setLength((-675));
      Node node1 = node0.cloneNode();
      node0.checkTreeEquals(node1);
      node0.isCall();
      Node node2 = Node.newString(36, "com.google.common.collect.RegularImmutableSet", 30, 30);
      node2.setSourceFileForTesting("Object#Element");
      node2.isOnlyModifiesThisCall();
      Node node3 = Node.newString(2, "2IFr2l,", 4095, 4095);
      node3.getLength();
      node2.isQualifiedName();
      node0.isInstanceOf();
      node0.isGetterDef();
      node0.isDebugger();
      node3.isThrow();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Node node0 = Node.newString("", (-1853), 0);
      node0.setLength((-1853));
      Node node1 = new Node(30, node0, node0, 1398, 56);
      Node node2 = node1.getLastSibling();
      node0.isCase();
      node2.srcrefTree(node1);
      node2.isDefaultCase();
      Node node3 = new Node(15);
      Node node4 = new Node(47);
      node4.getIntProp(1493);
      node1.isSyntheticBlock();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Node node0 = new Node(2860);
      Node node1 = new Node(3747, 31, 4095);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      node1.useSourceInfoFromForTree(node0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Node node2 = new Node(46, node1, node0, node0, 123, 39);
      node2.setOptionalArg(false);
      node0.addChildAfter(node1, node2);
      node0.setDouble(node1.SYNTHETIC_BLOCK_PROP);
      Node node3 = node1.cloneNode();
      node3.wasEmptyNode();
      node1.isQuotedString();
      Node node4 = node0.cloneTree();
      node4.isQualifiedName();
      node3.isQualifiedName();
      node3.isFor();
      // Undeclared exception!
      try { 
        node0.getSideEffectFlags();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node has siblings.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Node.mergeLineCharNo(111, 64);
      Node node0 = Node.newString("com.google.common.base.Predicates$InstanceOfPredicate", 123, 123);
      node0.setWasEmptyNode(false);
      Node.newString("com.google.common.base.Predicates$InstanceOfPredicate");
      Node node1 = new Node(114, node0, 114, 2885);
      node1.isEquivalentTo(node0);
      node1.isScript();
      node0.isNew();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.clearSideEffectFlags();
      node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags3.clearAllFlags();
      node0.setSideEffectFlags(node_SideEffectFlags3);
      node1.getLastChild();
      node1.getType();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Node node0 = Node.newNumber((-3244.094885895745));
      Node node1 = Node.newString("QkfT_D0", 12, 55);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node2 = node0.setJSDocInfo(jSDocInfo0);
      node0.getSideEffectFlags();
      node0.getSideEffectFlags();
      FileSystemHandling.shouldAllThrowIOExceptions();
      node1.setOptionalArg(true);
      node0.toStringTree();
      node1.setJSDocInfo(jSDocInfo0);
      node0.isFalse();
      node0.isCase();
      Node node3 = node1.copyInformationFrom(node0);
      Node node4 = new Node(12, node2, node3, 38, 16);
      node3.isEquivalentToShallow(node2);
      node1.setOptionalArg(false);
      node4.addChildBefore(node1, node0);
      node1.getLength();
      node2.getString();
      node2.isNoSideEffectsCall();
      // Undeclared exception!
      try { 
        node0.setSourceEncodedPositionForTree(node4.ORIGINALNAME_PROP);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.Lists$StringAsImmutableList");
      node0.setIsSyntheticBlock(true);
      node0.isIf();
      node0.toString();
      Node node1 = node0.getLastSibling();
      node0.isInc();
      node1.isRegExp();
      node1.isFromExterns();
      node0.isSwitch();
      node1.isCase();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(98, nodeArray0, 83, 83);
      Node node1 = new Node(32, node0, node0, node0);
      node1.isOr();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node1.isFalse();
      node2.getJsDocBuilderForNode();
      node0.setLength(43);
      Node node3 = node2.cloneNode();
      node1.checkTreeEquals(node0);
      node0.isDelProp();
      Node node4 = node1.srcrefTree(node0);
      node4.isDefaultCase();
      node4.getIntProp(1949);
      node3.isSyntheticBlock();
      node4.isNot();
      node1.isDelProp();
      node4.clonePropsFrom(node1);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(3516);
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node node0 = Node.newString(3516, "=zBuk) e_uRy|$dk}B", 1326, 3816);
      node0.isStringKey();
      node0.isDec();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      node0.isBlock();
      node0.isBlock();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.getExistingIntProp((-564));
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Node node0 = Node.newString("\"Dxl9F$E#y", 1293, (-1853));
      node0.setLength((-1853));
      node0.setLength(1293);
      Node node1 = new Node(110, node0, node0, 51, 108);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node0.getLength();
      Node node2 = Node.newString("\"Dxl9F$E#y");
      node2.isCall();
      Node.newString((-2101), "Object#Key");
      node1.removeChild(node2);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Node.mergeLineCharNo(111, 64);
      Node node0 = Node.newString("com.google.common.base.Predicates$InstanceOfPredicate", 123, 123);
      node0.setWasEmptyNode(false);
      Node node1 = Node.newString("com.google.common.base.Predicates$InstanceOfPredicate");
      Node node2 = new Node(114, node0, 114, 2885);
      node2.isEquivalentTo(node0);
      node2.isScript();
      node0.isNew();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node0.getInputId();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node1);
      Node.extractCharno(43);
      node0.isIn();
      node2.getChildBefore(node0);
      node2.getString();
      node1.getType();
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Node node0 = Node.newString("node is not a child", 0, 0);
      Node node1 = new Node(57, node0, node0, 55, 2809);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node1.mayMutateGlobalStateOrThrow();
      Node node2 = node1.getLastSibling();
      node1.isInstanceOf();
      node2.isEquivalentTo(node1, false, true, false);
      node2.isBreak();
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(3516);
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node node0 = Node.newString(149, "=zBuk) e_uRy|$dk}B", 1326, 3816);
      Node node1 = Node.newString("(t5m*rf[ez<&_", 1980, 113);
      node1.addChildrenToFront(node0);
      node0.isQualifiedName();
      node1.isString();
      node0.isOnlyModifiesThisCall();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      JSType[] jSTypeArray0 = new JSType[0];
      node1.isQualifiedName();
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node2.isBlock();
      node1.isNew();
      node1.isAnd();
      node0.getIndexOfChild(node1);
      node0.useSourceInfoFrom(node1);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(121, nodeArray0, 83, 83);
      Node node1 = new Node(32, node0, node0, node0);
      node1.isLabelName();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node0.isFalse();
      node1.getJsDocBuilderForNode();
      node2.setLength(1);
      Node node3 = new Node(48, node2, node1, node2, node2);
      node2.checkTreeEquals(node1);
      node1.hasOneChild();
      node3.srcrefTree(node0);
      node2.isDefaultCase();
      node3.isReturn();
      node0.isTry();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Node.extractCharno(1315);
      Node node0 = Node.newNumber((double) 1315);
      Node node1 = new Node((-2), node0, node0, node0, node0, (-2), 4);
      node1.getParent();
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Node node0 = Node.newString((-1561), "", (-1561), (-1561));
      node0.getSourceFileName();
      Node node1 = Node.newNumber((double) 51);
      node1.setCharno(0);
      node0.setOptionalArg(true);
      node0.getLength();
      node1.getProp(4952);
      node1.getChangeTime();
      node1.isReturn();
      node0.isTry();
      node0.isOptionalArg();
      node1.getType();
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Node node0 = Node.newString(130, "=^{q", 0, 130);
      node0.setSourceFileForTesting("node is not a child");
      node0.isLabelName();
      node0.getProp(0);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node1 = new Node(8, node0, node0, 395, (-862048943));
      Node node2 = Node.newString("com.google.javascript.rhino.Node$FileLevelJsDocBuilder");
      node2.checkTreeEquals((Node) null);
      node1.isDelProp();
      node2.srcrefTree(node1);
      node2.isDefaultCase();
      int int0 = (-3106);
      node1.getIntProp(int0);
      node2.isDo();
      node1.isNot();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Node node0 = new Node(2098677201, 663, 663);
      node0.getChildAtIndex((-2017));
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(8233, 1847, (-2624));
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = new Node(31, node0, node0, node0, node0, 52, 16);
      node0.copyInformationFromForTree(node1);
      Node node2 = node0.detachFromParent();
      node0.isNE();
      node1.useSourceInfoIfMissingFrom(node2);
      Node node3 = node0.getLastSibling();
      node3.setSideEffectFlags(55);
      int int0 = (-620);
      node3.putBooleanProp(int0, boolean0);
      node1.setQuotedString();
      // Undeclared exception!
      try { 
        node0.isUnscopedQualifiedName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 8233
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Node node0 = Node.newString("node is not a child", 0, 0);
      Node node1 = new Node(57, node0, node0, 55, 2809);
      node0.putIntProp(175, 56);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node1.isInstanceOf();
      node0.isGetterDef();
      node0.setQuotedString();
      node1.isDebugger();
      node1.isThrow();
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Node node0 = new Node(124, 124, 124);
      node0.toString(true, false, true);
      node0.isStringKey();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      int int0 = Node.SLASH_V;
      node0.isIn();
      node0.isWith();
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(98, nodeArray0, 83, 83);
      Node node1 = new Node(32, node0, node0, node0);
      node1.isOr();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node1.isFalse();
      node2.getJsDocBuilderForNode();
      node0.setLength(43);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node3 = node2.cloneNode();
      node1.checkTreeEquals(node0);
      node0.isDelProp();
      Node node4 = node1.srcrefTree(node0);
      node4.isDefaultCase();
      node4.getIntProp(1949);
      node3.isSyntheticBlock();
      node4.isNot();
      node4.isEquivalentTo(node1, true, false, false);
      node2.removeChildren();
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      node0.isFunction();
      node0.isDelProp();
      node0.isDefaultCase();
      Node node1 = Node.newString(205, "hbE|2bY$!GMb)", 888, 1359);
      node0.hasMoreThanOneChild();
      node0.getBooleanProp(36);
      node1.isVar();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(3516);
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node node0 = Node.newString(149, "=zBuk) e_uRy|$dk}B", 1326, 3816);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node1 = Node.newString("(t5m*rf[ez<&_", 1980, 113);
      node1.getString();
      node1.addChildrenToFront(node0);
      node0.isQualifiedName();
      node1.isString();
      node0.isWhile();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      JSType[] jSTypeArray0 = new JSType[0];
      node1.isQualifiedName();
      Node node2 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node2.isBlock();
      node0.isEquivalentTo(node2, false, false, false);
      node0.isBreak();
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Node node0 = new Node(124, 124, 124);
      node0.toString(true, false, true);
      node0.isStringKey();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      int int0 = Node.SLASH_V;
      Node node1 = new Node(42, node0, node0);
      node1.hasChild(node0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Node node0 = new Node(124, 124, 124);
      node0.toString(true, false, true);
      node0.isStringKey();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node1 = node0.cloneNode();
      Node node2 = Node.newString("}8");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      node0.getInputId();
      node2.setInputId((InputId) null);
      node0.isVoid();
      node0.isEmpty();
      node1.isGetProp();
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Node.mergeLineCharNo(3673, (-701));
      Node node0 = Node.newString("node is not a child", 64, 3673);
      node0.setWasEmptyNode(false);
      Node node1 = Node.newString("-U1Me\">EaoA[70i''<z");
      Node node2 = new Node(29, node1, node1, node0, 16, 153);
      Node node3 = new Node(54, node2, 5158, 3499);
      node2.isEquivalentTo(node0);
      Node node4 = new Node(0, node3);
      node4.isScript();
      node0.isNew();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node0.getInputId();
      Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
      Node.extractCharno((-1720));
      node4.isIn();
      node1.getChildBefore(node2);
      node1.isExprResult();
      node2.removeChild(node1);
      node1.isAnd();
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Node node0 = Node.newNumber((-3244.094885895745));
      node0.isName();
      node0.children();
      Node node1 = new Node(40, node0);
      node0.toStringTree();
      node0.isArrayLit();
      Node node2 = Node.newString(15, "NUMBER -3244.094885895745\n");
      Node node3 = new Node(751619276, 38, (-880));
      node3.setSourceFileForTesting("com.google.javascript.rhino.Node");
      Node node4 = Node.newString(130, "HI", 46, 43);
      node4.getLength();
      node3.getLastSibling();
      Node node5 = node1.useSourceInfoIfMissingFrom(node3);
      Node.newString("NG(v,XElz");
      node5.isQualifiedName();
      node3.isEquivalentTo(node1, true, true, true);
      node5.getDirectives();
      node2.isObjectLit();
      node2.addChildToFront(node1);
      node1.isFor();
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Node node0 = Node.newNumber((-3244.094885895745), 718, 718);
      node0.setString("should never be called");
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Node node0 = Node.newString("$[0-9]+", (-2652), (-2652));
      Node node1 = new Node((-2652), node0, 2, 42);
      node1.getType();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      String string0 = "SXlK";
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = node0;
      nodeArray0[1] = node1;
      nodeArray0[2] = node0;
      nodeArray0[3] = node1;
      nodeArray0[4] = node0;
      Node node2 = new Node(4, nodeArray0, 0, 36);
      JSType jSType0 = null;
      // Undeclared exception!
      try { 
        JSType.toMaybeTemplateType(jSType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Node node0 = Node.newString(1391, "", 175, (-501));
      Node node1 = new Node(1, node0, node0, node0);
      Node node2 = Node.newNumber((-1.0));
      Node node3 = new Node(31, node2, node2, (-620), 1);
      node3.isQualifiedName();
      node3.getChangeTime();
      node1.isThis();
      node1.isTry();
      node2.isStringKey();
      node3.getType();
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String string0 = " is not a string node";
      int int0 = 55;
      Node node0 = Node.newString(" is not a string node");
      node0.replaceChild((Node) null, (Node) null);
      Node.newNumber((double) node0.OPT_ARG_NAME);
      // Undeclared exception!
      try { 
        node0.setSourceFileForTesting(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(122);
      Node node0 = Node.newString(122, "jCw1gS`:", 115, (-360));
      node0.isDebugger();
      node0.isFalse();
      node0.getJsDocBuilderForNode();
      node0.setLength(115);
      Node node1 = node0.cloneNode();
      node0.checkTreeEquals(node1);
      node0.replaceChildAfter(node1, node1);
      node0.isDelProp();
      Node.extractCharno(node0.FLAG_ARGUMENTS_UNMODIFIED);
      node1.isNot();
      // Undeclared exception!
      try { 
        node1.isTry();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = "The new child node already has a parent.";
      Node node0 = Node.newString(1389, "The new child node already has a parent.", (-2), (-2));
      Node node1 = new Node(105);
      Node node2 = node1.clonePropsFrom(node0);
      Node node3 = node1.useSourceInfoFromForTree(node0);
      node3.getJsDocBuilderForNode();
      node3.setLineno((-2128));
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("com.google.common.collect.LinkedHashMultimap", node3, (JSType) null);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      JSDocInfo jSDocInfo0 = enumElementType0.getOwnPropertyJSDocInfo(enumType0.UNKNOWN_NAME);
      Set<String> set0 = jSDocInfo0.getParameterNames();
      node3.setDirectives(set0);
      node0.setVarArgs(boolean0);
      node3.children();
      // Undeclared exception!
      try { 
        node2.setSourceEncodedPositionForTree(node3.POST_FLAG);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Node node0 = new Node(29, 170, (-110));
      node0.toString(true, false, true);
      node0.isStringKey();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      int int0 = Node.SLASH_V;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node2 = new Node(39, node1, node1);
      node2.hasChild(node0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Node node0 = Node.newString(1389, "The new child node already has a parent.", 1389, 1389);
      node0.isEmpty();
      node0.isLocalResultCall();
      node0.getAncestors();
      Node node1 = Node.newString("}8");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      node0.getInputId();
      Node[] nodeArray0 = new Node[0];
      Node node2 = new Node(4, nodeArray0);
      node2.setInputId((InputId) null);
      node0.isVoid();
      node1.isEmpty();
      node2.isGetProp();
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Node node0 = Node.newString(55, "missing prop: ");
      node0.setSourceFileForTesting(" is not a string node");
      node0.getProp(55);
      node0.isCase();
      node0.isEquivalentTo((Node) null, false, false, true);
      node0.isObjectLit();
      node0.isScript();
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Node node0 = Node.newString("node is not a child", 0, 0);
      Node node1 = new Node(57, node0, node0, 55, 2809);
      node1.replaceChild(node0, node0);
      node1.isCase();
      node0.isFor();
      // Undeclared exception!
      try { 
        node0.isExprResult();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Node node0 = new Node(124, 124, 124);
      boolean boolean0 = true;
      node0.useSourceInfoFrom((Node) null);
      boolean boolean1 = false;
      boolean boolean2 = true;
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(3516);
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(3516);
      node_SideEffectFlags0.setMutatesGlobalState();
      Node node0 = Node.newString(149, "=zBuk) e_uRy|$dk}B", 1326, 3816);
      Node node1 = Node.newString("=zBuk) e_uRy|$dk}B", 1980, 113);
      node1.addChildrenToFront(node0);
      node0.isQualifiedName();
      node1.isString();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      JSType[] jSTypeArray0 = new JSType[0];
      node1.isQualifiedName();
      jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.isAnd();
      Node.newNumber((-3244.094885895745));
      node0.isDebugger();
      node1.isExprResult();
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Node node0 = new Node(124, 124, 124);
      Node node1 = Node.newString(110, "d2mS8~?:q<m", 91, 39);
      node1.isDebugger();
      node1.isFalse();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "d2mS8~?:q<m");
      Node node2 = new Node((-1852), 56, 0);
      node2.getJsDocBuilderForNode();
      node2.setLength(83);
      node0.checkTreeEquals(node1);
      node2.isDelProp();
      node0.getQualifiedName();
      Node node3 = node0.srcrefTree(node2);
      node1.isDefaultCase();
      node3.isSyntheticBlock();
      node0.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Node node0 = Node.newNumber((-687.8), 0, 85);
      node0.getLineno();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(114);
      node_SideEffectFlags0.areAllFlagsSet();
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 55;
      Node node0 = Node.newString(55, "missing prop: ");
      node0.setSourceFileForTesting(" is not a string node");
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      jSDocInfo0.getAssociatedNode();
      node0.useSourceInfoIfMissingFrom((Node) null);
      node0.getProp(int0);
      node0.isCase();
      // Undeclared exception!
      try { 
        node0.getType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Node node0 = Node.newNumber((double) 981, 126, 981);
      Node node1 = Node.newNumber((double) 55, 126, 126);
      node0.setWasEmptyNode(true);
      node1.setLength(32);
      node1.checkTreeEquals(node0);
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      Node node2 = new Node(46, nodeArray0);
      node2.isDelProp();
      node2.getQualifiedName();
      int int0 = (-634);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Node node0 = Node.newString(111, "", 44, 1807);
      Node node1 = new Node(38, node0, node0, node0, 32, 32);
      node0.isCase();
      node1.setSourceFileForTesting("");
      node0.getQualifiedName();
      Node node2 = new Node((-573), (-321), 47);
      node2.isReturn();
      node2.isTry();
      node1.getType();
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Node node0 = Node.newString("node is not a child", 0, 0);
      node0.setIsSyntheticBlock(false);
      node0.isIf();
      node0.toString();
      Node node1 = node0.getLastSibling();
      node1.isInc();
      node1.isEquivalentToShallow(node0);
      node1.isFromExterns();
      node0.isContinue();
      node1.isAssignAdd();
      node0.getFirstChild();
      node0.isGetProp();
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Node node0 = Node.newNumber((-3244.094885895745));
      node0.isName();
      node0.children();
      Node node1 = new Node(40, node0);
      node0.toStringTree();
      node1.setType(904);
      node1.isCase();
      node0.setSourceFileForTesting("NUMBER -3244.094885895745\n");
      node1.isDefaultCase();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(42);
      node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setMutatesGlobalState();
      node0.isComma();
      node1.isVarArgs();
      node1.isHook();
      node1.isName();
      node1.isAdd();
      node1.isLabel();
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString(309, "k9M&:i'a6/]K=bi", 309, 309);
      node0.getInputId();
      node0.setCharno(309);
      Node node1 = node0.removeFirstChild();
      node0.srcref((Node) null);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(node1.FREE_CALL);
      // Undeclared exception!
      try { 
        node1.appendStringTree(charArrayWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.getJsDocBuilderForNode();
      node0.setLength((-675));
      Node node1 = node0.cloneNode();
      Node node2 = new Node(48, node1, node0, node1, node0, 961, (-326));
      node2.isOr();
      Node node3 = node2.useSourceInfoFromForTree(node0);
      node3.isFalse();
      node3.getJsDocBuilderForNode();
      node3.isCase();
      node3.checkTreeTypeAwareEqualsImpl(node1);
      node2.isCast();
      node1.setLineno(48);
      node1.isNoSideEffectsCall();
      node1.getJsDocBuilderForNode();
      node0.isObjectLit();
      node1.getNext();
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Node node0 = Node.newString((-1561), "", (-1561), (-1561));
      String string0 = node0.getSourceFileName();
      Node node1 = Node.newNumber((double) 51);
      Node node2 = node0.srcrefTree(node1);
      node1.setCharno(0);
      node0.setOptionalArg(true);
      int int0 = 378;
      node0.clonePropsFrom(node2);
      node2.getProp(int0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      double double0 = 1430.35286251038;
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Node node0 = new Node(152, 1391, 152);
      Node node1 = new Node(1, node0, node0, node0);
      node1.detachChildren();
      node1.isOr();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.detachChildren();
      node0.isTrue();
      node0.getJsDocBuilderForNode();
      Node node3 = node0.cloneNode();
      node0.checkTreeEquals(node3);
      Node.newString(52, "");
      node0.isOnlyModifiesThisCall();
      Node node4 = Node.newString(54, "", 37, 1391);
      node4.isInstanceOf();
      node0.isRegExp();
      Node node5 = Node.newString("");
      node5.isDebugger();
      node0.isCatch();
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Node node0 = Node.newString("node  not a chili", 0, 0);
      Node node1 = new Node(29, node0, node0, node0, node0);
      node1.getLastSibling();
      Node node2 = Node.newString(4, "node  not a chili");
      node1.setSourceFileForTesting("$uc~5?");
      Node.newString("$uc~5?", (-5364), 49);
      node0.getLength();
      node2.isLocalResultCall();
      node2.isNE();
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Node node0 = Node.newString("node is not a child", 0, 0);
      Node node1 = new Node(29, node0, node0, node0, node0);
      Node node2 = node0.getLastSibling();
      Node.newString(4, "node is not a child");
      node1.setSourceFileForTesting("$uc~5?");
      node1.isUnscopedQualifiedName();
      node2.getAncestor(1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      node2.cloneNode();
      node1.getInputId();
      node0.setInputId((InputId) null);
      node2.isVoid();
      node0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Node node0 = new Node(124, 124, 124);
      Node node1 = Node.newString(110, "d2mS8~?:q<m", 91, 39);
      node1.isDebugger();
      node1.isFalse();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "d2mS8~?:q<m");
      Node node2 = new Node((-1852), 56, 0);
      node2.getJsDocBuilderForNode();
      node2.setLength(83);
      node0.checkTreeEquals(node1);
      node2.isDelProp();
      node0.getQualifiedName();
      Node node3 = node0.srcrefTree(node2);
      node3.copyInformationFromForTree(node0);
      node1.isDefaultCase();
      node3.isSyntheticBlock();
      node0.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Node node0 = new Node(152, 1391, 152);
      Node node1 = new Node(1, node0, node0, node0);
      node1.isOr();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node0.isTrue();
      node0.getJsDocBuilderForNode();
      Node node3 = node0.cloneNode();
      node0.checkTreeEquals(node3);
      Node node4 = Node.newString(52, "");
      node4.setSourceFileForTesting("");
      node0.isOnlyModifiesThisCall();
      Node node5 = Node.newString(54, "", 37, 1391);
      node5.removeProp((-1260));
      node3.isGetterDef();
      Node node6 = Node.newString("");
      node6.isDebugger();
      node4.isExprResult();
      node2.hasChildren();
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node node0 = new Node((-2023), 8192, 2885);
      node0.setLength(1807);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = node0.cloneNode();
      node1.checkTreeEquals(node0);
      node1.isDefaultCase();
      node0.getIntProp(1732);
      node1.isSyntheticBlock();
      Node node2 = Node.newString((String) null);
      boolean boolean0 = false;
      boolean boolean1 = true;
      boolean boolean2 = false;
      node2.isEquivalentTo(node0, boolean0, boolean1, boolean2);
      node1.removeChildren();
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = new Node.SideEffectFlags(37);
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.setMutatesGlobalState();
      int int0 = (-759);
      Node node0 = null;
      Node node1 = new Node(Integer.MIN_VALUE, (Node) null, (Node) null);
      int int1 = 4816;
      Node node2 = null;
      try {
        node2 = new Node(int0, node0, node1, node0, node1.STATIC_SOURCE_FILE, int1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Node node0 = new Node((-1));
      Node node1 = new Node(57, node0, node0, 55, 2809);
      Node node2 = node1.getLastSibling();
      node1.isCase();
      node1.setSourceFileForTesting("node is not a child");
      node2.isDefaultCase();
      Node node3 = Node.newNumber((double) 47, 39, 38);
      node2.setSideEffectFlags((Node.SideEffectFlags) null);
      node3.isGetElem();
      node1.removeProp(node0.INPUT_ID);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Node node0 = new Node(19);
      node0.isCatch();
      node0.isUnscopedQualifiedName();
      Node node1 = Node.newString("The new child node already has a parent.", 42, (-2140));
      node1.isNoSideEffectsCall();
      node0.getLength();
      node1.hasMoreThanOneChild();
      node0.isVar();
      node1.isCatch();
      node0.isNE();
      node0.setString("The new child node already has a parent.");
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(120, 1421, 2204);
      Node node1 = Node.newString(15, "QkfT_D0", (-570), (-2696));
      node1.isCatch();
      Node node2 = node0.cloneNode();
      node2.isIf();
      node0.toString();
      node0.putIntProp(4095, 15);
      node2.getQualifiedName();
      node0.getDouble();
      node0.addChildBefore(node1, node2);
      int int0 = 105;
      Node.extractLineno(int0);
      node0.isNew();
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Node node0 = Node.newString(98, "VALUE_MATCH", 76, 152);
      Node node1 = node0.getLastSibling();
      node1.setType(31);
      node0.isCase();
      node1.setSourceFileForTesting("eHH\"");
      node1.isDefaultCase();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(31);
      node_SideEffectFlags0.clearAllFlags();
      node1.wasEmptyNode();
      node_SideEffectFlags0.setMutatesGlobalState();
      node0.isComma();
      node1.isVarArgs();
      Node.extractLineno(38);
      node1.isNew();
      node1.getProp(51);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(98, nodeArray0, 83, 83);
      Node node1 = new Node(32, node0, node0, node0);
      node1.isOr();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node1.isFalse();
      node2.getJsDocBuilderForNode();
      node0.setLength(43);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node3 = node2.cloneNode();
      node1.checkTreeEquals(node0);
      Node node4 = node1.srcrefTree(node0);
      node0.addChildToBack(node4);
      node4.isDefaultCase();
      node4.getIntProp(1949);
      node3.isSyntheticBlock();
      node4.isEquivalentTo(node1, true, false, false);
      node2.removeChildren();
      Node.newNumber((double) 12);
      node1.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      node0.getJsDocBuilderForNode();
      node0.setLength((-675));
      Node node1 = node0.cloneNode();
      node0.checkTreeEquals(node1);
      Node node2 = Node.newString(36, "com.google.common.collect.RegularImutableSet", 30, 30);
      node2.setSourceFileForTesting("Object#Element");
      node2.isOnlyModifiesThisCall();
      Node node3 = Node.newString(2, "2IFr2l,", 4095, 4095);
      node2.isQualifiedName();
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      nodeArray0[1] = node1;
      Node node4 = new Node(47, nodeArray0);
      node1.isWhile();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      jSTypeRegistry0.createFunctionTypeWithVarArgs(jSType0, jSTypeArray0);
      boolean boolean0 = node1.isSwitch();
      node3.isWith();
      node4.getChildBefore(node3);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, boolean0);
      String string0 = "4QQc[!4w-r~7UlU;)";
      Node node5 = null;
      EvoSuiteFile evoSuiteFile0 = null;
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newString(0, "node is not a child");
      Node node1 = Node.newString("node is not a child");
      node1.isTypeOf();
      node0.addChildrenToBack(node1);
      node1.replaceChild(node0, node0);
      node0.removeChildren();
      node1.isCase();
      // Undeclared exception!
      try { 
        node0.isFor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Node node0 = Node.newNumber((-3244.45190282246));
      Node node1 = Node.newString("QkfT_D0", 12, 55);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node2 = node0.setJSDocInfo(jSDocInfo0);
      int int0 = Node.SIDE_EFFECTS_ALL;
      node2.isDebugger();
      Node node3 = Node.newString("QkfT_D0", 54, (-741));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node3.isFalse();
      node0.getJSDocInfo();
      Node node4 = Node.newString(15, (String) null, 927, 182031);
      int int1 = 3127;
      node4.putIntProp(int1, node2.POST_FLAG);
      node0.getQualifiedName();
      node2.getDouble();
      node1.addChildBefore(node4, node2);
      int int2 = (-1664);
      Node.extractLineno(int2);
      // Undeclared exception!
      try { 
        node4.isNew();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(120, 1421, 2204);
      Node node1 = Node.newString(15, "QkfT_D0", (-570), (-2696));
      node1.isCatch();
      Node node2 = node0.cloneNode();
      node2.isIf();
      node0.toString();
      node0.putIntProp(4095, 15);
      node2.getQualifiedName();
      Node node3 = node0.getLastSibling();
      node3.isEquivalentTo(node2, true, false, true);
      node1.isBreak();
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Node node0 = Node.newString("com.google.common.collect.Lists$StringAsImmutableList");
      node0.isIf();
      Node node1 = new Node(56, node0, node0, node0, node0, 2, 54);
      node0.isOr();
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node2.isFalse();
      node2.getJsDocBuilderForNode();
      node2.isCase();
      node2.checkTreeTypeAwareEqualsImpl((Node) null);
      node0.isCast();
      int int0 = 32;
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = new Node(76);
      node0.addSuppression("9{:A(6hckx95!J7+wI");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isNoSideEffectsCall();
      Node node1 = Node.newString(23, "ubCCh7bLQM*TU'-JhHr");
      Node.newString((-1344), "kJLtdZ^iB^`YiLs");
      node1.setLineno(49);
      node1.getInputId();
      node0.isThrow();
      Node node2 = node0.cloneNode();
      node0.hasOneChild();
      node2.isLabelName();
      node2.srcrefTree(node0);
      node1.setSideEffectFlags(52);
      node0.isLabelName();
      node1.isLocalResultCall();
      node1.isDelProp();
      node1.isInstanceOf();
      Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
      node_NodeMismatch0.equals(node1);
      node0.checkTreeEqualsImpl(node2);
      // Undeclared exception!
      try { 
        node0.isLabelName();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got MUL
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(98, nodeArray0, 83, 83);
      node0.isOr();
      Node node1 = node0.useSourceInfoFromForTree(node0);
      node0.isFalse();
      node0.setLength(43);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node2 = node1.cloneNode();
      node0.checkTreeEquals(node0);
      node0.isDelProp();
      Node node3 = new Node(55, node2, node1, node1, node0);
      node3.isDefaultCase();
      node3.getIntProp(1949);
      node1.isFunction();
      node2.isQualifiedName();
      node2.isTry();
      node1.isReturn();
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(98, nodeArray0, 83, 83);
      Node node1 = new Node(32, node0, node0, node0);
      node1.isOr();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node1.isFalse();
      node2.getJsDocBuilderForNode();
      node0.setLength(43);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node3 = node2.cloneNode();
      node1.getIndexOfChild(node3);
      Object object0 = new Object();
      node3.isCase();
      node1.isInc();
      Node node4 = Node.newNumber(1895.39886155);
      node1.isDebugger();
      node4.isExprResult();
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(98, nodeArray0, 83, 83);
      Node node1 = new Node(32, node0, node0, node0);
      boolean boolean0 = node1.isOr();
      Node node2 = node1.useSourceInfoFromForTree(node0);
      Node node3 = node1.getLastSibling();
      node3.getJsDocBuilderForNode();
      node3.setLineno(122);
      Node node4 = new Node(53, node0, node2, node3);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, boolean0);
      JSType jSType0 = null;
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0, 0, 0);
      node0.getLineno();
      node0.putIntProp(1317, 0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2714);
      node_SideEffectFlags0.areAllFlagsSet();
      node0.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Node node0 = Node.newString("node is not a child", 0, 0);
      Node node1 = new Node(57, node0, node0, 55, 2809);
      node1.getIntProp(43);
      node1.isEquivalentTo(node1, true, true, true);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Node node0 = Node.newString("VALUE_MATCH");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "qI(}g");
      Node node1 = node0.getLastSibling();
      node1.getJsDocBuilderForNode();
      node0.setLineno((-2903));
      node0.setVarArgs(true);
      Node node2 = new Node(4, node1, node1, node1, node1);
      node2.checkTreeEquals(node1);
      node1.hasOneChild();
      Node node3 = node2.srcrefTree(node1);
      node0.isDefaultCase();
      node0.isReturn();
      node3.isTry();
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Node node0 = Node.newString((-1853), "", (-1853), (-1853));
      node0.setLength((-1853));
      Node node1 = new Node(30, node0, node0, 1398, 50);
      Node node2 = node1.getLastSibling();
      node0.isCase();
      node1.checkTreeTypeAwareEqualsImpl(node2);
      node1.children();
      node2.setSourceEncodedPositionForTree(37);
      node1.isNull();
      node2.isVarArgs();
      node2.isCall();
      Node.newString(51, "");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node3 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node4 = Node.newString("Object#Element", 2180, 1);
      node3.removeChild(node4);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Node node0 = new Node(103, (-3581), 5);
      node0.toString(true, false, true);
      node0.isDebugger();
      node0.isDec();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.clearAllFlags();
      node0.isBlock();
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Node node0 = Node.newString((-1270), "free_call", 65535, (-1270));
      Node node1 = new Node((-1270), node0, node0);
      node1.isSyntheticBlock();
      Node node2 = node1.copyInformationFrom(node0);
      node2.isLocalResultCall();
      node2.getChildBefore(node1);
      EvoSuiteFile evoSuiteFile0 = null;
      int int0 = (-854);
      String string0 = "RSH";
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Node node0 = Node.newNumber((-3244.094885895745));
      node0.isName();
      node0.children();
      Node node1 = new Node(40, node0);
      node0.toStringTree();
      node0.isArrayLit();
      Node node2 = node0.detachFromParent();
      Node node3 = node2.cloneNode();
      node0.isIf();
      node1.toString();
      node2.putIntProp(49, (-4491));
      node0.getQualifiedName();
      node2.getDouble();
      node0.addChildBefore(node3, node2);
      Node.extractLineno(node3.SIDE_EFFECTS_FLAGS_MASK);
      // Undeclared exception!
      try { 
        node1.isNew();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Node node0 = Node.newString("node is not a child", 0, 0);
      Node node1 = new Node(57, node0, node0, 55, 2809);
      Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node3 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      node3.useSourceInfoFrom(node0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null);
      ImmutableList.of((TemplateType) null, (TemplateType) null, (TemplateType) null, (TemplateType) null, (TemplateType) null, (TemplateType) null);
      node2.isBreak();
      node3.isExprResult();
      int int0 = 4095;
      node1.getAncestor(int0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Node node0 = Node.newString(130, "=^{q", 0, 130);
      node0.setSourceFileForTesting("node is not a child");
      Node node1 = new Node(44, node0, node0, 49, 20);
      Node node2 = node1.getLastSibling();
      node0.isCase();
      node0.checkTreeTypeAwareEqualsImpl(node2);
      Node node3 = new Node(38, node1, node1, node2, node1);
      node2.checkTreeEquals(node0);
      node0.hasOneChild();
      node0.srcrefTree(node1);
      node2.isDefaultCase();
      node2.isReturn();
      node2.isTry();
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "HI");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Node node0 = Node.newString(79, "kM<3y1aGmva}aS|_X", 79, 307);
      node0.mayMutateArguments();
      Node node1 = new Node(55, node0, 8, 54);
      Node node2 = node0.useSourceInfoFromForTree(node1);
      node0.setLineno(46);
      node0.getBooleanProp(46);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node0.getSideEffectFlags();
      node0.isLabel();
      node0.isAssign();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      node0.isLocalResultCall();
      node0.hasOneChild();
      node0.isFalse();
      node0.addChildToFront(node1);
      node2.isScript();
      node1.isNull();
      node0.isThrow();
      Node node3 = node1.useSourceInfoFrom(node2);
      Node.newString("HI", 47, 43);
      node3.getFirstChild();
  }
}
