/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 01:21:44 GMT 2021
 */

package com.google.javascript.rhino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.JSTypeExpression;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.TemplateTypeMap;
import com.google.javascript.rhino.jstype.TemplateTypeMapReplacer;
import com.google.javascript.rhino.jstype.TemplatizedType;
import java.io.OutputStream;
import java.io.PrintStream;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Node node0 = Node.newString((String) null, (-3508), 618);
      node0.getJsDocBuilderForNode();
      node0.getJSType();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 796;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      Vector<JSType> vector0 = new Vector<JSType>();
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      modificationVisitor0.caseAllType();
      String string0 = null;
      int int1 = (-2019);
      Node node0 = Node.newString(796, (String) null);
      Node node1 = new Node(node0.FLAG_NO_THROWS, node0, node0);
      int int2 = 964;
      Node node2 = null;
      try {
        node2 = new Node(int1, node0, node1, node0, node1, int2, node0.MAX_COLUMN_NUMBER);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Node node0 = Node.newString("2x< ilpw;d*Sc");
      boolean boolean0 = node0.mayMutateArguments();
      String string0 = "\n\nTree2:\n";
      node0.children();
      node0.getDirectives();
      Node node1 = new Node(0, node0, node0, node0, node0, 0, 51);
      node1.getInputId();
      node0.addChildBefore(node1, node1);
      node1.getAncestor(node0.INCRDECR_PROP);
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        node0.toString(boolean0, boolean1, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The existing child node of the parent should not be null.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node node0 = Node.newNumber(1419.0, (-2950), 12288);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      Node node1 = Node.newNumber((double) 40);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags4.clearSideEffectFlags();
      node_SideEffectFlags1.setMutatesThis();
      node0.addChildrenToBack(node1);
      node_SideEffectFlags4.clearSideEffectFlags();
      node_SideEffectFlags4.setAllFlags();
      node0.getType();
      node1.getDouble();
      node2.getDouble();
      node2.isString();
      node0.isSetterDef();
      node0.isDelProp();
      node1.setLength(2234);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = Node.newNumber((-2269.0), (-4214), (-4214));
      node0.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = 644;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[4];
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
      jSTypeArray0[0] = (JSType) objectType0;
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) objectType0, jSTypeArray0[0], (JSType) objectType0, jSTypeArray0[0], (JSType) objectType0, jSTypeArray0[0]);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType((String) null, node0, jSTypeArray0[0]);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      ObjectType objectType1 = enumType1.getImplicitPrototype();
      jSTypeArray0[1] = (JSType) objectType1;
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      Node node1 = new Node(1, nodeArray0, 55, (-1605));
      String string0 = ",xSMQshZ";
      JSType jSType0 = jSTypeRegistry0.createFromTypeNodes(node1, string0, enumType1);
      jSTypeArray0[2] = jSType0;
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node[] nodeArray0 = new Node[5];
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      nodeArray0[0] = node0;
      Node node1 = Node.newString(54, "Object#Element", 56, 32);
      nodeArray0[1] = node1;
      Node node2 = Node.newString((-235), "(dZ@duIM7q", 50, 15);
      nodeArray0[2] = node2;
      Node node3 = new Node(527);
      nodeArray0[3] = node3;
      Node node4 = new Node(57, node0, node2, node0, 3686, 56);
      nodeArray0[4] = node4;
      Node node5 = new Node((-1654), nodeArray0, 4, 38);
      node5.children();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node.extractCharno((-2155));
      Node node0 = Node.newNumber((double) 1941);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.clearSideEffectFlags();
      node_SideEffectFlags3.clearSideEffectFlags();
      Node node1 = new Node(16, node0, (-3939), 2);
      Node node2 = node0.copyInformationFrom(node1);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Set<String> set0 = jSDocInfo0.getModifies();
      node1.setDirectives(set0);
      node2.isOptionalArg();
      Node node3 = Node.newString("xb/Pi+", 4095, 55);
      node3.removeChild(node1);
      node2.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node.extractLineno(3741);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[1];
      JSTypeNative jSTypeNative0 = JSTypeNative.NULL_VOID;
      jSTypeNativeArray0[0] = jSTypeNative0;
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      JSType jSType1 = jSTypeRegistry0.createNullableType(jSType0);
      JSType[] jSTypeArray0 = new JSType[12];
      jSTypeArray0[5] = jSType0;
      jSTypeArray0[1] = jSType1;
      jSTypeArray0[2] = jSType0;
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node1 = new Node((-1065), node0, node0);
      node0.getChildBefore(node1);
      TemplatizedType templatizedType0 = JSType.toMaybeTemplatizedType(jSTypeArray0[2]);
      // Undeclared exception!
      try { 
        templatizedType0.getTemplateTypeMap();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node node0 = Node.newString(215, "", 215, 215);
      node0.isSyntheticBlock();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(35);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags5.setThrows();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setMutatesThis();
      node_SideEffectFlags6.setMutatesThis();
      node_SideEffectFlags6.setMutatesGlobalState();
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-2179), nodeArray0, (-1647), 101);
      Node node1 = node0.getAncestor(0);
      node0.setType(101);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node_SideEffectFlags4.setThrows();
      node1.setLineno(38);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Node[] nodeArray0 = new Node[3];
      Node node0 = new Node(0, 0, (-801));
      nodeArray0[0] = node0;
      Node node1 = Node.newNumber((-4723.0), 37, 0);
      nodeArray0[1] = node1;
      Node node2 = new Node(2027, node1, node0, node0, node1, 260, 105);
      nodeArray0[2] = node2;
      Node node3 = new Node(0, nodeArray0);
      node3.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node node0 = new Node(3714, 3714, 1123);
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      Node node1 = new Node((-250), nodeArray0, (-1841), 29);
      node0.addChildAfter(node1, nodeArray0[3]);
      node0.getFirstChild();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[8];
      JSTypeNative jSTypeNative0 = JSTypeNative.STRING_OBJECT_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, functionType0);
      jSTypeArray0[0] = (JSType) functionType1;
      JSType.toMaybeTemplatizedType(jSTypeArray0[0]);
      jSTypeArray0[1] = (JSType) null;
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[6];
      jSTypeNativeArray0[0] = jSTypeNative0;
      jSTypeNativeArray0[1] = jSTypeNative0;
      jSTypeNativeArray0[2] = jSTypeNative0;
      jSTypeNativeArray0[3] = jSTypeNative0;
      JSTypeNative jSTypeNative1 = JSTypeNative.EVAL_ERROR_TYPE;
      jSTypeNativeArray0[4] = jSTypeNative1;
      jSTypeNativeArray0[5] = jSTypeNative0;
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      jSTypeArray0[2] = jSType0;
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType1 = modificationVisitor0.caseAllType();
      jSTypeArray0[3] = jSType1;
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = Node.newString("Named type with empty name component", 1, (-753));
      EnumType enumType0 = jSTypeRegistry1.createEnumType("", node0, jSTypeArray0[2]);
      EnumType enumType1 = enumType0.toMaybeEnumType();
      EnumElementType enumElementType0 = enumType1.getElementsType();
      enumElementType0.getOwnerFunction();
      jSTypeArray0[4] = (JSType) null;
      JSType jSType2 = jSTypeRegistry1.createUnionType(jSTypeArray0);
      jSTypeArray0[5] = jSType2;
      ObjectType objectType0 = ObjectType.cast(enumType1);
      jSTypeArray0[6] = (JSType) objectType0;
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = 291;
      int int1 = (-1625);
      Node node0 = new Node((-1625));
      Node node1 = new Node((-1625), node0, node0, node0, (-1663), 55);
      Node node2 = new Node((-644), node1, node0, node0, node0);
      Node node3 = new Node(int1, node2, node0, node2);
      int int2 = 0;
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node.extractCharno((-989));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newString(3107, "Object#Key", (-989), (-989));
      JSTypeExpression jSTypeExpression0 = new JSTypeExpression(node0, "Object#Key");
      JSType jSType0 = null;
      ObjectType.cast((JSType) null);
      JSType jSType1 = jSTypeExpression0.evaluate((StaticScope<JSType>) null, jSTypeRegistry0);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createEnumType(jSType1.NOT_A_CLASS, node0, jSType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 3107
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node.newString((String) null);
      int int0 = (-934);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      String string0 = null;
      int int0 = 685;
      Node.newString(2, (String) null, 37, 2);
      // Undeclared exception!
      try { 
        Node.newString(string0, int0, node0.STATIC_SOURCE_FILE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node node0 = Node.newString(0, "");
      Node node1 = new Node(2637, node0, node0);
      Node node2 = node1.getNext();
      node1.toString();
      Node node3 = node2.getChildBefore(node1);
      node2.setSourceEncodedPositionForTree(node3.IS_DISPATCHER);
      // Undeclared exception!
      try { 
        node2.setQuotedString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2637
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = 1101;
      Node[] nodeArray0 = new Node[8];
      String string0 = "prev is not a child of this node.";
      Node node0 = Node.newString(1101, "prev is not a child of this node.");
      Node node1 = new Node(1101, node0, node0, node0, 39, 27);
      nodeArray0[0] = node1;
      Node node2 = new Node(34, node1, node0, 37, 53);
      nodeArray0[1] = node2;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = null;
      try {
        jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      int int0 = 0;
      Node node1 = new Node(2320, node0, 0, (-477));
      node0.removeChildAfter(node1);
      String string0 = "";
      Node node2 = Node.newString(int0, string0);
      node0.getChildBefore(node2);
      // Undeclared exception!
      try { 
        node0.isUnscopedQualifiedName();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = Node.newString(0, "PKufMU?|.|8Xr}RZt", (-1130), 3439);
      Node node1 = new Node(50, node0, node0, node0, node0, 0, 1426);
      Node node2 = node1.getChildAtIndex(31);
      node1.getChangeTime();
      node2.addChildAfter(node1, node1);
      Node node3 = node1.getLastChild();
      node2.getDouble();
      InputId inputId0 = node1.getInputId();
      node3.setInputId(inputId0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = Node.newString("", 2680, 2680);
      node0.isFunction();
      node0.setQuotedString();
      node0.getCharno();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = Node.newNumber(719.249854351694, 1549, 1549);
      node0.isCatch();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.areAllFlagsSet();
      int int0 = (-193);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[5];
      TemplateType templateType0 = jSTypeRegistry0.getObjectIndexKey();
      jSTypeArray0[0] = (JSType) templateType0;
      Node node0 = null;
      Node node1 = Node.newNumber((double) 1, (-193), (-193));
      Node node2 = new Node(0, (Node) null, (Node) null, node1);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createFromTypeNodes(node2, templateType0.EMPTY_TYPE_COMPONENT, templateType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = new Node(0);
      node0.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = Node.newString("L{3H", 28, 0);
      Node node1 = new Node(57, node0, node0, node0, node0);
      node1.copyInformationFrom(node0);
      Node node2 = node0.removeChildAfter(node1);
      node2.checkTreeEqualsImpl(node1);
      int int0 = (-341);
      String string0 = "";
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(223, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("k3w?$[M/Tp");
      node_FileLevelJsDocBuilder0.append("Vy6BBF-Mx\"");
      Node node1 = node0.getAncestor(0);
      node1.useSourceInfoIfMissingFrom(node0);
      node1.getLength();
      node1.getAncestor(32);
      node1.setJSType((JSType) null);
      node1.setSideEffectFlags(56);
      node1.isCase();
      node0.isLabel();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(node0.DIRECTIVES);
      node_SideEffectFlags0.setMutatesGlobalState();
      // Undeclared exception!
      try { 
        node_SideEffectFlags0.setMutatesArguments();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.areAllFlagsSet();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = null;
      String string0 = "5=pG:T7VZ=^,:";
      int int0 = 57;
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newString("i(q wx\"=");
      nodeArray0[0] = node0;
      Node node1 = new Node((-731), nodeArray0, 38, 0);
      node0.setIsSyntheticBlock(false);
      Node node2 = new Node(57, node1, node0, 42, 125);
      node_SideEffectFlags1.clearSideEffectFlags();
      int int1 = (-1650);
      Node node3 = new Node(int0, node2, node2, node2, node2, node2.FLAG_LOCAL_RESULTS, int1);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.getObjectElementKey();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = 114;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(114);
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.setMutatesGlobalState();
      Node node0 = Node.newString((-933), "", 114, 0);
      Node node1 = new Node(51, node0, node0, node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node2 = jSTypeRegistry0.createOptionalParameters((JSType[]) null);
      int int1 = 122;
      Node node3 = new Node(int0, node1, node2, node0, node0, node1.FLAG_GLOBAL_STATE_UNMODIFIED, int1);
      node2.setString(jSTypeRegistry0.OBJECT_ELEMENT_TEMPLATE);
      Node node4 = new Node(int0, node3);
      node1.getAncestors();
      // Undeclared exception!
      try { 
        node4.isSyntheticBlock();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionParamBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = null;
      Node node1 = Node.newString(1716, "", 36, 0);
      Node node2 = new Node(4, (Node) null, node1);
      node2.useSourceInfoFrom(node0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[1];
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry1);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      JSType[] jSTypeArray1 = new JSType[4];
      jSTypeArray1[0] = jSType0;
      jSTypeArray1[1] = jSType0;
      TemplatizedType templatizedType0 = JSType.toMaybeTemplatizedType(jSTypeArray1[0]);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSTypeArray1[0], false, jSTypeArray0);
      modificationVisitor0.caseFunctionType(functionType0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSTypeArray1[0], jSTypeArray1[0], jSTypeArray1[0], jSType0, jSTypeArray1[0], (JSType) templatizedType0);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createTemplatizedType((ObjectType) templatizedType0, immutableList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ModificationVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node.extractLineno(3741);
      Node node0 = Node.newString("pX", 148, 3741);
      node0.isFalse();
      Node node1 = new Node(4095, node0, 0, 49);
      node0.srcref(node1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node.extractLineno((-2));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) simpleErrorReporter0;
      objectArray0[1] = (Object) jSTypeRegistry0;
      Node node0 = new Node(1978);
      node0.getProp((-2688));
      objectArray0[2] = null;
      SimpleErrorReporter.getMessage("com.google.javascript.rhino.jstype.UnionTypeBuilder", objectArray0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
      Predicate<JSType> predicate0 = (Predicate<JSType>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        objectType0.setValidator(predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property com.google.javascript.rhino.jstype.UnionTypeBuilder
         //
         verifyException("com.google.javascript.rhino.SimpleErrorReporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = Node.newString("+k::=6_%%", 111, 0);
      Node node1 = Node.newNumber(611.384542298123);
      node0.srcrefTree(node1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags2.clearSideEffectFlags();
      node_SideEffectFlags2.setMutatesThis();
      Node node0 = Node.newNumber((-1478.9));
      node0.removeChildren();
      Node node1 = new Node((-3542), node0, (-1586), 2244);
      Node node2 = new Node(2244, node1, node1, node0);
      node2.addChildToBack(node1);
      boolean boolean0 = true;
      node2.setIsSyntheticBlock(boolean0);
      int int0 = (-71);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = 229;
      String string0 = "";
      Node node0 = Node.newString(229, "");
      Node node1 = new Node(229, node0, node0, node0, 36, (-1314));
      node1.setOptionalArg(true);
      Node node2 = new Node((-949), node0, node1, node1, node0);
      Node node3 = new Node(int0, node1, node2, node2.SIDE_EFFECTS_FLAGS_MASK, node2.LAST_PROP);
      node1.setSideEffectFlags(node3.FLAG_THIS_UNMODIFIED);
      SimpleErrorReporter simpleErrorReporter0 = null;
      try {
        simpleErrorReporter0 = new SimpleErrorReporter();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node node0 = new Node(32);
      node0.setWasEmptyNode(false);
      node0.setWasEmptyNode(false);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("/l-T1&9iur");
      node_FileLevelJsDocBuilder0.append("Recorded bad position information\nstart-char: ");
      node_FileLevelJsDocBuilder0.append("");
      node_FileLevelJsDocBuilder0.append("|$.JM]W");
      node_FileLevelJsDocBuilder0.append((String) null);
      Node.extractCharno(32);
      node0.isInstanceOf();
      node0.setSideEffectFlags(0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      jSDocInfo0.getAssociatedNode();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      String string0 = "com.google.javascript.rhino.Node$ObjectPropListItem";
      Node node0 = new Node(52, (Node) null, (Node) null, (Node) null, (Node) null);
      JSType jSType0 = null;
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node.extractLineno(3741);
      Node node0 = Node.newString("pX", 148, 3741);
      node0.isFalse();
      node0.getCharno();
      node0.putIntProp((-1586), 3741);
      node0.setChangeTime(3741);
      Node node1 = new Node(29, node0, node0, node0, node0);
      node1.getChildBefore(node0);
      node0.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(35);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags5.setThrows();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setMutatesThis();
      node_SideEffectFlags6.setMutatesThis();
      node_SideEffectFlags6.setMutatesGlobalState();
      Node[] nodeArray0 = new Node[0];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = new Node((-2179), nodeArray0, (-1647), 101);
      Node node1 = node0.getAncestor(0);
      node0.setType(101);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node_SideEffectFlags4.setThrows();
      node1.setLineno(38);
      node1.isOr();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = 291;
      Node node0 = new Node((-1625));
      Node node1 = new Node((-1625), node0, node0, node0, (-1663), 55);
      Node node2 = new Node(2, 37, 8);
      Node node3 = new Node((-1625), node2, node0, node2);
      int int1 = 0;
      Node node4 = new Node(int0, node3, node3, int1, node0.DIRECTIVES);
      // Undeclared exception!
      try { 
        node4.mayMutateArguments();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node node0 = new Node(0);
      node0.siblings();
      node0.isTypeOf();
      node0.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = Node.QUOTED_PROP;
      Node node0 = Node.newString("pX", 148, 3741);
      node0.isFalse();
      Node node1 = Node.newString(0, "pX", 1, 29);
      Node node2 = node0.srcref(node1);
      node1.getParent();
      node2.isOnlyModifiesThisCall();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = Node.newString("", 2680, 2680);
      node0.setSourceFileForTesting("");
      node0.isFunction();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("k3w?$[M/Tp");
      node_FileLevelJsDocBuilder0.append("");
      Node node1 = new Node(1324, node0, node0, node0, node0, 1, 47);
      Node node2 = node1.getAncestor(53);
      node0.useSourceInfoIfMissingFrom((Node) null);
      node1.getLength();
      JSType jSType0 = null;
      int int0 = 56;
      // Undeclared exception!
      try { 
        node2.getAncestor(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node.extractLineno(3741);
      Node node0 = new Node(3741, 3741, 3741);
      node0.isFalse();
      Node node1 = new Node(4095, node0, 0, 49);
      node0.srcref(node1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("k3w?$[M/Tp");
      Node node1 = node0.getAncestor(0);
      node1.useSourceInfoIfMissingFrom(node0);
      node1.getLength();
      node1.getAncestor(32);
      node1.setJSType((JSType) null);
      node1.setSideEffectFlags(56);
      node1.isCase();
      node0.isLabel();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(node0.DIRECTIVES);
      node_SideEffectFlags0.setMutatesGlobalState();
      // Undeclared exception!
      try { 
        node1.children();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node.extractLineno((-2));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) simpleErrorReporter0;
      objectArray0[1] = (Object) jSTypeRegistry0;
      Node node0 = new Node(1978);
      Node node1 = new Node(941);
      node0.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(48);
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setThrows();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.areAllFlagsSet();
      Node node0 = Node.newNumber((double) 48);
      node_SideEffectFlags0.setThrows();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "h-`[>{tGH");
      Node node1 = new Node(48, node0);
      node1.setSourceEncodedPositionForTree(8);
      node_SideEffectFlags1.setMutatesArguments();
      node1.getSourceOffset();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Ua>4$", true);
      node1.setStaticSourceFile(simpleSourceFile0);
      node0.isQuotedString();
      node0.detachFromParent();
      Node node2 = new Node(52, node1, node0, node1, node1);
      node1.useSourceInfoFromForTree(node2);
      node2.setDouble(57);
      node0.getCharno();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = Node.QUOTED_PROP;
      String string0 = "pX";
      Node node0 = Node.newString("pX", 148, 3741);
      node0.isFalse();
      node0.getCharno();
      node0.putIntProp((-1586), 3741);
      node0.setChangeTime(3741);
      Node node1 = new Node(0, 38, 48);
      Node node2 = node1.getChildBefore(node0);
      node2.isUnscopedQualifiedName();
      int int1 = Node.FLAG_LOCAL_RESULTS;
      // Undeclared exception!
      try { 
        node1.putProp(node2.INFERRED_FUNCTION, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node node0 = new Node(609949);
      node0.getIntProp(609949);
      node0.getString();
      int int0 = 1288;
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node node0 = new Node(0, 0, 44);
      node0.isDo();
      node0.putIntProp(44, (-865));
      node0.getInputId();
      node0.putBooleanProp(0, true);
      node0.isOnlyModifiesArgumentsCall();
      node0.setChangeTime(0);
      node0.getChangeTime();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setAllFlags();
      node0.getType();
      node0.getDouble();
      node0.getDouble();
      node0.isString();
      node0.isSetterDef();
      node0.isDelProp();
      int int0 = (-363);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = Node.newNumber(1419.0, (-2950), 12288);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      Node node1 = Node.newNumber((double) 40);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags4.clearSideEffectFlags();
      node_SideEffectFlags1.setMutatesThis();
      node0.addChildrenToBack(node1);
      node_SideEffectFlags4.clearSideEffectFlags();
      node2.isSwitch();
      node1.isInc();
      Node node3 = node1.getLastChild();
      Node node4 = node0.getAncestor(48);
      node2.useSourceInfoIfMissingFromForTree((Node) null);
      Node node5 = new Node(node0.DECR_FLAG, node3, node3, node4, node1);
      int int0 = 105;
      Node node6 = null;
      try {
        node6 = new Node(node3.INCRDECR_PROP, node5, int0, node4.CHANGE_TIME);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(48);
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setThrows();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.areAllFlagsSet();
      Node node0 = Node.newNumber((double) 48);
      EvoSuiteFile evoSuiteFile0 = null;
      node_SideEffectFlags0.setThrows();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "h-`[>{tGH");
      Node node1 = new Node(48, node0);
      node1.setSourceEncodedPositionForTree(8);
      node1.addChildrenToBack(node0);
      boolean boolean0 = true;
      boolean boolean1 = true;
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = Node.newString("", 2680, 2680);
      node0.getChildCount();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node.extractCharno((-2155));
      boolean boolean0 = false;
      boolean boolean1 = false;
      Node node0 = new Node(1941, 39, (-2155));
      node0.setQuotedString();
      node0.setWasEmptyNode(boolean1);
      // Undeclared exception!
      try { 
        node0.setWasEmptyNode(boolean0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not a StringNode
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node node0 = new Node(32);
      Node node1 = Node.newNumber((double) 40);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags0.setThrows();
      node_SideEffectFlags0.clearSideEffectFlags();
      Node node2 = new Node(55, node0, 31, 1);
      Node node3 = Node.newNumber((double) 8, 53, 46);
      Node node4 = node2.copyInformationFrom(node3);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node2.isOptionalArg();
      Node.newString("xb/Pi+", 2264, 52);
      node1.removeChild(node2);
      node4.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node.extractCharno(142);
      Node node0 = Node.newNumber((double) 142);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      node_SideEffectFlags3.clearSideEffectFlags();
      Node node1 = new Node(16, node0, (-3939), 2);
      Node node2 = new Node(1, node1, node1, node1, node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node2.isOptionalArg();
      String string0 = "xb/Pi+";
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = Node.newNumber(1419.0, (-2950), 12288);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      Node node1 = Node.newNumber((double) 40);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.clearSideEffectFlags();
      node_SideEffectFlags1.setMutatesThis();
      node0.addChildrenToBack(node1);
      node_SideEffectFlags2.clearSideEffectFlags();
      node_SideEffectFlags2.setAllFlags();
      node0.getType();
      node1.getDouble();
      node2.getDouble();
      node2.isTypeOf();
      node0.isSetterDef();
      node0.isDelProp();
      node1.setLength(2234);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = Node.newNumber(1419.0, (-2950), 12288);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      Node node1 = Node.newNumber((double) 40);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags4.clearSideEffectFlags();
      node_SideEffectFlags1.setMutatesThis();
      node0.addChildrenToBack(node1);
      node_SideEffectFlags4.clearSideEffectFlags();
      node_SideEffectFlags4.setAllFlags();
      node0.getType();
      node1.getDouble();
      node2.getDouble();
      node1.setIsSyntheticBlock(true);
      Node.extractLineno(1091);
      node0.isDec();
      node0.isFromExterns();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = new Node(32);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-108);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "]}pC}PW%@3+");
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte)101;
      byteArray0[6] = (byte) (-105);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.hasMoreThanOneChild();
      node0.isNew();
      node0.setWasEmptyNode(false);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("/l-T1&9iur");
      node_FileLevelJsDocBuilder0.append("Recorded bad position information\nstart-char: ");
      node_FileLevelJsDocBuilder0.append("");
      node_FileLevelJsDocBuilder0.append("|$.JM]W");
      node_FileLevelJsDocBuilder0.append((String) null);
      Node.extractCharno(32);
      node0.isInstanceOf();
      node0.setSideEffectFlags(0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(48);
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags0.setThrows();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      node_SideEffectFlags1.areAllFlagsSet();
      Node node0 = Node.newNumber((double) 48);
      node_SideEffectFlags0.setThrows();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "h-`[>{tGH");
      Node node1 = Node.newString("h-`[>{tGH", 57, 31);
      node1.setSourceEncodedPositionForTree(8);
      node_SideEffectFlags1.setMutatesArguments();
      node1.getSourceOffset();
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("Ua>4$", true);
      node1.setStaticSourceFile(simpleSourceFile0);
      node0.isQuotedString();
      Node node2 = node0.detachFromParent();
      int int0 = 52;
      Node node3 = new Node(int0, node1, node0, node1, node1);
      node1.useSourceInfoFromForTree(node3);
      // Undeclared exception!
      try { 
        node3.setDouble(node2.REFLECTED_OBJECT);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-539), nodeArray0, 2640, 4031);
      Node node1 = new Node(114, node0, node0, node0, node0, 101, 16);
      Node node2 = new Node((-539), node1, node1);
      node2.getSourcePosition();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      int int0 = 44;
      Node node0 = new Node((-437), (Node[]) null, 44, (-437));
      Node node1 = new Node(int0, node0, node0, node0, node0);
      node1.addChildToBack(node0);
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = false;
      boolean boolean2 = true;
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node node0 = Node.newString(1462, "", 48, (-865));
      Node node1 = new Node(1462, node0, node0, node0);
      node0.getChangeTime();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node2 = new Node(1462, node1, node1);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte) (-55);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node2.getStaticSourceFile();
      node1.isVarArgs();
      node2.replaceChild(node0, node1);
      node1.useSourceInfoFromForTree(node0);
      node1.isNE();
      node2.isFunction();
      node0.getInputId();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = null;
      Node.newString(6346253, (String) null, 1549, 6346253);
      int int0 = (-2701);
      int int1 = 116;
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node node0 = Node.newString("", 2680, 2680);
      node0.isString();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) null);
      node0.checkTreeEquals(node1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node node0 = Node.newNumber(1419.0, (-2950), 12288);
      Node node1 = Node.newNumber((double) 40);
      node0.useSourceInfoIfMissingFrom(node1);
      node1.getIntProp(1196);
      node0.getString();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node node0 = new Node(609949);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(343);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setMutatesThis();
      node_SideEffectFlags4.clearSideEffectFlags();
      node_SideEffectFlags1.setMutatesThis();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      jSDocInfo0.getAssociatedNode();
      node0.addChildrenToBack((Node) null);
      node_SideEffectFlags4.clearSideEffectFlags();
      // Undeclared exception!
      try { 
        node0.isSwitch();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node node0 = Node.newString(1462, "", 48, (-905));
      Node node1 = new Node(1462, node0, node0, node0);
      node0.getChangeTime();
      Node[] nodeArray0 = new Node[0];
      Node node2 = new Node(920, nodeArray0, 40, 43);
      node0.addChildAfter(node2, node2);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = new Node(3714, 3714, 1123);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = new Node(6346253, node0, node0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node1.getStaticSourceFile();
      node0.replaceChild(node1, node1);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.isFunction();
      node2.getInputId();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)44;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = Node.newString(0, "PKufMU?|.|8Xr}RZt", (-1130), 3439);
      Node node1 = Node.newNumber((double) 2);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node3 = new Node(4095, node2, node1, 152, 86);
      Node node4 = node3.removeChildren();
      Node node5 = new Node(862, node3, (-146), 2680);
      Node node6 = new Node(2, node5, node5, node5);
      node0.addChildToBack(node5);
      boolean boolean0 = true;
      node6.setIsSyntheticBlock(boolean0);
      Node.extractLineno(node3.ORIGINALNAME_PROP);
      node4.isDec();
      node6.addChildAfter(node2, node4);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags2.clearSideEffectFlags();
      node_SideEffectFlags2.setMutatesThis();
      Node node0 = Node.newString((-2657), "com.google.javascript.rhino.Node$NodeMismatch");
      Node node1 = new Node((-2657), node0, node0, node0, node0, 50, (-687));
      Node node2 = node1.getChildAtIndex((-687));
      node0.getChangeTime();
      node2.addChildAfter(node1, node0);
      node0.getLastChild();
      node0.getDouble();
      int int0 = 28;
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node node0 = Node.newNumber(1419.0, (-2950), 12288);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      Node node1 = Node.newNumber((double) 40);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags4.clearSideEffectFlags();
      node_SideEffectFlags1.setMutatesThis();
      node_SideEffectFlags0.setMutatesArguments();
      node0.addChildrenToBack(node1);
      node_SideEffectFlags4.clearSideEffectFlags();
      node_SideEffectFlags4.setAllFlags();
      node0.getType();
      node1.getDouble();
      node2.getDouble();
      node2.isString();
      node0.isSetterDef();
      node0.isDelProp();
      node1.setLength(2234);
      node1.useSourceInfoIfMissingFromForTree(node2);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = Node.newNumber(1419.0, 12288, (-2950));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      Node node1 = Node.newNumber((double) 40);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags4.clearSideEffectFlags();
      node_SideEffectFlags1.setMutatesThis();
      node0.addChildrenToBack(node1);
      node_SideEffectFlags4.clearSideEffectFlags();
      node_SideEffectFlags4.setAllFlags();
      node0.getType();
      node1.getDouble();
      node2.getDouble();
      node1.setIsSyntheticBlock(true);
      Node.extractLineno(32);
      node0.isDec();
      node2.getIndexOfChild(node1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      InputId inputId0 = new InputId("GLOBAL_THIS");
      inputId0.toString();
      node0.setInputId(inputId0);
      node0.isRegExp();
      node0.isReturn();
      node0.isComma();
      node0.getString();
      node0.isFor();
      int int0 = 41;
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = (-145);
      Node[] nodeArray0 = new Node[4];
      int int1 = (-1517);
      Node node0 = null;
      Node node1 = new Node(220, (Node) null, 105, 220);
      Node node2 = null;
      int int2 = 46;
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node node0 = Node.newString((-2328), "pUZ", 51, (-2328));
      Node node1 = new Node(1818, node0, node0, 2425, 154);
      Node node2 = new Node((-2328), node0, node1, node1, node0, (-1399), 0);
      node2.useSourceInfoFrom(node1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(35);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags4.clearSideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags3.setMutatesArguments();
      Node node0 = new Node(153);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      node0.addChildrenToBack(node1);
      node_SideEffectFlags2.clearSideEffectFlags();
      node_SideEffectFlags4.setAllFlags();
      node1.getType();
      node0.getDouble();
      node1.getDouble();
      node1.isString();
      // Undeclared exception!
      try { 
        node0.isSetterDef();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // LABEL_NAME is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Node node0 = Node.newNumber(1419.0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      Node node1 = Node.newNumber((double) 40);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags4.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags5.clearSideEffectFlags();
      node_SideEffectFlags1.setMutatesThis();
      node0.addChildrenToBack(node1);
      node_SideEffectFlags5.clearSideEffectFlags();
      node2.isSwitch();
      node1.isInc();
      Node node3 = Node.newNumber((double) 16, 12, 38);
      Node node4 = node0.getAncestor(48);
      node2.useSourceInfoIfMissingFromForTree(node3);
      Node node5 = new Node(1, node3, node3, (Node) null, node1);
      int int0 = 105;
      Node node6 = new Node(node3.INCRDECR_PROP, node5, int0, node4.CHANGE_TIME);
      // Undeclared exception!
      try { 
        node6.getChildCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      InputId inputId0 = new InputId("GLOBAL_THIS");
      inputId0.toString();
      node0.setInputId(inputId0);
      node0.isRegExp();
      node0.isEquivalentTo(node0, false, false, true);
      node0.isFunction();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Node node0 = new Node(85, 6346253, 4249);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = new Node((-4826), node0, node0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte)117;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node2 = new Node(31, node0, node0, 6346253, 48);
      node2.getStaticSourceFile();
      node1.replaceChild(node2, node2);
      String string0 = "";
      Node node3 = Node.newString(string0);
      node3.useSourceInfoFromForTree(node2);
      node0.isFunction();
      node1.getInputId();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Node node0 = Node.newNumber(1419.0, (-2950), 12288);
      Node node1 = Node.newNumber((double) 40);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node2.setIsSyntheticBlock(true);
      node2.hasOneChild();
      node1.getIntProp(1196);
      node0.getString();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node node0 = new Node(0, 0, 44);
      node0.isDo();
      node0.children();
      node0.getDirectives();
      Node node1 = new Node(2, node0, node0, node0, node0, 51, (-204));
      node0.getInputId();
      Node node2 = new Node(37, node0);
      node0.addChildBefore(node1, node2);
      Node node3 = new Node(node0.INFERRED_FUNCTION, node0);
      boolean boolean0 = true;
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node node0 = Node.newString("Dx< ilpw;d*c");
      node0.isEquivalentToTyped(node0);
      node0.putIntProp(127, (-865));
      node0.getInputId();
      node0.putBooleanProp(13, true);
      node0.isOnlyModifiesArgumentsCall();
      node0.setChangeTime(303);
      node0.getChangeTime();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setMutatesThis();
      node_SideEffectFlags0.setAllFlags();
      node0.getType();
      node0.getDouble();
      node0.getDouble();
      node0.getAncestors();
      node0.isString();
      node0.isSetterDef();
      FileSystemHandling fileSystemHandling0 = null;
      try {
        fileSystemHandling0 = new FileSystemHandling();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unexpected prop id 13
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = Node.IS_CONSTANT_NAME;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[1];
      JSTypeNative jSTypeNative0 = JSTypeNative.NULL_VOID;
      jSTypeNativeArray0[0] = jSTypeNative0;
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      JSType jSType1 = jSTypeRegistry0.createNullableType(jSType0);
      JSType[] jSTypeArray0 = new JSType[12];
      jSTypeArray0[5] = jSType0;
      jSTypeArray0[1] = jSType1;
      jSTypeArray0[2] = jSType0;
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      Node node1 = new Node((-1065), node0, node0);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(50);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags2.clearSideEffectFlags();
      node_SideEffectFlags2.setMutatesThis();
      Node node2 = new Node(31, node0, node1, node1, 417, 29);
      node2.addChildrenToBack(node0);
      node_SideEffectFlags1.setThrows();
      // Undeclared exception!
      try { 
        node_SideEffectFlags3.clearSideEffectFlags();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Node node0 = Node.newNumber(1419.0, (-2950), 12288);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/0z#~bxft%");
      Node node1 = Node.newNumber((double) 40);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node2.getQualifiedName();
      node0.getType();
      node1.getDouble();
      node2.getDouble();
      node1.setIsSyntheticBlock(true);
      Node.extractLineno(1091);
      node0.isDec();
      node0.isFromExterns();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node_NodeMismatch0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = 57;
      Node node0 = null;
      Node node1 = new Node(57, (Node) null, (Node) null, (Node) null, 57, 125);
      EvoSuiteFile evoSuiteFile0 = null;
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newString(2852, "uofcUn", 57, 2852);
      Node node1 = new Node(2852, node0, 1135, 1358);
      node0.getBooleanProp(37);
      node1.getProp(1929);
      JSType.toMaybeTemplateType((JSType) null);
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeArray0[0] = (JSType) null;
      jSTypeArray0[1] = null;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSTypeArray0[1], jSTypeArray0);
      jSTypeArray0[2] = (JSType) functionType0;
      FunctionType functionType1 = jSTypeRegistry0.createConstructorType((JSType) null, true, jSTypeArray0);
      ObjectType objectType0 = jSTypeRegistry0.createObjectType("eBZo;D\"$C", node1, (ObjectType) functionType1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSTypeRegistry0.registerPropertyOnType(" : ", objectType0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      Node node3 = new Node(303, node2, node2, node2);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "slash_v");
      Node node0 = Node.newNumber(0.0);
      node0.checkTreeEqualsImpl((Node) null);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node node0 = Node.newNumber(1419.0, (-2950), 12288);
      Node node1 = Node.newNumber((double) 40);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node2.setIsSyntheticBlock(true);
      node2.hasOneChild();
      node1.getIntProp(1196);
      node2.isName();
      node2.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = Node.newNumber(1419.0, 12288, (-2950));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      Node node1 = Node.newNumber((double) 40);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags4.clearSideEffectFlags();
      node_SideEffectFlags1.setMutatesThis();
      node0.addChildrenToBack(node1);
      node_SideEffectFlags4.clearSideEffectFlags();
      node_SideEffectFlags4.setAllFlags();
      node2.getType();
      node1.getDouble();
      node0.getDouble();
      node2.setIsSyntheticBlock(false);
      Node.extractLineno((-2300));
      node0.isDec();
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      jSDocInfo0.getAssociatedNode();
      node0.getIndexOfChild((Node) null);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node node0 = Node.newNumber(1419.0, (-2950), 12288);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      Node node1 = Node.newNumber((double) 40);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.clearSideEffectFlags();
      node_SideEffectFlags3.setMutatesThis();
      node0.addChildrenToBack(node1);
      node_SideEffectFlags2.clearSideEffectFlags();
      node_SideEffectFlags2.setAllFlags();
      node0.getType();
      node1.getDouble();
      node2.getDouble();
      node1.isRegExp();
      node0.isEquivalentTo(node2, false, true, false);
      node1.isFunction();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = Node.newNumber(1419.0, (-2950), 12288);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      InputId inputId0 = new InputId("Object#Key");
      inputId0.toString();
      node0.setInputId(inputId0);
      node1.isRegExp();
      node1.isReturn();
      Node node2 = new Node(85, node1);
      node2.isComma();
      Node node3 = node2.cloneTree();
      node2.checkTreeTypeAwareEqualsImpl(node0);
      node3.children();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Node node0 = Node.newNumber(1419.0, (-2950), 12288);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      Node node1 = Node.newNumber((double) 40);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags1.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.clearSideEffectFlags();
      node_SideEffectFlags1.setMutatesThis();
      node0.addChildrenToBack(node1);
      node_SideEffectFlags2.clearSideEffectFlags();
      node_SideEffectFlags2.setAllFlags();
      node0.getType();
      node1.getDouble();
      node2.getDouble();
      node2.isTypeOf();
      node0.isSetterDef();
      node0.isDelProp();
      node1.setLength(2234);
      node2.isNull();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node node0 = new Node(32);
      node0.setWasEmptyNode(false);
      node0.setWasEmptyNode(false);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("/l-T1&9iur");
      node_FileLevelJsDocBuilder0.append("Recorded bad position information\nstart-char: ");
      node_FileLevelJsDocBuilder0.append("");
      node_FileLevelJsDocBuilder0.append("|$.JM]W");
      node_FileLevelJsDocBuilder0.append((String) null);
      Node.extractCharno(32);
      Node node1 = Node.newString(57, "DNH#8npxWCNz1?E04^c");
      node0.clonePropsFrom(node1);
      node0.isInstanceOf();
      int int0 = 0;
      node0.setSideEffectFlags(int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      jSDocInfo0.getAssociatedNode();
      Node node0 = new Node(116, (Node) null, (Node) null, 16, 1);
      node0.siblings();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "slash_v");
      Node node0 = Node.newNumber(0.0);
      node0.mayMutateGlobalStateOrThrow();
      Node node1 = null;
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node0.setSideEffectFlags(node_SideEffectFlags2);
      node0.checkTreeEqualsImpl(node1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "scash_v");
      Node node0 = Node.newNumber(0.0);
      node0.getSourceFileName();
      Node node1 = null;
      node0.checkTreeEqualsImpl((Node) null);
      node0.checkTreeTypeAwareEqualsImpl(node1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("k3w?$[M/Tp");
      Node node1 = Node.newString(16, "k3w?$[M/Tp", 48, 1);
      Node node2 = new Node(1073741823, node1, node1, node1);
      node1.setCharno(37);
      node0.getChangeTime();
      Node[] nodeArray0 = new Node[0];
      Node node3 = new Node(56, nodeArray0, 57, 1);
      node1.addChildAfter(node3, node0);
      node1.isScript();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node.extractCharno(12288);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags3.areAllFlagsSet();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = Node.newNumber((double) 33);
      Node node1 = new Node(37, node0, node0, node0);
      Node node2 = Node.newString(12, "5=pG:T7VZ=^,:", 302, 31);
      Node node3 = new Node((-1406), node2, node2);
      node1.useSourceInfoIfMissingFrom(node3);
      Node node4 = Node.newString("Object#Element");
      node4.setIsSyntheticBlock(true);
      node0.hasOneChild();
      node0.getIntProp(103);
      node1.getString();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node node0 = Node.newNumber(1419.0, (-2950), 12288);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      InputId inputId0 = new InputId("Object#Key");
      inputId0.toString();
      node0.setInputId(inputId0);
      node1.isRegExp();
      node1.isReturn();
      Node node2 = new Node(85, node1);
      node2.isComma();
      node2.detachChildren();
      Node node3 = Node.newString(310, "ELWx*UteD2A=d", 8199, 4095);
      node3.setLineno(1209);
      node0.isOnlyModifiesThisCall();
      node3.isVar();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = "";
      Node node0 = Node.newString(1462, "", 48, (-905));
      Node node1 = new Node(1462, node0, node0, node0);
      node0.getChangeTime();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-105);
      byteArray0[7] = (byte)52;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.hasMoreThanOneChild();
      node0.isNew();
      node1.toString(true, false, false);
      boolean boolean0 = false;
      node0.setWasEmptyNode(boolean0);
      node0.getJsDocBuilderForNode();
      int int0 = 54;
      int int1 = (-2090);
      Node.newString(string0, int0, int1);
      node1.getChildCount();
      // Undeclared exception!
      try { 
        node1.getIndexOfChild(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1462
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Node node0 = Node.newNumber(1419.0, (-2950), (-2950));
      Node node1 = Node.newNumber((double) 40);
      node0.isOnlyModifiesArgumentsCall();
      Node node2 = new Node(52, node0, node0);
      node2.setIsSyntheticBlock(true);
      node2.hasOneChild();
      node1.getIntProp(1196);
      node0.getString();
      node2.checkTreeEqualsImpl(node1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-2950), (-2950), 12288);
      Node node1 = Node.newNumber(503.3);
      node1.useSourceInfoIfMissingFrom(node0);
      Node node2 = Node.newString((-1001), "}<AWu_", 31, (-1732));
      node2.setIsSyntheticBlock(true);
      node0.hasOneChild();
      node2.getIntProp((-849));
      node2.getString();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node node0 = new Node(32);
      boolean boolean0 = false;
      node0.setWasEmptyNode(false);
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = node0;
      Node node1 = Node.newString(1, "");
      nodeArray0[1] = node1;
      Node node2 = new Node(10, 29, 2);
      nodeArray0[2] = node2;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      nodeArray0[5] = node0;
      nodeArray0[6] = node0;
      nodeArray0[7] = node0;
      Node node3 = new Node(31, nodeArray0);
      node3.setWasEmptyNode(boolean0);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = nodeArray0[5].getJsDocBuilderForNode();
      String string0 = "/\\l-T1&9iur";
      String string1 = "E:%s~ei])~&H";
      // Undeclared exception!
      try { 
        node_FileLevelJsDocBuilder0.append(string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Node node0 = Node.newString("", 2680, 2680);
      node0.isString();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.isExprResult();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      Node node0 = Node.newString(2345, "Object#Key");
      Node node1 = new Node(57, node0, node0, 43, (-1505));
      node0.isEquivalentTo(node1, true, true, true);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) null, (JSType) null);
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      node2.getLastChild();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = null;
      Node node1 = new Node(2820, (Node) null, (Node) null, (Node) null, (Node) null, 2820, 2820);
      int int0 = (-2855);
      // Undeclared exception!
      try { 
        node1.getChildAtIndex(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = new Node(110, (Node) null);
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[5];
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = (-1504);
      int int1 = 49;
      Node node0 = Node.newString((-1504), "Number node not created with Node.newNumber", (-1504), 49);
      node0.isEquivalentTo((Node) null);
      node0.setDouble(int0);
      // Undeclared exception!
      try { 
        node0.isObjectLit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Node node0 = Node.newNumber(1419.0, (-2950), 12288);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      Node node1 = Node.newNumber((double) 40);
      node0.useSourceInfoIfMissingFrom(node1);
      node1.putIntProp(11, (-204));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setThrows();
      Node node2 = Node.newNumber((double) 36, 2, 43);
      node1.setLineno(4);
      node2.isOnlyModifiesThisCall();
      node2.isVar();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(35);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags5.setThrows();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setMutatesThis();
      node_SideEffectFlags6.setMutatesArguments();
      node_SideEffectFlags6.setMutatesThis();
      node_SideEffectFlags6.setMutatesGlobalState();
      Node[] nodeArray0 = new Node[0];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = new Node((-2179), nodeArray0, (-1647), 101);
      Node node1 = node0.getAncestor(0);
      node0.setType(101);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node_SideEffectFlags4.setThrows();
      node1.setLineno(38);
      node1.isOr();
      node1.isDo();
      node1.isRegExp();
      node1.isHook();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Node node0 = Node.newNumber(1419.0, (-2950), 12288);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      InputId inputId0 = new InputId("Object#Key");
      inputId0.toString();
      node0.setInputId(inputId0);
      node1.isRegExp();
      node1.isReturn();
      Node node2 = new Node(1, node0, node1, node0, node0);
      node2.isComma();
      Node node3 = node2.cloneTree();
      node2.checkTreeTypeAwareEqualsImpl(node0);
      node3.children();
      node2.isCase();
      node1.removeChildAfter(node0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      String string0 = "";
      Node node1 = Node.newString(38, "", 1, (-1251));
      node1.getQualifiedName();
      node0.getType();
      node1.getDouble();
      node0.getDouble();
      boolean boolean0 = false;
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Node node0 = new Node(3714, 3714, 1123);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = Node.newString("EvalError", 57, 29);
      node0.useSourceInfoIfMissingFrom(node1);
      node1.putIntProp(55, 48);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(42);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags3.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.setThrows();
      node_SideEffectFlags4.setAllFlags();
      Node.newNumber((double) 56, (-3083), 39);
      node0.isCatch();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = Node.newNumber(1406.8398675052642, (-2950), 12288);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      Node node1 = Node.newNumber((double) 40);
      Node node2 = new Node(39, node1, node0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-16);
      node2.isName();
      node0.getStaticSourceFile();
      node0.replaceChild(node1, node1);
      node1.useSourceInfoFromForTree(node2);
      node0.isFunction();
      node1.getInputId();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Node node0 = new Node(23);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      InputId inputId0 = new InputId("GLOBAL_THIS");
      inputId0.toString();
      node0.isTypeOf();
      Node node2 = Node.newString("InputId: GLOBAL_THIS");
      Node node3 = new Node(50, node2);
      node3.isSetterDef();
      Node node4 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      InputId inputId1 = new InputId("Object#Element");
      inputId1.toString();
      Node node5 = Node.newString("InputId: Object#Element", 843, 3714);
      node5.setInputId(inputId0);
      node4.isRegExp();
      node3.isReturn();
      Node node6 = new Node(1, node5);
      Node node7 = new Node(31, 1560, 42);
      node7.isComma();
      node7.cloneTree();
      node1.checkTreeTypeAwareEqualsImpl(node6);
      node0.children();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.setJSDocInfo(jSDocInfo0);
      int int0 = 0;
      Node node1 = node0.removeChildAfter(node0);
      // Undeclared exception!
      try { 
        node1.isNoSideEffectsCall();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prev is not a child of this node.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node node0 = Node.newNumber(1419.0, (-2950), 12288);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      InputId inputId0 = new InputId("Object#Key");
      inputId0.toString();
      node0.setInputId(inputId0);
      node1.isRegExp();
      node1.isReturn();
      Node node2 = new Node(85, node1);
      node0.isScript();
      node2.detachChildren();
      Node.extractLineno(4095);
      Node node3 = new Node(28, node1, node1, node1);
      node3.isDec();
      node0.isFromExterns();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node3, node3);
      node_NodeMismatch0.equals(jSTypeRegistry0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Node node0 = Node.newString("Dx< ilpw;d*c");
      Node node1 = null;
      Node node2 = Node.newNumber(1.0, 4, 105);
      node2.isEquivalentTo((Node) null, false, false, false);
      node0.addChildAfter(node1, node2);
      node0.mayMutateArguments();
      String string0 = "\n\nTree2:\n";
      int int0 = 0;
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Node node0 = Node.newString(1462, "", 48, (-905));
      Node node1 = new Node(1462, node0, node0, node0);
      node0.getChangeTime();
      Node[] nodeArray0 = new Node[0];
      Node node2 = new Node(920, nodeArray0, 40, 43);
      node0.isReturn();
      node2.isComma();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Node node0 = Node.newNumber(1419.0, 12288, (-2950));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      Node node1 = Node.newNumber((double) 40);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags4.clearSideEffectFlags();
      node2.copyInformationFromForTree(node1);
      node_SideEffectFlags1.setMutatesThis();
      node0.addChildrenToBack(node1);
      node_SideEffectFlags4.clearSideEffectFlags();
      node_SideEffectFlags4.setAllFlags();
      node0.getType();
      node1.getDouble();
      node2.getDouble();
      node1.isReturn();
      node1.isComma();
      node1.isEmpty();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Node node0 = Node.newString(1462, "", 48, (-905));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Node node1 = new Node(1462, node0, node0, node0);
      node0.getChangeTime();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      node_SideEffectFlags2.setReturnsTainted();
      node1.setSideEffectFlags(node_SideEffectFlags0);
      node1.checkTreeEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("JTM8 SDY@b>k!cAK");
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder1 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder1.append("Object#Element");
      node_FileLevelJsDocBuilder0.append("/l-T1&9iur");
      String string0 = "{Cc";
      node_FileLevelJsDocBuilder0.append("{Cc");
      node_FileLevelJsDocBuilder0.append("NUMBER_OBJECT_TYPE");
      Node.extractCharno(31);
      node0.isInstanceOf();
      node0.setSideEffectFlags(31);
      int int0 = 79;
      Node.newString(string0, node0.SYNTHETIC_BLOCK_PROP, int0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Node node0 = Node.newNumber(1419.0, (-2955), 12288);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      InputId inputId0 = new InputId("Object#Key");
      inputId0.toString();
      node0.setInputId(inputId0);
      node1.isRegExp();
      node0.isEquivalentTo(node1, false, false, false);
      Node node2 = new Node((-2955), 4, 47);
      InputId[] inputIdArray0 = new InputId[2];
      inputIdArray0[0] = inputId0;
      inputIdArray0[1] = inputId0;
      arrayList0.toArray(inputIdArray0);
      node1.isComma();
      Node node3 = node2.cloneTree();
      node1.checkTreeTypeAwareEqualsImpl(node0);
      jSTypeRegistry0.forwardDeclareType("InputId: Object#Key");
      node2.children();
      node3.isEquivalentToShallow(node2);
      node1.addChildrenAfter(node3, (Node) null);
      node2.isCase();
      node1.isScript();
      node3.removeChildAfter(node1);
      node3.checkTreeEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Node node0 = new Node(32);
      node0.setWasEmptyNode(false);
      node0.setWasEmptyNode(false);
      node0.getJsDocBuilderForNode();
      InputId inputId0 = new InputId("GLOBAL_THIS");
      inputId0.toString();
      node0.setInputId(inputId0);
      node0.isRegExp();
      node0.setIsSyntheticBlock(false);
      Node.extractLineno(32);
      Iterator<TemplateType> iterator0 = (Iterator<TemplateType>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ImmutableList<JSType> immutableList1 = immutableList0.reverse();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList1);
      node1.isDec();
      node1.getIndexOfChild(node0);
      node0.isVarArgs();
      node1.isEquivalentToShallow(node0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Node node0 = new Node(32);
      node0.setWasEmptyNode(false);
      node0.setWasEmptyNode(false);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("/l-T1&9iur");
      node_FileLevelJsDocBuilder0.append("Recorded bad position information\nstart-char: ");
      node_FileLevelJsDocBuilder0.append("");
      node_FileLevelJsDocBuilder0.append("|$.JM]W");
      node_FileLevelJsDocBuilder0.append((String) null);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags2.setAllFlags();
      node0.getType();
      node0.getDouble();
      node0.getDouble();
      node0.isReturn();
      node0.isComma();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Node node0 = Node.newNumber(1530.5322594, (-2949), 12288);
      Node node1 = Node.newNumber((double) 4095);
      node1.appendStringTree((Appendable) null);
      node1.isOnlyModifiesArgumentsCall();
      node1.setSourceEncodedPositionForTree(node0.CHANGE_TIME);
      Node node2 = new Node(node0.SYNTHETIC_BLOCK_PROP, node0, node1);
      boolean boolean0 = true;
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Node node0 = Node.newNumber(1419.0, (-2950), 12288);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/0z#~bxft%");
      Node node1 = Node.newNumber((double) 40);
      node1.getQualifiedName();
      node1.getDouble();
      node1.getDouble();
      node1.setIsSyntheticBlock(true);
      Node.extractLineno(1091);
      node0.isDec();
      node0.isFromExterns();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node_NodeMismatch0.equals((Object) null);
      node0.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Node node0 = Node.newNumber(1419.0, (-2950), 12288);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2950));
      Node node1 = Node.newNumber(1286.6023);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags4.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setThrows();
      node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags4.clearSideEffectFlags();
      Node node3 = node0.copyInformationFromForTree(node2);
      node_SideEffectFlags5.setMutatesThis();
      node3.addChildrenToBack(node2);
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags3.setAllFlags();
      node0.getType();
      node0.getDouble();
      node3.getDouble();
      node3.isReturn();
      node3.isComma();
      node0.isDelProp();
      node2.isNE();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = Node.newNumber(0.0, 127, 12);
      node1.getProp(1236);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "In/^^]DA*\")@qZ)y)=";
      objectArray0[1] = null;
      Node node2 = Node.newString(56, "");
      node2.replaceChildAfter(node1, node1);
      node0.getChildBefore(node1);
      node0.isUnscopedQualifiedName();
      node1.isString();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(35);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags6.setThrows();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags6.setMutatesThis();
      node_SideEffectFlags5.setMutatesGlobalState();
      node_SideEffectFlags7.setMutatesThis();
      node_SideEffectFlags7.setMutatesGlobalState();
      Node[] nodeArray0 = new Node[0];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = new Node((-2179), nodeArray0, (-1647), 101);
      Node node1 = node0.getAncestor(0);
      node0.setType(101);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node_SideEffectFlags4.setThrows();
      node1.setLineno(38);
      node1.isOr();
      node1.isDo();
      node1.checkTreeTypeAwareEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(35);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags5.setThrows();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setMutatesThis();
      node_SideEffectFlags6.setMutatesArguments();
      node_SideEffectFlags6.setMutatesThis();
      node_SideEffectFlags6.setMutatesGlobalState();
      Node[] nodeArray0 = new Node[0];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = new Node((-2179), nodeArray0, (-1647), 101);
      Node node1 = node0.getAncestor(0);
      node0.setType(101);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node_SideEffectFlags4.setThrows();
      node1.setLineno(38);
      node1.isOr();
      node1.isDo();
      node1.isRegExp();
      node1.children();
      node1.isWith();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Node node0 = Node.newNumber(1419.0, 12288, (-2950));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      Node node1 = Node.newNumber((double) 40);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      node_SideEffectFlags3.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
      node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags4.clearSideEffectFlags();
      node2.copyInformationFromForTree(node1);
      node_SideEffectFlags1.setMutatesThis();
      node0.addChildrenToBack(node1);
      node_SideEffectFlags4.clearSideEffectFlags();
      node_SideEffectFlags4.setAllFlags();
      node0.getType();
      node1.getDouble();
      node2.getDouble();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "a");
      Node.newString("", 1462, 49);
      Node node3 = new Node(1255, node2, node2, node1, node0);
      node3.isCatch();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Node node0 = Node.newNumber(1419.0, (-2950), 12288);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      Node node1 = Node.newNumber((double) 40);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node1.putIntProp(11, (-204));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setMutatesGlobalState();
      node2.isUnscopedQualifiedName();
      node0.getDouble();
      node2.toString(false, false, true);
      node2.siblings();
      node1.getInputId();
      node1.setInputId((InputId) null);
      node1.appendStringTree((Appendable) null);
      node2.hasChild(node0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Node node0 = Node.newString("", (-3101), 1268);
      Node node1 = Node.newNumber((double) 42);
      node0.getInputId();
      node0.setInputId((InputId) null);
      node0.addSuppression("");
      node1.isComma();
      node0.isInstanceOf();
      node1.isName();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = Node.newNumber(40.0);
      node0.getSourceFileName();
      node0.checkTreeTypeAwareEqualsImpl(node0);
      node0.checkTreeTypeAwareEqualsImpl((Node) null);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Node node0 = new Node(23);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node0.isTypeOf();
      InputId inputId0 = new InputId("Object#Element");
      inputId0.toString();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      Node node1 = node0.setJSDocInfo(jSDocInfo0);
      node1.setString(".@Ses3");
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Node node0 = Node.newString(1462, "", 48, (-905));
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("");
      node_FileLevelJsDocBuilder0.append("");
      node_FileLevelJsDocBuilder0.append("|$.JM]W");
      node_FileLevelJsDocBuilder0.append("");
      Node.extractCharno(1462);
      node0.isInstanceOf();
      node0.setSideEffectFlags(4580);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Iterator<TemplateType> iterator0 = (Iterator<TemplateType>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      InputId inputId0 = new InputId("slash_v");
      inputId0.toString();
      node1.setInputId(inputId0);
      node0.isRegExp();
      node1.isReturn();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node2 = new Node(1989, node1, node1, node0, node0);
      node1.isComma();
      Node node3 = node0.cloneTree();
      node0.checkTreeTypeAwareEqualsImpl(node3);
      jSTypeRegistry0.forwardDeclareType("");
      node3.children();
      node0.isCase();
      node1.removeChildAfter(node0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "gHDD");
      Node node0 = new Node(42);
      node0.getDirectives();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.setDirectives((Set<String>) null);
      node0.getQualifiedName();
      node0.getJSType();
      Node node1 = new Node(47, 3773, 31);
      node1.addChildToBack(node0);
      node0.copyInformationFromForTree(node1);
      node0.removeFirstChild();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(49);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.areAllFlagsSet();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
      objectType0.toString();
      arrayList0.add((JSType) objectType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node1 = new Node(2481, node0, node0, node0);
      InputId inputId0 = new InputId("zBY^NbrDXP!QQEUZ5<");
      node1.setInputId(inputId0);
      Node node2 = new Node(51, node1);
      node2.setInputId(inputId0);
      node2.isCall();
      node0.getBooleanProp(196);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "free_call");
      node2.isGetterDef();
      Node node3 = node2.copyInformationFrom(node1);
      node0.toStringTree();
      node3.isDelProp();
      node2.isCast();
      node3.setString("zBY^NbrDXP!QQEUZ5<");
      node0.isOr();
      node3.addChildToBack(node1);
      node3.isObjectLit();
      node2.getStaticSourceFile();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags3.areAllFlagsSet();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newString("i(q wx\"=");
      nodeArray0[0] = node0;
      Node node1 = new Node((-731), nodeArray0, 38, 0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node2 = new Node(39, nodeArray0, 2333, 5767);
      Node node3 = node1.getAncestor(node0.SIDE_EFFECT_FLAGS);
      int int0 = 2378;
      node0.setType(int0);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node3, node1);
      node_SideEffectFlags3.setThrows();
      int int1 = 363;
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags3.areAllFlagsSet();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = null;
      String string0 = "5=pG:T7VZ=^,:";
      int int0 = 33;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node[] nodeArray0 = new Node[1];
      Node node0 = Node.newString("i(q wx\"=");
      nodeArray0[0] = node0;
      Node node1 = new Node((-731), nodeArray0, 38, 0);
      node0.setIsSyntheticBlock(true);
      node1.isQualifiedName();
      node0.isReturn();
      Node node2 = new Node(33, node1, node0, 42, 125);
      node_SideEffectFlags1.clearSideEffectFlags();
      int int1 = (-1650);
      Node node3 = new Node(int0, node2, node2, node2, node2, node2.FLAG_LOCAL_RESULTS, int1);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.getObjectElementKey();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // second new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Node node0 = Node.newNumber(1419.0, (-2950), 12288);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      InputId inputId0 = new InputId("Object#Key");
      inputId0.toString();
      node1.isRegExp();
      node1.isReturn();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte) (-41);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HashSet<String> hashSet0 = new HashSet<String>();
      node1.setDirectives(hashSet0);
      Node node2 = new Node(46, node0, node1, 55, 29);
      Node node3 = node2.cloneTree();
      node1.checkTreeTypeAwareEqualsImpl(node2);
      jSTypeRegistry0.forwardDeclareType("InputId: Object#Key");
      node2.getStaticSourceFile();
      node3.isScript();
      node2.removeProp(1211);
      node2.isBlock();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Node node0 = Node.newString("", 2680, 2680);
      node0.isString();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Iterator<TemplateType> iterator0 = (Iterator<TemplateType>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      ImmutableList<TemplateType> immutableList0 = ImmutableList.copyOf((Iterator<? extends TemplateType>) iterator0);
      ImmutableList<TemplateType> immutableList1 = immutableList0.asList();
      ImmutableList<JSType> immutableList2 = ImmutableList.copyOf((Collection<? extends JSType>) immutableList1);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList2);
      InputId inputId0 = new InputId("Object#Element");
      inputId0.toString();
      node0.setInputId(inputId0);
      node0.isRegExp();
      node0.isReturn();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node2 = Node.newString(38, "Object#Element");
      Node node3 = new Node((-1460), node1, node2, node0, node2);
      node0.isComma();
      Node node4 = node3.cloneTree();
      node1.checkTreeTypeAwareEqualsImpl(node0);
      jSTypeRegistry0.forwardDeclareType("L ><]{q7.r+qPG_]{");
      node4.children();
      node0.isCase();
      node2.removeChildAfter(node4);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Node node0 = new Node(23);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      node0.isTypeOf();
      InputId inputId0 = new InputId("Object#Element");
      node0.isOnlyModifiesThisCall();
      node0.isVar();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node_SideEffectFlags0.setThrows();
      node0.setSideEffectFlags(node_SideEffectFlags0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Node node0 = Node.newString("", 2680, 2680);
      node0.isString();
      node0.isComma();
      Node node1 = Node.newString(43, "ELWx*UteD2A=d", 57, (-1532));
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      node1.setJSDocInfo(jSDocInfo0);
      node0.setString("");
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Node node0 = Node.newNumber(1419.0, (-2950), (-2950));
      Node node1 = Node.newNumber((double) 40);
      node0.isOnlyModifiesArgumentsCall();
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("");
      node_FileLevelJsDocBuilder0.append("o3n*}5");
      node_FileLevelJsDocBuilder0.append("r.{Kr!p");
      Node.extractCharno(49);
      Node node2 = Node.newString((-1847), "end-line: ");
      Node node3 = node2.clonePropsFrom(node1);
      node3.isInstanceOf();
      node0.setSideEffectFlags(57);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Node node0 = new Node(32);
      node0.setWasEmptyNode(true);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("`+2PrCKRD");
      node_FileLevelJsDocBuilder0.append("/l-T1&9iur");
      Node node1 = new Node(111, node0, node0);
      node1.getChildBefore(node0);
      node0.setIsSyntheticBlock(true);
      node0.hasOneChild();
      node1.getIntProp(2680);
      node0.getString();
      Node node2 = new Node(node0.SLASH_V);
      node2.checkTreeEqualsImpl(node0);
      node0.isNull();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = Node.newNumber(0.0, 127, 12);
      node1.getProp(1236);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "In/^^]DA*\")@qZ)y)=";
      objectArray0[1] = null;
      Node node2 = Node.newString(56, "");
      Node node3 = Node.newString("In/^^]DA*\")@qZ)y)=", 38, (-401));
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node3);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags3.setThrows();
      node1.setLineno(1410);
      node0.isOr();
      node0.isDo();
      node2.isRegExp();
      node2.isHook();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Node node0 = new Node(32);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(50);
      Node node1 = Node.newNumber((double) 8);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags4.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setThrows();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags0.clearSideEffectFlags();
      Node node3 = node2.copyInformationFromForTree(node0);
      node_SideEffectFlags4.setMutatesThis();
      node3.addChildrenToBack(node0);
      node_SideEffectFlags6.clearSideEffectFlags();
      node_SideEffectFlags5.setAllFlags();
      node0.getType();
      node1.getDouble();
      Node node4 = new Node((-2179), node1, node0, 85, 50);
      node4.getDouble();
      node3.isReturn();
      node0.isComma();
      node0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Node node0 = Node.newNumber(1419.0, 12288, (-2950));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "]}pC}PW%@3+");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte)101;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.hasMoreThanOneChild();
      node0.isNew();
      node0.cloneNode();
      node0.setWasEmptyNode(false);
      node0.getJsDocBuilderForNode();
      Node.newString("<", 1091, (-4173));
      Node node1 = Node.newString("CONST");
      node1.getChildCount();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Node node0 = Node.newNumber(1419.0, (-2950), 12288);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2950));
      Node node1 = Node.newNumber(1286.6023);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesArguments();
      Node.newNumber((double) 4, 38, 1);
      node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags4.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setThrows();
      node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags4.clearSideEffectFlags();
      Node node3 = node0.copyInformationFromForTree(node2);
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags5.setMutatesThis();
      node3.addChildrenToBack(node2);
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags3.setAllFlags();
      node0.getType();
      node0.getDouble();
      node3.getDouble();
      node3.isReturn();
      node1.setInputId((InputId) null);
      node3.isComma();
      node0.isDelProp();
      node2.isNE();
      node1.isAssignAdd();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "t[=eh6kHP`Du{");
      Node node0 = Node.newNumber(40.0, 93, 2829);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",w .d+$");
      Node node1 = Node.newNumber((-13.57639875610406), 44, 54);
      node0.getDirectives();
      Node node2 = node0.cloneTree();
      node0.isDefaultCase();
      Node node3 = Node.newNumber((double) 15);
      node1.isEquivalentTo(node3);
      node1.getJSDocInfo();
      node1.getParent();
      node0.getProp(50);
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node2.replaceChild((Node) null, node3);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Node node0 = Node.newNumber(1419.0, (-2950), 12288);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      InputId inputId0 = new InputId("Object#Key");
      inputId0.toString();
      node0.setInputId(inputId0);
      node1.isRegExp();
      node0.toString();
      node1.isReturn();
      Node node2 = new Node(85, node1);
      node0.isScript();
      node2.detachChildren();
      Node.extractLineno(4095);
      Node node3 = new Node(28, node1, node1, node1);
      node3.isDec();
      node0.isFromExterns();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node3, node3);
      node_NodeMismatch0.equals(jSTypeRegistry0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      Node node1 = Node.newString(38, "Object#Key", 1, (-1251));
      node1.getQualifiedName();
      node0.getType();
      node1.getDouble();
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME Object#Key is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(35);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags5.setThrows();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setMutatesThis();
      node_SideEffectFlags6.setMutatesThis();
      node_SideEffectFlags6.clearSideEffectFlags();
      node_SideEffectFlags6.setMutatesThis();
      node_SideEffectFlags4.clearAllFlags();
      node_SideEffectFlags6.setMutatesGlobalState();
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-2179), nodeArray0, (-1647), 58);
      Node node1 = node0.getAncestor(0);
      node0.setType(58);
      node_SideEffectFlags4.setThrows();
      node1.setLineno(38);
      node1.isOr();
      node1.isDo();
      node1.isRegExp();
      node1.isHook();
      Node node2 = new Node((-405), node0);
      node1.copyInformationFrom(node2);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Node node0 = new Node(3714, 3714, 1123);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = new Node(6346253, node0, node0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node.extractLineno(2);
      node1.isDec();
      node0.isFromExterns();
      Node node2 = new Node(43, node0, node1, node1, 2, 58);
      node0.checkTreeEqualsImpl(node1);
      Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeEqualsImpl(node0);
      String string0 = "Y3vz;kEz`}h@";
      node_NodeMismatch0.equals(string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Node node0 = Node.newNumber(1530.5322594, (-2949), 12288);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      InputId inputId0 = new InputId("Object#Key");
      inputId0.toString();
      node0.setInputId(inputId0);
      node0.isRegExp();
      node1.isReturn();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node2 = new Node(54, node0, node1, node0, node1);
      Node node3 = node1.cloneTree();
      node2.checkTreeTypeAwareEqualsImpl(node3);
      jSTypeRegistry0.forwardDeclareType("InputId: Object#Key");
      node1.children();
      node2.isCase();
      Node node4 = Node.newString("InputId: Object#Key");
      node1.removeChildAfter(node4);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      int int0 = 93;
      Node[] nodeArray0 = new Node[2];
      Node node0 = new Node((-1573), nodeArray0);
      nodeArray0[0] = node0;
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = new Node(2680);
      node0.setSourceFileForTesting("");
      node0.isFunction();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(35);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags5.setThrows();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setMutatesThis();
      node_SideEffectFlags6.setMutatesThis();
      node_SideEffectFlags6.clearSideEffectFlags();
      node_SideEffectFlags6.setMutatesThis();
      node_SideEffectFlags6.setMutatesGlobalState();
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node((-2179), nodeArray0, (-1647), 101);
      Node node1 = node0.getAncestor(0);
      node0.setType(101);
      node_SideEffectFlags4.setThrows();
      node1.setLineno(38);
      node1.isOr();
      node1.isDo();
      node1.isRegExp();
      node1.isNull();
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Node node0 = Node.newNumber(1419.0, (-2950), 12288);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      InputId inputId0 = new InputId("Object#Key");
      inputId0.toString();
      node0.setInputId(inputId0);
      node1.isRegExp();
      node1.isReturn();
      Node node2 = new Node(50, node1, node1, 49, 48);
      node1.cloneNode();
      Node.extractLineno(1);
      node2.isDec();
      node2.isFromExterns();
      Node node3 = Node.newNumber((double) 42);
      Node node4 = new Node(55, node2, node3, node2, 53, 10979960);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node_NodeMismatch0.equals(node4);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node.extractLineno(1426);
      Node.newNumber(1446.45165461);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("enum{", true);
      Node.mergeLineCharNo((-908), 15);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(35);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setThrows();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags6.setThrows();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags6.setMutatesThis();
      node_SideEffectFlags5.setMutatesGlobalState();
      node_SideEffectFlags7.setMutatesThis();
      node_SideEffectFlags7.setMutatesGlobalState();
      Node[] nodeArray0 = new Node[0];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = new Node((-2179), nodeArray0, 35, 101);
      Node node1 = node0.getAncestor(0);
      node0.setType(101);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node_SideEffectFlags4.setThrows();
      node1.setLineno(38);
      node1.isOr();
      node1.isDo();
      node1.checkTreeTypeAwareEqualsImpl(node0);
      node0.hasChildren();
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Node node0 = Node.newNumber(1419.0, (-2950), 12288);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      InputId inputId0 = new InputId("Object#Key");
      inputId0.toString();
      node1.isRegExp();
      node1.isReturn();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte)114;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HashSet<String> hashSet0 = new HashSet<String>();
      node1.setDirectives(hashSet0);
      Node node2 = new Node(36, node0, 4, 63);
      node2.getQualifiedName();
      node1.getJSType();
      Node node3 = new Node(3000, 1237, 47);
      node0.addChildToBack(node2);
      node3.copyInformationFromForTree(node1);
      node2.removeFirstChild();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(53);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.areAllFlagsSet();
      node3.isSetterDef();
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Node node0 = Node.newString("MOD", (-3144), 130);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "MOD");
      Node node1 = new Node((-3144), node0, node0, node0, node0);
      Node node2 = node1.copyInformationFromForTree(node0);
      node2.children();
      node0.checkTreeTypeAwareEqualsImpl(node2);
      node1.isEquivalentToTyped(node2);
      node2.getAncestor(3245);
      Node node3 = node1.cloneTree();
      node2.checkTreeTypeAwareEqualsImpl(node1);
      node0.setSourceEncodedPositionForTree(38);
      node3.isOptionalArg();
      node2.getBooleanProp(2);
      node1.addChildToBack(node2);
      node0.isInc();
      int int0 = 55;
      node0.type = 55;
      node2.isStringKey();
      node2.isSetterDef();
      node0.isFor();
      node0.getAncestors();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node.extractLineno(56);
      node1.isCase();
      node0.toStringTree();
      node1.isScript();
      node2.isFromExterns();
      node2.getChangeTime();
      Node.mergeLineCharNo(node2.INCRDECR_PROP, int0);
      node0.setDouble(node3.REFLECTED_OBJECT);
      // Undeclared exception!
      try { 
        node3.setSideEffectFlags(node2.DIRECTIVES);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 55
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      Node node1 = Node.newString(38, "Object#Key", 1, 36);
      node1.getQualifiedName();
      node0.getType();
      try { 
        node1.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME Object#Key 1 is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Node node0 = Node.newString("", (-3101), 1268);
      Node node1 = Node.newNumber((double) 42);
      node0.getInputId();
      node0.setInputId((InputId) null);
      Node node2 = new Node(39, node1);
      Node node3 = new Node(55, 1, 31);
      node2.isGetProp();
      node0.isVoid();
      node0.isEmpty();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ObjectType objectType0 = null;
      JSType[] jSTypeArray0 = new JSType[3];
      JSType.toMaybeTemplateType((JSType) null);
      ImmutableList<TemplateType> immutableList0 = ImmutableList.of((TemplateType) null);
      ImmutableList<JSType> immutableList1 = ImmutableList.copyOf((Collection<? extends JSType>) immutableList0);
      TemplateTypeMap templateTypeMap0 = jSTypeRegistry0.createTemplateTypeMap(immutableList0, immutableList1);
      TemplateTypeMapReplacer templateTypeMapReplacer0 = null;
      try {
        templateTypeMapReplacer0 = new TemplateTypeMapReplacer(jSTypeRegistry0, templateTypeMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "gCV*d{n.Aq2)+hZE\"");
      Node node0 = new Node(32);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-108);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "]}pC}PW%@3+");
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)99;
      node0.getDirectives();
      node0.setDirectives((Set<String>) null);
      Node node1 = new Node((byte)99, node0, 57, (-3581));
      node1.getQualifiedName();
      node0.getJSType();
      Node node2 = new Node(39, 3741, 15);
      Node node3 = new Node((-254), node1, node2, node2, 8, 31);
      node2.addChildToBack(node3);
      Node node4 = new Node(47, node1, node0, node0, node2);
      node3.removeFirstChild();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(node0.REFLECTED_OBJECT);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.areAllFlagsSet();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int int0 = Node.NO_SIDE_EFFECTS;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "qeP2");
      Node node0 = Node.newString("pX", 148, 3741);
      node0.isFalse();
      Node node1 = new Node(4095, node0, 0, 49);
      Node node2 = node0.srcref(node1);
      node1.copyInformationFrom(node2);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Node node0 = new Node(32);
      node0.setWasEmptyNode(false);
      node0.setWasEmptyNode(false);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("/l-T1&9iur");
      node_FileLevelJsDocBuilder0.append("Recorded bad position information\nstart-char: ");
      node_FileLevelJsDocBuilder0.append("");
      node_FileLevelJsDocBuilder0.append("|$.JM]W");
      node_FileLevelJsDocBuilder0.append((String) null);
      Node.extractCharno(32);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node1 = new Node(50, node0, 40, 52);
      node0.addChildToBack(node1);
      node0.isObjectLit();
      node1.getStaticSourceFile();
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Node node0 = new Node(32);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-108);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "]}pC}PW%@3+");
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-108);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      InputId inputId0 = new InputId("]}pC}PW%@3+");
      inputId0.toString();
      node1.setInputId(inputId0);
      node0.isRegExp();
      node0.isReturn();
      Node node2 = new Node((byte)14, node1);
      MockFile mockFile0 = new MockFile("EQUALS", "");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      node2.appendStringTree(mockFileWriter0);
      node1.isExprResult();
      node1.isDo();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      node1.isUnscopedQualifiedName();
      node1.getAncestors();
      node0.removeChildAfter(node1);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      int int0 = Node.IS_CONSTANT_NAME;
      Node.extractLineno((-1092));
      Node node0 = new Node(2160);
      node0.addChildToBack((Node) null);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(35);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags5.setThrows();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setMutatesThis();
      node_SideEffectFlags6.setMutatesThis();
      node_SideEffectFlags6.clearSideEffectFlags();
      node_SideEffectFlags6.setMutatesThis();
      node_SideEffectFlags6.setMutatesGlobalState();
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(85, nodeArray0, (-1647), 101);
      Node node1 = node0.getAncestor(0);
      node0.setType(101);
      node_SideEffectFlags4.setThrows();
      node1.setLineno(38);
      node1.isOr();
      node1.isDo();
      node1.isRegExp();
      node1.isHook();
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Node node0 = Node.newNumber(1419.0, (-2950), (-2950));
      Node node1 = new Node(57, node0);
      node0.isOnlyModifiesArgumentsCall();
      Node node2 = new Node(52, node0, node0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        node2.setIsSyntheticBlock(boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node0 = Node.newNumber(1419.0, (-2950), 12288);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2950));
      Node node1 = Node.newNumber(1286.6023);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesArguments();
      node_SideEffectFlags1.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags4.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setThrows();
      node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags4.clearSideEffectFlags();
      Node node3 = node0.copyInformationFromForTree(node2);
      node_SideEffectFlags5.setMutatesThis();
      node3.addChildrenToBack(node2);
      node_SideEffectFlags0.clearSideEffectFlags();
      node_SideEffectFlags3.setAllFlags();
      node0.getType();
      node0.getDouble();
      node3.getDouble();
      node3.isReturn();
      node3.isComma();
      node0.isDelProp();
      node2.isNE();
      node0.isLocalResultCall();
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Node node0 = Node.newString("MOD", (-3144), 130);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "MOD");
      Node node1 = new Node((-3144), node0, node0, node0, node0);
      Node node2 = node1.copyInformationFromForTree(node0);
      node2.children();
      node0.checkTreeTypeAwareEqualsImpl(node2);
      node1.isEquivalentToTyped(node2);
      node2.getAncestor(3245);
      Node node3 = node1.cloneTree();
      node2.checkTreeTypeAwareEqualsImpl(node1);
      node0.setSourceEncodedPositionForTree(38);
      node3.isOptionalArg();
      node2.getBooleanProp(2);
      node1.addChildToBack(node2);
      node2.isStringKey();
      node2.isSetterDef();
      node0.isFor();
      node0.getAncestors();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node.extractLineno(56);
      node1.isCase();
      node0.toStringTree();
      node1.isScript();
      node2.isFromExterns();
      node2.getChangeTime();
      Node.mergeLineCharNo(32, 55);
      node0.setDouble(57);
      node3.setSideEffectFlags(node2.DIRECTIVES);
      node0.getSourceFileName();
      node2.siblings();
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      Node node1 = Node.newString(38, "Object#Key", 1, 36);
      Node node2 = Node.newNumber(1156.971912);
      node0.getSourceFileName();
      node2.checkTreeEqualsImpl(node0);
      node2.checkTreeTypeAwareEqualsImpl(node1);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "scash_v");
      Node node0 = new Node(16);
      node0.getQualifiedName();
      node0.getType();
      node0.getDouble();
      node0.getDouble();
      node0.isRegExp();
      // Undeclared exception!
      try { 
        node0.isReturn();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // GT is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Node node0 = Node.newNumber(1419.0, (-2950), (-2950));
      Node node1 = Node.newNumber((double) 40);
      node0.isOnlyModifiesArgumentsCall();
      Node node2 = new Node(52, node0, node0);
      node2.setIsSyntheticBlock(true);
      node2.hasOneChild();
      node2.checkTreeEqualsImpl(node1);
      node0.isVar();
      node0.isCatch();
      node2.isLabel();
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Node node0 = new Node(0);
      node0.getProp(1236);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "In/^^]DA*\")@qZ)y)=";
      objectArray0[1] = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "kY7G=2{ c`:Y4r+e,Sh");
      node0.isGetterDef();
      Node node1 = node0.copyInformationFrom(node0);
      node1.toStringTree();
      node0.isDelProp();
      node0.isCast();
      String string0 = "(i)P#1*fMa+b ";
      node1.setString(string0);
      node0.isOr();
      node1.addChildToBack(node0);
      // Undeclared exception!
      try { 
        node1.isObjectLit();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Node node0 = new Node(32);
      node0.setWasEmptyNode(true);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("`+2PrCKRD");
      node_FileLevelJsDocBuilder0.append("/l-T1&9iur");
      Node node1 = new Node(111, node0, node0);
      node1.getChildBefore(node0);
      node0.setIsSyntheticBlock(true);
      node0.hasOneChild();
      node1.getIntProp(2680);
      node1.isSetterDef();
      Node node2 = Node.newNumber(2530.6);
      node2.isDelProp();
      node0.setLength(55);
      node0.removeChildAfter((Node) null);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      simpleErrorReporter0.warning("", "<8Oyg]-5U]c:qZ8", (-962), (-962));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Object#Key");
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      node0.isNoSideEffectsCall();
      node0.isDelProp();
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Node node0 = Node.newNumber(1419.0, (-2950), 12288);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/0z#~bxft%");
      node0.getExistingIntProp(12288);
      Node node1 = node0.useSourceInfoIfMissingFrom(node0);
      node1.setChangeTime(node0.FLAG_THIS_UNMODIFIED);
      node0.getType();
      node0.getDouble();
      // Undeclared exception!
      try { 
        node1.getDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // missing prop: 12288
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Node node0 = Node.newString(1462, "", 1462, (-905));
      Node node1 = new Node(1462, node0, node0, node0);
      node0.getChangeTime();
      node0.isOr();
      node0.addChildToBack(node1);
      node1.isObjectLit();
      node1.getStaticSourceFile();
      node1.isScript();
      node0.removeProp(47);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Node node0 = Node.newString(1462, "", 1462, (-905));
      Node node1 = new Node(1462, node0, node0, node0);
      node0.getChangeTime();
      Node[] nodeArray0 = new Node[0];
      Node node2 = new Node(920, nodeArray0, 40, 43);
      node2.checkTreeEquals(node0);
      node0.addChildAfter(node2, node2);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Node node0 = Node.newNumber(1419.0, (-2955), 12288);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      InputId inputId0 = new InputId("Object#Key");
      inputId0.toString();
      node0.setInputId(inputId0);
      node1.isRegExp();
      node0.isEquivalentTo(node1, false, false, false);
      Node node2 = new Node((-2955), 4, 47);
      node1.isComma();
      Node node3 = node2.cloneTree();
      node1.checkTreeTypeAwareEqualsImpl(node0);
      jSTypeRegistry0.forwardDeclareType("InputId: Object#Key");
      node2.children();
      node1.addChildrenAfter(node3, (Node) null);
      node2.isCase();
      node1.isScript();
      node3.removeChildAfter(node1);
      node3.checkTreeEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
      objectType0.toString();
      arrayList0.add((JSType) objectType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node1 = new Node(2481, node0, node0, node0);
      InputId inputId0 = new InputId("zBY^NbrDXP!QQEUZ5<");
      node1.setInputId(inputId0);
      node1.isCall();
      node0.getBooleanProp(196);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "free_call");
      node1.isGetterDef();
      Node node2 = node0.copyInformationFrom(node1);
      node0.toStringTree();
      node2.isDelProp();
      node1.isCast();
      node2.setString("zBY^NbrDXP!QQEUZ5<");
      node0.isOr();
      node2.addChildToBack(node1);
      node2.isObjectLit();
      node1.getStaticSourceFile();
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "is_constant_name";
      Node node0 = Node.newString("is_constant_name", 126, 126);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node node1 = node0.copyInformationFromForTree((Node) null);
      node0.isSetterDef();
      // Undeclared exception!
      try { 
        node0.srcrefTree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Node node0 = Node.newString(1462, "", 1462, (-905));
      Node node1 = new Node(1462, node0, node0, node0);
      node0.getChangeTime();
      node1.hasChild(node1);
      Node node2 = new Node(42, 40, 32);
      node1.isEquivalentToTyped(node2);
      node0.addChildToBack((Node) null);
      node1.isObjectLit();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node1.setJSDocInfo(jSDocInfo0);
      String string0 = "";
      // Undeclared exception!
      try { 
        node0.setString(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = "";
      Node node0 = Node.newString("", 2680, 2680);
      node0.isString();
      node0.isComma();
      node0.cloneNode();
      Node node1 = Node.newString(43, "ELWx*UteD2A=d", 57, (-1532));
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile((String) null, false);
      node1.setStaticSourceFile(simpleSourceFile0);
      node1.isQuotedString();
      Node node2 = node0.detachFromParent();
      int int0 = (-4371);
      Node node3 = new Node(int0, node0, node2, node1, node2);
      Node node4 = null;
      node3.useSourceInfoFromForTree(node4);
      // Undeclared exception!
      try { 
        node3.getChangeTime();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Node node0 = Node.newNumber(1419.0, (-2955), 12288);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      InputId inputId0 = new InputId("Object#Key");
      inputId0.toString();
      node0.setInputId(inputId0);
      node1.isRegExp();
      node1.isReturn();
      Node node2 = new Node(85, node1);
      Node.extractLineno(1);
      node2.isDec();
      node2.isFromExterns();
      Node node3 = Node.newNumber((double) 42);
      Node node4 = new Node(55, node2, node3, node2, 53, 10979960);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      node_NodeMismatch0.equals(node4);
      node4.setString("Tmy-Z`");
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      Node node0 = Node.newNumber(1714.8, 31, 31);
      node0.getLineno();
      node0.isTrue();
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(3714, 3714, 1123);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      InputId inputId0 = new InputId("com.google.javascript.rhino.JSDocInfo");
      inputId0.toString();
      node0.getInputId();
      node0.setInputId((InputId) null);
      node1.isRegExp();
      node1.isReturn();
      Node node2 = new Node(30, node1);
      node2.isComma();
      Node node3 = node2.cloneTree();
      node3.checkTreeTypeAwareEqualsImpl(node0);
      jSTypeRegistry0.forwardDeclareType("?mB-]");
      node2.children();
      node3.isCase();
      node1.isScript();
      node0.removeChildAfter(node3);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node node1 = new Node(1480, node0, 944, 2);
      node0.setType(3714);
      node1.removeFirstChild();
      Node node2 = new Node((-201), node1, node0, 8, 1736);
      node1.isThrow();
      node1.putProp(37, jSTypeRegistry0);
      node1.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Node node0 = Node.newString(1462, "", 1462, (-905));
      Node node1 = new Node(1462, node0, node0, node0);
      node0.getChangeTime();
      node0.setString("");
      node1.hasChildren();
      node0.isDebugger();
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Node node0 = Node.newNumber(428.7, 1549, 12288);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      InputId inputId0 = new InputId("Object#Key");
      inputId0.toString();
      node0.isRegExp();
      node1.isReturn();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HashSet<String> hashSet0 = new HashSet<String>();
      node1.setDirectives(hashSet0);
      Node node2 = new Node(50, node1, (-2950), 36);
      node2.getQualifiedName();
      node1.getJSType();
      Node node3 = new Node(126, (-598), 31);
      node0.addChildToBack(node2);
      node1.copyInformationFromForTree(node2);
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = null;
      Node node4 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node2.checkTreeTypeAwareEqualsImpl(node4);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Node node0 = new Node(3714, 3714, 3714);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = new Node(6346253, node0, node0);
      node0.addChildToFront(node1);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node1.getStaticSourceFile();
      node0.replaceChild(node1, node1);
      Node node2 = node1.useSourceInfoFromForTree(node0);
      node2.isFunction();
      node2.getInputId();
      // Undeclared exception!
      try { 
        node2.getSourcePosition();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The new child node already has a parent.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Node node0 = Node.newNumber(1114.290774);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node1 = new Node(2858, nodeArray0);
      node0.checkTreeEqualsImpl(node1);
      Node node2 = node0.getLastSibling();
      // Undeclared exception!
      try { 
        node2.getStaticSourceFile();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Node node0 = new Node((-1532), (-82), 1087);
      InputId inputId0 = new InputId("Object#Key");
      inputId0.toString();
      Node node1 = new Node(43, node0, 53, 1);
      node1.setInputId(inputId0);
      node0.isRegExp();
      node0.isReturn();
      Node node2 = new Node(49, node1);
      Node.extractLineno((-1580));
      node0.isCase();
      node2.isFromExterns();
      Node.newNumber((-5157.389136230816));
      node2.setString("");
      node2.detachFromParent();
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Node node0 = new Node(32);
      node0.setWasEmptyNode(false);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("/l-T1&9iur");
      node_FileLevelJsDocBuilder0.append("Recorded bad position information\nstart-char: ");
      node_FileLevelJsDocBuilder0.append("");
      node_FileLevelJsDocBuilder0.append("|$.JM]W");
      node0.isObjectLit();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.setJSDocInfo(jSDocInfo0);
      node0.setString("|$.JM]W");
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(35);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setThrows();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      InputId inputId0 = new InputId("CharMatcher.JAVA_LOWER_CASE");
      inputId0.toString();
      node0.setInputId(inputId0);
      node0.isRegExp();
      Node node1 = Node.newNumber((double) 52, 102, 42);
      node0.isEquivalentTo(node1, false, false, true);
      node1.isFunction();
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Node node0 = Node.newString(1462, "", 1462, (-905));
      Node node1 = new Node(1462, node0, node0, node0);
      int int0 = Node.STATIC_SOURCE_FILE;
      node0.setString("");
      node1.isAdd();
      node0.isDebugger();
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node node1 = new Node(1480, node0, 944, 2);
      node1.removeFirstChild();
      Node node2 = new Node((-201), node1, node0, 8, 1736);
      node1.isThrow();
      node1.isCase();
      node2.removeChildAfter(node0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Node node0 = Node.newNumber(1419.0, (-2955), 12288);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      InputId inputId0 = new InputId("Object#Key");
      inputId0.toString();
      inputId0.toString();
      node0.setInputId(inputId0);
      node1.isRegExp();
      node1.isReturn();
      Node node2 = new Node(85, node1);
      Node.extractLineno((-1));
      node2.isDec();
      node2.isFromExterns();
      Node.newNumber((double) 42);
      Node node3 = new Node((-2416), 15, 36);
      node3.hasMoreThanOneChild();
      node0.mayMutateArguments();
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Node node0 = new Node(117);
      Node node1 = new Node(1407, node0);
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node1;
      node0.addChildToBack(node1);
      node1.isIf();
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Node node0 = Node.newNumber(1419.0, (-2955), 12288);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node1 = new Node(50, 2, 37);
      node1.wasEmptyNode();
      InputId inputId0 = new InputId("Object#Key");
      inputId0.toString();
      inputId0.toString();
      node0.setInputId(inputId0);
      node1.isRegExp();
      node1.isReturn();
      Node node2 = new Node(85, node1);
      Node.extractLineno(1);
      node2.isCase();
      node2.isFromExterns();
      Node.newNumber((double) 42);
      node0.setString("incrdecr");
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Node node0 = Node.newNumber(1419.0, (-2950), (-2950));
      node0.isOnlyModifiesArgumentsCall();
      Node node1 = new Node(52, node0, node0);
      node1.setIsSyntheticBlock(true);
      node0.removeFirstChild();
      node1.hasOneChild();
      node1.checkTreeEqualsImpl(node0);
      node0.isVar();
      node0.setSourceEncodedPosition(19);
      node0.isCatch();
      node1.isLabel();
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(35);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags2.setMutatesArguments();
      node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags5.setThrows();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setMutatesThis();
      node_SideEffectFlags6.setMutatesThis();
      node_SideEffectFlags6.clearSideEffectFlags();
      node_SideEffectFlags6.setMutatesThis();
      node_SideEffectFlags6.setMutatesGlobalState();
      Node node0 = Node.newString("", 35, 536870912);
      Node node1 = new Node(35, node0, (-745), 48);
      node1.setIsSyntheticBlock(false);
      Node.extractLineno(29);
      node0.isDec();
      node1.isFromExterns();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node0);
      node_NodeMismatch0.equals(node_SideEffectFlags3);
      node1.isUnscopedQualifiedName();
      node0.getAncestor(20);
      node_SideEffectFlags4.valueOf();
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags3.areAllFlagsSet();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      immutableList0.asList();
      node_SideEffectFlags0.setAllFlags();
      Node node0 = Node.newString("");
      Node node1 = new Node(256, node0, node0, node0);
      node1.isThis();
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Node node0 = new Node(32);
      node0.setWasEmptyNode(false);
      node0.setWasEmptyNode(false);
      node0.hasOneChild();
      Node node1 = new Node(2);
      node0.checkTreeEqualsImpl(node1);
      node0.isVar();
      node1.isCatch();
      node1.isLabel();
      node0.useSourceInfoFromForTree(node1);
      node0.isCase();
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Node node0 = new Node(32);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-108);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "]}pC}PW%@3+");
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte)101;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node0.hasMoreThanOneChild();
      Node node1 = Node.newNumber(17.68098, (-1921), (int) (byte)14);
      node0.useSourceInfoIfMissingFromForTree(node1);
      node0.isNew();
      node0.setWasEmptyNode(false);
      node0.getJsDocBuilderForNode();
      Node node2 = Node.newString("]}pC}PW%@3+", 47, (int) (byte)52);
      node0.getChildCount();
      node2.isEmpty();
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Node node0 = Node.newNumber(1419.0, (-2950), (-2950));
      Node node1 = Node.newNumber((double) 40);
      node1.isContinue();
      Node node2 = new Node(4, node0, 48, 8);
      node2.setIsSyntheticBlock(true);
      node2.hasOneChild();
      node2.checkTreeEqualsImpl(node1);
      node0.isVar();
      node0.isCatch();
      node2.isLabel();
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Node node0 = Node.newString("MOD", (-3144), 130);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "MOD");
      Node node1 = new Node((-3144), node0, node0, node0, node0);
      Iterable<Node> iterable0 = node1.children();
      node1.checkTreeEqualsImpl(node1);
      node1.isEquivalentToTyped(node0);
      Node node2 = node1.getAncestor(3245);
      Node node3 = node1.cloneTree();
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node0.setSourceEncodedPositionForTree(38);
      node3.isOptionalArg();
      node0.getBooleanProp(2);
      node1.addChildToBack(node1);
      node0.isInc();
      node0.type = 56;
      node1.isStringKey();
      node1.isSetterDef();
      node0.isFor();
      int int0 = Node.INCRDECR_PROP;
      node1.isCase();
      node0.toStringTree();
      node1.isScript();
      node1.isFromExterns();
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node0);
      node_NodeMismatch0.equals(iterable0);
      node2.isUnscopedQualifiedName();
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Node node0 = Node.newNumber(1419.0, (-2950), 12288);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/0z#~bxft%");
      Node node1 = Node.newNumber((double) 40);
      node1.getQualifiedName();
      node1.getDouble();
      node1.getDouble();
      node1.setIsSyntheticBlock(true);
      Node.extractLineno(1091);
      node0.isDec();
      node0.isFromExterns();
      node1.getChangeTime();
      Node.mergeLineCharNo(2, 38);
      node0.setDouble((-1209.864585031976));
      Node node2 = new Node(111, node1, node1, node0, node1);
      node2.getSourceFileName();
      node0.siblings();
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Node node0 = Node.newString("MOD", (-3144), 130);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "MOD");
      Node node1 = new Node((-3144), node0, node0, node0, node0);
      node1.children();
      node1.checkTreeEqualsImpl(node1);
      node1.isEquivalentToTyped(node0);
      node1.getAncestor(3245);
      Node node2 = node1.cloneTree();
      node0.checkTreeTypeAwareEqualsImpl(node1);
      node0.setSourceEncodedPositionForTree(38);
      node2.isOptionalArg();
      node0.getBooleanProp(2);
      node1.addChildToBack(node1);
      node0.isInc();
      node0.type = 56;
      node1.isStringKey();
      node1.isSetterDef();
      node0.isFor();
      Node node3 = Node.newNumber((-5406.6431764575), 2, 57);
      node3.isSetterDef();
      Node.newNumber(0.0);
      node2.isDelProp();
      node1.setLength((-1937));
      node0.isNull();
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Node node0 = Node.newNumber(1419.0, (-2950), (-2950));
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesThis();
      node_SideEffectFlags5.setMutatesGlobalState();
      node_SideEffectFlags4.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags6.areAllFlagsSet();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      immutableList0.asList();
      node_SideEffectFlags1.setAllFlags();
      Node node1 = Node.newString("");
      Node node2 = new Node(57, node0, node1, node0);
      node1.getJsDocBuilderForNode();
      node1.isThis();
      node1.checkTreeEqualsImpl(node0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Node node0 = Node.newString(1462, "", 1462, (-905));
      Node node1 = new Node(1462, node0, node0, node0);
      node0.getChangeTime();
      node1.hasChild(node1);
      Node node2 = new Node(46, node0, 46, 57);
      node1.isEquivalentToTyped(node2);
      Node node3 = null;
      node0.addChildToBack(node3);
      // Undeclared exception!
      try { 
        node1.isObjectLit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child has existing parent
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Node node0 = new Node((-2950), (-2950), 12288);
      Node node1 = Node.newNumber((double) 40);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node2.setIsSyntheticBlock(true);
      node2.hasOneChild();
      node1.getIntProp(1196);
      node2.isName();
      node2.isTypeOf();
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Node node0 = Node.newString(1462, "", 1462, (-905));
      Node node1 = new Node(1462, node0, node0, node0);
      node0.getChangeTime();
      node1.isComma();
      Node node2 = node1.cloneTree();
      node0.checkTreeTypeAwareEqualsImpl(node2);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      jSTypeRegistry0.forwardDeclareType("");
      node2.children();
      Node node3 = new Node((-5407), node2, node1, 2290, 120);
      node0.addChildrenAfter(node2, node3);
      int int0 = (-1771);
      int int1 = 6;
      Node node4 = new Node(node2.FLAG_NO_THROWS, node0, int0, int1);
      node4.isCase();
      node2.isScript();
      node4.removeChildAfter(node2);
      // Undeclared exception!
      try { 
        Node.newNumber((double) node1.FLAG_LOCAL_RESULTS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Node node0 = new Node(12288);
      Node node1 = Node.newNumber((double) 40);
      Node node2 = node0.useSourceInfoIfMissingFrom(node1);
      node2.setIsSyntheticBlock(false);
      node2.hasOneChild();
      node1.getIntProp(1196);
      node2.isName();
      node2.clonePropsFrom(node0);
      node2.isTypeOf();
      node2.getAncestor(580);
      node2.hasOneChild();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = Node.newString((-3361), "source_file");
      node0.setString("source_file");
      node0.putIntProp(0, (-3361));
      Node node1 = new Node(31, node0, node0, node0, node0);
      node1.removeChildren();
      node0.setType((-2781));
      Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeTypeAwareEqualsImpl(node0);
      node_NodeMismatch0.equals(node0);
      node1.isTry();
      node1.isTypeOf();
      node0.mayMutateArguments();
      node1.isBreak();
      node1.isIf();
      node0.toString(false, false, true);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Node node0 = Node.newString((-1237), "/6BBOeAy#m}p+&627we", (-1237), (-1237));
      node0.isQuotedString();
      node0.children();
      Node node1 = new Node((-1237), node0);
      Node node2 = new Node(56);
      node1.addChildToFront(node2);
      node1.wasEmptyNode();
      node1.toString();
      node0.isBreak();
      // Undeclared exception!
      try { 
        node0.getLength();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // -1237
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Node node0 = new Node(32);
      node0.setWasEmptyNode(false);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      node_FileLevelJsDocBuilder0.append("`+2PrCKRD");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node node1 = Node.newNumber((double) 8);
      node1.getDirectives();
      Node node2 = new Node(38, node0, node1);
      node2.removeChildren();
      node2.toStringTree();
      node2.isStringKey();
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Node node0 = new Node(32);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-108);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node0.isGetProp();
      node0.putProp(1, (Object) null);
      node0.hasMoreThanOneChild();
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node0 = new Node((-1630));
      Node node1 = node0.getAncestor(0);
      node0.setType(101);
      node1.isDo();
      Vector<Node> vector0 = new Vector<Node>(101, 30);
      node0.isCase();
      int int0 = Node.FLAG_THIS_UNMODIFIED;
      Node node2 = new Node(48, node1);
      node2.setDouble(2);
      node2.setSideEffectFlags(node1.SLASH_V);
      node0.getSourceFileName();
      node1.siblings();
      node0.getJsDocBuilderForNode();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(35);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags2.setMutatesThis();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags2.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags3.setMutatesArguments();
      node_SideEffectFlags5.setThrows();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setMutatesThis();
      node_SideEffectFlags6.setMutatesThis();
      node_SideEffectFlags6.clearSideEffectFlags();
      node_SideEffectFlags6.setMutatesThis();
      node_SideEffectFlags6.setMutatesGlobalState();
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(85, nodeArray0, (-1647), 101);
      Node node1 = node0.getAncestor(0);
      node0.setType(101);
      node_SideEffectFlags4.setThrows();
      node1.setLineno(38);
      node1.isOr();
      node1.isDo();
      node1.isRegExp();
      node0.isDebugger();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      Node node1 = Node.newString(38, "Object#Key", 1, 36);
      node1.getQualifiedName();
      node0.getType();
      Node node2 = new Node(103, node0, 0, 86);
      Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeTypeAwareEqualsImpl(node1);
      node_NodeMismatch0.equals(node0);
      node0.isTry();
      node2.isTypeOf();
      node2.mayMutateArguments();
      node1.isBreak();
      node1.isIf();
      node2.getDouble();
      int int0 = 2223;
      int int1 = 1211;
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Node node0 = Node.newString("MOD", (-3144), 130);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "MOD");
      Node node1 = new Node((-3144), node0, node0, node0, node0);
      Node node2 = node1.copyInformationFromForTree(node0);
      node2.children();
      node0.checkTreeTypeAwareEqualsImpl(node2);
      node1.isEquivalentToTyped(node2);
      node2.addChildrenToBack(node1);
      node2.getAncestor(3245);
      Node node3 = node1.cloneTree();
      node2.checkTreeTypeAwareEqualsImpl(node1);
      node0.setSourceEncodedPositionForTree(node2.SYNTHETIC_BLOCK_PROP);
      node3.isOptionalArg();
      node2.getBooleanProp(node0.FLAG_THIS_UNMODIFIED);
      // Undeclared exception!
      try { 
        node1.addChildToBack(node2);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      Node node1 = Node.newString(38, "Object#Key", 1, 36);
      node1.getQualifiedName();
      node0.getType();
      Node node2 = new Node(103, node0, 0, 86);
      Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeTypeAwareEqualsImpl(node1);
      node_NodeMismatch0.equals(node0);
      node0.isTry();
      node2.isTypeOf();
      node2.mayMutateArguments();
      node1.isBreak();
      node1.isIf();
      node2.isDec();
      node0.isFromExterns();
      Node.newNumber((double) 29);
      node1.setString((String) null);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(4172, nodeArray0, 395, 1462);
      node0.cloneNode();
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Node node0 = Node.newNumber(1419.0, (-2955), 12288);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      InputId inputId0 = new InputId("Object#Key");
      inputId0.toString();
      node1.isRegExp();
      node0.isEquivalentTo(node1, false, false, false);
      Node node2 = new Node((-2955), 4, 47);
      node1.isComma();
      Node node3 = node2.cloneTree();
      node1.checkTreeTypeAwareEqualsImpl(node0);
      jSTypeRegistry0.forwardDeclareType("InputId: Object#Key");
      node2.getStaticSourceFile();
      node3.isScript();
      node0.removeProp((-10));
      node0.isBlock();
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")Qc8[Ld");
      Node node0 = Node.newString(1462, "", 1462, (-905));
      Node node1 = new Node(1462, node0, node0, node0);
      node1.useSourceInfoFrom(node0);
      node0.getChangeTime();
      Node[] nodeArray0 = new Node[0];
      node1.isAnd();
      Node node2 = new Node(920, nodeArray0, 40, 43);
      node0.addChildAfter(node2, node2);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Node node0 = Node.newString((-3361), "source_file");
      node0.setString("source_file");
      Node node1 = new Node(31, node0, node0, node0, node0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "]}pC}PW%@3+");
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte)101;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node1.hasMoreThanOneChild();
      node0.isNew();
      node1.setWasEmptyNode(false);
      node0.getJsDocBuilderForNode();
      Node.newString("=cR3Y", 4, 47);
      node1.getChildCount();
      node0.toString(false, true, false);
      node1.getDirectives();
      node0.getNext();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = "";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Node node0 = Node.newString(46, "", 46, 46);
      Node node1 = Node.newString((-3144), "");
      node0.checkTreeTypeAwareEqualsImpl(node1);
      Node node2 = null;
      node0.checkTreeEquals((Node) null);
      node0.isName();
      node0.copyInformationFromForTree(node2);
      // Undeclared exception!
      try { 
        node0.isSyntheticBlock();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Node node0 = Node.newString(1462, "", 1462, (-905));
      Node node1 = new Node(1462, node0, node0, node0);
      node0.getChangeTime();
      node1.isComma();
      Node node2 = node1.cloneTree();
      node0.checkTreeTypeAwareEqualsImpl(node2);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      jSTypeRegistry0.forwardDeclareType("");
      node2.children();
      node1.addChildrenAfter((Node) null, node0);
      node2.isCase();
      node0.isScript();
      node2.removeChildAfter(node0);
      node1.checkTreeEqualsImpl(node2);
      // Undeclared exception!
      try { 
        node0.children();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Node node0 = Node.newNumber(1419.0, (-2943), 12289);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-2943));
      Node node1 = node0.useSourceInfoIfMissingFrom(node0);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      node_SideEffectFlags1.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesArguments();
      Node.newNumber((double) 53);
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags4.clearSideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = new Node.SideEffectFlags(51);
      node_SideEffectFlags3.setAllFlags();
      node_SideEffectFlags4.clearSideEffectFlags();
      Node node2 = node0.copyInformationFromForTree(node1);
      node_SideEffectFlags2.setMutatesArguments();
      Node.newNumber(1.0, 55, 39);
      node2.getLineno();
      node1.isTrue();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Node node0 = Node.newNumber(1419.0, (-2955), 12288);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1, false);
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      InputId inputId0 = new InputId("");
      inputId0.toString();
      node0.isRegExp();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      node1.isEquivalentTo(node0, false, false, true);
      Node node2 = new Node(2453, 4, 57);
      node1.isComma();
      Node node3 = node1.cloneTree();
      Node node4 = new Node(36, node0, node2, node3, node3, 39, 0);
      node3.checkTreeTypeAwareEqualsImpl(node4);
      jSTypeRegistry0.forwardDeclareType("");
      node2.getStaticSourceFile();
      node3.isScript();
      node1.removeProp(40);
      node2.isBlock();
      node4.isDo();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node node1 = new Node(1480, node0, 944, 2);
      node0.isStringKey();
      node1.isSetterDef();
      node1.isFor();
      Node node2 = new Node(46, 52, 1);
      node2.getAncestors();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node.extractLineno((-119));
      node2.isCase();
      node2.toStringTree();
      node2.isScript();
      node2.isFromExterns();
      node0.getChangeTime();
      Node.mergeLineCharNo(35, 102);
      node1.setDouble(574.0);
      int int0 = 38;
      node2.setSideEffectFlags(int0);
      node2.getSourceFileName();
      node2.siblings();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Node node0 = Node.newNumber(1419.0, (-2950), 12288);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/0z#~bxft%");
      Node node1 = Node.newNumber((double) 40);
      node1.getQualifiedName();
      node1.getDouble();
      node1.getDouble();
      node0.isTypeOf();
      node0.mayMutateArguments();
      node1.isBreak();
      node0.isIf();
      node0.getDouble();
      Node node2 = new Node(97, node0, node0, node1, 39, (-760));
      node2.copyInformationFromForTree(node1);
      node1.isName();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags1.setMutatesGlobalState();
      node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setAllFlags();
      node_SideEffectFlags3.areAllFlagsSet();
      node_SideEffectFlags3.setMutatesThis();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ImmutableList<JSType> immutableList0 = ImmutableList.of();
      ImmutableList<JSType> immutableList1 = immutableList0.asList();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList1);
      InputId inputId0 = new InputId("Object#Element");
      inputId0.toString();
      node0.setInputId(inputId0);
      node0.isRegExp();
      node0.isReturn();
      Node node1 = new Node(4095, node0);
      node0.isComma();
      node1.detachChildren();
      node_SideEffectFlags0.setAllFlags();
      Node.newString("InputId: Object#Element");
      Node node2 = Node.newNumber((double) 8, 55, 448);
      Node.newString("Object#Key", 85, 478);
      node0.isCatch();
      node1.isObjectLit();
      node0.srcrefTree(node2);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = Node.newString("Object#Key");
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      InputId inputId0 = new InputId("com.google.common.collect.UnmodifiableListIterator");
      inputId0.toString();
      inputId0.toString();
      node0.setInputId(inputId0);
      node0.isRegExp();
      node1.isEquivalentTo(node0, false, false, false);
      node1.isFunction();
      node1.isVoid();
      node1.getSideEffectFlags();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Node node0 = new Node(117);
      Node node1 = new Node(1407, node0);
      node0.isAdd();
      node0.isHook();
      node1.isFunction();
      node0.isEmpty();
      node0.isLabelName();
      Iterator<TemplateType> iterator0 = (Iterator<TemplateType>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
      immutableList0.asList();
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(54);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      node_SideEffectFlags3.setAllFlags();
      Node node2 = Node.newString("");
      Node node3 = new Node(47, node2, node1, node1);
      node1.getJsDocBuilderForNode();
      node0.isThis();
      node0.checkTreeEqualsImpl(node1);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Node node0 = Node.newString(1462, "", 1462, (-905));
      Node node1 = new Node(1462, node0, node0, node0);
      node0.getChangeTime();
      node1.isComma();
      Node node2 = node1.cloneTree();
      node1.setIsSyntheticBlock(false);
      node1.hasOneChild();
      node1.checkTreeEqualsImpl(node2);
      node1.isVar();
      node0.isCatch();
      node1.isLabel();
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Node node0 = Node.newNumber(1419.0, (-2955), 12293);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = new Node((-2955), 4, 47);
      node1.isOnlyModifiesThisCall();
      node1.isIf();
      node1.addChildrenToFront(node0);
      node0.replaceChild(node1, node1);
      node0.removeChild(node1);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = 101;
      Node node0 = new Node((-2179), nodeArray0, (-2179), 101);
      Node node1 = node0.getAncestor((-17));
      node0.setType(int0);
      Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
      // Undeclared exception!
      try { 
        node1.setLineno(node0.SYNTHETIC_BLOCK_PROP);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Node node0 = new Node(32);
      byte[] byteArray0 = new byte[7];
      node0.setIsSyntheticBlock(false);
      node0.isQualifiedName();
      node0.isReturn();
      Node node1 = new Node(32, node0, node0, 1378, 11);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags((-507));
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.clearSideEffectFlags();
      node1.isEquivalentTo(node0, true, false, false);
      node1.cloneNode();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Node node0 = new Node(8);
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte) (-108);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node0.isRegExp();
      node0.isNumber();
      node0.isAdd();
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Node node0 = new Node(117);
      Node node1 = new Node(1407, node0);
      node0.isAdd();
      node0.isHook();
      node1.getStaticSourceFile();
      node0.setStaticSourceFile((StaticSourceFile) null);
      node1.isFunction();
      Node node2 = node0.cloneTree();
      node2.checkTreeTypeAwareEqualsImpl(node0);
      node2.isOptionalArg();
      node2.addChildToBack(node0);
      node0.isSetterDef();
      node0.isFor();
      // Undeclared exception!
      try { 
        node0.removeFirstChild();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Node node0 = Node.newString("MOD", (-3144), 130);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "MOD");
      Node node1 = new Node((-3144), node0, node0, node0, node0);
      Node node2 = node1.copyInformationFromForTree(node0);
      node0.checkTreeTypeAwareEqualsImpl(node2);
      node1.isEquivalentToTyped(node2);
      node2.addChildrenToBack(node1);
      Node node3 = node2.getAncestor(3245);
      node3.setVarArgs(false);
      node2.isEmpty();
      Node node4 = Node.newString(53, "*%eqB]", 32, 47);
      node4.isOnlyModifiesThisCall();
      Node node5 = Node.newNumber((double) 12, 51, 35);
      node0.isScript();
      node5.removeProp(0);
      node5.isBlock();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Node node0 = Node.newNumber(1419.0, (-2955), 12293);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      node0.isVarArgs();
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = new Node((-2955), 4, 47);
      node1.isOnlyModifiesThisCall();
      node1.isIf();
      node1.addChildrenToFront(node0);
      node0.getDouble();
      node0.isName();
      node0.isString();
      node0.getCharno();
      node0.clonePropsFrom(node1);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Node node0 = new Node(32);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-108);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "]}pC}PW%@3+");
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte)101;
      node0.getInputId();
      node0.setInputId((InputId) null);
      node0.isRegExp();
      node0.isReturn();
      Node node1 = new Node(4095, node0);
      node0.isExprResult();
      node1.isDo();
      node0.isScript();
      node1.isReturn();
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Node node0 = new Node(32);
      node0.setWasEmptyNode(false);
      node0.setWasEmptyNode(false);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("/l-T1&9iur");
      node_FileLevelJsDocBuilder0.append("/l-T1&9iur");
      node_FileLevelJsDocBuilder0.append("");
      node_FileLevelJsDocBuilder0.append("|$.JM]W");
      node_FileLevelJsDocBuilder0.append((String) null);
      Node.extractCharno(32);
      node0.isInstanceOf();
      node0.isThrow();
      node0.isCase();
      node0.removeChildAfter((Node) null);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Node node0 = Node.newNumber(1419.0, (-2950), (-2950));
      Node node1 = Node.newNumber((double) 40);
      node1.isContinue();
      Node node2 = new Node(4, node0, 48, 8);
      node0.isOptionalArg();
      node2.useSourceInfoIfMissingFrom(node1);
      node2.setIsSyntheticBlock(true);
      node2.hasOneChild();
      node2.checkTreeEqualsImpl(node1);
      node0.isVar();
      node0.isCatch();
      node2.isLabel();
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      InputId inputId0 = new InputId("GLOBAL_THIS");
      inputId0.toString();
      inputId0.toString();
      node0.setInputId(inputId0);
      node0.isRegExp();
      node0.isNumber();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      Node node1 = jSTypeRegistry1.createParametersWithVarArgs((List<JSType>) arrayList0);
      node1.isAdd();
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Node node0 = new Node(8);
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte) (-108);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      node0.isIf();
      Node node1 = new Node(39, node0, node0, 98, (-1240));
      node0.addChildrenToFront(node1);
      Node node2 = Node.newString("h'?]X[9nMETQ");
      node1.replaceChild(node0, node2);
      Node node3 = new Node(48, node1, node2);
      node0.removeChild(node3);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Node node0 = Node.newNumber(1419.0, (-2955), 12293);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = new Node((-2955), 4, 47);
      node1.isOnlyModifiesThisCall();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      node1.isRegExp();
      node0.isNumber();
      node1.isAdd();
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")Qc8[Ld");
      Node node0 = Node.newString(")Qc8[Ld", (-905), (-2950));
      node0.setType((-2950));
      Node node1 = new Node(954, node0, node0, node0, node0);
      Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeTypeAwareEqualsImpl(node0);
      Object object0 = new Object();
      node_NodeMismatch0.equals(object0);
      node1.isTry();
      node0.isTypeOf();
      node1.mayMutateArguments();
      node1.isBreak();
      node1.isIf();
      Node node2 = Node.newString("D\nrE", 122, 36);
      node2.getDouble();
      node0.isName();
      node2.isString();
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Node node0 = Node.newString((-3361), "source_file");
      node0.setString("source_file");
      node0.mayMutateArguments();
      Node node1 = new Node(31, node0, node0, node0, node0);
      Node node2 = node1.removeChildren();
      Node.newString(29, "source_file", 6346253, 30);
      Node node3 = new Node(1125, node1, node0, node2);
      Node node4 = node2.useSourceInfoFrom(node1);
      node4.getChangeTime();
      node1.isAnd();
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = node0;
      nodeArray0[1] = node0;
      Node node5 = new Node(29, node3, 126, 31);
      nodeArray0[2] = node5;
      Node node6 = new Node(3199, nodeArray0, 2, 15);
      node6.addChildAfter(node5, node4);
      node0.getChangeTime();
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0), 1394, 2267);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(124);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = Node.newNumber(Double.POSITIVE_INFINITY);
      node1.getInputId();
      node1.setInputId((InputId) null);
      node1.addSuppression("");
      Node node2 = new Node(4095, node0, 111, 32);
      node0.isComma();
      node2.isInstanceOf();
      node2.isName();
      node2.isDefaultCase();
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      Node node1 = new Node(1480, node0, 944, 2);
      Node node2 = node1.removeFirstChild();
      Node node3 = new Node((-201), node1, node0, 8, 1736);
      node1.isThrow();
      node1.isCase();
      node3.setDouble((-538.51092402373));
      node3.removeChildAfter(node0);
      boolean boolean1 = false;
      boolean boolean2 = true;
      node3.isEquivalentTo(node2, boolean0, boolean1, boolean2);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")Qc8Ld");
      Node node0 = Node.newString(1462, "", 1462, (-905));
      Node node1 = new Node(1462, node0, node0, node0);
      Node node2 = node1.useSourceInfoFrom(node0);
      node2.addChildrenToFront(node1);
      node0.getChangeTime();
      Node[] nodeArray0 = new Node[0];
      node1.isAnd();
      Node node3 = new Node(920, nodeArray0, 40, 43);
      node0.isIf();
      node1.getProp((-275));
      node0.addChildAfter(node3, node3);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Node node0 = new Node(32);
      node0.setWasEmptyNode(false);
      node0.setWasEmptyNode(false);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("/l-T1&9iur");
      node_FileLevelJsDocBuilder0.append("Recorded bad position information\nstart-char: ");
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = node0;
      Node node1 = new Node(130, node0, node0);
      node1.putBooleanProp(55, false);
      node0.isSyntheticBlock();
      Node.newNumber((double) 30, 29, 0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Node node0 = new Node(1462);
      Node node1 = new Node(42, node0);
      node1.isAdd();
      node1.isFunction();
      node0.isEmpty();
      node0.isOnlyModifiesThisCall();
      Node node2 = Node.newNumber((double) 1, 64, 3);
      node2.isScript();
      Node node3 = new Node(49, node1, node2, node0);
      node3.getDouble();
      String string0 = "inferred";
      // Undeclared exception!
      try { 
        Node.newString(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Node node0 = Node.newString(1462, "", 1462, 1462);
      node0.getChangeTime();
      node0.hasChild(node0);
      Node node1 = new Node(42, 40, 32);
      node0.isEquivalentToTyped(node1);
      node1.isGetterDef();
      node0.copyInformationFrom((Node) null);
      node1.toStringTree();
      node0.isCast();
      node0.isOr();
      // Undeclared exception!
      try { 
        node1.addChildToBack(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
      objectType0.toString();
      arrayList0.add((JSType) objectType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node1 = new Node(2481, node0, node0, node0);
      InputId inputId0 = new InputId("zBY^NbrDXP!QQEUZ5<");
      node1.setInputId(inputId0);
      node1.isCall();
      node0.getBooleanProp(196);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "free_call");
      node0.isObjectLit();
      JSDocInfo jSDocInfo1 = new JSDocInfo();
      node0.setJSDocInfo(jSDocInfo0);
      node1.setString((String) null);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Node node0 = Node.newString("com.google.javascript.rhino.Node$StringNode", 117, 1470);
      node0.setWasEmptyNode(false);
      node0.setWasEmptyNode(true);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      node_FileLevelJsDocBuilder0.append("m6Ag:,j}lnLr@%H;_");
      node_FileLevelJsDocBuilder0.append((String) null);
      node_FileLevelJsDocBuilder0.append("Recorded bad position information\nstart-char: ");
      Node.newNumber(0.0);
      Node.newNumber((double) 51, 46, 41);
      Node node1 = new Node(1, node0);
      node0.isDelProp();
      node0.setWasEmptyNode(false);
      node1.getJsDocBuilderForNode();
      Node.newString("Recorded bad position information\nstart-char: ", (-1285), (-1585));
      node0.getChildCount();
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Node node0 = new Node(117);
      Node node1 = new Node(1407, node0);
      node0.isAdd();
      node0.isHook();
      node1.isFunction();
      node0.isEmpty();
      node1.isOnlyModifiesThisCall();
      Node node2 = Node.newNumber((double) 36, 47, 2116);
      node0.getInputId();
      node0.setInputId((InputId) null);
      node0.isComma();
      node1.isDelProp();
      node1.isNE();
      node1.isAssignAdd();
      node2.isBreak();
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(35);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setThrows();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
      node_SideEffectFlags3.setReturnsTainted();
      node_SideEffectFlags2.setMutatesThis();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.clearAllFlags();
      Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags1.setThrows();
      node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags2.clearAllFlags();
      node_SideEffectFlags3.setMutatesArguments();
      Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags1.setMutatesArguments();
      node_SideEffectFlags4.setThrows();
      Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags6.setMutatesThis();
      node_SideEffectFlags7.setMutatesThis();
      node_SideEffectFlags7.clearSideEffectFlags();
      node_SideEffectFlags7.setMutatesThis();
      node_SideEffectFlags7.setMutatesGlobalState();
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(85, nodeArray0, (-1647), 101);
      Node node1 = node0.getAncestor(0);
      node0.setType(101);
      node_SideEffectFlags5.setThrows();
      node1.setLineno(38);
      node1.isOr();
      node0.getBooleanProp(54);
      node1.isRegExp();
      node1.isHook();
      node0.isFunction();
      node0.isEmpty();
      node0.getIndexOfChild(node1);
      Node node2 = new Node((-717), node1, node1, 4365, 94);
      Node.AncestorIterable node_AncestorIterable0 = node2.getAncestors();
      node_AncestorIterable0.iterator();
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Node node0 = new Node(32);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-108);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "]}pC}PW%@3+");
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-108);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      InputId inputId0 = new InputId((String) null);
      inputId0.toString();
      node0.setInputId(inputId0);
      node0.isRegExp();
      node0.isReturn();
      Node node1 = new Node((byte)14, node0);
      node0.isExprResult();
      node0.isDo();
      node1.isScript();
      node1.isReturn();
      node1.removeFirstChild();
      node0.isHook();
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(85, nodeArray0, (-1660), 101);
      Node node1 = node0.getAncestor(0);
      node1.isEmpty();
      node0.isOnlyModifiesThisCall();
      Node node2 = Node.newNumber(1419.0, 57, (-1795));
      node0.isScript();
      node0.removeProp(54);
      Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(130);
      Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
      Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setReturnsTainted();
      Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
      Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
      node_SideEffectFlags4.clearSideEffectFlags();
      node2.isEquivalentTo(node0, false, false, false);
      node0.cloneNode();
      Node.newString("com.google.javascript.rhino.jstype.NoObjectType");
      node0.getChildAtIndex(385);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Node node0 = Node.newString("", (-3662), 1470);
      node0.isCatch();
      node0.getLineno();
      node0.getSideEffectFlags();
      node0.isScript();
      node0.toString(false, false, false);
      JSDocInfo jSDocInfo0 = new JSDocInfo(false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedHashSet<TemplateType> linkedHashSet0 = new LinkedHashSet<TemplateType>((-37), 51);
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterable<? extends JSType>) linkedHashSet0);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      node0.removeChildAfter(node1);
      // Undeclared exception!
      try { 
        jSDocInfo0.getAssociatedNode();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -37
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      JSDocInfo jSDocInfo0 = new JSDocInfo(true);
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType(jSDocInfo0);
      objectType0.toString();
      arrayList0.add((JSType) objectType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) arrayList0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Node node1 = new Node(2481, node0, node0, node0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
      InputId inputId0 = new InputId("{}");
      inputId0.toString();
      node1.setInputId(inputId0);
      node2.isRegExp();
      node2.isReturn();
      Node node3 = new Node(1526, node1);
      node3.isExprResult();
      node3.isDo();
      node1.isScript();
      node0.isReturn();
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Node node0 = new Node(32);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-108);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "]}pC}PW%@3+");
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-108);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      InputId inputId0 = new InputId("]}pC}PW%@3+");
      node0.setInputId(inputId0);
      node0.isCall();
      node0.getBooleanProp(98);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      node0.isGetterDef();
      Node node1 = new Node(98, node0);
      Node node2 = node0.copyInformationFrom(node1);
      node2.toStringTree();
      node0.isCast();
      node2.isOr();
      node2.addChildToBack(node0);
      node0.isObjectLit();
      node1.getStaticSourceFile();
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Node node0 = Node.newString("S2gu&eW<9@", 615, 115);
      node0.isQuotedString();
      node0.toString();
      node0.isArrayLit();
      node0.isContinue();
      node0.isTypeOf();
      Node.newString(51, (String) null);
      node0.isOr();
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Node node0 = Node.newString(94, "");
      node0.toStringTree();
      Node node1 = Node.newString(49, "");
      node1.getJSDocInfo();
      Node node2 = node0.copyInformationFrom(node1);
      node0.isThrow();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-124);
      byteArray0[5] = (byte)24;
      byteArray0[6] = (byte)50;
      byteArray0[7] = (byte)126;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      node2.setLineno(155);
      node2.setLength(8);
      node2.isQuotedString();
      node0.isEquivalentTo(node2);
      node0.isVoid();
      node0.isDefaultCase();
      node2.isOnlyModifiesArgumentsCall();
      node0.isSetterDef();
  }
}
