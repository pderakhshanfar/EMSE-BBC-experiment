/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 15:12:15 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.Connection;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FormElement_ESTest extends FormElement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("String must not be empty", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "!\"D$jwFs$T\"JNnK", attributes0);
      CDataNode cDataNode0 = new CDataNode("!\"D$jwFs$T\"JNnK");
      cDataNode0.setParentNode(formElement0);
      Node node0 = cDataNode0.before("q\"!J\"v_Bh223C$");
      formElement0.removeChild(node0);
      assertFalse(formElement0.hasParent());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "http:/", attributes0);
      Connection connection0 = formElement0.submit();
      assertNotNull(connection0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("input");
      FormElement formElement0 = new FormElement(tag0, "input", attributes0);
      formElement0.addElement(formElement0);
      Elements elements0 = formElement0.elements();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      formElement0.siblingIndex = (-1717986916);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, " \"F+Y>b", attributes0);
      FormElement formElement1 = formElement0.addElement(pseudoTextElement0);
      assertEquals("select", formElement1.nodeName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("nav");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("nav");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "type", attributes0);
      FormElement formElement0 = new FormElement(tag0, "POST", attributes0);
      FormElement formElement1 = formElement0.addElement(pseudoTextElement0);
      assertTrue(formElement1.isBlock());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Tag tag0 = Tag.valueOf("T");
      CDataNode cDataNode0 = new CDataNode("Aqlr1b*4TSOg3Q*");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "8%4RN'5sZt09:", attributes0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "", attributes0);
      formElement0.prependText("POST");
      FormElement formElement1 = formElement0.addElement(pseudoTextElement0);
      assertEquals(0, formElement1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("method", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("method", "method", attributes0);
      Attributes attributes1 = attributes0.put(attribute0);
      Attributes attributes2 = attributes1.add((String) null, "3|N!kI+cqEF_wwYPZJ$");
      FormElement formElement0 = new FormElement(tag0, "method", attributes2);
      attributes2.vals = null;
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("select");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      String[] stringArray0 = new String[0];
      attributes0.keys = stringArray0;
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Tag tag0 = Tag.valueOf("EW0\n4:)6[*Q");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "WlX()rMBs;S*y`", attributes0);
      // Undeclared exception!
      try { 
        formElement0.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "select", (Attributes) null);
      CDataNode cDataNode0 = new CDataNode("select");
      Node node0 = cDataNode0.doClone(formElement0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "select", (Attributes) null);
      CDataNode cDataNode0 = new CDataNode("select");
      Node node0 = cDataNode0.doClone(formElement0);
      node0.siblingIndex = (-1444552365);
      // Undeclared exception!
      try { 
        formElement0.removeChild(node0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      attributes0.put("name", "name");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "select", attributes0);
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) formElement0;
      nodeArray0[1] = (Node) pseudoTextElement0;
      nodeArray0[2] = (Node) formElement0;
      pseudoTextElement0.addChildren(nodeArray0);
      formElement0.addElement(pseudoTextElement0);
      // Undeclared exception!
      formElement0.formData();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("EKrRePUbobRM", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "s_", attributes0);
      FormElement formElement1 = formElement0.addElement((Element) null);
      // Undeclared exception!
      try { 
        formElement1.formData();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.FormElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("select");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = new Attributes();
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      Attribute attribute0 = new Attribute("name", "name", attributes1);
      Attributes attributes2 = attributes1.put(attribute0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "select", attributes2);
      formElement0.addElement(pseudoTextElement0);
      String[] stringArray0 = new String[0];
      attributes1.vals = stringArray0;
      // Undeclared exception!
      try { 
        formElement0.formData();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("c");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("c");
      FormElement formElement0 = null;
      try {
        formElement0 = new FormElement(tag0, (String) null, attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("input");
      FormElement formElement0 = new FormElement(tag0, "input", attributes0);
      attributes0.putIgnoreCase("name", "input");
      attributes0.add("checked", "type");
      attributes0.putIgnoreCase("type", "radio");
      formElement0.val("disabled");
      formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("input");
      FormElement formElement0 = new FormElement(tag0, "input", attributes0);
      attributes0.putIgnoreCase("name", "input");
      attributes0.add("checked", "type");
      attributes0.putIgnoreCase("type", "radio");
      formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("input");
      FormElement formElement0 = new FormElement(tag0, "input", attributes0);
      attributes0.putIgnoreCase("name", "input");
      attributes0.putIgnoreCase("type", "radio");
      formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("input");
      FormElement formElement0 = new FormElement(tag0, "input", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      attributes0.putIgnoreCase("name", "type");
      attributes0.putIgnoreCase("type", "checkbox");
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      attributes0.add("NAME", "select");
      FormElement formElement1 = formElement0.addElement(formElement0);
      formElement1.prependElement("OPTION");
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("input");
      FormElement formElement0 = new FormElement(tag0, "input", attributes0);
      attributes0.putIgnoreCase("name", "input");
      formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      attributes0.add("NAME", "select");
      formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "POST", attributes0);
      Attribute attribute0 = Attribute.createFromEncoded("disabled", ":~(oR}");
      attributes0.put(attribute0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "%Z]8p1Hy?)oy:N+~", attributes0);
      FormElement formElement1 = formElement0.addElement(pseudoTextElement0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("7_dGOUH^Jq2.lcs");
      Attributes attributes0 = cDataNode0.attributes();
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("7_dGOUH^Jq2.lcs", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "7_dGOUH^Jq2.lcs", attributes0);
      Document document0 = Parser.parseBodyFragment("7_dGOUH^Jq2.lcs", "POST");
      FormElement formElement1 = formElement0.addElement(document0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("PFSr");
      Attributes attributes0 = cDataNode0.attributes();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      attributes0.add("method", "POST");
      Tag tag0 = Tag.valueOf("w,M:D0wt0", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "^^Yde(6+,B=8qjbM", attributes0);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: ^^Yde(6+,B=8qjbM
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      Tag tag0 = Tag.valueOf("uUxls8yDh~", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("action", "action");
      Attributes attributes1 = attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "uUxls8yDh~", attributes1);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not determine a form action URL for submit. Ensure you set a base URI when parsing.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("7_dGOUH^Jq2.lcs");
      Attributes attributes0 = cDataNode0.attributes();
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("7_dGOUH^Jq2.lcs", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "7_dGOUH^Jq2.lcs", attributes0);
      Elements elements0 = formElement0.elements();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      formElement0.addElement(formElement0);
      formElement0.formData();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("select");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(formElement0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
