/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 19:17:09 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.Connection;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FormElement_ESTest extends FormElement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Tag tag0 = Tag.valueOf("sDtemI/d");
      FormElement formElement0 = new FormElement(tag0, "", (Attributes) null);
      Element element0 = formElement0.text("XD{~_Q_");
      CDataNode cDataNode0 = new CDataNode("Rcdata");
      Node node0 = cDataNode0.doClone(formElement0);
      formElement0.removeChild(node0);
      assertSame(formElement0, element0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("http:/", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "http:/", attributes0);
      Connection connection0 = formElement0.submit();
      assertNotNull(connection0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf(",eeb[D 4+Kzz~", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "option[selected]", attributes0);
      Document document0 = new Document("H83pD5HU");
      FormElement formElement1 = formElement0.addElement(document0);
      Elements elements0 = formElement1.elements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Tag tag0 = Tag.valueOf("0E}{8qfL");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "on", attributes0);
      Document document0 = Parser.parseBodyFragmentRelaxed("pj<Witu!HMMZ1Y>DV8G", "0E}{8qfL");
      formElement0.setSiblingIndex(97);
      FormElement formElement1 = formElement0.addElement(document0);
      assertEquals("0E}{8qfL", formElement1.nodeName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("TagOpen", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "8JJe~Hn@V0.ma;]q", attributes0);
      formElement0.siblingIndex = (-845);
      FormElement formElement1 = formElement0.addElement(formElement0);
      assertFalse(formElement1.hasParent());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("frame", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Wf4[o#&HvQ8s&", attributes0);
      Document document0 = Parser.parseBodyFragment("", "");
      FormElement formElement1 = formElement0.addElement(document0);
      assertEquals("Wf4[o#&HvQ8s&", formElement1.baseUri());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Tag tag0 = Tag.valueOf("sOtemI/d");
      FormElement formElement0 = new FormElement(tag0, "sOtemI/d", (Attributes) null);
      formElement0.reparentChild(formElement0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      assertSame(formElement0, formElement1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Tag tag0 = Tag.valueOf("POLST");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("action", true);
      attributes1.vals = null;
      FormElement formElement0 = new FormElement(tag0, "%", attributes1);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("method", "72Sx");
      String[] stringArray0 = new String[0];
      attributes1.keys = stringArray0;
      Tag tag0 = Tag.valueOf("72Sx");
      FormElement formElement0 = new FormElement(tag0, "72Sx", attributes1);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Tag tag0 = Tag.valueOf("action");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "QE8r^=|", attributes0);
      Document document0 = Parser.parseBodyFragmentRelaxed("action", "action");
      List<Node> list0 = formElement0.childNodes();
      formElement0.childNodes = list0;
      document0.setParentNode(formElement0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Tag tag0 = Tag.valueOf("option");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "option", attributes0);
      // Undeclared exception!
      try { 
        formElement0.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Tag tag0 = Tag.valueOf("sDtemI/d");
      FormElement formElement0 = new FormElement(tag0, "", (Attributes) null);
      CDataNode cDataNode0 = new CDataNode("Rcdata");
      Node node0 = cDataNode0.doClone(formElement0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Tag tag0 = Tag.valueOf("sDtemI/d");
      FormElement formElement0 = new FormElement(tag0, "Jp:'N~7", (Attributes) null);
      CDataNode cDataNode0 = new CDataNode(",");
      CDataNode cDataNode1 = (CDataNode)cDataNode0.doClone(formElement0);
      cDataNode1.setSiblingIndex((-1111699225));
      // Undeclared exception!
      try { 
        formElement0.removeChild(cDataNode1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      attributes0.put("name", "name");
      FormElement formElement0 = new FormElement(tag0, "name", attributes0);
      Element element0 = new Element(tag0, "name");
      formElement0.addElement(formElement0);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) formElement0;
      nodeArray0[1] = (Node) element0;
      formElement0.addChildren(nodeArray0);
      // Undeclared exception!
      formElement0.formData();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf(")_:_EY?H", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, ";,bj/ys", attributes0);
      FormElement formElement1 = formElement0.addElement((Element) null);
      // Undeclared exception!
      try { 
        formElement1.formData();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.FormElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("name", "name");
      String[] stringArray0 = new String[0];
      attributes0.vals = stringArray0;
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "name", attributes1);
      formElement0.addElement(pseudoTextElement0);
      // Undeclared exception!
      try { 
        formElement0.formData();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = null;
      try {
        formElement0 = new FormElement((Tag) null, "EdcNT{sUv}p<N@g", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("object");
      Attribute attribute0 = Attribute.createFromEncoded("NAME", "object");
      FormElement formElement0 = new FormElement(tag0, "NAME", attributes0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "object", attributes0);
      formElement0.addElement(pseudoTextElement0);
      attributes0.put(attribute0);
      attributes0.add("TYPE", "checkbox");
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("name", "name");
      FormElement formElement0 = new FormElement(tag0, "name", attributes1);
      formElement0.appendElement("option");
      FormElement formElement1 = formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("NAME", "METHOD");
      Tag tag0 = Tag.valueOf("input", (ParseSettings) null);
      FormElement formElement0 = new FormElement(tag0, "L*U$z3wh>}Q", attributes0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "input", attributes0);
      FormElement formElement1 = formElement0.addElement(pseudoTextElement0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("SotQ");
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      Element element0 = formElement0.tagName("select");
      FormElement formElement1 = formElement0.addElement(element0);
      Attribute attribute0 = new Attribute("name", "h5", attributes0);
      attributes0.put(attribute0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      attributes0.add("disabled", "disabled");
      FormElement formElement0 = new FormElement(tag0, " disabled select=\"AfterBody\"", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("SotQ");
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      Element element0 = formElement0.tagName("select");
      FormElement formElement1 = formElement0.addElement(element0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("2PSVQ");
      FormElement formElement0 = new FormElement(tag0, "2PSVQ", attributes0);
      attributes0.put("method", "POST");
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: 2PSVQ
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("systemId", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("systemId");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "6_)Jz^C?P", attributes0);
      Elements elements0 = formElement0.elements();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("SotQ");
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      formElement1.formData();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "name", attributes0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(formElement0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
