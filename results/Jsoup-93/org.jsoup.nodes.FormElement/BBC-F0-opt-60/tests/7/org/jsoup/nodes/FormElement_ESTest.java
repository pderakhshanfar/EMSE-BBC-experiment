/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 19:17:26 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.Connection;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FormElement_ESTest extends FormElement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Tag tag0 = Tag.valueOf("[");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "[", attributes0);
      Element element0 = formElement0.appendElement("[");
      formElement0.removeChild(element0);
      assertFalse(element0.hasParent());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("C[{NKt9X");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("C[{NKt9X");
      FormElement formElement0 = new FormElement(tag0, "http:/", attributes0);
      Connection connection0 = formElement0.submit();
      assertNotNull(connection0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Tag tag0 = Tag.valueOf("}u~K.10!");
      CDataNode cDataNode0 = new CDataNode("");
      Attributes attributes0 = cDataNode0.attributes();
      Document document0 = Parser.parse("", "");
      FormElement formElement0 = new FormElement(tag0, "ax8@6>|?N[&(EQ", attributes0);
      formElement0.addElement(document0);
      Elements elements0 = formElement0.elements();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode(";u}g#<>");
      Attributes attributes0 = cDataNode0.attributes();
      Document document0 = Document.createShell(";u}g#<>");
      Tag tag0 = Tag.valueOf(";u}g#<>");
      FormElement formElement0 = new FormElement(tag0, ";u}g#<>", attributes0);
      formElement0.prepend(";u}g#<>");
      formElement0.appendChild(formElement0);
      FormElement formElement1 = formElement0.addElement(document0);
      assertEquals(";u}g#<>", formElement1.nodeName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode(";u}g#<>");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf(";u}g#<>");
      FormElement formElement0 = new FormElement(tag0, ";u}g#<>", attributes0);
      formElement0.setSiblingIndex((-1432121040));
      FormElement formElement1 = formElement0.addElement(formElement0);
      assertFalse(formElement1.isBlock());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Tag tag0 = Tag.valueOf("figure");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "BetweenDoctypePublicAndSystemIdentifiers", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      assertEquals("BetweenDoctypePublicAndSystemIdentifiers", formElement1.baseUri());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      Tag tag0 = Tag.valueOf("\")o3M6(vN;\"d/Yr8 ", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("^R");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "^R", attributes0);
      attributes0.keys = null;
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Tag tag0 = Tag.valueOf("`N;u}g9<J");
      CDataNode cDataNode0 = new CDataNode("`N;u}g9<J");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "`N;u}g9<J", attributes0);
      Attribute attribute0 = Attribute.createFromEncoded("<~:/S/hWV/,KAoc", "select");
      Attributes attributes1 = attributes0.put(attribute0);
      String[] stringArray0 = new String[0];
      attributes1.keys = stringArray0;
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode(";u}g#<>");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf(";u}g#<>");
      FormElement formElement0 = new FormElement(tag0, "disabled", attributes0);
      // Undeclared exception!
      try { 
        formElement0.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Tag tag0 = Tag.valueOf(";u}g#<>");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, ";u}g#<>", attributes0);
      DocumentType documentType0 = new DocumentType(";u}g#<>", ";u}g#<>", (String) null, "dp.=C6C6\u0004_%s");
      documentType0.setParentNode(formElement0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(documentType0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Tag tag0 = Tag.valueOf("figure");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "BetweenDoctypePublicAndSystemIdentifiers", attributes0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(formElement0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "name", attributes0);
      attributes0.add("name", "name");
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) formElement0;
      nodeArray0[1] = (Node) formElement0;
      nodeArray0[2] = (Node) formElement0;
      nodeArray0[3] = (Node) formElement0;
      Document document0 = Parser.parseBodyFragmentRelaxed("radio", "Could not determine a form action URL for submit. Ensure you set a base URI when parsing.");
      nodeArray0[4] = (Node) document0;
      formElement0.addChildren(nodeArray0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      // Undeclared exception!
      formElement1.formData();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Tag tag0 = Tag.valueOf("zj:$q{|?N4`L3!");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "zj:$q{|?N4`L3!", attributes0);
      formElement0.addElement((Element) null);
      // Undeclared exception!
      try { 
        formElement0.formData();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.FormElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("Un");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "Un", attributes0);
      Attribute attribute0 = Attribute.createFromEncoded("NAME", "R");
      attributes0.put(attribute0);
      String[] stringArray0 = new String[0];
      attributes0.vals = stringArray0;
      FormElement formElement1 = formElement0.addElement(formElement0);
      // Undeclared exception!
      try { 
        formElement1.formData();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = null;
      try {
        formElement0 = new FormElement((Tag) null, (String) null, attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("textarea");
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
      Attribute attribute0 = new Attribute("name", "B", attributes0);
      attributes0.put(attribute0);
      formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("Un");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "Un", attributes0);
      Attribute attribute0 = Attribute.createFromEncoded("NAME", "type");
      attributes0.put(attribute0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "DISABLED", attributes0);
      attributes0.add("DISABLED", "DISABLED");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "DISABLED", attributes0);
      formElement0.addElement(pseudoTextElement0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("pion");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Tag tag0 = Tag.valueOf("zj:$q{|?N4`L3!");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "XMLNS", attributes0);
      attributes0.put("method", "POST");
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: XMLNS
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Tag tag0 = Tag.valueOf("zj:$q{|?N4`L3!");
      CDataNode cDataNode0 = new CDataNode("zj:$q{|?N4`L3!");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.add("action", "+:Zdvb.NrV$I");
      FormElement formElement0 = new FormElement(tag0, "ON", attributes1);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not determine a form action URL for submit. Ensure you set a base URI when parsing.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("Un");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "Un", attributes0);
      Elements elements0 = formElement0.elements();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Tag tag0 = Tag.valueOf("zj:$q{|?N4`L3!");
      Attributes attributes0 = new Attributes();
      Document document0 = Parser.parse("method", "XMLNS");
      FormElement formElement0 = new FormElement(tag0, "XMLNS", attributes0);
      formElement0.addElement(document0);
      formElement0.formData();
  }
}
