/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 02:23:25 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.Connection;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FormElement_ESTest extends FormElement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("[%s^=%s]", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "[%s^=%s]", (Attributes) null);
      formElement0.appendChild(formElement0);
      formElement0.removeChild(formElement0);
      assertFalse(formElement0.isBlock());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "http:/", attributes0);
      Connection connection0 = formElement0.submit();
      assertNotNull(connection0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("(r^kY[^", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "!n7!B-jp", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      Elements elements0 = formElement1.elements();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Tag tag0 = Tag.valueOf("adio");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "DOCTYPESYSTEMIDENTIFIER_SINGLEQUOTED", attributes0);
      Document document0 = Parser.parse("DOCTYPESYSTEMIDENTIFIER_SINGLEQUOTED", "DOCTYPESYSTEMIDENTIFIER_SINGLEQUOTED");
      FormElement formElement1 = formElement0.addElement(document0);
      formElement1.siblingIndex = (-2460);
      FormElement formElement2 = formElement0.addElement(document0);
      assertSame(formElement0, formElement2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("script", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "script", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      assertTrue(formElement1.isBlock());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Tag tag0 = Tag.valueOf("4adio");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "4adio", attributes0);
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) formElement0;
      nodeArray0[1] = (Node) formElement0;
      nodeArray0[2] = (Node) formElement0;
      nodeArray0[3] = (Node) formElement0;
      Comment comment0 = new Comment("Could not determine a form action URL for submit. Ensure you set a base URI when parsing.");
      nodeArray0[4] = (Node) comment0;
      nodeArray0[5] = (Node) formElement0;
      nodeArray0[6] = (Node) formElement0;
      formElement0.addChildren(nodeArray0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      assertEquals(2, formElement1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Tag tag0 = Tag.valueOf("adio");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("method", "adio");
      FormElement formElement0 = new FormElement(tag0, "method", attributes0);
      attributes1.keys = null;
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Tag tag0 = Tag.valueOf("n&K4^T1?K,");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("c2H5CJcb9fF", "=%PI$ws[HT,'");
      Attributes attributes2 = attributes1.add("=%PI$ws[HT,'", "0Y@'}Mr");
      String[] stringArray0 = new String[1];
      attributes1.keys = stringArray0;
      FormElement formElement0 = new FormElement(tag0, "TVE\":E", attributes2);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("#[>qtNF}a~");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("\";Ow_1");
      FormElement formElement0 = new FormElement(tag0, "l=peDS00)\"", attributes0);
      // Undeclared exception!
      try { 
        formElement0.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Tag tag0 = Tag.valueOf("radio");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "radio", attributes0);
      CDataNode cDataNode0 = new CDataNode("radio");
      Node node0 = cDataNode0.doClone(formElement0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("[%s^=%s]", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "[%s^=%s]", (Attributes) null);
      // Undeclared exception!
      try { 
        formElement0.removeChild(formElement0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("32", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "<!--", (Attributes) null);
      DataNode dataNode0 = new DataNode("<!--", "<!--");
      dataNode0.setSiblingIndex((-773));
      DataNode dataNode1 = dataNode0.setWholeData("o9-tHAy5zR");
      dataNode1.parentNode = (Node) formElement0;
      // Undeclared exception!
      try { 
        formElement0.removeChild(dataNode1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes1 = attributes0.put("name", "name");
      FormElement formElement0 = new FormElement(tag0, "name", attributes1);
      FormElement formElement1 = formElement0.addElement(formElement0);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) formElement0;
      formElement1.addChildren(0, nodeArray0);
      // Undeclared exception!
      formElement1.formData();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("u0_`%(HO?|aE", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "#KXMPyqorV", attributes0);
      FormElement formElement1 = formElement0.addElement((Element) null);
      // Undeclared exception!
      try { 
        formElement1.formData();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.FormElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes1 = attributes0.add("name", "select");
      String[] stringArray0 = new String[0];
      attributes1.keys = stringArray0;
      FormElement formElement0 = new FormElement(tag0, "name", attributes1);
      FormElement formElement1 = formElement0.addElement(formElement0);
      // Undeclared exception!
      try { 
        formElement1.formData();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Tag tag0 = Tag.valueOf("radio");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = null;
      try {
        formElement0 = new FormElement(tag0, (String) null, attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("select");
      Attributes attributes0 = cDataNode0.attributes();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("select", parseSettings0);
      Attributes attributes1 = attributes0.put("name", "name");
      FormElement formElement0 = new FormElement(tag0, "name", attributes1);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, " C+", attributes0);
      FormElement formElement1 = formElement0.addElement(pseudoTextElement0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      attributes0.put("disabled", "select");
      FormElement formElement0 = new FormElement(tag0, "disabled", attributes0);
      formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Tag tag0 = Tag.valueOf("4adio");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "4adio", attributes0);
      formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Tag tag0 = Tag.valueOf(".}h}J&Ah6#R`/");
      CDataNode cDataNode0 = new CDataNode(".}h}J&Ah6#R`/");
      Attributes attributes0 = cDataNode0.attributes();
      attributes0.add("method", "POST");
      FormElement formElement0 = new FormElement(tag0, "*.k", attributes0);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: *.k
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("PUT", parseSettings0);
      Attributes attributes0 = new Attributes();
      attributes0.add("action", "|v");
      FormElement formElement0 = new FormElement(tag0, "PUT", attributes0);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not determine a form action URL for submit. Ensure you set a base URI when parsing.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("[%s^=%s]", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "[%s^=%s]", (Attributes) null);
      Elements elements0 = formElement0.elements();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("select");
      Attributes attributes0 = cDataNode0.attributes();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("select", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "name", attributes0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, " C+", attributes0);
      formElement0.addElement(pseudoTextElement0);
      formElement0.formData();
  }
}
