/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 02:21:58 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.Connection;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FormElement_ESTest extends FormElement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Tag tag0 = Tag.valueOf("AG~");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "AG~", attributes0);
      formElement0.appendChild(formElement0);
      formElement0.removeChild(formElement0);
      assertFalse(formElement0.isBlock());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("METHOD", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "http:/", attributes0);
      Connection connection0 = formElement0.submit();
      assertNotNull(connection0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Tag tag0 = Tag.valueOf("checkbox");
      CDataNode cDataNode0 = new CDataNode("checkbox");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "%1a)", attributes0);
      Document document0 = Parser.parseBodyFragmentRelaxed("/", "%1a)");
      FormElement formElement1 = formElement0.addElement(document0);
      Elements elements0 = formElement1.elements();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("radio", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "radio", (Attributes) null);
      formElement0.setSiblingIndex(67);
      FormElement formElement1 = formElement0.addElement(formElement0);
      assertEquals(0, formElement1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("i?1>,?5jf}", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "rykiE", attributes0);
      Document document0 = Document.createShell("#he>`@:b");
      formElement0.setSiblingIndex((-256));
      FormElement formElement1 = formElement0.addElement(document0);
      assertEquals("i?1>,?5jf}", formElement1.normalName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Tag tag0 = Tag.valueOf("details");
      FormElement formElement0 = new FormElement(tag0, "details", (Attributes) null);
      FormElement formElement1 = formElement0.addElement(formElement0);
      assertEquals("details", formElement1.nodeName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("POST", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "POST", attributes0);
      Document document0 = Document.createShell("POST");
      document0.reparentChild(formElement0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      assertTrue(formElement1.hasParent());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Tag tag0 = Tag.valueOf("checkbox");
      CDataNode cDataNode0 = new CDataNode("checkbox");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "%1a)", attributes0);
      formElement0.append("o_~-|@xCNav#wWT");
      FormElement formElement1 = formElement0.addElement(formElement0);
      assertEquals("checkbox", formElement1.tagName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Tag tag0 = Tag.valueOf("checkbox");
      CDataNode cDataNode0 = new CDataNode("checkbox");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.put("o_~-|@xCNav#wWT", false);
      attributes1.keys = null;
      FormElement formElement0 = new FormElement(tag0, "%1a)", attributes1);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("name", "name");
      String[] stringArray0 = new String[0];
      attributes1.keys = stringArray0;
      Tag tag0 = Tag.valueOf("P6l0c-");
      FormElement formElement0 = new FormElement(tag0, "name", attributes1);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Tag tag0 = Tag.valueOf("4n gbKvW]+6s(Bo");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "#text", attributes0);
      // Undeclared exception!
      try { 
        formElement0.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Tag tag0 = Tag.valueOf("BQ");
      FormElement formElement0 = new FormElement(tag0, "BQ", (Attributes) null);
      CDataNode cDataNode0 = new CDataNode("BQ");
      Node node0 = cDataNode0.doClone(formElement0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("name", "name");
      Tag tag0 = Tag.valueOf("select");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "select", attributes1);
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) pseudoTextElement0;
      nodeArray0[1] = (Node) pseudoTextElement0;
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("checked", "METHOD");
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) pseudoTextElement0;
      nodeArray0[4] = (Node) pseudoTextElement0;
      pseudoTextElement0.addChildren(nodeArray0);
      FormElement formElement0 = new FormElement(tag0, "name", attributes0);
      FormElement formElement1 = formElement0.addElement(pseudoTextElement0);
      // Undeclared exception!
      formElement1.formData();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Tag tag0 = Tag.valueOf("checkbox");
      CDataNode cDataNode0 = new CDataNode("checkbox");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "b#ml)tl", attributes0);
      formElement0.addElement((Element) null);
      // Undeclared exception!
      try { 
        formElement0.formData();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.FormElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("name", "name");
      String[] stringArray0 = new String[0];
      attributes1.keys = stringArray0;
      Tag tag0 = Tag.valueOf("select");
      Element element0 = new Element(tag0, "select", attributes1);
      FormElement formElement0 = new FormElement(tag0, "name", attributes1);
      formElement0.addElement(element0);
      // Undeclared exception!
      try { 
        formElement0.formData();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("dd", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = null;
      try {
        formElement0 = new FormElement(tag0, (String) null, attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Tag tag0 = Tag.valueOf("input");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("name", "input");
      FormElement formElement0 = new FormElement(tag0, "input", attributes0);
      formElement0.val("h .p'`3\"Xr");
      formElement0.attr("checked", "name");
      attributes1.put("type", "radio");
      formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Tag tag0 = Tag.valueOf("input");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("name", "input", attributes0);
      Attributes attributes1 = attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "RU 8TW*LK6!", attributes0);
      formElement0.attr("checked", "");
      attributes1.put("type", "radio");
      formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Tag tag0 = Tag.valueOf("input");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("name", "input", attributes0);
      Attributes attributes1 = attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "RU 8TW*LK6!", attributes0);
      attributes1.put("type", "radio");
      formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Tag tag0 = Tag.valueOf("input");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("name", "name");
      FormElement formElement0 = new FormElement(tag0, "name", attributes0);
      formElement0.addElement(formElement0);
      attributes1.put("type", "checkbox");
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("name", "F3m");
      Attributes attributes1 = attributes0.put(attribute0);
      Tag tag0 = Tag.valueOf("select", (ParseSettings) null);
      Element element0 = new Element(tag0, "|", attributes1);
      FormElement formElement0 = new FormElement(tag0, "H8 n&F,]!PZ", attributes0);
      formElement0.addElement(element0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Tag tag0 = Tag.valueOf("input");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("name", "F3m");
      Attributes attributes1 = attributes0.put(attribute0);
      Element element0 = new Element(tag0, "|", attributes1);
      FormElement formElement0 = new FormElement(tag0, "H8 n&F,]!PZ", attributes0);
      formElement0.addElement(element0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Tag tag0 = Tag.valueOf("input");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "XcB*(D!XK~^-M", attributes0);
      attributes0.put("disabled", true);
      FormElement formElement1 = formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Tag tag0 = Tag.valueOf("input");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "|", attributes0);
      FormElement formElement0 = new FormElement(tag0, "H8 n&F,]!PZ", attributes0);
      formElement0.addElement(element0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Tag tag0 = Tag.valueOf("input");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("method", "POST");
      FormElement formElement0 = new FormElement(tag0, "input", attributes1);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: input
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Tag tag0 = Tag.valueOf("kuLkB");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("action", "action");
      attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "kuLkB", attributes0);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not determine a form action URL for submit. Ensure you set a base URI when parsing.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("i?1>,?5jf}", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "rykiE", attributes0);
      Elements elements0 = formElement0.elements();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("i?1>,?5jf}", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "rykiE", attributes0);
      Document document0 = Document.createShell("#he>`@:b");
      FormElement formElement1 = formElement0.addElement(document0);
      formElement1.formData();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Tag tag0 = Tag.valueOf("AG~");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "AG~", attributes0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(formElement0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
