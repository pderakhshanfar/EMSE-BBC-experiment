/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 02:21:28 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.Connection;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FormElement_ESTest extends FormElement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Tag tag0 = Tag.valueOf("isindex");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "isindex", attributes0);
      TextNode textNode0 = new TextNode("action");
      formElement0.prependChild(textNode0);
      formElement0.removeChild(textNode0);
      assertEquals("isindex", formElement0.nodeName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Tag tag0 = Tag.valueOf("http:/");
      CDataNode cDataNode0 = new CDataNode("disabled");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "http:/", attributes0);
      Connection connection0 = formElement0.submit();
      assertNotNull(connection0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "checked", attributes0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "method", attributes0);
      FormElement formElement1 = formElement0.addElement(pseudoTextElement0);
      Elements elements0 = formElement1.elements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Tag tag0 = Tag.valueOf("+8Y}.?g4vN&)z(");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "+8Y}.?g4vN&)z(", attributes0);
      formElement0.setSiblingIndex(1781);
      Document document0 = Parser.parseBodyFragmentRelaxed("type", "vkf");
      FormElement formElement1 = formElement0.addElement(document0);
      assertSame(formElement1, formElement0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "select", attributes0);
      formElement0.setSiblingIndex((-318));
      FormElement formElement1 = formElement0.addElement(pseudoTextElement0);
      assertFalse(formElement1.hasParent());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Tag tag0 = Tag.valueOf("ul");
      FormElement formElement0 = new FormElement(tag0, "ul", (Attributes) null);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "ul", (Attributes) null);
      pseudoTextElement0.appendChild(formElement0);
      FormElement formElement1 = formElement0.addElement(pseudoTextElement0);
      assertSame(formElement1, formElement0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Tag tag0 = Tag.valueOf("ul");
      FormElement formElement0 = new FormElement(tag0, "ul", (Attributes) null);
      CDataNode cDataNode0 = new CDataNode("POST");
      formElement0.appendChild(cDataNode0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      assertEquals(0, formElement1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("method", "method", attributes0);
      Attributes attributes1 = attributes0.put(attribute0);
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("method", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "];kWb%2X[kkQ", attributes1);
      attributes0.vals = null;
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("method", "ommx");
      String[] stringArray0 = new String[0];
      attributes0.keys = stringArray0;
      Tag tag0 = Tag.valueOf("ommx");
      FormElement formElement0 = new FormElement(tag0, "ommx", attributes1);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Tag tag0 = Tag.valueOf("PO'7UT");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "POST", attributes0);
      Document document0 = Parser.parseBodyFragment("PO'7UT", "RE,");
      formElement0.reparentChild(document0);
      FormElement formElement1 = formElement0.addElement(document0);
      List<Node> list0 = Parser.parseXmlFragment("ZF3E2RJ{7EXEQ@^<", "PO'7UT");
      formElement1.childNodes = list0;
      // Undeclared exception!
      try { 
        formElement0.removeChild(document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("@=#rJf7Wt29JnH+", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "AfterAttributeName", (Attributes) null);
      CDataNode cDataNode0 = new CDataNode("~G4)zG)e");
      Node node0 = cDataNode0.doClone(formElement0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Tag tag0 = Tag.valueOf("\"07[$T`cM}.8#");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "\"07[$T`cM}.8#", attributes0);
      CDataNode cDataNode0 = new CDataNode("\"07[$T`cM}.8#");
      // Undeclared exception!
      try { 
        formElement0.removeChild(cDataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("@=#rJf7Wt29JnH+", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "AfterAttributeName", (Attributes) null);
      CDataNode cDataNode0 = new CDataNode("~G4)zG)e");
      cDataNode0.setSiblingIndex((-1620718092));
      Node node0 = cDataNode0.doClone(formElement0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(node0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "$:d", attributes0);
      attributes0.put("NAME", "$:d");
      FormElement formElement1 = formElement0.addElement(pseudoTextElement0);
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) pseudoTextElement0;
      nodeArray0[1] = (Node) formElement0;
      nodeArray0[2] = (Node) formElement1;
      nodeArray0[3] = (Node) formElement0;
      nodeArray0[4] = (Node) formElement0;
      nodeArray0[5] = (Node) formElement1;
      nodeArray0[6] = (Node) formElement0;
      nodeArray0[7] = (Node) formElement1;
      pseudoTextElement0.addChildren(nodeArray0);
      // Undeclared exception!
      formElement1.formData();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Tag tag0 = Tag.valueOf("p");
      CDataNode cDataNode0 = new CDataNode("p");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, ":|y", attributes0);
      FormElement formElement1 = formElement0.addElement((Element) null);
      // Undeclared exception!
      try { 
        formElement1.formData();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.FormElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "select", attributes0);
      attributes0.put("NAME", "select");
      FormElement formElement1 = formElement0.addElement(pseudoTextElement0);
      String[] stringArray0 = new String[0];
      attributes0.vals = stringArray0;
      // Undeclared exception!
      try { 
        formElement1.formData();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Tag tag0 = Tag.valueOf("ul");
      FormElement formElement0 = null;
      try {
        formElement0 = new FormElement(tag0, (String) null, (Attributes) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("TEXTAREA", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "TEXTAREA", attributes0);
      Attributes attributes1 = attributes0.put("name", "TEXTAREA");
      Attribute attribute0 = Attribute.createFromEncoded("checked", ")GG83$z+a kC8");
      attributes1.put(attribute0);
      pseudoTextElement0.appendText("on");
      attributes1.put("type", "radio");
      FormElement formElement0 = new FormElement(tag0, "type", attributes0);
      formElement0.addElement(pseudoTextElement0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("TEXTAREA", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "TEXTAREA", attributes0);
      Attributes attributes1 = attributes0.put("name", "TEXTAREA");
      Attribute attribute0 = Attribute.createFromEncoded("checked", "option");
      attributes1.put(attribute0);
      Attributes attributes2 = attributes1.put("type", "radio");
      FormElement formElement0 = new FormElement(tag0, "name", attributes2);
      formElement0.addElement(pseudoTextElement0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("TEXTAREA", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "TEXTAREA", attributes0);
      Attributes attributes1 = attributes0.put("name", "TEXTAREA");
      Attributes attributes2 = attributes1.put("type", "radio");
      FormElement formElement0 = new FormElement(tag0, "name", attributes2);
      formElement0.addElement(pseudoTextElement0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("TEXTAREA", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "TEXTAREA", attributes0);
      attributes0.put("name", "TEXTAREA");
      Attribute attribute0 = new Attribute("type", "checkbox", attributes0);
      Attributes attributes1 = attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "type", attributes1);
      formElement0.addElement(pseudoTextElement0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("TEXTAREA", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "TEXTAREA", attributes0);
      Attributes attributes1 = attributes0.put("name", "TEXTAREA");
      FormElement formElement0 = new FormElement(tag0, "name", attributes1);
      formElement0.addElement(pseudoTextElement0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "checked", attributes0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "method", attributes0);
      attributes0.put("NAME", "method");
      formElement0.addElement(pseudoTextElement0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      attributes0.put("disabled", true);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "select", attributes0);
      formElement0.addElement(pseudoTextElement0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("method", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "];kWb%2X[kkQ", attributes0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "method", attributes0);
      formElement0.addElement(pseudoTextElement0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("method", "POST", attributes0);
      Attributes attributes1 = attributes0.put(attribute0);
      Tag tag0 = Tag.valueOf("method");
      FormElement formElement0 = new FormElement(tag0, "0S1c'1t|E[Fx", attributes1);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: 0S1c'1t|E[Fx
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("METHOD");
      FormElement formElement0 = new FormElement(tag0, "3\"mj/6=:yFlg5QAJ7m", attributes0);
      attributes0.put("action", "NAME");
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not determine a form action URL for submit. Ensure you set a base URI when parsing.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "checked", attributes0);
      Elements elements0 = formElement0.elements();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "checked", attributes0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "method", attributes0);
      FormElement formElement1 = formElement0.addElement(pseudoTextElement0);
      formElement1.formData();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("n&P", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "n&P", (Attributes) null);
      // Undeclared exception!
      try { 
        formElement0.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }
}
