/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 20:50:59 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.Connection;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FormElement_ESTest extends FormElement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Tag tag0 = Tag.valueOf("d]oop#-seL2");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "d]oop#-seL2", attributes0);
      Element element0 = formElement0.append("d]oop#-seL2");
      formElement0.reparentChild(element0);
      formElement0.removeChild(formElement0);
      assertEquals("d]oop#-seL2", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Tag tag0 = Tag.valueOf("NAME");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "http:/", attributes0);
      Connection connection0 = formElement0.submit();
      assertNotNull(connection0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("Bo[+ew*=Y]x-<[z^", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "Bo[+ew*=Y]x-<[z^", (Attributes) null);
      Document document0 = Parser.parseBodyFragmentRelaxed("Bo[+ew*=Y]x-<[z^", "Bo[+ew*=Y]x-<[z^");
      FormElement formElement1 = formElement0.addElement(document0);
      Elements elements0 = formElement1.elements();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("Bo[+ew*=Y]x-<[z^", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "Bo[+ew*=Y]x-<[z^", (Attributes) null);
      Document document0 = Parser.parseBodyFragmentRelaxed("Bo[+ew*=Y]x-<[z^", "Bo[+ew*=Y]x-<[z^");
      document0.appendChild(formElement0);
      FormElement formElement1 = formElement0.addElement(document0);
      assertSame(formElement1, formElement0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Tag tag0 = Tag.valueOf("T&IPHD_JNVCS");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "T&IPHD_JNVCS", attributes0);
      formElement0.setSiblingIndex((-739));
      FormElement formElement1 = formElement0.addElement(formElement0);
      assertEquals("T&IPHD_JNVCS", formElement1.baseUri());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("tr", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("tr");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "tr", attributes0);
      Document document0 = new Document("9yu?c1B@ljb98K");
      FormElement formElement1 = formElement0.addElement(document0);
      assertEquals("tr", formElement1.tagName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Tag tag0 = Tag.valueOf("d]Boop#MseL2");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.select.StructuralEvaluator$Not", attributes0);
      DataNode dataNode0 = DataNode.createFromEncoded("org.jsoup.select.StructuralEvaluator$Not", "org.jsoup.select.StructuralEvaluator$Not");
      formElement0.prependChild(dataNode0);
      Document document0 = Document.createShell("");
      FormElement formElement1 = formElement0.addElement(document0);
      assertEquals("d]Boop#MseL2", formElement1.nodeName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Tag tag0 = Tag.valueOf(">^d[_,S4P}");
      Attributes attributes0 = new Attributes();
      attributes0.put("", "https");
      attributes0.keys = null;
      FormElement formElement0 = new FormElement(tag0, ">^d[_,S4P}", attributes0);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Tag tag0 = Tag.valueOf("d]oop#-seL2");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("d]oop#-seL2", "F!<_G{", attributes0);
      Attributes attributes1 = attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "2HG_Pn=)z7H<<,2z", attributes1);
      String[] stringArray0 = new String[0];
      attributes1.keys = stringArray0;
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("*", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "*", (Attributes) null);
      // Undeclared exception!
      try { 
        formElement0.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Tag tag0 = Tag.valueOf("DV[fMMbD1k0Axr@");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      formElement0.reparentChild(formElement0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(formElement0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Tag tag0 = Tag.valueOf("d]oop#-seL2");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "d]oop#-seL2", attributes0);
      formElement0.setSiblingIndex((-1074265344));
      formElement0.reparentChild(formElement0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(formElement0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Tag tag0 = Tag.valueOf("NAME");
      Attributes attributes0 = new Attributes();
      attributes0.putIgnoreCase("NAME", "NAME");
      FormElement formElement0 = new FormElement(tag0, "NAME", attributes0);
      Tag tag1 = Tag.valueOf("select");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag1, "select", attributes0);
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) pseudoTextElement0;
      nodeArray0[1] = (Node) formElement0;
      nodeArray0[2] = (Node) pseudoTextElement0;
      nodeArray0[3] = (Node) formElement0;
      nodeArray0[4] = (Node) pseudoTextElement0;
      nodeArray0[5] = (Node) pseudoTextElement0;
      nodeArray0[6] = (Node) pseudoTextElement0;
      nodeArray0[7] = (Node) pseudoTextElement0;
      nodeArray0[8] = (Node) pseudoTextElement0;
      pseudoTextElement0.addChildren(nodeArray0);
      formElement0.addElement(pseudoTextElement0);
      // Undeclared exception!
      formElement0.formData();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Tag tag0 = Tag.valueOf("name");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, ">B", attributes0);
      FormElement formElement1 = formElement0.addElement((Element) null);
      // Undeclared exception!
      try { 
        formElement1.formData();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.FormElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Tag tag0 = Tag.valueOf("NAME");
      Attributes attributes0 = new Attributes();
      attributes0.putIgnoreCase("NAME", "NAME");
      FormElement formElement0 = new FormElement(tag0, "NAME", attributes0);
      String[] stringArray0 = new String[0];
      attributes0.keys = stringArray0;
      Tag tag1 = Tag.valueOf("select");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag1, "NAME", attributes0);
      FormElement formElement1 = formElement0.addElement(pseudoTextElement0);
      // Undeclared exception!
      try { 
        formElement1.formData();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("!");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = null;
      try {
        formElement0 = new FormElement((Tag) null, "Z", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Tag tag0 = Tag.valueOf("NAME");
      Attributes attributes0 = new Attributes();
      attributes0.putIgnoreCase("NAME", "NAME");
      FormElement formElement0 = new FormElement(tag0, "NAME", attributes0);
      Tag tag1 = Tag.valueOf("input");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag1, "select", attributes0);
      formElement0.val("input");
      attributes0.put("type", "radio");
      formElement0.addElement(pseudoTextElement0);
      attributes0.add("checked", "checked");
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Tag tag0 = Tag.valueOf("NAME");
      Attributes attributes0 = new Attributes();
      attributes0.putIgnoreCase("NAME", "NAME");
      FormElement formElement0 = new FormElement(tag0, "NAME", attributes0);
      Tag tag1 = Tag.valueOf("input");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag1, "select", attributes0);
      attributes0.put("type", "radio");
      FormElement formElement1 = formElement0.addElement(pseudoTextElement0);
      attributes0.put("checked", "|OVT");
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Tag tag0 = Tag.valueOf("NAME");
      Attributes attributes0 = new Attributes();
      attributes0.putIgnoreCase("NAME", "NAME");
      FormElement formElement0 = new FormElement(tag0, "NAME", attributes0);
      Tag tag1 = Tag.valueOf("input");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag1, "select", attributes0);
      attributes0.put("type", "radio");
      FormElement formElement1 = formElement0.addElement(pseudoTextElement0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Tag tag0 = Tag.valueOf("NAME");
      Attributes attributes0 = new Attributes();
      attributes0.putIgnoreCase("NAME", "NAME");
      FormElement formElement0 = new FormElement(tag0, "NAME", attributes0);
      Tag tag1 = Tag.valueOf("input");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag1, "input", attributes0);
      Attribute attribute0 = Attribute.createFromEncoded("type", "NAME");
      attributes0.put(attribute0);
      FormElement formElement1 = formElement0.addElement(pseudoTextElement0);
      attribute0.setValue("checkbox");
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Tag tag0 = Tag.valueOf("NAME");
      Attributes attributes0 = new Attributes();
      attributes0.putIgnoreCase("NAME", "NAME");
      FormElement formElement0 = new FormElement(tag0, "NAME", attributes0);
      Tag tag1 = Tag.valueOf("input");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag1, "select", attributes0);
      FormElement formElement1 = formElement0.addElement(pseudoTextElement0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Tag tag0 = Tag.valueOf("NAME");
      Attributes attributes0 = new Attributes();
      attributes0.putIgnoreCase("NAME", "pMDT");
      FormElement formElement0 = new FormElement(tag0, "NAME", attributes0);
      Tag tag1 = Tag.valueOf("select");
      FormElement formElement1 = new FormElement(tag1, "ea3kH/ k:>|8", attributes0);
      formElement0.addElement(formElement1);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("disabled", true);
      FormElement formElement0 = new FormElement(tag0, "select", attributes1);
      formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Tag tag0 = Tag.valueOf("NAME");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "NAME", attributes0);
      Tag tag1 = Tag.valueOf("select");
      FormElement formElement1 = new FormElement(tag1, "ea3kH/ k:>|8", attributes0);
      formElement0.addElement(formElement1);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.add("method", "POST");
      Tag tag0 = Tag.valueOf("option[selected]");
      FormElement formElement0 = new FormElement(tag0, "option[selected]", attributes0);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: option[selected]
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Tag tag0 = Tag.valueOf("d]oop#MseL2");
      Attributes attributes0 = new Attributes();
      attributes0.add("action", "|{s[8~E]3");
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not determine a form action URL for submit. Ensure you set a base URI when parsing.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Tag tag0 = Tag.valueOf("NAME");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "NAME", attributes0);
      Elements elements0 = formElement0.elements();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Tag tag0 = Tag.valueOf("NAME");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "NAME", attributes0);
      formElement0.addElement(formElement0);
      formElement0.formData();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Tag tag0 = Tag.valueOf("d]oop#-seL2");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "d]oop#-seL2", attributes0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(formElement0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
