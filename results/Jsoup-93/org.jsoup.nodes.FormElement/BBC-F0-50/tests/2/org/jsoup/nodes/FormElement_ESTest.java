/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 07:33:53 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.Connection;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FormElement_ESTest extends FormElement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Tag tag0 = Tag.valueOf("au#4P-sR?=BM");
      FormElement formElement0 = new FormElement(tag0, "", (Attributes) null);
      Element element0 = formElement0.appendTo(formElement0);
      formElement0.removeChild(formElement0);
      assertSame(formElement0, element0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("option", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "S3D*~Q", attributes0);
      Document document0 = Parser.parseBodyFragmentRelaxed(",MFRJzf41nJ_", "option");
      formElement0.addElement(document0);
      Elements elements0 = formElement0.elements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Tag tag0 = Tag.valueOf("jSau#4P-sR?m=B:");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "jSau#4P-sR?m=B:", attributes0);
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) formElement0;
      nodeArray0[1] = (Node) formElement0;
      nodeArray0[2] = (Node) formElement0;
      nodeArray0[3] = (Node) formElement0;
      DocumentType documentType0 = new DocumentType("option[selected]", "jSau#4P-sR?m=B:", "gFjb@-;qt-\"%%5Kib", "gFjb@-;qt-\"%%5Kib");
      nodeArray0[4] = (Node) documentType0;
      nodeArray0[5] = (Node) formElement0;
      nodeArray0[6] = (Node) formElement0;
      nodeArray0[7] = (Node) formElement0;
      formElement0.addChildren(nodeArray0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      assertEquals(2, formElement1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("name", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "method", attributes0);
      Document document0 = new Document("au#4P-sR?=BM");
      formElement0.setSiblingIndex((-791));
      FormElement formElement1 = formElement0.addElement(document0);
      assertEquals("name", formElement1.nodeName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Tag tag0 = Tag.valueOf("tfoot");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "tfoot", attributes0);
      Document document0 = new Document("tfoot");
      FormElement formElement1 = formElement0.addElement(document0);
      assertEquals(0, formElement1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Tag tag0 = Tag.valueOf("~BUrN3rB PzH");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("method", "tvf");
      Attributes attributes1 = attributes0.put(attribute0);
      attributes1.keys = null;
      FormElement formElement0 = new FormElement(tag0, "ORG.JSOUP.NODES.ENTITIES", attributes1);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Tag tag0 = Tag.valueOf("jSau#4P-sR?m=B:");
      CDataNode cDataNode0 = new CDataNode("jSau#4P-sR?m=B:");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.put("method", "method");
      String[] stringArray0 = new String[1];
      attributes1.keys = stringArray0;
      FormElement formElement0 = new FormElement(tag0, "I.k~j7<", attributes0);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.nodes.FormElement", (Attributes) null);
      // Undeclared exception!
      try { 
        formElement0.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Tag tag0 = Tag.valueOf("au#4P-sR?=BM");
      FormElement formElement0 = new FormElement(tag0, "au#4P-sR?=BM", (Attributes) null);
      Document document0 = new Document("au#4P-sR?=BM");
      formElement0.reparentChild(document0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attribute attribute0 = Attribute.createFromEncoded("name", "name");
      Attributes attributes0 = new Attributes();
      attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "s{ixz7H;X", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      formElement1.appendChild(formElement0);
      // Undeclared exception!
      formElement0.formData();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("A>-\";2", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "A>-\";2", attributes0);
      FormElement formElement1 = formElement0.addElement((Element) null);
      // Undeclared exception!
      try { 
        formElement1.formData();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.FormElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      attributes0.put("name", "name");
      String[] stringArray0 = new String[0];
      attributes0.vals = stringArray0;
      FormElement formElement0 = new FormElement(tag0, "s{ixz7H;X", attributes0);
      formElement0.addElement(formElement0);
      // Undeclared exception!
      try { 
        formElement0.formData();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("UTF-", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = null;
      try {
        formElement0 = new FormElement(tag0, (String) null, attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attribute attribute0 = Attribute.createFromEncoded("name", "name");
      Attributes attributes0 = new Attributes();
      attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "_8JK", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("disabled", "Oe}WCG");
      FormElement formElement0 = new FormElement(tag0, "Oe}WCG", attributes0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "disabled", attributes1);
      formElement0.addElement(pseudoTextElement0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Tag tag0 = Tag.valueOf("cT");
      Document document0 = Document.createShell("cT");
      Element element0 = document0.createElement("select");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "http:/", attributes0);
      FormElement formElement1 = formElement0.addElement(element0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("<!DOCTYPE");
      Attributes attributes0 = cDataNode0.attributes();
      attributes0.put("method", "POST");
      Tag tag0 = Tag.valueOf("method");
      FormElement formElement0 = new FormElement(tag0, "character is not a valid unicode code point", attributes0);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: character is not a valid unicode code point
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Tag tag0 = Tag.valueOf("jSau#4P-sR?m=B:");
      CDataNode cDataNode0 = new CDataNode("K.Vrg=+799^9pH|8y");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.put("action", "jSau#4P-sR?m=B:");
      FormElement formElement0 = new FormElement(tag0, "?%#-n`", attributes1);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not determine a form action URL for submit. Ensure you set a base URI when parsing.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Tag tag0 = Tag.valueOf("cT");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "http:/", attributes0);
      Connection connection0 = formElement0.submit();
      assertNotNull(connection0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.SerializationException");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "option", attributes0);
      Elements elements0 = formElement0.elements();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Tag tag0 = Tag.valueOf("cT");
      Document document0 = Document.createShell("cT");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "http:/", attributes0);
      formElement0.addElement(document0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Tag tag0 = Tag.valueOf("cT");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "GE+zr", attributes0);
      Document document0 = Parser.parseBodyFragmentRelaxed("version", "version");
      // Undeclared exception!
      try { 
        formElement0.removeChild(document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
