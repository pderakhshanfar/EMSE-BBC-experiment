/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 19:33:56 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.Connection;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FormElement_ESTest extends FormElement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Tag tag0 = Tag.valueOf("g7x\u0003dO9+&mHbf<z7");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "VN z", attributes0);
      Element element0 = formElement0.appendTo(formElement0);
      formElement0.removeChild(formElement0);
      assertSame(formElement0, element0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "http:/", attributes0);
      Connection connection0 = formElement0.submit();
      assertNotNull(connection0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("org.jsoup.select.Evaluator$CssNthEvaluator", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "9-su<>`\".h", attributes0);
      Document document0 = Parser.parseBodyFragment("7#>9;/:$weq?ShN'I", "");
      FormElement formElement1 = formElement0.addElement(document0);
      Elements elements0 = formElement1.elements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, false);
      Tag tag0 = Tag.valueOf(";i45?R#H8}FbI", parseSettings0);
      CDataNode cDataNode0 = new CDataNode(";i45?R#H8}FbI");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "HEAD", attributes0);
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("lvE", "HEAD");
      formElement0.setSiblingIndex((-182));
      FormElement formElement1 = formElement0.addElement(document0);
      assertEquals(";i45?R#H8}FbI", formElement1.tagName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("", ":last-child");
      Tag tag0 = Tag.valueOf("link", (ParseSettings) null);
      FormElement formElement0 = new FormElement(tag0, ":last-child", attributes0);
      FormElement formElement1 = formElement0.addElement(document0);
      assertSame(formElement0, formElement1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Tag tag0 = Tag.valueOf("^$HSEJ Dj");
      FormElement formElement0 = new FormElement(tag0, "^$HSEJ Dj", (Attributes) null);
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("Dq+", "on");
      formElement0.appendTo(document0);
      FormElement formElement1 = formElement0.addElement(document0);
      assertEquals(1, formElement1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "-/Y", attributes0);
      List<Node> list0 = Parser.parseFragment(":?-#>bfY7=JA.", (Element) formElement0, "-/Y");
      formElement0.childNodes = list0;
      FormElement formElement1 = formElement0.addElement(formElement0);
      assertSame(formElement1, formElement0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Tag tag0 = Tag.valueOf(".Bq|Lva2,_:a][Dih");
      CDataNode cDataNode0 = new CDataNode("");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      attributes0.keys = null;
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("U?5[_AW7-@1U$J", ":?-#>bfY7=JA.");
      FormElement formElement0 = new FormElement(tag0, "-/Y", attributes1);
      String[] stringArray0 = new String[0];
      attributes0.keys = stringArray0;
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "-/Y", attributes0);
      Element element0 = formElement0.prependElement("body");
      List<Node> list0 = Parser.parseFragment(":?-#>bfY7=JA.", (Element) formElement0, "-/Y");
      formElement0.childNodes = list0;
      // Undeclared exception!
      try { 
        formElement0.removeChild(element0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Tag tag0 = Tag.valueOf("oPFN;.6BMSxk!");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "t.?nB=A", attributes0);
      // Undeclared exception!
      try { 
        formElement0.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Tag tag0 = Tag.valueOf("8C?n%TJb?(O");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.nodes.Node$1", attributes0);
      CDataNode cDataNode0 = new CDataNode("+/G1F");
      Node node0 = cDataNode0.doClone(formElement0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Tag tag0 = Tag.valueOf("oPFN;.6BMSxk!");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "t.?nB=A", attributes0);
      DocumentType documentType0 = new DocumentType("oPFN;.6BMSxk!", " uM&YU`9md|fl0!u!@", "-`3 3+?P|}=z3 oOx", "A4", "");
      // Undeclared exception!
      try { 
        formElement0.removeChild(documentType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Tag tag0 = Tag.valueOf("8C?n%TJb?(O");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.nodes.Node$1", attributes0);
      CDataNode cDataNode0 = new CDataNode("+/G1F");
      cDataNode0.setSiblingIndex((-1611264118));
      Node node0 = cDataNode0.doClone(formElement0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(node0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("name", "name");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "name", attributes1);
      FormElement formElement0 = new FormElement(tag0, "POST", attributes1);
      FormElement formElement1 = formElement0.addElement(pseudoTextElement0);
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) pseudoTextElement0;
      CDataNode cDataNode0 = new CDataNode("name");
      nodeArray0[1] = (Node) cDataNode0;
      nodeArray0[2] = (Node) pseudoTextElement0;
      nodeArray0[3] = (Node) formElement1;
      nodeArray0[4] = (Node) pseudoTextElement0;
      nodeArray0[5] = (Node) formElement0;
      nodeArray0[6] = (Node) formElement1;
      nodeArray0[7] = (Node) formElement0;
      pseudoTextElement0.addChildren(nodeArray0);
      // Undeclared exception!
      formElement1.formData();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Tag tag0 = Tag.valueOf("~A]svcG]v?a1v]/a,(");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "A*$D%?+`0esG[Ert", attributes0);
      FormElement formElement1 = formElement0.addElement((Element) null);
      // Undeclared exception!
      try { 
        formElement1.formData();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.FormElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("disabled", "hc>2cw~XVrR");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "disabled", attributes0);
      String[] stringArray0 = new String[0];
      attributes1.keys = stringArray0;
      FormElement formElement0 = new FormElement(tag0, ", -Xe4j", attributes1);
      FormElement formElement1 = formElement0.addElement(pseudoTextElement0);
      // Undeclared exception!
      try { 
        formElement1.formData();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = null;
      try {
        formElement0 = new FormElement((Tag) null, "org.jsoup.nodes.DataNode", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      attributes0.put("name", "SCRIPTDATADOUBLEESCAPEDDASHDASH");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "select", attributes0);
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      FormElement formElement1 = formElement0.addElement(pseudoTextElement0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("disabled", "hc>2cw~XVrR");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "disabled", attributes0);
      FormElement formElement0 = new FormElement(tag0, ", -Xe4j", attributes1);
      FormElement formElement1 = formElement0.addElement(pseudoTextElement0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "select", attributes0);
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      FormElement formElement1 = formElement0.addElement(pseudoTextElement0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Tag tag0 = Tag.valueOf("YrB{)v<\"hU]~");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("method", "POST");
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.select.Evaluator$IsLastOfType", attributes1);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: org.jsoup.select.Evaluator$IsLastOfType
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Tag tag0 = Tag.valueOf("action");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("action", "yq$Ee*^;");
      FormElement formElement0 = new FormElement(tag0, "checkbox", attributes1);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not determine a form action URL for submit. Ensure you set a base URI when parsing.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("\"9Q_r{|M#XI)nd", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "XhHQMr TD/C[J", attributes0);
      Elements elements0 = formElement0.elements();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Tag tag0 = Tag.valueOf("^$HSEJ Dj");
      FormElement formElement0 = new FormElement(tag0, "^$HSEJ Dj", (Attributes) null);
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("Dq+", "on");
      formElement0.addElement(document0);
      formElement0.formData();
  }
}
