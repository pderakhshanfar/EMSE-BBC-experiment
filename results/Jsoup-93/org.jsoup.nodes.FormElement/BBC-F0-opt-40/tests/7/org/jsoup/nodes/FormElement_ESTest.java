/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 19:36:24 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.Connection;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FormElement_ESTest extends FormElement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Tag tag0 = Tag.valueOf("t");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.select.Evaluator$TagEndsWith", attributes0);
      CDataNode cDataNode0 = new CDataNode("org.jsoup.select.Evaluator$TagEndsWith");
      Node node0 = cDataNode0.doClone(formElement0);
      node0.before((Node) formElement0);
      formElement0.removeChild(node0);
      assertFalse(node0.hasParent());
      assertTrue(formElement0.hasParent());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "http:/", attributes0);
      Connection connection0 = formElement0.submit();
      assertNotNull(connection0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Tag tag0 = Tag.valueOf("POST");
      FormElement formElement0 = new FormElement(tag0, "POST", (Attributes) null);
      Document document0 = new Document("POST");
      formElement0.addElement(document0);
      Elements elements0 = formElement0.elements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("cg%1,EW#269VN*", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "cg%1,EW#269VN*", (Attributes) null);
      formElement0.setSiblingIndex((-3769));
      FormElement formElement1 = formElement0.addElement(formElement0);
      assertEquals("cg%1,ew#269vn*", formElement1.tagName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("div", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "div", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      assertSame(formElement0, formElement1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Tag tag0 = Tag.valueOf(">8s[Y*hY");
      FormElement formElement0 = new FormElement(tag0, ">8s[Y*hY", (Attributes) null);
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("nth-last-child", "Rawtext");
      Element element0 = document0.appendChild(formElement0);
      FormElement formElement1 = formElement0.addElement(element0);
      assertFalse(formElement1.isBlock());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Tag tag0 = Tag.valueOf(">8s[*hY");
      FormElement formElement0 = new FormElement(tag0, ">8s[*hY", (Attributes) null);
      Document document0 = Parser.parseBodyFragmentRelaxed(">8s[*hY", "org.jsoup.select.Evaluator$IsOnlyOfType");
      formElement0.appendChild(document0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, ">8s[*hY", (Attributes) null);
      FormElement formElement1 = formElement0.addElement(pseudoTextElement0);
      assertEquals(">8s[*hY", formElement1.tagName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("method", "nsuo");
      attributes0.put(attribute0);
      attributes0.keys = null;
      Tag tag0 = Tag.valueOf("method");
      FormElement formElement0 = new FormElement(tag0, "nsuo", attributes0);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("method", "asun", attributes0);
      attributes0.put(attribute0);
      Tag tag0 = Tag.valueOf("method");
      FormElement formElement0 = new FormElement(tag0, "asun", attributes0);
      String[] stringArray0 = new String[0];
      attributes0.keys = stringArray0;
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Wf");
      CDataNode cDataNode0 = new CDataNode("A=)4ueaM)*L}OcxOS$C");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "GET", attributes0);
      // Undeclared exception!
      try { 
        formElement0.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Tag tag0 = Tag.valueOf("t");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.select.Evaluator$TagEndsWith", attributes0);
      CDataNode cDataNode0 = new CDataNode("org.jsoup.select.Evaluator$TagEndsWith");
      Node node0 = cDataNode0.doClone(formElement0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Tag tag0 = Tag.valueOf("t");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.select.Evaluator$TagEndsWith", attributes0);
      CDataNode cDataNode0 = new CDataNode("org.jsoup.select.Evaluator$TagEndsWith");
      cDataNode0.setSiblingIndex((-2013947258));
      Node node0 = cDataNode0.doClone(formElement0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(node0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      formElement1.prependChild(formElement0);
      attributes0.putIgnoreCase("name", "O7O");
      // Undeclared exception!
      formElement1.formData();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Wf");
      CDataNode cDataNode0 = new CDataNode("A=)4ueaM)*L}OcxOS$C");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "type", attributes0);
      FormElement formElement1 = formElement0.addElement((Element) null);
      // Undeclared exception!
      try { 
        formElement1.formData();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.FormElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("select", "select");
      FormElement formElement0 = new FormElement(tag0, "select", attributes1);
      attributes0.putIgnoreCase("name", "select");
      String[] stringArray0 = new String[1];
      attributes1.vals = stringArray0;
      FormElement formElement1 = formElement0.addElement(formElement0);
      // Undeclared exception!
      try { 
        formElement1.formData();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("wAd/o", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("wAd/o");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = null;
      try {
        formElement0 = new FormElement(tag0, (String) null, attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      attributes0.putIgnoreCase("name", "OOU7O");
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      CDataNode cDataNode0 = new CDataNode("select");
      Attributes attributes0 = cDataNode0.attributes();
      attributes0.put("disabled", "disabled");
      FormElement formElement0 = new FormElement(tag0, "disabled", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Tag tag0 = Tag.valueOf(">8s[Y*hY");
      FormElement formElement0 = new FormElement(tag0, ">8s[Y*hY", (Attributes) null);
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("nth-last-child", "Rawtext");
      FormElement formElement1 = formElement0.addElement(document0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("method", "POST");
      attributes0.put(attribute0);
      Tag tag0 = Tag.valueOf("%%k");
      FormElement formElement0 = new FormElement(tag0, "cg%1,EW#269VN*", attributes0);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: cg%1,EW#269VN*
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.FormElement");
      Attributes attributes0 = new Attributes();
      attributes0.add("ACTION", "select");
      FormElement formElement0 = new FormElement(tag0, "Request must not be null", attributes0);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not determine a form action URL for submit. Ensure you set a base URI when parsing.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Wf");
      CDataNode cDataNode0 = new CDataNode("A=)4ueaM)*L}OcxOS$C");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "type", attributes0);
      Elements elements0 = formElement0.elements();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      formElement1.formData();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("div", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "div", attributes0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(formElement0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
