/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 00:34:08 GMT 2020
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.Connection;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FormElement_ESTest extends FormElement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Tag tag0 = Tag.valueOf("T%_fgs$XuC7e%");
      Document document0 = Document.createShell("T%_fgs$XuC7e%");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "T%_fgs$XuC7e%", attributes0);
      formElement0.prependChild(document0);
      formElement0.removeChild(document0);
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      formElement0.setBaseUri("http:/");
      Connection connection0 = formElement0.submit();
      assertNotNull(connection0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Tag tag0 = Tag.valueOf("ISO-8859-1");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "ge", attributes0);
      Document document0 = new Document("!\"HruH@=5`-D=");
      FormElement formElement1 = formElement0.addElement(document0);
      Elements elements0 = formElement1.elements();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Tag tag0 = Tag.valueOf("80'z7x=#");
      FormElement formElement0 = new FormElement(tag0, "POST", (Attributes) null);
      Document document0 = new Document(",1LK=r `j");
      formElement0.setSiblingIndex(8250);
      FormElement formElement1 = formElement0.addElement(document0);
      assertEquals("80'z7x=#", formElement1.normalName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Tag tag0 = Tag.valueOf("DHN]");
      FormElement formElement0 = new FormElement(tag0, "DHN]", (Attributes) null);
      formElement0.setSiblingIndex((-1717986916));
      FormElement formElement1 = formElement0.addElement((Element) null);
      assertEquals("dhn]", formElement1.normalName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("nav");
      FormElement formElement0 = new FormElement(tag0, "ge", attributes0);
      Document document0 = new Document("!\"HruH@=5`-D=");
      FormElement formElement1 = formElement0.addElement(document0);
      assertEquals(0, formElement1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf(";6Wf :8Z?", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, ";6Wf :8Z?", attributes0);
      Document document0 = Parser.parseBodyFragment(";6Wf :8Z?", ";6Wf :8Z?");
      document0.reparentChild(formElement0);
      FormElement formElement1 = formElement0.addElement(document0);
      assertEquals(";6wf :8z?", formElement1.nodeName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("f:a}=p}z ", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("select");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "Vl~TWRcL", attributes0);
      formElement0.prepend("select");
      Document document0 = new Document("inert");
      FormElement formElement1 = formElement0.addElement(document0);
      assertSame(formElement0, formElement1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("METHOD", "smnu");
      Tag tag0 = Tag.valueOf("smnu");
      attributes1.vals = null;
      FormElement formElement0 = new FormElement(tag0, "smnu", attributes1);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.add("METHOD", "smnu");
      Tag tag0 = Tag.valueOf("smnu");
      String[] stringArray0 = new String[0];
      attributes0.vals = stringArray0;
      FormElement formElement0 = new FormElement(tag0, "METHOD", attributes0);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Us:BO9r");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Us:BO9r", attributes0);
      // Undeclared exception!
      try { 
        formElement0.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Tag tag0 = Tag.valueOf("POST");
      FormElement formElement0 = new FormElement(tag0, "POST", (Attributes) null);
      CDataNode cDataNode0 = new CDataNode("POST");
      Node node0 = cDataNode0.doClone(formElement0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Tag tag0 = Tag.valueOf("/*eWXw*X/eZ0");
      FormElement formElement0 = new FormElement(tag0, "/*eWXw*X/eZ0", (Attributes) null);
      FormElement formElement1 = formElement0.addElement((Element) null);
      // Undeclared exception!
      try { 
        formElement1.formData();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.FormElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FormElement formElement0 = null;
      try {
        formElement0 = new FormElement((Tag) null, "T%kfgs$;Xus7e%f", (Attributes) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("disabled", "METHOD", attributes0);
      Attributes attributes1 = attributes0.put(attribute0);
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "disabled", attributes1);
      FormElement formElement1 = formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "METHOD", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("METHOD", "POST");
      Tag tag0 = Tag.valueOf("METHOD");
      FormElement formElement0 = new FormElement(tag0, "METHOD", attributes1);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: METHOD
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("action", "METHOD");
      Attributes attributes1 = attributes0.put(attribute0);
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "METHOD", attributes1);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not determine a form action URL for submit. Ensure you set a base URI when parsing.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Tag tag0 = Tag.valueOf("80'z7x=#");
      FormElement formElement0 = new FormElement(tag0, "POST", (Attributes) null);
      Elements elements0 = formElement0.elements();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Tag tag0 = Tag.valueOf("80'z7x=#");
      FormElement formElement0 = new FormElement(tag0, "POST", (Attributes) null);
      Document document0 = new Document(",1LK=r `j");
      formElement0.addElement(document0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Tag tag0 = Tag.valueOf("T%_fgs$XuC7e%");
      Document document0 = Document.createShell("T%_fgs$XuC7e%");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "T%_fgs$XuC7e%", attributes0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
