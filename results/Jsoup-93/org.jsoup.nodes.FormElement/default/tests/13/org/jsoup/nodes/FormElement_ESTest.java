/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 00:37:30 GMT 2020
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.Connection;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FormElement_ESTest extends FormElement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Tag tag0 = Tag.valueOf("nEoshade");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "su(.K", attributes0);
      Document document0 = new Document("nEoshade");
      formElement0.appendChild(document0);
      formElement0.removeChild(document0);
      assertEquals("nEoshade", formElement0.nodeName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("inert", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "OlY", attributes0);
      FormElement formElement1 = formElement0.addElement((Element) null);
      Elements elements0 = formElement1.elements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Tag tag0 = Tag.valueOf("noshade");
      CDataNode cDataNode0 = new CDataNode("noshade");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "noshade", attributes0);
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) formElement0;
      nodeArray0[1] = (Node) formElement0;
      nodeArray0[2] = (Node) formElement0;
      nodeArray0[3] = (Node) formElement0;
      nodeArray0[4] = (Node) cDataNode0;
      nodeArray0[5] = (Node) formElement0;
      nodeArray0[6] = (Node) cDataNode0;
      nodeArray0[7] = (Node) cDataNode0;
      nodeArray0[8] = (Node) formElement0;
      formElement0.addChildren(nodeArray0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      assertEquals("noshade", formElement1.nodeName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Array must not contain any null objects");
      FormElement formElement0 = new FormElement(tag0, "Array must not contain any null objects", (Attributes) null);
      Document document0 = Parser.parse("Array must not contain any null objects", "Array must not contain any null objects");
      formElement0.setSiblingIndex((-1717986916));
      FormElement formElement1 = formElement0.addElement(document0);
      assertEquals((-1717986916), formElement1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("p", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("POST");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "p", attributes0);
      FormElement formElement1 = formElement0.addElement((Element) null);
      assertEquals("p", formElement1.baseUri());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("action", "action");
      attributes0.vals = null;
      Tag tag0 = Tag.valueOf("action");
      FormElement formElement0 = new FormElement(tag0, "action", attributes0);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Tag tag0 = Tag.valueOf("n/ade");
      FormElement formElement0 = new FormElement(tag0, "n/ade", (Attributes) null);
      // Undeclared exception!
      try { 
        formElement0.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Tag tag0 = Tag.valueOf("noshade");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "noshade", attributes0);
      CDataNode cDataNode0 = new CDataNode("noshade");
      Node node0 = cDataNode0.doClone(formElement0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Tag tag0 = Tag.valueOf("bdo");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "bdo", attributes0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(formElement0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Tag tag0 = Tag.valueOf("y}bdo");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "y}bdo", attributes0);
      formElement0.addElement((Element) null);
      // Undeclared exception!
      try { 
        formElement0.formData();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.FormElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = null;
      try {
        formElement0 = new FormElement((Tag) null, "bdo", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      Attribute attribute0 = Attribute.createFromEncoded("disabled", "=Q6IhvBb");
      Attributes attributes1 = attributes0.put(attribute0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "=Q6IhvBb", attributes1);
      formElement0.addElement(pseudoTextElement0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Tag tag0 = Tag.valueOf("noshade");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "noshade", attributes0);
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag1 = Tag.valueOf("select", parseSettings0);
      Element element0 = new Element(tag1, "select");
      FormElement formElement1 = formElement0.addElement(element0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Tag tag0 = Tag.valueOf("POST");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("method", "method", attributes0);
      Attributes attributes1 = attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "method", attributes1);
      attribute0.setValue("POST");
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: method
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Array must not contain any null objects");
      FormElement formElement0 = new FormElement(tag0, "Array must not contain any null objects", (Attributes) null);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Array must not contain any null objects");
      FormElement formElement0 = new FormElement(tag0, "Array must not contain any null objects", (Attributes) null);
      Elements elements0 = formElement0.elements();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Array must not contain any null objects");
      FormElement formElement0 = new FormElement(tag0, "Array must not contain any null objects", (Attributes) null);
      Document document0 = Parser.parse("Array must not contain any null objects", "Array must not contain any null objects");
      formElement0.addElement(document0);
      formElement0.formData();
  }
}
