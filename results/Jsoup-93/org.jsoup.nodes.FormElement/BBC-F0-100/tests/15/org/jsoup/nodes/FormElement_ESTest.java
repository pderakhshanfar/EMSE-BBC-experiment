/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 20:50:58 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.Connection;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FormElement_ESTest extends FormElement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Tag tag0 = Tag.valueOf("option[selected]");
      FormElement formElement0 = new FormElement(tag0, "option[selected]", (Attributes) null);
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) formElement0;
      nodeArray0[1] = (Node) formElement0;
      nodeArray0[2] = (Node) formElement0;
      nodeArray0[3] = (Node) formElement0;
      TextNode textNode0 = new TextNode("");
      nodeArray0[4] = (Node) textNode0;
      nodeArray0[5] = (Node) formElement0;
      nodeArray0[6] = (Node) formElement0;
      nodeArray0[7] = (Node) formElement0;
      formElement0.addChildren(nodeArray0);
      formElement0.removeChild(formElement0);
      assertEquals(1, formElement0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Tag tag0 = Tag.valueOf("2");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "*", attributes0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "a/DcOG3Q", attributes0);
      FormElement formElement1 = formElement0.addElement(pseudoTextElement0);
      Elements elements0 = formElement1.elements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "select", (Attributes) null);
      CDataNode cDataNode0 = new CDataNode("8s");
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) formElement0;
      nodeArray0[1] = (Node) cDataNode0;
      nodeArray0[2] = (Node) cDataNode0;
      nodeArray0[3] = (Node) cDataNode0;
      nodeArray0[4] = (Node) cDataNode0;
      nodeArray0[5] = (Node) formElement0;
      formElement0.addChildren(nodeArray0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      assertEquals("select", formElement1.nodeName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Element element0 = new Element("select");
      FormElement formElement0 = new FormElement(tag0, "select", (Attributes) null);
      formElement0.siblingIndex = (-1617128624);
      FormElement formElement1 = formElement0.addElement(element0);
      assertSame(formElement0, formElement1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Tag tag0 = Tag.valueOf("dl");
      Element element0 = new Element("dl");
      FormElement formElement0 = new FormElement(tag0, "select", (Attributes) null);
      FormElement formElement1 = formElement0.addElement(element0);
      assertEquals("select", formElement1.baseUri());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Tag tag0 = Tag.valueOf("T;W\"4r~Cf!tA74z");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("mPT]0r9j", "Q=6>)-<](C'J{GT3MV");
      FormElement formElement0 = new FormElement(tag0, "Q=6>)-<](C'J{GT3MV", attributes1);
      attributes1.keys = null;
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Tag tag0 = Tag.valueOf("oeJect");
      Attributes attributes0 = new Attributes();
      attributes0.add("method", "pUme");
      FormElement formElement0 = new FormElement(tag0, ",zU'@hY\"=.", attributes0);
      String[] stringArray0 = new String[0];
      attributes0.vals = stringArray0;
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Tag tag0 = Tag.valueOf(", currentElement=");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "ie<pV", attributes0);
      // Undeclared exception!
      try { 
        formElement0.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Tag tag0 = Tag.valueOf("option[selected]");
      FormElement formElement0 = new FormElement(tag0, "option[selected]", (Attributes) null);
      CDataNode cDataNode0 = new CDataNode("");
      Node node0 = cDataNode0.doClone(formElement0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Tag tag0 = Tag.valueOf("POST");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "div", attributes0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(formElement0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Tag tag0 = Tag.valueOf("option[selected]");
      FormElement formElement0 = new FormElement(tag0, "option[selected]", (Attributes) null);
      CDataNode cDataNode0 = new CDataNode("");
      cDataNode0.siblingIndex = (-3761);
      Node node0 = cDataNode0.doClone(formElement0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(node0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("NAME", "NAME");
      attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "NAME", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      formElement1.appendTo(formElement0);
      // Undeclared exception!
      formElement1.formData();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("checkbox", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "checkbox", attributes0);
      FormElement formElement1 = formElement0.addElement((Element) null);
      // Undeclared exception!
      try { 
        formElement1.formData();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.FormElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      attributes0.put("NAME", "NAME");
      FormElement formElement0 = new FormElement(tag0, "NAME", attributes0);
      String[] stringArray0 = new String[0];
      attributes0.keys = stringArray0;
      FormElement formElement1 = formElement0.addElement(formElement0);
      // Undeclared exception!
      try { 
        formElement1.formData();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Tag tag0 = Tag.valueOf("option[selected]");
      FormElement formElement0 = null;
      try {
        formElement0 = new FormElement(tag0, (String) null, (Attributes) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "http:/", attributes0);
      Document document0 = Document.createShell("C^\")b`D6Hyh<s4%~X5");
      FormElement formElement1 = formElement0.addElement(document0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("NAME", "?^r4n4m");
      attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "2+/e$", attributes0);
      formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      CDataNode cDataNode0 = new CDataNode("select");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.add("disabled", "IVM=");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "select", attributes1);
      FormElement formElement0 = new FormElement(tag0, "%>FIPYU`1P>2[", attributes0);
      formElement0.addElement(pseudoTextElement0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "http:/", attributes0);
      Document document0 = Document.createShell("C^\")b`D6Hyh<s4%~X5");
      FormElement formElement1 = formElement0.addElement(document0);
      Connection connection0 = formElement1.submit();
      assertNotNull(connection0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("method", "POST");
      Tag tag0 = Tag.valueOf(",fk#*z2+FU:E6W", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "BeforeAttributeValue", attributes1);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: BeforeAttributeValue
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Tag tag0 = Tag.valueOf("NFME");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("action", "action");
      FormElement formElement0 = new FormElement(tag0, "action", attributes1);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not determine a form action URL for submit. Ensure you set a base URI when parsing.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("6e7);UU<", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      Elements elements0 = formElement0.elements();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "2+/e$", attributes0);
      formElement0.addElement(formElement0);
      formElement0.formData();
  }
}
