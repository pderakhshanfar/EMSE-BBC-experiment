/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 21:41:07 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.Connection;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FormElement_ESTest extends FormElement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "@Rixy {E", attributes0);
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) formElement0;
      nodeArray0[1] = (Node) formElement0;
      nodeArray0[2] = (Node) formElement0;
      nodeArray0[3] = (Node) formElement0;
      nodeArray0[4] = (Node) formElement0;
      nodeArray0[5] = (Node) formElement0;
      nodeArray0[6] = (Node) formElement0;
      nodeArray0[7] = (Node) formElement0;
      formElement0.addChildren(nodeArray0);
      formElement0.removeChild(formElement0);
      assertEquals("@Rixy {E", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      FormElement formElement0 = new FormElement(tag0, "http:/", (Attributes) null);
      Connection connection0 = formElement0.submit();
      assertNotNull(connection0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Tag tag0 = Tag.valueOf("3");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "3", attributes0);
      FormElement formElement1 = formElement0.addElement((Element) null);
      Elements elements0 = formElement1.elements();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
      formElement0.setSiblingIndex((-1454357699));
      FormElement formElement1 = formElement0.addElement(formElement0);
      assertSame(formElement0, formElement1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Tag tag0 = Tag.valueOf("main");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "main", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      assertEquals("main", formElement1.nodeName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Tag tag0 = Tag.valueOf(")qC");
      FormElement formElement0 = new FormElement(tag0, "", (Attributes) null);
      formElement0.appendElement("org.jsoup.select.Evaluator$IsNthLastChild");
      FormElement formElement1 = formElement0.addElement((Element) null);
      assertSame(formElement1, formElement0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Tag tag0 = Tag.valueOf("texltarea");
      Attributes attributes0 = new Attributes();
      attributes0.putIgnoreCase("method", "M}n'");
      attributes0.keys = null;
      FormElement formElement0 = new FormElement(tag0, "M}n'", attributes0);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      CDataNode cDataNode0 = new CDataNode("method");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.add("textarea", "TEXTAREA");
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
      String[] stringArray0 = new String[0];
      attributes1.keys = stringArray0;
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("iWi8", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "iWi8", attributes0);
      // Undeclared exception!
      try { 
        formElement0.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("[r3Xm", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "-M9}'P", attributes0);
      CDataNode cDataNode0 = new CDataNode("[r3Xm");
      Node node0 = cDataNode0.doClone(formElement0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf(" 0[|{OR}9}]y.`0", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "c:1g }", (Attributes) null);
      CDataNode cDataNode0 = new CDataNode("c:1g }");
      cDataNode0.setSiblingIndex((-1927));
      Node node0 = cDataNode0.doClone(formElement0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(node0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      CDataNode cDataNode0 = new CDataNode("textarea");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.add("name", "textarea");
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes1);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "textarea", attributes0);
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) cDataNode0;
      nodeArray0[1] = (Node) pseudoTextElement0;
      nodeArray0[2] = (Node) pseudoTextElement0;
      nodeArray0[3] = (Node) formElement0;
      nodeArray0[4] = (Node) cDataNode0;
      nodeArray0[5] = (Node) formElement0;
      nodeArray0[6] = (Node) formElement0;
      pseudoTextElement0.addChildren(nodeArray0);
      FormElement formElement1 = formElement0.addElement(pseudoTextElement0);
      // Undeclared exception!
      formElement1.formData();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.parser.XmlTreeBuilder");
      CDataNode cDataNode0 = new CDataNode("org.jsoup.parser.XmlTreeBuilder");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.parser.XmlTreeBuilder", attributes0);
      formElement0.addElement((Element) null);
      // Undeclared exception!
      try { 
        formElement0.formData();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.FormElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      CDataNode cDataNode0 = new CDataNode("method");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.add("textarea", "TEXTAREA");
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
      String[] stringArray0 = new String[0];
      attributes1.keys = stringArray0;
      FormElement formElement1 = formElement0.addElement(formElement0);
      // Undeclared exception!
      try { 
        formElement1.formData();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = null;
      try {
        formElement0 = new FormElement(tag0, (String) null, attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Tag tag0 = Tag.valueOf("s Gt");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("name", "name");
      FormElement formElement0 = new FormElement(tag0, "name", attributes1);
      FormElement formElement1 = formElement0.addElement(formElement0);
      formElement0.tagName("textarea");
      attributes1.putIgnoreCase("checked", "name");
      Element element0 = formElement1.attr("type", "checkbox");
      element0.appendText("type");
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Tag tag0 = Tag.valueOf("s Gt");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("name", "name");
      FormElement formElement0 = new FormElement(tag0, "name", attributes1);
      FormElement formElement1 = formElement0.addElement(formElement0);
      formElement0.tagName("textarea");
      attributes1.putIgnoreCase("checked", "name");
      formElement1.attr("type", "checkbox");
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Tag tag0 = Tag.valueOf("selec");
      Attributes attributes0 = new Attributes();
      attributes0.put("name", "name");
      FormElement formElement0 = new FormElement(tag0, "selec", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      FormElement formElement2 = (FormElement)formElement1.tagName("textarea");
      formElement1.attr("type", "RADIO");
      List<Connection.KeyVal> list0 = formElement2.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      CDataNode cDataNode0 = new CDataNode("select");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.add("name", "select");
      FormElement formElement0 = new FormElement(tag0, "select", attributes1);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "select", attributes0);
      FormElement formElement1 = formElement0.addElement(pseudoTextElement0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      CDataNode cDataNode0 = new CDataNode("method");
      Attributes attributes0 = cDataNode0.attributes();
      attributes0.add("disabled", "method");
      FormElement formElement0 = new FormElement(tag0, "method", attributes0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "CommentEndBang", attributes0);
      formElement0.addElement(pseudoTextElement0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Tag tag0 = Tag.valueOf("radio");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "POST", attributes0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "S$", attributes0);
      FormElement formElement1 = formElement0.addElement(pseudoTextElement0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "POST", attributes0);
      attributes0.add("method", "POST");
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: POST
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Tag tag0 = Tag.valueOf("[U\"W~e>JE");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("action", "action");
      FormElement formElement0 = new FormElement(tag0, "action", attributes1);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not determine a form action URL for submit. Ensure you set a base URI when parsing.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "@Rixy {E", attributes0);
      Elements elements0 = formElement0.elements();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      CDataNode cDataNode0 = new CDataNode("select");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "select", attributes0);
      FormElement formElement1 = formElement0.addElement(pseudoTextElement0);
      formElement1.formData();
  }
}
