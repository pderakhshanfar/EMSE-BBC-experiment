/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 16:40:45 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.Connection;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FormElement_ESTest extends FormElement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Tag tag0 = Tag.valueOf("TreeBuilder{currentToken=");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element("select");
      FormElement formElement0 = new FormElement(tag0, "TreeBuilder{currentToken=", attributes0);
      FormElement formElement1 = (FormElement)formElement0.prependChild(element0);
      formElement1.removeChild(element0);
      assertEquals("TreeBuilder{currentToken=", formElement1.nodeName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Tag tag0 = Tag.valueOf(":last-of-type");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "http:/", attributes0);
      Connection connection0 = formElement0.submit();
      assertNotNull(connection0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("b<", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("b<");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      Document document0 = Parser.parse("", "-N6RN5");
      formElement0.addElement(document0);
      Elements elements0 = formElement0.elements();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Tag tag0 = Tag.valueOf(":last-of-type");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.nodes.FormElement", attributes0);
      formElement0.setSiblingIndex((-1276));
      FormElement formElement1 = formElement0.addElement(formElement0);
      assertFalse(formElement1.isBlock());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("noscript", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      FormElement formElement1 = formElement0.addElement((Element) null);
      assertEquals(0, formElement1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Tag tag0 = Tag.valueOf(":last-of-type");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element("org.jsoup.nodes.FormElement");
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.nodes.FormElement", attributes0);
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) formElement0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) formElement0;
      nodeArray0[3] = (Node) formElement0;
      nodeArray0[4] = (Node) element0;
      nodeArray0[5] = (Node) formElement0;
      formElement0.addChildren(nodeArray0);
      formElement0.addElement(element0);
      assertEquals(2, formElement0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Tag tag0 = Tag.valueOf(".4o{(sd");
      Attributes attributes0 = new Attributes();
      attributes0.put("method", "QiP{");
      FormElement formElement0 = new FormElement(tag0, ".4o{(sd", attributes0);
      attributes0.keys = null;
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Tag tag0 = Tag.valueOf("re{ersed");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("method", "QiP{", attributes0);
      attributes0.put(attribute0);
      String[] stringArray0 = new String[0];
      attributes0.keys = stringArray0;
      FormElement formElement0 = new FormElement(tag0, "q", attributes0);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Tag tag0 = Tag.valueOf(":last-of-type");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Could not determine a form action URL for submit. Ensure you set a base URI when parsing.", attributes0);
      List<Node> list0 = Parser.parseXmlFragment("|;7Yb\";\"XJOvK", "METHOD");
      formElement0.childNodes = list0;
      CDataNode cDataNode0 = new CDataNode("T?DU=6*D");
      Node node0 = cDataNode0.doClone(formElement0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(node0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("org.jsoup.select.Evaluator$IsNthLastOfType", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.select.Evaluator$IsNthLastOfType", attributes0);
      // Undeclared exception!
      try { 
        formElement0.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Tag tag0 = Tag.valueOf(":last-of-type");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Could not determine a form action URL for submit. Ensure you set a base URI when parsing.", attributes0);
      CDataNode cDataNode0 = new CDataNode("T?DU=6*D");
      Node node0 = cDataNode0.doClone(formElement0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select", (ParseSettings) null);
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("name", "checked");
      attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "a\u0005&FrKD\"7dE^^[", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      formElement1.appendTo(formElement0);
      // Undeclared exception!
      formElement1.formData();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Tag tag0 = Tag.valueOf("W}#w!0r_|(x(");
      FormElement formElement0 = new FormElement(tag0, ",T}I<WgK,", (Attributes) null);
      formElement0.addElement((Element) null);
      // Undeclared exception!
      try { 
        formElement0.formData();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.FormElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      CDataNode cDataNode0 = new CDataNode("CHECKBOX");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.put("3m1aI^%3]b]c4_,$ad", (String) null);
      FormElement formElement0 = new FormElement(tag0, "POST", attributes1);
      String[] stringArray0 = new String[1];
      attributes0.keys = stringArray0;
      formElement0.addElement(formElement0);
      // Undeclared exception!
      try { 
        formElement0.formData();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("W}#w!0r_|(x(", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("B;xL%YEs?\"");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = null;
      try {
        formElement0 = new FormElement(tag0, (String) null, attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      attributes0.put("nAme", "nAme");
      FormElement formElement0 = new FormElement(tag0, "nAme", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      formElement1.appendElement("option");
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      Tag tag0 = Tag.valueOf(";~", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("name", ";~");
      Attributes attributes1 = attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "checked", attributes1);
      Tag tag1 = Tag.valueOf("select");
      Element element0 = new Element(tag1, "select", attributes0);
      FormElement formElement1 = formElement0.addElement(element0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("disabled", "disabled", attributes0);
      attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.nodes.FormElement", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      Tag tag0 = Tag.valueOf(";~", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "checked", attributes0);
      Tag tag1 = Tag.valueOf("select");
      Element element0 = new Element(tag1, "select", attributes0);
      FormElement formElement1 = formElement0.addElement(element0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      attributes0.put("method", "POST");
      FormElement formElement0 = new FormElement(tag0, "Df-Ee;duu{j5ueo", attributes0);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: Df-Ee;duu{j5ueo
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Tag tag0 = Tag.valueOf(":last-of-type");
      Attributes attributes0 = new Attributes();
      attributes0.add("action", (String) null);
      FormElement formElement0 = new FormElement(tag0, "B}]9rMg?B5", attributes0);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not determine a form action URL for submit. Ensure you set a base URI when parsing.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("b<", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("b<");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      Elements elements0 = formElement0.elements();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Tag tag0 = Tag.valueOf(":last-of-type");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "B}]9rMg?B5", attributes0);
      Document document0 = Parser.parse("big", "option[selected]");
      formElement0.addElement(document0);
      formElement0.formData();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      Tag tag0 = Tag.valueOf(";~", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "checked", attributes0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(formElement0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
