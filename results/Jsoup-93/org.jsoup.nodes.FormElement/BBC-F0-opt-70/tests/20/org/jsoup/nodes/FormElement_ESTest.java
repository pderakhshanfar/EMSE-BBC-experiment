/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 11:35:43 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.Connection;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FormElement_ESTest extends FormElement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Tag tag0 = Tag.valueOf("METHOD");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "METHOD", attributes0);
      Document document0 = Parser.parse("METHOD", "METHOD");
      formElement0.prependChild(document0);
      formElement0.removeChild(document0);
      assertFalse(formElement0.hasParent());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Tag tag0 = Tag.valueOf("http:/");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "http:/", attributes0);
      Connection connection0 = formElement0.submit();
      assertNotNull(connection0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Tag tag0 = Tag.valueOf("1u,YYR~CB9h>]");
      Document document0 = Parser.parseBodyFragmentRelaxed("1u,YYR~CB9h>]", "5,f=b{h-{v\"lH54");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "1u,YYR~CB9h>]", attributes0);
      formElement0.siblingIndex = (-3426);
      FormElement formElement1 = formElement0.addElement(document0);
      assertEquals("1u,yyr~cb9h>]", formElement1.normalName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("h6", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "`c-IfxI8%NpH7bi", attributes0);
      Document document0 = Document.createShell("P.l[@cQ^s>@uh");
      FormElement formElement1 = formElement0.addElement(document0);
      Elements elements0 = formElement1.elements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("1u,YYR~CB9h>]", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "}*AIf^Td3FOz'?gXzMh", attributes0);
      Document document0 = Parser.parseBodyFragmentRelaxed("}*AIf^Td3FOz'?gXzMh", "1u,YYR~CB9h>]");
      Element element0 = document0.appendChild(formElement0);
      FormElement formElement1 = formElement0.addElement(element0);
      assertEquals("}*AIf^Td3FOz'?gXzMh", formElement1.baseUri());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Tag tag0 = Tag.valueOf("METHOD");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "METHOD", attributes0);
      Document document0 = Parser.parse("METHOD", "METHOD");
      Element element0 = formElement0.prependChild(document0);
      FormElement formElement1 = formElement0.addElement(element0);
      assertEquals(1, formElement1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("u,YR~pCB9h>]");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("u,YR~pCB9h>]");
      FormElement formElement0 = new FormElement(tag0, "u,YR~pCB9h>]", attributes0);
      attributes0.keys = null;
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Tag tag0 = Tag.valueOf("h;");
      CDataNode cDataNode0 = new CDataNode("!)*kp^a?U50\"p&_enh");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "POST", attributes0);
      String[] stringArray0 = new String[0];
      attributes0.keys = stringArray0;
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("1u,YYR~CB9h>]", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "1u,YYR~CB9h>]", attributes0);
      Parser parser0 = Parser.htmlParser();
      ParseErrorList parseErrorList0 = parser0.getErrors();
      List<Node> list0 = Parser.parseFragment("1u,YYR~CB9h>]", (Element) formElement0, "1u,YYR~CB9h>]", parseErrorList0);
      formElement0.childNodes = list0;
      CDataNode cDataNode0 = new CDataNode("");
      Node node0 = cDataNode0.doClone(formElement0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(node0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("on", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "name", (Attributes) null);
      // Undeclared exception!
      try { 
        formElement0.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("1u,YYR~CB9h>]", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "1u,YYR~CB9h>]", attributes0);
      CDataNode cDataNode0 = new CDataNode("");
      Node node0 = cDataNode0.doClone(formElement0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      attributes0.add("name", "Could not determine a form action URL for submit. Ensure you set a base URI when parsing.");
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      formElement1.prependChild(formElement0);
      // Undeclared exception!
      formElement1.formData();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("1u,YYR~CB9h>]", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      FormElement formElement1 = formElement0.addElement((Element) null);
      // Undeclared exception!
      try { 
        formElement1.formData();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.FormElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("name", "T");
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "1ty", attributes0);
      String[] stringArray0 = new String[0];
      attributes1.keys = stringArray0;
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "&O4", attributes1);
      formElement0.addElement(pseudoTextElement0);
      // Undeclared exception!
      try { 
        formElement0.formData();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("8;", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("8;");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = null;
      try {
        formElement0 = new FormElement(tag0, (String) null, attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("name", "T");
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "1ty", attributes0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "$>j''YP'hUM,", attributes1);
      FormElement formElement1 = formElement0.addElement(pseudoTextElement0);
      pseudoTextElement0.appendElement("OPTION");
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Tag tag0 = Tag.valueOf("input");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("name", "input");
      FormElement formElement0 = new FormElement(tag0, "input", attributes1);
      formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("name", "T");
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "1ty", attributes0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "$>j''YP'hUM,", attributes1);
      FormElement formElement1 = formElement0.addElement(pseudoTextElement0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      attributes0.add("disabled", "(25^");
      FormElement formElement0 = new FormElement(tag0, "E`.)FI", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      Tag tag0 = Tag.valueOf("r4.lace<mentStr", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "PPL}EK^ePS/i;NC>", attributes0);
      Document document0 = Parser.parseBodyFragmentRelaxed("", "A*FNG$/}Epjn$?-K4");
      formElement0.addElement(document0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("u,YR~pCB9h>]");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("u,YR~pCB9h>]");
      FormElement formElement0 = new FormElement(tag0, "u,YR~pCB9h>]", attributes0);
      Attribute attribute0 = Attribute.createFromEncoded("method", ",>;z");
      attribute0.setValue("POST");
      attributes0.put(attribute0);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: u,YR~pCB9h>]
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("action", "PPL}EK^ePS/i;NC>");
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      Tag tag0 = Tag.valueOf("r4.lace<mentStr", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "PPL}EK^ePS/i;NC>", attributes0);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not determine a form action URL for submit. Ensure you set a base URI when parsing.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Tag tag0 = Tag.valueOf("1u,YYR~CB9h>]");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "1u,YYR~CB9h>]", attributes0);
      Elements elements0 = formElement0.elements();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "1ty", attributes0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "$>j''YP'hUM,", attributes0);
      FormElement formElement1 = formElement0.addElement(pseudoTextElement0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Tag tag0 = Tag.valueOf("METHOD");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "METHOD", attributes0);
      Document document0 = Parser.parse("METHOD", "METHOD");
      // Undeclared exception!
      try { 
        formElement0.removeChild(document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
