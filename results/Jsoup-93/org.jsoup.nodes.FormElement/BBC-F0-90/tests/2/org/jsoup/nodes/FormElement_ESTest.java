/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 15:01:08 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.Connection;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FormElement_ESTest extends FormElement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("(Y#hNk7nIYy=\"", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("(Y#hNk7nIYy=\"");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "(Y#hNk7nIYy=\"", attributes0);
      Document document0 = Document.createShell("ai-,|nADRoS+N");
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) formElement0;
      nodeArray0[1] = (Node) cDataNode0;
      nodeArray0[2] = (Node) document0;
      DocumentType documentType0 = new DocumentType("radio", "POST", "POST");
      nodeArray0[3] = (Node) documentType0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) formElement0;
      nodeArray0[6] = (Node) document0;
      nodeArray0[7] = (Node) document0;
      formElement0.addChildren(nodeArray0);
      formElement0.removeChild(document0);
      assertEquals("ai-,|nADRoS+N", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("font");
      FormElement formElement0 = new FormElement(tag0, "http:/", attributes0);
      Connection connection0 = formElement0.submit();
      assertNotNull(connection0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("@f%J;IQ");
      FormElement formElement0 = new FormElement(tag0, "action", attributes0);
      FormElement formElement1 = formElement0.addElement((Element) null);
      Elements elements0 = formElement1.elements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Tag tag0 = Tag.valueOf("h!\"rEI,jB'v{]@");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "h!\"rEI,jB'v{]@", attributes0);
      formElement0.setSiblingIndex(1);
      FormElement formElement1 = formElement0.addElement(formElement0);
      assertSame(formElement1, formElement0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("@f%J;IQ");
      FormElement formElement0 = new FormElement(tag0, "action", attributes0);
      formElement0.setSiblingIndex((-453));
      FormElement formElement1 = formElement0.addElement((Element) null);
      assertSame(formElement1, formElement0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Tag tag0 = Tag.valueOf("aside");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "EG:5{\"(4Od53^[T=Xw9", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      assertEquals("aside", formElement1.normalName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Mh?ybC-EfZ");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Mh?ybC-EfZ", attributes0);
      Document document0 = Document.createShell("EVaBauEYw19");
      formElement0.setParentNode(document0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      assertEquals("Mh?ybC-EfZ", formElement1.tagName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Tag tag0 = Tag.valueOf("POST");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, ",17}NPZWN}Gk5*C48df", attributes0);
      Document document0 = Parser.parseBodyFragmentRelaxed("<B./<Q>", ".GCc'*;}6/");
      formElement0.prependChild(document0);
      FormElement formElement1 = formElement0.addElement(document0);
      assertSame(formElement1, formElement0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("method", "font");
      attributes1.vals = null;
      Tag tag0 = Tag.valueOf("font");
      FormElement formElement0 = new FormElement(tag0, "|ADSr]*v2^ft", attributes1);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("method", "font");
      Tag tag0 = Tag.valueOf("font");
      String[] stringArray0 = new String[0];
      attributes0.keys = stringArray0;
      FormElement formElement0 = new FormElement(tag0, "font", attributes1);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Could not determine a form action URL for submit. Ensure you set a base URI when parsing.");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "%M;pk)", attributes0);
      CDataNode cDataNode0 = new CDataNode("");
      Node node0 = cDataNode0.doClone(formElement0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Tag tag0 = Tag.valueOf("mAkWp-y.DOVxV%#e");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(formElement0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.add("name", "select");
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      formElement1.prependChild(formElement0);
      // Undeclared exception!
      formElement1.formData();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("Could not determine a form action URL for submit. Ensure you set a base URI when parsing.", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("pa+},J;E6?A\"pe^8c");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "Could not determine a form action URL for submit. Ensure you set a base URI when parsing.", attributes0);
      formElement0.addElement((Element) null);
      // Undeclared exception!
      try { 
        formElement0.formData();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.FormElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.add("name", "select");
      Tag tag0 = Tag.valueOf("select");
      String[] stringArray0 = new String[0];
      attributes0.vals = stringArray0;
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      // Undeclared exception!
      try { 
        formElement1.formData();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Tag tag0 = Tag.valueOf("SW';zWZxXMDyXBLF@V");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = null;
      try {
        formElement0 = new FormElement(tag0, (String) null, attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.add("name", "select");
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("disabled", "font");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("select", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "&#xa0;", attributes0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, ">yxk?>Y", attributes1);
      FormElement formElement1 = formElement0.addElement(pseudoTextElement0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("w;Z6=]fJp[U");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("w;Z6=]fJp[U");
      FormElement formElement0 = new FormElement(tag0, "w;Z6=]fJp[U", attributes0);
      Document document0 = Document.createShell("w;Z6=]fJp[U");
      formElement0.addElement(document0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("method", "POST");
      Tag tag0 = Tag.valueOf("font");
      FormElement formElement0 = new FormElement(tag0, "method", attributes1);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: method
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Tag tag0 = Tag.valueOf("DELETE");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "DELETE", attributes0);
      Attribute attribute0 = new Attribute("select", "action", attributes0);
      Attributes attributes1 = attributes0.put(attribute0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "action";
      attributes1.keys = stringArray0;
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not determine a form action URL for submit. Ensure you set a base URI when parsing.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("w;Z6=]fJp[U");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("w;Z6=]fJp[U");
      FormElement formElement0 = new FormElement(tag0, "w;Z6=]fJp[U", attributes0);
      Elements elements0 = formElement0.elements();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      formElement1.formData();
  }
}
