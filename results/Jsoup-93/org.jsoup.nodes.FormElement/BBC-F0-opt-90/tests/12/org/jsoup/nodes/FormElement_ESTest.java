/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 11:15:05 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.Connection;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FormElement_ESTest extends FormElement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Qj}0cC`(umM.");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Qj}0cC`(umM.", attributes0);
      formElement0.prependChild(formElement0);
      formElement0.removeChild(formElement0);
      assertFalse(formElement0.hasParent());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Tag tag0 = Tag.valueOf("_;'");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "http:/", attributes0);
      Connection connection0 = formElement0.submit();
      assertNotNull(connection0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("L", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      FormElement formElement1 = formElement0.addElement((Element) null);
      Elements elements0 = formElement1.elements();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Tag tag0 = Tag.valueOf("_l7");
      Document document0 = Document.createShell("_l7");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "_l7", attributes0);
      formElement0.setSiblingIndex((-866));
      FormElement formElement1 = formElement0.addElement(document0);
      assertEquals(0, formElement1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Tag tag0 = Tag.valueOf("form");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      assertEquals(0, formElement1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Tag tag0 = Tag.valueOf("POST");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, ",jZ/V*3\">h5e.)", attributes0);
      Document document0 = Parser.parse("$.O|yCL/jw-H0;xb", "POST");
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) formElement0;
      DataNode dataNode0 = new DataNode("POST", ",jZ/V*3\">h5e.)");
      nodeArray0[1] = (Node) dataNode0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) formElement0;
      nodeArray0[4] = (Node) document0;
      document0.addChildren(nodeArray0);
      FormElement formElement1 = formElement0.addElement(document0);
      assertFalse(formElement1.isBlock());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("nl0", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "nl0", attributes0);
      FormElement formElement1 = (FormElement)formElement0.append("nl0");
      FormElement formElement2 = formElement1.addElement(formElement0);
      assertEquals(1, formElement2.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("UKN", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("UKN", "2");
      Attributes attributes1 = attributes0.put(attribute0);
      Attributes attributes2 = attributes1.clone();
      FormElement formElement0 = new FormElement(tag0, "UKN", attributes2);
      attributes2.keys = null;
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.add("method", "RKNM");
      Tag tag0 = Tag.valueOf("RKNM");
      String[] stringArray0 = new String[0];
      attributes0.keys = stringArray0;
      FormElement formElement0 = new FormElement(tag0, "RKNM", attributes0);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "F4M#yCv7)+6XWV~1", attributes0);
      CDataNode cDataNode0 = new CDataNode("select");
      Node node0 = cDataNode0.doClone(formElement0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("nl0", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "nl0", attributes0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(formElement0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "F4M#yCv7)+6XWV~1", attributes0);
      CDataNode cDataNode0 = new CDataNode("select");
      cDataNode0.setSiblingIndex((-561));
      Node node0 = cDataNode0.doClone(formElement0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(node0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, ")\"Z'lt:5Gzf ~3", attributes0);
      attributes0.putIgnoreCase("name", ")\"Z'lt:5Gzf ~3");
      FormElement formElement1 = formElement0.addElement(formElement0);
      formElement1.appendTo(formElement0);
      // Undeclared exception!
      formElement0.formData();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("x`Cd$nv*\"NMH Q#58I.", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "method", attributes0);
      FormElement formElement1 = formElement0.addElement((Element) null);
      // Undeclared exception!
      try { 
        formElement1.formData();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.FormElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "z,n", attributes0);
      attributes0.putIgnoreCase("name", "z,n");
      String[] stringArray0 = new String[0];
      attributes0.vals = stringArray0;
      FormElement formElement1 = formElement0.addElement(formElement0);
      // Undeclared exception!
      try { 
        formElement1.formData();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("nUJ!dm$]%8~s!f", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = null;
      try {
        formElement0 = new FormElement(tag0, (String) null, attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("input");
      FormElement formElement0 = new FormElement(tag0, "input", attributes0);
      formElement0.addElement(formElement0);
      Element element0 = formElement0.attr("NAME", "input");
      Element element1 = element0.attr("type", "radio");
      attributes0.put("checked", true);
      element1.val("TLH__%3(Yo");
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("input");
      FormElement formElement0 = new FormElement(tag0, "input", attributes0);
      formElement0.addElement(formElement0);
      Element element0 = formElement0.attr("NAME", "input");
      element0.attr("type", "radio");
      attributes0.put("checked", true);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("input");
      FormElement formElement0 = new FormElement(tag0, "input", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      Element element0 = formElement0.attr("NAME", "input");
      element0.attr("type", "radio");
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("input");
      FormElement formElement0 = new FormElement(tag0, "input", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      FormElement formElement2 = (FormElement)formElement1.attr("NAME", "NAME");
      attributes0.put("type", "checkbox");
      List<Connection.KeyVal> list0 = formElement2.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      formElement0.addElement(formElement0);
      formElement0.prependElement("option");
      FormElement formElement1 = (FormElement)formElement0.attr("NAME", "select");
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("input");
      FormElement formElement0 = new FormElement(tag0, "input", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      formElement1.attr("NAME", "X)]|DIrk:JEA");
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, ")\"Z'lt:5Gzf g3", attributes0);
      attributes0.putIgnoreCase("name", "(2U@Km^7v");
      formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "AttributeValue_singleQuoted", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      attributes0.put("disabled", "");
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf(", state=", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, ", state=", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Tag tag0 = Tag.valueOf("NA.C");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "method", attributes0);
      attributes0.put("method", "POST");
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: method
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, ")\"Z'lt:5Gzf g3", attributes0);
      attributes0.put("action", "");
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not determine a form action URL for submit. Ensure you set a base URI when parsing.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Tag tag0 = Tag.valueOf("OGCi4");
      FormElement formElement0 = new FormElement(tag0, "#comment", (Attributes) null);
      Elements elements0 = formElement0.elements();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, ")\"Z'lt:5Gzf g3", attributes0);
      formElement0.addElement(formElement0);
      formElement0.formData();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Tag tag0 = Tag.valueOf("OGCi4");
      FormElement formElement0 = new FormElement(tag0, "#comment", (Attributes) null);
      // Undeclared exception!
      try { 
        formElement0.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }
}
