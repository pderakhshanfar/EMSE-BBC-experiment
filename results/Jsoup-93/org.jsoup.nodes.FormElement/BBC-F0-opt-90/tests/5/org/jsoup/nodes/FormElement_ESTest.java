/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 19:32:48 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.Connection;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FormElement_ESTest extends FormElement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Attribute");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, ":bXv(CZFLz+YCV,3", attributes0);
      formElement0.appendTo(formElement0);
      formElement0.removeChild(formElement0);
      assertEquals(":bXv(CZFLz+YCV,3", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("%");
      FormElement formElement0 = new FormElement(tag0, "http:/", attributes0);
      Connection connection0 = formElement0.submit();
      assertNotNull(connection0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      formElement0.addElement(formElement0);
      Elements elements0 = formElement0.elements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("1jUeF-O1Mqg@U", parseSettings0);
      Attributes attributes0 = new Attributes();
      Document document0 = Document.createShell("y]!$qWJ(z1");
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.select.Collector$FirstFinder", attributes0);
      document0.appendChild(formElement0);
      FormElement formElement1 = formElement0.addElement(document0);
      assertTrue(formElement1.hasParent());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Attribute");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, ":bXv(CZFLz+YCV,3", attributes0);
      formElement0.setSiblingIndex((-1156));
      Document document0 = Parser.parseBodyFragmentRelaxed(":bXv(CZFLz+YCV,3", ":bXv(CZFLz+YCV,3");
      FormElement formElement1 = formElement0.addElement(document0);
      assertFalse(formElement1.hasParent());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Tag tag0 = Tag.valueOf("tfoot");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "O2e*H\"ec", attributes0);
      Document document0 = Parser.parseBodyFragmentRelaxed("Could not determine a form action URL for submit. Ensure you set a base URI when parsing.", "{|A#MY-R&:/Pr7.");
      FormElement formElement1 = formElement0.addElement(document0);
      assertSame(formElement0, formElement1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Tag tag0 = Tag.valueOf("QZ~|!O!u)8Rr)}");
      FormElement formElement0 = new FormElement(tag0, "QZ~|!O!u)8Rr)}", (Attributes) null);
      formElement0.appendChild(formElement0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      assertEquals("qz~|!o!u)8rr)}", formElement1.normalName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("org.jsoup.nodes.FormElement", "org.jsoup.nodes.FormElement");
      attributes1.keys = null;
      Tag tag0 = Tag.valueOf("w4`@*/:[Fq");
      FormElement formElement0 = new FormElement(tag0, ".^iON<", attributes1);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Tag tag0 = Tag.valueOf(":NOT(");
      Attributes attributes0 = new Attributes();
      attributes0.putIgnoreCase("action", "action");
      Attributes attributes1 = attributes0.add("method", "POSs");
      String[] stringArray0 = new String[1];
      attributes1.keys = stringArray0;
      FormElement formElement0 = new FormElement(tag0, "POSs", attributes1);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Tag tag0 = Tag.valueOf("OS");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "CHARSET", attributes0);
      List<Node> list0 = formElement0.childNodes();
      formElement0.childNodes = list0;
      CDataNode cDataNode0 = new CDataNode(",IX");
      Node node0 = cDataNode0.doClone(formElement0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(node0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Attribute");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "action", attributes0);
      // Undeclared exception!
      try { 
        formElement0.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Tag tag0 = Tag.valueOf("OS");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "CHARSET", attributes0);
      CDataNode cDataNode0 = new CDataNode(",IX");
      Node node0 = cDataNode0.doClone(formElement0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Tag tag0 = Tag.valueOf("OS");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "CHARSET", attributes0);
      CDataNode cDataNode0 = new CDataNode(",IX");
      cDataNode0.siblingIndex = (-862);
      Node node0 = cDataNode0.doClone(formElement0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(node0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      Attribute attribute0 = Attribute.createFromEncoded("NAME", "select");
      formElement1.appendChild(formElement0);
      attributes0.put(attribute0);
      // Undeclared exception!
      formElement0.formData();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("Could not determine a form action URL for submit. Ensure you set a base URI when parsing.", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "on", (Attributes) null);
      FormElement formElement1 = formElement0.addElement((Element) null);
      // Undeclared exception!
      try { 
        formElement1.formData();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.FormElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("method", "POSs");
      String[] stringArray0 = new String[0];
      attributes0.keys = stringArray0;
      FormElement formElement0 = new FormElement(tag0, "method", attributes1);
      formElement0.addElement(formElement0);
      // Undeclared exception!
      try { 
        formElement0.formData();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("d< Q;", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = null;
      try {
        formElement0 = new FormElement(tag0, (String) null, attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      formElement0.addElement(formElement0);
      Attribute attribute0 = Attribute.createFromEncoded("NAME", "AW/VC0YCSYO#BFFG6");
      attributes0.put(attribute0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("select");
      attributes0.add("disabled", "disabled");
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("w4`@*/:[Fq");
      FormElement formElement0 = new FormElement(tag0, ".^iON<", attributes0);
      Document document0 = Document.createShell(".^iON<");
      Element element0 = document0.createElement("select");
      FormElement formElement1 = formElement0.addElement(element0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("method", "POST");
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.helper.HttpConnection$Request", attributes1);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: org.jsoup.helper.HttpConnection$Request
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Tag tag0 = Tag.valueOf("95");
      Attributes attributes0 = new Attributes();
      attributes0.add("action", "AfterAfterBody");
      FormElement formElement0 = new FormElement(tag0, "95", attributes0);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not determine a form action URL for submit. Ensure you set a base URI when parsing.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("w4`@*/:[Fq");
      FormElement formElement0 = new FormElement(tag0, ".^iON<", attributes0);
      Elements elements0 = formElement0.elements();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Attribute");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, ":bXv(CZFLz+YCV,3", attributes0);
      Document document0 = Parser.parseBodyFragmentRelaxed(":bXv(CZFLz+YCV,3", ":bXv(CZFLz+YCV,3");
      FormElement formElement1 = formElement0.addElement(document0);
      formElement1.formData();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Attribute");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, ":bXv(CZFLz+YCV,3", attributes0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(formElement0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
