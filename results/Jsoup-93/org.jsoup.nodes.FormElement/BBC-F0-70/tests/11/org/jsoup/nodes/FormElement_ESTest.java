/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 15:10:19 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.Connection;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FormElement_ESTest extends FormElement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "<x-jf*]Dc", attributes0);
      FormElement formElement1 = (FormElement)formElement0.appendTo(formElement0);
      formElement1.removeChild(formElement0);
      assertEquals("select", formElement0.nodeName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "http:/", attributes0);
      Connection connection0 = formElement0.submit();
      assertNotNull(connection0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "]]>", attributes0);
      formElement0.addElement(formElement0);
      Elements elements0 = formElement0.elements();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Tag tag0 = Tag.valueOf("+Tswnc);lg");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "+Tswnc);lg", attributes0);
      Document document0 = new Document("+Tswnc);lg");
      formElement0.setSiblingIndex(1);
      FormElement formElement1 = formElement0.addElement(document0);
      assertSame(formElement1, formElement0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("col", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "col", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      assertEquals("col", formElement1.nodeName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Tag tag0 = Tag.valueOf("\"Tl");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "\"Tl", attributes0);
      Document document0 = Document.createShell("");
      formElement0.prependChild(document0);
      FormElement formElement1 = formElement0.addElement(document0);
      assertFalse(formElement1.isBlock());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.add("method", "IvSL");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("IvSL", parseSettings0);
      attributes0.vals = null;
      FormElement formElement0 = new FormElement(tag0, "H", attributes0);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("2gCF_b}Wh`24ZuQ,", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("-D", "E:TXB),5%Y1,GN}BG$");
      String[] stringArray0 = new String[0];
      attributes1.keys = stringArray0;
      FormElement formElement0 = new FormElement(tag0, "2gCF_b}Wh`24ZuQ,", attributes1);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("method");
      FormElement formElement0 = new FormElement(tag0, "method", attributes0);
      CDataNode cDataNode0 = new CDataNode("method");
      Element element0 = formElement0.removeClass("FB,Ckb0]#Nn53D2W");
      List<Node> list0 = formElement0.childNodes();
      element0.childNodes = list0;
      Node node0 = cDataNode0.doClone(formElement0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(node0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Tag tag0 = Tag.valueOf("\"Tl");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Ou~t%>b(", attributes0);
      // Undeclared exception!
      try { 
        formElement0.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("method");
      FormElement formElement0 = new FormElement(tag0, "method", attributes0);
      CDataNode cDataNode0 = new CDataNode("method");
      Node node0 = cDataNode0.doClone(formElement0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("method");
      FormElement formElement0 = new FormElement(tag0, "method", attributes0);
      CDataNode cDataNode0 = new CDataNode("method");
      cDataNode0.siblingIndex = (-543);
      Node node0 = cDataNode0.doClone(formElement0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(node0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("NAME", "<x-jf*]Dc");
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "<x-jf*]Dc", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      formElement1.appendTo(formElement0);
      // Undeclared exception!
      formElement1.formData();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("METHOD", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "2@7GI", attributes0);
      FormElement formElement1 = formElement0.addElement((Element) null);
      // Undeclared exception!
      try { 
        formElement1.formData();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.FormElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("NAME", "NAME");
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "NAME", attributes0);
      TextNode textNode0 = new TextNode("button", "NAME");
      formElement0.parentNode = (Node) textNode0;
      formElement0.setSiblingIndex((-1843361553));
      formElement0.addElement(formElement0);
      // Undeclared exception!
      try { 
        formElement0.formData();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1843361552
         //
         verifyException("java.util.Collections$EmptyList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("NAME", "NAME");
      String[] stringArray0 = new String[0];
      attributes1.keys = stringArray0;
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "%NtJYY0,x<sE.qh", attributes1);
      formElement0.addElement(formElement0);
      // Undeclared exception!
      try { 
        formElement0.formData();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Tag tag0 = Tag.valueOf("baRw`x5!'!7s");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = null;
      try {
        formElement0 = new FormElement(tag0, (String) null, attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("NaME", "NaME");
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "Character", attributes1);
      Tag tag1 = Tag.valueOf("input", (ParseSettings) null);
      Element element0 = new Element(tag1, "org.jsoup.helper.HttpConnection$Response", attributes1);
      FormElement formElement1 = formElement0.addElement(element0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("IvSL", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "Ht9_K-1/", attributes0);
      Attributes attributes1 = attributes0.add("NAME", "AI5?C}?0W#^5<");
      Tag tag1 = Tag.valueOf("select");
      FormElement formElement1 = new FormElement(tag1, "org.jsoup.select.Evaluator$IsNthLastChild", attributes1);
      FormElement formElement2 = formElement0.addElement(formElement1);
      List<Connection.KeyVal> list0 = formElement2.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "NAME", attributes0);
      Attribute attribute0 = new Attribute("disabled", "^+(KNKsIzUn|5%tJ");
      attributes0.put(attribute0);
      formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("IvSL", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "Ht9_K-1/", attributes0);
      Tag tag1 = Tag.valueOf("select");
      FormElement formElement1 = new FormElement(tag1, "org.jsoup.select.Evaluator$IsNthLastChild", attributes0);
      FormElement formElement2 = formElement1.addElement(formElement0);
      FormElement formElement3 = formElement0.addElement(formElement2);
      List<Connection.KeyVal> list0 = formElement3.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("                    ");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.add("method", "POST");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("POST", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "                    ", attributes1);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL:                     
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Tag tag0 = Tag.valueOf("BeG:(OWq^P&T");
      CDataNode cDataNode0 = new CDataNode("action");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.put("action", "action");
      FormElement formElement0 = new FormElement(tag0, "NAME", attributes1);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not determine a form action URL for submit. Ensure you set a base URI when parsing.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "]]>", attributes0);
      Elements elements0 = formElement0.elements();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("IvSL", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "Ht9_K-1/", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Tag tag0 = Tag.valueOf("+Tswnc);lg");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "+Tswnc);lg", attributes0);
      Document document0 = new Document("+Tswnc);lg");
      // Undeclared exception!
      try { 
        formElement0.removeChild(document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
