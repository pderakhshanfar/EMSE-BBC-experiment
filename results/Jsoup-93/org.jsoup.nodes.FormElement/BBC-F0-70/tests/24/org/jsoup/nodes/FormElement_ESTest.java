/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 15:21:00 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.Connection;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FormElement_ESTest extends FormElement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "FU^D:!,GH[+'NSF* H", attributes0);
      formElement0.appendTo(formElement0);
      formElement0.removeChild(formElement0);
      assertEquals("FU^D:!,GH[+'NSF* H", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Tag tag0 = Tag.valueOf("ect");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "http:/", attributes0);
      Connection connection0 = formElement0.submit();
      assertNotNull(connection0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf(";2g", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "1", attributes0);
      Document document0 = new Document("");
      FormElement formElement1 = formElement0.addElement(document0);
      Elements elements0 = formElement1.elements();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Tag tag0 = Tag.valueOf("GEqT");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "GEqT", attributes0);
      Document document0 = Parser.parseBodyFragmentRelaxed(")c|]$:xCz", "GEqT");
      formElement0.appendTo(document0);
      FormElement formElement1 = formElement0.addElement(document0);
      assertEquals("GEqT", formElement1.baseUri());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("~eUQrT[PG6<8yK<Z'Q", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "KMK", attributes0);
      Document document0 = Parser.parseBodyFragmentRelaxed("zWRx{pWx6JrE", "tP/_ype");
      FormElement formElement1 = formElement0.addElement(document0);
      formElement1.siblingIndex = (-1717986916);
      FormElement formElement2 = formElement1.addElement(formElement0);
      assertEquals(0, formElement2.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Tag tag0 = Tag.valueOf("h2");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.select.StructuralEvaluator$ImmediatePreviousSibling", attributes0);
      Document document0 = Parser.parse("Accept-Encoding", "ESrRu8xo2/:<6Sn]");
      FormElement formElement1 = formElement0.addElement(document0);
      assertSame(formElement0, formElement1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("teur");
      FormElement formElement0 = new FormElement(tag0, "teur", attributes0);
      attributes0.put("METHOD", "teur");
      attributes0.keys = null;
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("center");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("center");
      FormElement formElement0 = new FormElement(tag0, "4HJK", attributes0);
      Attributes attributes1 = attributes0.put("METHOD", "4HJK");
      String[] stringArray0 = new String[1];
      attributes1.vals = stringArray0;
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Tag tag0 = Tag.valueOf("GET");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "OsSVJZ2F71Y!", attributes0);
      // Undeclared exception!
      try { 
        formElement0.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("option[selected]", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "GEqT", attributes0);
      Document document0 = Parser.parseBodyFragmentRelaxed("GEqT", "DyI&ws&^LT");
      FormElement formElement1 = formElement0.addElement(document0);
      formElement1.parentNode = (Node) formElement0;
      // Undeclared exception!
      try { 
        formElement1.removeChild(formElement0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      attributes0.put("name", "select");
      FormElement formElement0 = new FormElement(tag0, "FU^D:!,GH[+'NSF* H", attributes0);
      formElement0.prependChild(formElement0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      // Undeclared exception!
      formElement1.formData();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Tag tag0 = Tag.valueOf("GET");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "option", attributes0);
      formElement0.addElement((Element) null);
      // Undeclared exception!
      try { 
        formElement0.formData();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.FormElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("name", "name");
      FormElement formElement0 = new FormElement(tag0, "select", attributes1);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "select", attributes0);
      formElement0.addElement(pseudoTextElement0);
      String[] stringArray0 = new String[0];
      attributes0.keys = stringArray0;
      // Undeclared exception!
      try { 
        formElement0.formData();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Tag tag0 = Tag.valueOf("r)x'#9cF(FPP");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = null;
      try {
        formElement0 = new FormElement(tag0, (String) null, attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("name", "name");
      Tag tag0 = Tag.valueOf("input");
      attributes0.putIgnoreCase("type", "radio");
      FormElement formElement0 = new FormElement(tag0, "radio", attributes1);
      attributes0.putIgnoreCase("checked", "type");
      FormElement formElement1 = formElement0.addElement(formElement0);
      formElement1.val("type");
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("name", "name");
      Tag tag0 = Tag.valueOf("input");
      attributes1.putIgnoreCase("type", "radio");
      FormElement formElement0 = new FormElement(tag0, "type", attributes1);
      attributes0.putIgnoreCase("checked", "type");
      FormElement formElement1 = formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("name", "name");
      Tag tag0 = Tag.valueOf("input");
      attributes1.putIgnoreCase("type", "radio");
      FormElement formElement0 = new FormElement(tag0, "type", attributes1);
      FormElement formElement1 = formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("name", "name");
      Tag tag0 = Tag.valueOf("input");
      attributes1.putIgnoreCase("type", "checkbox");
      FormElement formElement0 = new FormElement(tag0, "type", attributes1);
      formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      attributes0.put("name", "select");
      FormElement formElement0 = new FormElement(tag0, "name", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      formElement1.appendElement("option");
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("name", "name");
      Tag tag0 = Tag.valueOf("input");
      FormElement formElement0 = new FormElement(tag0, "type", attributes1);
      FormElement formElement1 = formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      attributes0.put("name", "select");
      FormElement formElement0 = new FormElement(tag0, "name", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      CDataNode cDataNode0 = new CDataNode("disabled");
      Attributes attributes0 = cDataNode0.attributes();
      Attribute attribute0 = new Attribute("disabled", "select", attributes0);
      attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "!^y_)CnIS", attributes0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "51[", attributes0);
      formElement0.addElement(pseudoTextElement0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "name", attributes0);
      Document document0 = Parser.parseBodyFragment("PCDVT-.QD", "select");
      FormElement formElement1 = formElement0.addElement(document0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("center");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("option");
      FormElement formElement0 = new FormElement(tag0, "center", attributes0);
      attributes0.put("METHOD", "POST");
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: center
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("option", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Q}lt>NhZU", attributes0);
      attributes0.put("action", "option");
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not determine a form action URL for submit. Ensure you set a base URI when parsing.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      Elements elements0 = formElement0.elements();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "FU^D:!,GH[+'NSF* H");
      FormElement formElement0 = new FormElement(tag0, "FU^D:!,GH[+'NSF* H", attributes0);
      FormElement formElement1 = formElement0.addElement(element0);
      formElement1.formData();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "FU^D:!,GH[+'NSF* H", attributes0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(formElement0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
