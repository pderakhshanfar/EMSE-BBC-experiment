/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 17:09:49 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.Connection;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FormElement_ESTest extends FormElement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Tag tag0 = Tag.valueOf("}!')) Ij");
      FormElement formElement0 = new FormElement(tag0, "}!')) Ij", (Attributes) null);
      Document document0 = Parser.parse("u*3s52", "P>PTI<M6PY<");
      document0.appendTo(formElement0);
      formElement0.removeChild(document0);
      assertEquals(0, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("method");
      FormElement formElement0 = new FormElement(tag0, "http:/", attributes0);
      Connection connection0 = formElement0.submit();
      assertNotNull(connection0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Tag tag0 = Tag.valueOf("p$Kgury5ou>_ lQ!;)");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "p$Kgury5ou>_ lQ!;)", attributes0);
      FormElement formElement0 = new FormElement(tag0, "p$Kgury5ou>_ lQ!;)", attributes0);
      FormElement formElement1 = formElement0.addElement(pseudoTextElement0);
      Elements elements0 = formElement1.elements();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Tag tag0 = Tag.valueOf("0P/i");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "", attributes0);
      FormElement formElement0 = new FormElement(tag0, "Xm'[YmsgSD:L", attributes0);
      formElement0.siblingIndex = 17;
      FormElement formElement1 = formElement0.addElement(pseudoTextElement0);
      assertEquals(0, formElement1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Tag tag0 = Tag.valueOf("checkbox");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Split offset must be not be negative", attributes0);
      formElement0.setSiblingIndex((-1));
      Document document0 = Parser.parse("action", "checked");
      FormElement formElement1 = formElement0.addElement(document0);
      assertEquals("checkbox", formElement1.nodeName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Tag tag0 = Tag.valueOf("tbody");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "L)[5u", attributes0);
      FormElement formElement0 = new FormElement(tag0, "uWDP.", attributes0);
      FormElement formElement1 = formElement0.addElement(pseudoTextElement0);
      assertSame(formElement0, formElement1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Tag tag0 = Tag.valueOf("p$Kgury5ou>_ lQ!;)");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "p$Kgury5ou>_ lQ!;)", attributes0);
      FormElement formElement0 = new FormElement(tag0, "p$Kgury5ou>_ lQ!;)", attributes0);
      formElement0.setParentNode(pseudoTextElement0);
      FormElement formElement1 = formElement0.addElement(pseudoTextElement0);
      assertEquals(0, formElement1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Tag tag0 = Tag.valueOf("*S\"^");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "*S\"^", attributes0);
      Document document0 = Parser.parseBodyFragmentRelaxed("*S\"^", "*S\"^");
      formElement0.append("*S\"^");
      FormElement formElement1 = formElement0.addElement(document0);
      assertFalse(formElement1.hasParent());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("METHOD");
      Attributes attributes1 = attributes0.put("METHOD", "PrSU");
      attributes1.keys = null;
      FormElement formElement0 = new FormElement(tag0, "PrSU", attributes1);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("METHOD");
      attributes0.put("METHOD", "PrNU");
      String[] stringArray0 = new String[0];
      attributes0.vals = stringArray0;
      FormElement formElement0 = new FormElement(tag0, "PrNU", attributes0);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("REMOVE", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      // Undeclared exception!
      try { 
        formElement0.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Tag tag0 = Tag.valueOf("0P/i");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "0P/i", attributes0);
      CDataNode cDataNode0 = new CDataNode("q>{^YpXr+o6");
      Node node0 = cDataNode0.doClone(formElement0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("sf_X#Q;vU:D=qO0", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("sf_X#Q;vU:D=qO0");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "sf_X#Q;vU:D=qO0", attributes0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(cDataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Tag tag0 = Tag.valueOf("0P/i");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "0P/i", attributes0);
      CDataNode cDataNode0 = new CDataNode("q>{^YpXr+o6");
      cDataNode0.setSiblingIndex((-1433506051));
      Node node0 = cDataNode0.doClone(formElement0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(node0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("name", "v&vPj27e^&mG7", attributes0);
      attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      formElement0.addElement(formElement0);
      formElement0.appendTo(formElement0);
      // Undeclared exception!
      formElement0.formData();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Tag tag0 = Tag.valueOf("*SQ^");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      FormElement formElement1 = formElement0.addElement((Element) null);
      // Undeclared exception!
      try { 
        formElement1.formData();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.FormElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("name", "Qju");
      Attributes attributes1 = attributes0.put("object", " E6P");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("object", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "R$-\"MJ~S5HDK+UEVK", attributes0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "ORG.JSOUP.SELECT.EVALUATOR$ISNTHCHILD", attributes1);
      Attributes attributes2 = attributes0.put(attribute0);
      String[] stringArray0 = new String[1];
      attributes2.keys = stringArray0;
      FormElement formElement1 = formElement0.addElement(pseudoTextElement0);
      // Undeclared exception!
      try { 
        formElement1.formData();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("B", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = null;
      try {
        formElement0 = new FormElement(tag0, (String) null, attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Tag tag0 = Tag.valueOf("object");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("name", "name", attributes0);
      attributes0.put(attribute0);
      Element element0 = new Element(tag0, "name", attributes0);
      FormElement formElement0 = new FormElement(tag0, "object", attributes0);
      FormElement formElement1 = formElement0.addElement(element0);
      attributes0.add("type", "radio");
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("name", "V,uT");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("object", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "R$-\"MJ~S5HDK+UEVK", attributes0);
      attributes0.put(attribute0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "                    ", attributes0);
      FormElement formElement1 = formElement0.addElement(pseudoTextElement0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("name", "oPHak2-r\"@uj8v~^1;}", attributes0);
      Attributes attributes1 = attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "checkbox", attributes1);
      FormElement formElement1 = formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      attributes0.putIgnoreCase("DISABLED", "kh!}M");
      formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Tag tag0 = Tag.valueOf("*S\"^");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "*S\"^", attributes0);
      Document document0 = Parser.parseBodyFragmentRelaxed("*S\"^", "*S\"^");
      FormElement formElement1 = formElement0.addElement(document0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "checkbox", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      formElement1.formData();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("METHOD");
      Attributes attributes1 = attributes0.put("METHOD", "POST");
      FormElement formElement0 = new FormElement(tag0, "?DXsTs}{h$I':,O6J", attributes1);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: ?DXsTs}{h$I':,O6J
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("select");
      Attribute attribute0 = new Attribute("action", "Pb'vhS]{\":ehEqb^HV");
      Attributes attributes1 = attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "action", attributes1);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not determine a form action URL for submit. Ensure you set a base URI when parsing.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Tag tag0 = Tag.valueOf("p$Kgury5ou>_ lQ!;)");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "p$Kgury5ou>_ lQ!;)", attributes0);
      Elements elements0 = formElement0.elements();
      assertTrue(elements0.isEmpty());
  }
}
