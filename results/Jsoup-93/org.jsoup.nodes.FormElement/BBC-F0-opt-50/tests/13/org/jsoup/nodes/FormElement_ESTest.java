/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 11:23:46 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.Connection;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FormElement_ESTest extends FormElement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Tag tag0 = Tag.valueOf("q");
      Attributes attributes0 = new Attributes();
      Document document0 = Parser.parseBodyFragmentRelaxed("q", "q");
      FormElement formElement0 = new FormElement(tag0, "q", attributes0);
      FormElement formElement1 = formElement0.addElement(document0);
      Elements elements0 = formElement1.elements();
      formElement1.insertChildren(0, (Collection<? extends Node>) elements0);
      formElement1.removeChild(document0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("http:/", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "http:/", attributes0);
      Connection connection0 = formElement0.submit();
      assertNotNull(connection0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Tag tag0 = Tag.valueOf("!");
      Attributes attributes0 = new Attributes();
      Document document0 = Parser.parseBodyFragmentRelaxed("!", "!");
      FormElement formElement0 = new FormElement(tag0, "!", attributes0);
      formElement0.appendTo(document0);
      FormElement formElement1 = formElement0.addElement(document0);
      assertEquals("!", formElement1.tagName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Tag tag0 = Tag.valueOf("x?hG");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Attributes incorrectly present on end tag", attributes0);
      Document document0 = new Document("x?hG");
      formElement0.setSiblingIndex((-927));
      FormElement formElement1 = formElement0.addElement(document0);
      assertEquals("x?hG", formElement1.nodeName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Tag tag0 = Tag.valueOf("figure");
      Attributes attributes0 = new Attributes();
      Document document0 = Document.createShell("POST");
      FormElement formElement0 = new FormElement(tag0, "Z,Z#W[EMYur?8n", attributes0);
      FormElement formElement1 = formElement0.addElement(document0);
      assertEquals("Z,Z#W[EMYur?8n", formElement1.baseUri());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Tag tag0 = Tag.valueOf("method");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("method", "TqOp");
      FormElement formElement0 = new FormElement(tag0, "method", attributes1);
      attributes0.vals = null;
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Tag tag0 = Tag.valueOf("method");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("method", "method");
      String[] stringArray0 = new String[0];
      attributes0.vals = stringArray0;
      FormElement formElement0 = new FormElement(tag0, "method", attributes1);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Tag tag0 = Tag.valueOf("var");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "var", attributes0);
      // Undeclared exception!
      try { 
        formElement0.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Tag tag0 = Tag.valueOf("!");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "!", attributes0);
      CDataNode cDataNode0 = new CDataNode("!");
      Node node0 = cDataNode0.doClone(formElement0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Tag tag0 = Tag.valueOf("q");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "q", attributes0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(formElement0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Tag tag0 = Tag.valueOf("!");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "!", attributes0);
      CDataNode cDataNode0 = new CDataNode("!");
      cDataNode0.siblingIndex = (-1082524851);
      Node node0 = cDataNode0.doClone(formElement0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(node0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("name", "name");
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "name", attributes1);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) formElement0;
      nodeArray0[1] = (Node) formElement0;
      formElement0.addChildren(nodeArray0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      // Undeclared exception!
      formElement1.formData();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Tag tag0 = Tag.valueOf("pD9B^uT");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "pD9B^uT", attributes0);
      FormElement formElement1 = formElement0.addElement((Element) null);
      // Undeclared exception!
      try { 
        formElement1.formData();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.FormElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Tag tag0 = Tag.valueOf("keygen");
      CDataNode cDataNode0 = new CDataNode("keygen");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.put("name", "name");
      FormElement formElement0 = new FormElement(tag0, "keygen", attributes1);
      String[] stringArray0 = new String[0];
      attributes1.vals = stringArray0;
      FormElement formElement1 = formElement0.addElement(formElement0);
      // Undeclared exception!
      try { 
        formElement1.formData();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf(" \"", parseSettings0);
      FormElement formElement0 = null;
      try {
        formElement0 = new FormElement(tag0, (String) null, attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Tag tag0 = Tag.valueOf("keygen");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("name", "keygen");
      FormElement formElement0 = new FormElement(tag0, "keygen", attributes1);
      attributes0.putIgnoreCase("type", "radio");
      attributes0.putIgnoreCase("checked", "keygen");
      FormElement formElement1 = formElement0.addElement(formElement0);
      formElement1.val("checkbox");
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Tag tag0 = Tag.valueOf("keygen");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("name", "name");
      FormElement formElement0 = new FormElement(tag0, "keygen", attributes1);
      attributes0.putIgnoreCase("type", "radio");
      attributes0.putIgnoreCase("checked", "radio");
      FormElement formElement1 = formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Tag tag0 = Tag.valueOf("keygen");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("name", "name");
      FormElement formElement0 = new FormElement(tag0, "keygen", attributes1);
      attributes0.putIgnoreCase("type", "radio");
      FormElement formElement1 = formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Tag tag0 = Tag.valueOf("keygen");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("name", "keygen");
      FormElement formElement0 = new FormElement(tag0, "keygen", attributes1);
      attributes1.putIgnoreCase("type", "checkbox");
      formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Tag tag0 = Tag.valueOf("keygen");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("name", "name");
      FormElement formElement0 = new FormElement(tag0, "keygen", attributes1);
      FormElement formElement1 = formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("name", "name");
      Tag tag0 = Tag.valueOf("select");
      FormElement formElement0 = new FormElement(tag0, "name", attributes1);
      FormElement formElement1 = formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("disabled");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.add("disabled", "Y");
      Tag tag0 = Tag.valueOf("g|e;qp$7w(Kw");
      FormElement formElement0 = new FormElement(tag0, "BLv&xuM", attributes1);
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag1 = Tag.valueOf("keygen", parseSettings0);
      Element element0 = new Element(tag1, "section", attributes0);
      formElement0.addElement(element0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("@b!%PRQ>Xi_Yvny");
      FormElement formElement0 = new FormElement(tag0, "TEXT/", attributes0);
      Element element0 = new Element("keygen");
      FormElement formElement1 = formElement0.addElement(element0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Tag tag0 = Tag.valueOf("method");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("method", "POST");
      FormElement formElement0 = new FormElement(tag0, "Tqnp", attributes1);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: Tqnp
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("action", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("2x6@ftp[Xfvp[r{5Z");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.put("action", "2x6@ftp[Xfvp[r{5Z");
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.nodes.Element$NodeList", attributes1);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not determine a form action URL for submit. Ensure you set a base URI when parsing.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Tag tag0 = Tag.valueOf("!");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "!", attributes0);
      Elements elements0 = formElement0.elements();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Tag tag0 = Tag.valueOf("!");
      Attributes attributes0 = new Attributes();
      Document document0 = Parser.parseBodyFragment("!", "!");
      FormElement formElement0 = new FormElement(tag0, "!", attributes0);
      formElement0.addElement(document0);
      formElement0.formData();
  }
}
