/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 19:31:51 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.Connection;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FormElement_ESTest extends FormElement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Tag tag0 = Tag.valueOf("gZK#MH>R|ax9 ,-F");
      FormElement formElement0 = new FormElement(tag0, "gZK#MH>R|ax9 ,-F", (Attributes) null);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) formElement0;
      formElement0.addChildren(nodeArray0);
      formElement0.removeChild(formElement0);
      assertFalse(formElement0.hasParent());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("ambbKSr");
      FormElement formElement0 = new FormElement(tag0, "http:/", attributes0);
      Connection connection0 = formElement0.submit();
      assertNotNull(connection0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("5F=v_bc$dlB<IGTsXg", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "5F=v_bc$dlB<IGTsXg", (Attributes) null);
      formElement0.addElement(formElement0);
      Elements elements0 = formElement0.elements();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Tag tag0 = Tag.valueOf("gZK#>H>R|ax9 ,-F");
      FormElement formElement0 = new FormElement(tag0, "gZK#>H>R|ax9 ,-F", (Attributes) null);
      formElement0.setSiblingIndex(1);
      Document document0 = Parser.parseBodyFragmentRelaxed("gZK#>H>R|ax9 ,-F", "|@c)mO$Me)WaJlEqU");
      FormElement formElement1 = formElement0.addElement(document0);
      assertEquals(0, formElement1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Tag tag0 = Tag.valueOf("gZK#>H>R|ax9 ,-F");
      FormElement formElement0 = new FormElement(tag0, "w2njsMj<9q-Tkj,JPz", (Attributes) null);
      FormElement formElement1 = new FormElement(tag0, "w2njsMj<9q-Tkj,JPz", (Attributes) null);
      formElement1.siblingIndex = (-1034);
      FormElement formElement2 = formElement1.addElement(formElement0);
      assertEquals("gZK#>H>R|ax9 ,-F", formElement2.nodeName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("main", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "ON", (Attributes) null);
      Document document0 = Parser.parseBodyFragment("main", "              ");
      FormElement formElement1 = formElement0.addElement(document0);
      assertTrue(formElement1.isBlock());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Tag tag0 = Tag.valueOf("gZK#>H>R|ax9 ,-F");
      FormElement formElement0 = new FormElement(tag0, "D@W* C", (Attributes) null);
      Document document0 = Parser.parseBodyFragment("checked", "gZK#>H>R|ax9 ,-F");
      document0.reparentChild(formElement0);
      FormElement formElement1 = formElement0.addElement(document0);
      assertFalse(formElement1.isBlock());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Tag tag0 = Tag.valueOf(":prev%s");
      FormElement formElement0 = new FormElement(tag0, ":prev%s", (Attributes) null);
      formElement0.appendElement("pkwiqv1lk");
      FormElement formElement1 = formElement0.addElement((Element) null);
      assertEquals(":prev%s", formElement1.tagName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("method", "nSme");
      attributes0.put(attribute0);
      attributes0.vals = null;
      Tag tag0 = Tag.valueOf("nSme");
      FormElement formElement0 = new FormElement(tag0, "method", attributes0);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Tag tag0 = Tag.valueOf("gSK#>H>R|Fx9 ,-F");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("method", "nSme");
      Attributes attributes1 = attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "gSK#>H>R|Fx9 ,-F", attributes0);
      String[] stringArray0 = new String[0];
      attributes1.keys = stringArray0;
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Tag tag0 = Tag.valueOf(":prev%s");
      FormElement formElement0 = new FormElement(tag0, ":prev%s", (Attributes) null);
      // Undeclared exception!
      try { 
        formElement0.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Tag tag0 = Tag.valueOf(":prev(s");
      FormElement formElement0 = new FormElement(tag0, ":prev(s", (Attributes) null);
      CDataNode cDataNode0 = new CDataNode("-*@");
      Node node0 = cDataNode0.doClone(formElement0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Tag tag0 = Tag.valueOf("gZK#MH>R|ax9 ,-F");
      FormElement formElement0 = new FormElement(tag0, "gZK#MH>R|ax9 ,-F", (Attributes) null);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) formElement0;
      formElement0.addChildren(nodeArray0);
      formElement0.setSiblingIndex((-105635087));
      // Undeclared exception!
      try { 
        formElement0.removeChild(formElement0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("SELECT", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "SELECT", attributes0);
      attributes0.put("name", "name");
      FormElement formElement1 = formElement0.addElement(formElement0);
      formElement1.prependChild(formElement0);
      // Undeclared exception!
      formElement1.formData();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Tag tag0 = Tag.valueOf(":prev%s");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "M", attributes0);
      FormElement formElement1 = formElement0.addElement((Element) null);
      // Undeclared exception!
      try { 
        formElement1.formData();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.FormElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("SELECT", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "SELECT", attributes0);
      attributes0.add("name", "SELECT");
      String[] stringArray0 = new String[0];
      attributes0.vals = stringArray0;
      FormElement formElement1 = formElement0.addElement(formElement0);
      // Undeclared exception!
      try { 
        formElement1.formData();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Tag tag0 = Tag.valueOf("gZK#>H>R|ax9 ,-F");
      FormElement formElement0 = null;
      try {
        formElement0 = new FormElement(tag0, (String) null, (Attributes) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Tag tag0 = Tag.valueOf("object");
      CDataNode cDataNode0 = new CDataNode("object");
      Attributes attributes0 = cDataNode0.attributes();
      attributes0.add("name", "object");
      Attributes attributes1 = attributes0.put("type", "checkbox");
      FormElement formElement0 = new FormElement(tag0, "checkbox", attributes1);
      formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("object", parseSettings0);
      CDataNode cDataNode0 = new CDataNode((String) null);
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "SELECT", attributes0);
      attributes0.add("name", "name");
      formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("SELECT", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "SELECT", attributes0);
      attributes0.put("name", "`,]");
      FormElement formElement1 = formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      Tag tag0 = Tag.valueOf("SELECT", parseSettings0);
      Attributes attributes0 = new Attributes();
      attributes0.put("disabled", "disabled");
      FormElement formElement0 = new FormElement(tag0, "disabled", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("SELECT", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "Q4V(C{71_63NJY)VL$", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Tag tag0 = Tag.valueOf("TV[E");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("method", "POST");
      Attributes attributes1 = attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "nSme", attributes1);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: nSme
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Tag tag0 = Tag.valueOf(":prev(s");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("action", "POST");
      Attributes attributes1 = attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "POST", attributes1);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not determine a form action URL for submit. Ensure you set a base URI when parsing.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("5F=v_bc$dlB<IGTsXg", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "5F=v_bc$dlB<IGTsXg", (Attributes) null);
      Elements elements0 = formElement0.elements();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Tag tag0 = Tag.valueOf("TV[E");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "nSme", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      formElement1.formData();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Tag tag0 = Tag.valueOf("gZK#MH>R|ax9 ,-F");
      FormElement formElement0 = new FormElement(tag0, "gZK#MH>R|ax9 ,-F", (Attributes) null);
      // Undeclared exception!
      try { 
        formElement0.removeChild(formElement0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
