/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 17:29:20 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.Connection;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FormElement_ESTest extends FormElement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("oud not determine a form actionURL for submit. Ensure you set a base URI when parsing.");
      FormElement formElement0 = new FormElement(tag0, "oud not determine a form actionURL for submit. Ensure you set a base URI when parsing.", attributes0);
      Element element0 = formElement0.appendChild(formElement0);
      formElement0.removeChild(formElement0);
      assertSame(formElement0, element0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      CDataNode cDataNode0 = new CDataNode("select");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "http:/", attributes0);
      Connection connection0 = formElement0.submit();
      assertNotNull(connection0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Tag tag0 = Tag.valueOf("JL9+ryiec");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "JL9+ryiec", attributes0);
      Document document0 = Parser.parse("ZhNI", "plaintext");
      FormElement formElement1 = formElement0.addElement(document0);
      Elements elements0 = formElement1.elements();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Tag tag0 = Tag.valueOf("8QmKlJPa|$y");
      CDataNode cDataNode0 = new CDataNode("8QmKlJPa|$y");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element("sewlect");
      FormElement formElement0 = new FormElement(tag0, "*Ptfi@2n%#?}U'", attributes0);
      formElement0.siblingIndex = 26;
      FormElement formElement1 = formElement0.addElement(element0);
      assertEquals("8QmKlJPa|$y", formElement1.nodeName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Could not determine a form action URL for submit. Ensure you set a base URI when parsing.");
      Attributes attributes0 = new Attributes();
      Document document0 = Document.createShell("Could not determine a form action URL for submit. Ensure you set a base URI when parsing.");
      FormElement formElement0 = new FormElement(tag0, "Could not determine a form action URL for submit. Ensure you set a base URI when parsing.", attributes0);
      formElement0.setSiblingIndex((-2010));
      FormElement formElement1 = formElement0.addElement(document0);
      assertEquals(0, formElement1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Document document0 = Parser.parseBodyFragmentRelaxed("N`*1Yg0Gb#:XxwU'pZ", "c@fz[V{[AI^");
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("dl", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "Y(z*z{(x\"fi\"cB", attributes0);
      FormElement formElement1 = formElement0.addElement(document0);
      assertEquals("dl", formElement1.normalName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("xCdG\"*`,v", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("xCdG\"*`,v");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "xCdG\"*`,v", attributes0);
      cDataNode0.reparentChild(formElement0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      assertTrue(formElement1.hasParent());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Tag cannot be self closing; not a void tag");
      CDataNode cDataNode0 = new CDataNode("vt/QEb0<DM >*,.R2VD");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "Tag cannot be self closing; not a void tag", attributes0);
      Document document0 = Parser.parseBodyFragment("Tag cannot be self closing; not a void tag", "Tag cannot be self closing; not a void tag");
      formElement0.appendText("canvas");
      FormElement formElement1 = formElement0.addElement(document0);
      assertEquals("Tag cannot be self closing; not a void tag", formElement1.nodeName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("method");
      Attributes attributes0 = cDataNode0.attributes();
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("method", parseSettings0);
      Attributes attributes1 = attributes0.put("METHOD", "type");
      FormElement formElement0 = new FormElement(tag0, "method", attributes1);
      Attributes attributes2 = attributes1.put("", "plaintext");
      attributes2.vals = null;
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("zRpGNk?6S>Ty cPi`", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("Could not determine a form action URL for submit. Ensure you set a base URI when parsing.", "Tfjp&-eqyj#PhJb=");
      Attributes attributes2 = attributes1.put("zRpGNk?6S>Ty cPi`", "Could not determine a form action URL for submit. Ensure you set a base URI when parsing.");
      String[] stringArray0 = new String[1];
      attributes2.keys = stringArray0;
      FormElement formElement0 = new FormElement(tag0, "Tfjp&-eqyj#PhJb=", attributes2);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("muted", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      // Undeclared exception!
      try { 
        formElement0.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "5{bj'j,yt=ZZQ8I", attributes0);
      formElement0.reparentChild(formElement0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(formElement0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("name", "name");
      FormElement formElement0 = new FormElement(tag0, "select", attributes1);
      FormElement formElement1 = formElement0.addElement(formElement0);
      formElement1.prependChild(formElement0);
      // Undeclared exception!
      formElement0.formData();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, false);
      Tag tag0 = Tag.valueOf("OPTIONS", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "OPTIONS", attributes0);
      FormElement formElement1 = formElement0.addElement((Element) null);
      // Undeclared exception!
      try { 
        formElement1.formData();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.FormElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      CDataNode cDataNode0 = new CDataNode("select");
      Attributes attributes0 = cDataNode0.attributes();
      attributes0.put("$}=(_|I.{", "select");
      Attribute attribute0 = Attribute.createFromEncoded("name", "name");
      Attributes attributes1 = attributes0.put(attribute0);
      String[] stringArray0 = new String[2];
      attributes0.keys = stringArray0;
      FormElement formElement0 = new FormElement(tag0, "M~*5OQ+QI*R{K.G,", attributes1);
      formElement0.addElement(formElement0);
      // Undeclared exception!
      try { 
        formElement0.formData();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = null;
      try {
        formElement0 = new FormElement(tag0, (String) null, attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      attributes0.add("name", "select");
      FormElement formElement0 = new FormElement(tag0, "name", attributes0);
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag1 = Tag.valueOf("textarea", parseSettings0);
      FormElement formElement1 = new FormElement(tag1, "z1@vgN1._G", attributes0);
      FormElement formElement2 = formElement0.addElement(formElement1);
      List<Connection.KeyVal> list0 = formElement2.formData();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "sOPT", attributes0);
      Attribute attribute0 = Attribute.createFromEncoded("name", "MeTHOD");
      attributes0.put(attribute0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("disabled", "Wr [");
      FormElement formElement0 = new FormElement(tag0, " ^<P/A\u0000Nf)A!_p&$", attributes1);
      FormElement formElement1 = formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("method", "select");
      FormElement formElement1 = formElement0.addElement(document0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("method", "POST", attributes0);
      attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: select
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Tag tag0 = Tag.valueOf("JCk");
      CDataNode cDataNode0 = new CDataNode("JCk");
      Attributes attributes0 = cDataNode0.attributes();
      Attribute attribute0 = new Attribute("action", "POST", attributes0);
      Attributes attributes1 = attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "JCk", attributes1);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not determine a form action URL for submit. Ensure you set a base URI when parsing.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      Elements elements0 = formElement0.elements();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Element element0 = new Element("select");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      formElement0.addElement(element0);
      formElement0.formData();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("oud not determine a form actionURL for submit. Ensure you set a base URI when parsing.");
      FormElement formElement0 = new FormElement(tag0, "oud not determine a form actionURL for submit. Ensure you set a base URI when parsing.", attributes0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(formElement0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
