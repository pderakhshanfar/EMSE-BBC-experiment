/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 17:19:51 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.Connection;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FormElement_ESTest extends FormElement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Tag tag0 = Tag.valueOf("ethd");
      CDataNode cDataNode0 = new CDataNode("ethd");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "ethd", attributes0);
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) formElement0;
      nodeArray0[1] = (Node) formElement0;
      nodeArray0[2] = (Node) cDataNode0;
      nodeArray0[3] = (Node) formElement0;
      nodeArray0[4] = (Node) cDataNode0;
      nodeArray0[5] = (Node) formElement0;
      formElement0.addChildren(nodeArray0);
      formElement0.removeChild(formElement0);
      assertEquals(1, formElement0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("Data collection must not be null");
      FormElement formElement0 = new FormElement(tag0, "http:/", attributes0);
      Connection connection0 = formElement0.submit();
      assertNotNull(connection0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Tag tag0 = Tag.valueOf("@");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "@", attributes0);
      Document document0 = Parser.parseBodyFragmentRelaxed("@", "%");
      FormElement formElement1 = formElement0.addElement(document0);
      Elements elements0 = formElement1.elements();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Tag tag0 = Tag.valueOf("method");
      CDataNode cDataNode0 = new CDataNode("method");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "method", attributes0);
      FormElement formElement0 = new FormElement(tag0, "type", attributes0);
      Element element1 = formElement0.prepend("thead");
      element1.appendTo(formElement0);
      FormElement formElement1 = formElement0.addElement(element0);
      assertEquals(2, formElement1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Tag tag0 = Tag.valueOf(">N>(");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, ">N>(", attributes0);
      Document document0 = new Document(">N>(");
      formElement0.siblingIndex = (-4162);
      FormElement formElement1 = formElement0.addElement(document0);
      assertSame(formElement0, formElement1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Tag tag0 = Tag.valueOf("article");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "POST", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      assertTrue(formElement1.isBlock());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.add(".%u#s", (String) null);
      Tag tag0 = Tag.valueOf(".%u#s");
      attributes0.keys = null;
      FormElement formElement0 = new FormElement(tag0, ".%u#s", attributes0);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Tag tag0 = Tag.valueOf("method");
      CDataNode cDataNode0 = new CDataNode("method");
      Attributes attributes0 = cDataNode0.attributes();
      Attribute attribute0 = Attribute.createFromEncoded("method", "type");
      Attributes attributes1 = attributes0.put(attribute0);
      String[] stringArray0 = new String[0];
      attributes1.keys = stringArray0;
      FormElement formElement0 = new FormElement(tag0, "type", attributes1);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("POST", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "POST", attributes0);
      // Undeclared exception!
      try { 
        formElement0.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Tag tag0 = Tag.valueOf("ewd");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "ewd", attributes0);
      CDataNode cDataNode0 = new CDataNode("ewd");
      Node node0 = cDataNode0.doClone(formElement0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Tag tag0 = Tag.valueOf(":0[DRSX@V;yr");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, ":0[DRSX@V;yr", attributes0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "Ei&,oe$,FlNR/E&", attributes0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(pseudoTextElement0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Tag tag0 = Tag.valueOf(">N>(");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, ">N>(", attributes0);
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) formElement0;
      nodeArray0[1] = (Node) formElement0;
      nodeArray0[2] = (Node) formElement0;
      nodeArray0[3] = (Node) formElement0;
      nodeArray0[4] = (Node) formElement0;
      nodeArray0[5] = (Node) formElement0;
      formElement0.addChildren(nodeArray0);
      formElement0.siblingIndex = (-4162);
      // Undeclared exception!
      try { 
        formElement0.removeChild(nodeArray0[0]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes1 = attributes0.add("name", "name");
      FormElement formElement0 = new FormElement(tag0, "select", attributes1);
      FormElement formElement1 = formElement0.addElement(formElement0);
      FormElement formElement2 = (FormElement)formElement1.appendTo(formElement0);
      // Undeclared exception!
      formElement2.formData();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("POST");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("POST");
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      FormElement formElement1 = formElement0.addElement((Element) null);
      // Undeclared exception!
      try { 
        formElement1.formData();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.FormElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("select", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("method");
      Attributes attributes0 = cDataNode0.attributes();
      attributes0.put("method", "ilVe");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "select", attributes0);
      FormElement formElement0 = new FormElement(tag0, "O", attributes0);
      FormElement formElement1 = formElement0.addElement(pseudoTextElement0);
      String[] stringArray0 = new String[1];
      attributes0.keys = stringArray0;
      // Undeclared exception!
      try { 
        formElement1.formData();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Tag tag0 = Tag.valueOf("M3*:}cH/d");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = null;
      try {
        formElement0 = new FormElement(tag0, (String) null, attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes1 = attributes0.add("name", "name");
      FormElement formElement0 = new FormElement(tag0, "            ", attributes1);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "</", attributes1);
      formElement0.addElement(pseudoTextElement0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Tag tag0 = Tag.valueOf("DISABLED");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "DISABLED", attributes0);
      Tag tag1 = Tag.valueOf("select");
      formElement0.attr("DISABLED", "DISABLED");
      FormElement formElement1 = new FormElement(tag1, "select", attributes0);
      formElement0.addElement(formElement1);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Tag tag0 = Tag.valueOf("CBGJ");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "CBGJ", attributes0);
      Tag tag1 = Tag.valueOf("select");
      FormElement formElement1 = new FormElement(tag1, "INSELECTINTABLE", attributes0);
      formElement0.addElement(formElement1);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Tag tag0 = Tag.valueOf("method");
      Attributes attributes0 = new Attributes();
      attributes0.add("method", "POST");
      FormElement formElement0 = new FormElement(tag0, "FONB", attributes0);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: FONB
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("-r ~L9Au7>+KE");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("rs \"C,$5AHZg*.xl6");
      Attributes attributes1 = attributes0.put("action", true);
      FormElement formElement0 = new FormElement(tag0, "H8H|T7P[2,R", attributes1);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not determine a form action URL for submit. Ensure you set a base URI when parsing.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("select", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "O", attributes0);
      Elements elements0 = formElement0.elements();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Tag tag0 = Tag.valueOf("method");
      CDataNode cDataNode0 = new CDataNode("method");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "method", attributes0);
      FormElement formElement0 = new FormElement(tag0, "type", attributes0);
      formElement0.addElement(element0);
      formElement0.formData();
  }
}
