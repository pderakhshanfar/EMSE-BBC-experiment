/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 19:07:06 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.Connection;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FormElement_ESTest extends FormElement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Tag tag0 = Tag.valueOf(";");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "_~$s([9ybD4", attributes0);
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) formElement0;
      nodeArray0[1] = (Node) formElement0;
      CDataNode cDataNode0 = new CDataNode(";");
      nodeArray0[2] = (Node) cDataNode0;
      nodeArray0[3] = (Node) formElement0;
      nodeArray0[4] = (Node) formElement0;
      nodeArray0[5] = (Node) formElement0;
      nodeArray0[6] = (Node) formElement0;
      nodeArray0[7] = (Node) formElement0;
      formElement0.addChildren(nodeArray0);
      formElement0.removeChild(cDataNode0);
      assertEquals(0, formElement0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Rpst");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "http:/", attributes0);
      Connection connection0 = formElement0.submit();
      assertNotNull(connection0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Tag tag0 = Tag.valueOf("S");
      FormElement formElement0 = new FormElement(tag0, "S", (Attributes) null);
      formElement0.addElement(formElement0);
      Elements elements0 = formElement0.elements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Tag tag0 = Tag.valueOf("S");
      FormElement formElement0 = new FormElement(tag0, "S", (Attributes) null);
      formElement0.siblingIndex = 9;
      FormElement formElement1 = formElement0.addElement(formElement0);
      assertSame(formElement0, formElement1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Tag tag0 = Tag.valueOf("HPWL{W%V");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "HPWL{W%V", attributes0);
      Document document0 = Document.createShell("x@A");
      FormElement formElement1 = formElement0.addElement(document0);
      formElement1.siblingIndex = (-1219);
      FormElement formElement2 = formElement1.addElement(document0);
      assertFalse(formElement2.isBlock());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("col", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "action", attributes0);
      Document document0 = Parser.parseBodyFragment("Data key value pairs must not be null", "tpAX4J");
      FormElement formElement1 = formElement0.addElement(document0);
      assertEquals("col", formElement1.nodeName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Tag tag0 = Tag.valueOf("m");
      CDataNode cDataNode0 = new CDataNode("option");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "option", attributes0);
      Document document0 = new Document("");
      formElement0.setParentNode(document0);
      FormElement formElement1 = formElement0.addElement(document0);
      assertEquals("m", formElement1.normalName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Tag tag0 = Tag.valueOf("|h^a!6>v,idma+nA:Zp");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      Document document0 = new Document("");
      FormElement formElement1 = formElement0.addElement(document0);
      List<Node> list0 = Parser.parseXmlFragment("b-mM+K*g2,QcG=", "EaZbVS.kNd)v|OZ=!");
      formElement1.childNodes = list0;
      FormElement formElement2 = formElement1.addElement(formElement0);
      assertFalse(formElement2.hasParent());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Tag tag0 = Tag.valueOf("HPWL{W%V");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("9:M<ObetU:GL&s", true);
      FormElement formElement0 = new FormElement(tag0, "HPWL{W%V", attributes0);
      attributes1.keys = null;
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Tag tag0 = Tag.valueOf("E6&k#IO");
      Attributes attributes0 = new Attributes();
      attributes0.put("PST", true);
      Attributes attributes1 = attributes0.add("E6&k#IO", "?fZYv[SNhI]t6");
      Attributes attributes2 = attributes1.put("?fZYv[SNhI]t6", "?fZYv[SNhI]t6");
      String[] stringArray0 = new String[3];
      attributes1.putIgnoreCase("NZPST", "E6&k#IO");
      attributes1.keys = stringArray0;
      FormElement formElement0 = new FormElement(tag0, "E6&k#IO", attributes2);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.parser.TokeniserState");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, ":containsData", attributes0);
      // Undeclared exception!
      try { 
        formElement0.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.parser.TokeniserState");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, ":containsData", attributes0);
      CDataNode cDataNode0 = new CDataNode(":containsData");
      Node node0 = cDataNode0.doClone(formElement0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("name", "select");
      FormElement formElement0 = new FormElement(tag0, "name", attributes1);
      FormElement formElement1 = formElement0.addElement(formElement0);
      formElement1.appendChild(formElement0);
      // Undeclared exception!
      formElement0.formData();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("}}RF\"1/!Z", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("Y17Q,H.R^Nw");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "}}RF\"1/!Z", attributes0);
      FormElement formElement1 = formElement0.addElement((Element) null);
      // Undeclared exception!
      try { 
        formElement1.formData();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.FormElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Tag tag0 = Tag.valueOf("input");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("name", "input");
      FormElement formElement0 = new FormElement(tag0, "TYPE", attributes1);
      String[] stringArray0 = new String[0];
      attributes1.vals = stringArray0;
      formElement0.addElement(formElement0);
      // Undeclared exception!
      try { 
        formElement0.formData();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Tag tag0 = Tag.valueOf("`");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = null;
      try {
        formElement0 = new FormElement(tag0, (String) null, attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Tag tag0 = Tag.valueOf("input");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("name", "name", attributes0);
      Attributes attributes1 = attributes0.put("TYPE", "radio");
      FormElement formElement0 = new FormElement(tag0, "name", attributes0);
      attributes1.put(attribute0);
      formElement0.addElement(formElement0);
      FormElement formElement1 = (FormElement)formElement0.val("org.jsoup.parser.Token$TokenType");
      attributes1.put("checked", "?");
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Tag tag0 = Tag.valueOf("input");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("name", "name", attributes0);
      Attributes attributes1 = attributes0.put("TYPE", "radio");
      FormElement formElement0 = new FormElement(tag0, "name", attributes0);
      attributes1.put(attribute0);
      formElement0.addElement(formElement0);
      attributes1.put("checked", "?");
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Tag tag0 = Tag.valueOf("input");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("name", "name", attributes0);
      Attributes attributes1 = attributes0.put("TYPE", "radio");
      FormElement formElement0 = new FormElement(tag0, "name", attributes0);
      attributes1.put(attribute0);
      formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Tag tag0 = Tag.valueOf("input");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("name", "name");
      attributes0.put("TYPE", "checkbox");
      FormElement formElement0 = new FormElement(tag0, "Charset must not be null", attributes1);
      FormElement formElement1 = formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Tag tag0 = Tag.valueOf("input");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("name", "input");
      Attributes attributes1 = attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "6M`]T}s", attributes1);
      Tag tag1 = Tag.valueOf("select");
      FormElement formElement1 = new FormElement(tag1, "input", attributes1);
      FormElement formElement2 = formElement0.addElement(formElement1);
      List<Connection.KeyVal> list0 = formElement2.formData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Tag tag0 = Tag.valueOf("input");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("name", "input");
      attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "6M`]T}s", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Tag tag0 = Tag.valueOf("input");
      CDataNode cDataNode0 = new CDataNode("input");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.put("disabled", ":contains");
      FormElement formElement0 = new FormElement(tag0, "input", (Attributes) null);
      Element element0 = new Element(tag0, "d|G5", attributes1);
      formElement0.addElement(element0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Tag tag0 = Tag.valueOf("input");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "6M`]T}s", attributes0);
      formElement0.addElement(formElement0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Tag tag0 = Tag.valueOf("input");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("method", "POST");
      FormElement formElement0 = new FormElement(tag0, "input", attributes1);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: input
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Tag tag0 = Tag.valueOf("`");
      Attributes attributes0 = new Attributes();
      attributes0.put("action", "el;yfXFS~muc.;D");
      FormElement formElement0 = new FormElement(tag0, "Could not determine a form action URL for submit. Ensure you set a base URI when parsing.", attributes0);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not determine a form action URL for submit. Ensure you set a base URI when parsing.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Tag tag0 = Tag.valueOf("HPWL{W%V");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "HPWL{W%V", attributes0);
      Elements elements0 = formElement0.elements();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Tag tag0 = Tag.valueOf("HPWL{W%V");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "HPWL{W%V", attributes0);
      Document document0 = Document.createShell("x@A");
      FormElement formElement1 = formElement0.addElement(document0);
      formElement1.formData();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Tag tag0 = Tag.valueOf("m");
      CDataNode cDataNode0 = new CDataNode("option");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "option", attributes0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(formElement0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
