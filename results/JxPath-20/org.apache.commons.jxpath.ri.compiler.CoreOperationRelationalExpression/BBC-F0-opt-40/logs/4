* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-40
* Going to generate test cases for class: org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression
* Starting Client-0
* Connecting to master process on port 3736
* Analyzing classpath: 
  - subjects/buggy-versions/JxPath-20/target/classes
  - subjects/buggy-versions/JxPath-20/src/java
  - subjects/buggy-versions/JxPath-20/target/lib/commons-beanutils-1.7.0.jar
  - subjects/buggy-versions/JxPath-20/target/lib/commons-logging-1.1.jar
  - subjects/buggy-versions/JxPath-20/target/lib/jdom-1.0.jar
  - subjects/buggy-versions/JxPath-20/target/lib/jsp-api-2.0.jar
  - subjects/buggy-versions/JxPath-20/target/lib/junit-3.8.1.jar
  - subjects/buggy-versions/JxPath-20/target/lib/mockrunner-0.4.1.jar
  - subjects/buggy-versions/JxPath-20/target/lib/mockrunner-jdk1.3-j2ee1.3-0.4.jar
  - subjects/buggy-versions/JxPath-20/target/lib/servletapi-2.4.jar
  - subjects/buggy-versions/JxPath-20/target/lib/xerces-2.4.0.jar
  - subjects/buggy-versions/JxPath-20/target/lib/xml-apis-2.0.2.jar
* Finished analyzing classpath
* Generating tests for class org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 205
* Using seed 466615948
* Starting evolution
bbc usage percentage is: 40%
* Initial Number of Goals in DynaMOSA = 59 / 205
[MASTER] 00:23:24.392 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
*C2*
* Search finished after 603s and 1157 generations, 756076 statements, best individual has fitness: 16.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 98%
* Total number of goals: 42
* Number of covered goals: 41
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 97%
* Total number of goals: 39
* Number of covered goals: 38
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 86%
* Total number of goals: 7
* Number of covered goals: 6
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 99%
* Total number of goals: 72
* Number of covered goals: 71
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 29%
* Total number of goals: 7
* Number of covered goals: 2
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 3
* Number of covered goals: 3
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 3
* Number of covered goals: 3
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 97%
* Total number of goals: 39
* Number of covered goals: 38
* Generated 14 tests with total length 151
* Resulting test suite's coverage: 84% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 40%
* Compiling and checking tests
[MASTER] 00:33:31.753 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:33:32.506 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NoClassDefFoundError
[MASTER] 00:33:32.506 [logback-1] WARN  JUnitAnalyzer - Failing test:
 QName qName0 = new QName(":zf 1 $fcS");
VariableReference variableReference0 = new VariableReference(qName0);
Locale locale0 = Locale.ITALIAN;
NodePointer.newNodePointer(qName0, variableReference0, locale0);

[MASTER] 00:33:32.806 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NoClassDefFoundError
[MASTER] 00:33:32.806 [logback-1] WARN  JUnitAnalyzer - Failing test:
 QName qName0 = new QName(":zf 1 $fcS");
VariableReference variableReference0 = new VariableReference(qName0);
Locale locale0 = Locale.CHINA;
NodePointer.newNodePointer(qName0, variableReference0, locale0);

[MASTER] 00:33:33.400 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NoClassDefFoundError
[MASTER] 00:33:33.400 [logback-1] WARN  JUnitAnalyzer - Failing test:
 QName qName0 = new QName(":zf +O fcS");
VariableReference variableReference0 = new VariableReference(qName0);
Locale locale0 = Locale.SIMPLIFIED_CHINESE;
NodePointer.newNodePointer(qName0, variableReference0, locale0);

[MASTER] 00:33:33.691 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NoClassDefFoundError
[MASTER] 00:33:33.691 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Locale locale0 = Locale.TAIWAN;
QName qName0 = new QName("");
NodePointer.newNodePointer(qName0, qName0, locale0);

[MASTER] 00:33:33.989 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NoClassDefFoundError
[MASTER] 00:33:33.989 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Expression[] expressionArray0 = new Expression[8];
Constant constant0 = new Constant((Number) null);
CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
QName qName0 = new QName("");
VariableReference variableReference0 = new VariableReference(qName0);
CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationNotEqual0, expressionArray0[0]);
CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationDivide0, expressionArray0[1]);
Locale locale0 = new Locale("", "");
NodePointer.newNodePointer(qName0, coreOperationNotEqual0, locale0);

[MASTER] 00:33:34.648 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NoClassDefFoundError
[MASTER] 00:33:34.648 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Expression[] expressionArray0 = new Expression[8];
Constant constant0 = new Constant((Number) null);
expressionArray0[0] = (Expression) constant0;
CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
expressionArray0[1] = (Expression) coreOperationNotEqual0;
QName qName0 = new QName("");
VariableReference variableReference0 = new VariableReference(qName0);
CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationNotEqual0, expressionArray0[0]);
CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationDivide0, expressionArray0[1]);
CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationLessThan0, variableReference0);
Expression[] expressionArray1 = new Expression[1];
expressionArray1[0] = (Expression) coreOperationLessThan0;
coreOperationGreaterThan0.args = expressionArray1;
CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationGreaterThan0, coreOperationNotEqual0);
Locale locale0 = new Locale("", "");
NodePointer.newNodePointer(qName0, coreOperationNotEqual0, locale0);

[MASTER] 00:33:35.117 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 00:33:35.118 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Constant constant0 = new Constant((Number) null);
CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
QName qName0 = new QName("");
CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationNotEqual0, coreOperationNotEqual0);
CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, coreOperationGreaterThan0);
Expression[] expressionArray0 = new Expression[4];
CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
expressionArray0[0] = (Expression) coreOperationOr0;
expressionArray0[2] = (Expression) constant0;
ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(extensionFunction0, coreOperationSubtract0);
CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreFunction0, coreOperationNotEqual1);
CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[2], coreOperationEqual0);
coreOperationGreaterThanOrEqual0.computeValue((EvalContext) null);

[MASTER] 00:33:35.299 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NoClassDefFoundError
[MASTER] 00:33:35.299 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual((Expression) null, (Expression) null);
QName qName0 = new QName("Factory did not assign a collection to variable '");
VariableReference variableReference0 = new VariableReference(qName0);
CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(variableReference0, coreOperationNotEqual0);
CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan((Expression) null, (Expression) null);
CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationDivide0, coreOperationLessThan0);
CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationGreaterThan0, coreOperationDivide0);
Locale locale0 = new Locale("", "");
NodePointer.newNodePointer(qName0, coreOperationGreaterThanOrEqual0, locale0);

* Writing tests to file
* Writing JUnit test case 'CoreOperationRelationalExpression_ESTest' to results/JxPath-20/org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression/BBC-F0-opt-40/tests/4
* Done!

* Computation finished
