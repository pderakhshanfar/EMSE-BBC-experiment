/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 08 00:35:10 GMT 2021
 */

package org.apache.commons.jxpath.ri.compiler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.AncestorContext;
import org.apache.commons.jxpath.ri.axes.AttributeContext;
import org.apache.commons.jxpath.ri.axes.DescendantContext;
import org.apache.commons.jxpath.ri.axes.PredicateContext;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.CoreFunction;
import org.apache.commons.jxpath.ri.compiler.CoreOperationDivide;
import org.apache.commons.jxpath.ri.compiler.CoreOperationEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMod;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNegate;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationUnion;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.ExpressionPath;
import org.apache.commons.jxpath.ri.compiler.ExtensionFunction;
import org.apache.commons.jxpath.ri.compiler.LocationPath;
import org.apache.commons.jxpath.ri.compiler.NameAttributeTest;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.compiler.Step;
import org.apache.commons.jxpath.ri.compiler.VariableReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CoreOperationRelationalExpression_ESTest extends CoreOperationRelationalExpression_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(locationPath0, locationPath0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("@mPyPt=O$l");
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, processingInstructionTest0);
      // Undeclared exception!
      try { 
        JXPathContext.newContext((Object) descendantContext0);
       //  fail("Expecting exception: ClassCastException");
       // Unstable assertion
      } catch(ClassCastException e) {
         //
         // org.apache.commons.jxpath.ri.JXPathContextFactoryReferenceImpl cannot be cast to org.apache.commons.jxpath.JXPathContextFactory
         //
         verifyException("org.apache.commons.jxpath.JXPathContextFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(locationPath0, locationPath0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("?bTwT|b6|{");
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, processingInstructionTest0);
      // Undeclared exception!
      try { 
        JXPathContext.newContext((Object) descendantContext0);
       //  fail("Expecting exception: ClassCastException");
       // Unstable assertion
      } catch(ClassCastException e) {
         //
         // org.apache.commons.jxpath.ri.JXPathContextFactoryReferenceImpl cannot be cast to org.apache.commons.jxpath.JXPathContextFactory
         //
         verifyException("org.apache.commons.jxpath.JXPathContextFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(locationPath0, locationPath0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationLessThanOrEqual0, locationPath0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression");
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, processingInstructionTest0);
      // Undeclared exception!
      try { 
        JXPathContext.newContext((Object) processingInstructionTest0);
       //  fail("Expecting exception: ClassCastException");
       // Unstable assertion
      } catch(ClassCastException e) {
         //
         // org.apache.commons.jxpath.ri.JXPathContextFactoryReferenceImpl cannot be cast to org.apache.commons.jxpath.JXPathContextFactory
         //
         verifyException("org.apache.commons.jxpath.JXPathContextFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(locationPath0, locationPath0);
      // Undeclared exception!
      try { 
        JXPathContext.newContext((Object) null);
       //  fail("Expecting exception: ClassCastException");
       // Unstable assertion
      } catch(ClassCastException e) {
         //
         // org.apache.commons.jxpath.ri.JXPathContextFactoryReferenceImpl cannot be cast to org.apache.commons.jxpath.JXPathContextFactory
         //
         verifyException("org.apache.commons.jxpath.JXPathContextFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(locationPath0, locationPath0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("?bTwT|b6|{");
      FileSystemHandling.shouldAllThrowIOExceptions();
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, processingInstructionTest0);
      // Undeclared exception!
      try { 
        JXPathContext.newContext((Object) descendantContext0);
       //  fail("Expecting exception: ClassCastException");
       // Unstable assertion
      } catch(ClassCastException e) {
         //
         // org.apache.commons.jxpath.ri.JXPathContextFactoryReferenceImpl cannot be cast to org.apache.commons.jxpath.JXPathContextFactory
         //
         verifyException("org.apache.commons.jxpath.JXPathContextFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      QName qName0 = new QName(">.{xm^}wz31CW?2:");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(variableReference0, variableReference0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(variableReference0, coreOperationEqual0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationDivide0, variableReference0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        JXPathContext.newContext(object0);
       //  fail("Expecting exception: ClassCastException");
       // Unstable assertion
      } catch(ClassCastException e) {
         //
         // org.apache.commons.jxpath.ri.JXPathContextFactoryReferenceImpl cannot be cast to org.apache.commons.jxpath.JXPathContextFactory
         //
         verifyException("org.apache.commons.jxpath.JXPathContextFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Constant constant0 = new Constant("");
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationNegate0, coreOperationNegate0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThan0, constant0);
      Expression[] expressionArray0 = new Expression[0];
      coreOperationLessThanOrEqual0.args = expressionArray0;
      // Undeclared exception!
      try { 
        coreOperationLessThanOrEqual0.computeValue((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("H$;GY?mMNwWrm/F0m|O");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(extensionFunction0, extensionFunction0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(nameAttributeTest0, extensionFunction0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationUnion0, coreOperationLessThanOrEqual0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreOperationLessThanOrEqual0.computeValue(evalContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Constant constant0 = new Constant("6JiJZc{Ba@2Mb4");
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreFunction0, expressionArray0[1]);
      // Undeclared exception!
      try { 
        coreOperationLessThanOrEqual1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last('6JiJZc{Ba@2Mb4', '6JiJZc{Ba@2Mb4', org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Constant constant0 = new Constant("");
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationMod0, coreOperationMod0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThan0, constant0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThanOrEqual0, constant0);
      QName qName0 = new QName("", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "org.apache.commons.jxpath.ri.axes.ChildContext");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreOperationLessThanOrEqual0.computeValue(ancestorContext0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Constant constant0 = new Constant("org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression");
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      Object object0 = coreOperationLessThanOrEqual0.computeValue((EvalContext) null);
      assertEquals(false, object0);
      
      boolean boolean0 = coreOperationLessThanOrEqual0.isSymmetric();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThanOrEqual0, constant0);
      coreOperationGreaterThanOrEqual0.computeContextDependent();
      coreOperationLessThanOrEqual0.computeContextDependent();
      coreOperationGreaterThanOrEqual0.getSymbol();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(coreOperationGreaterThanOrEqual0, constant0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual1);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationLessThanOrEqual0, coreOperationEqual0);
      coreOperationGreaterThanOrEqual0.getSymbol();
      coreOperationGreaterThan0.isContextDependent();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThanOrEqual1, constant0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationEqual0, coreOperationLessThan0);
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(coreOperationGreaterThan0, coreOperationLessThanOrEqual1);
      Object object1 = coreOperationLessThan1.compute((EvalContext) null);
      assertTrue(object1.equals((Object)boolean0));
      
      CoreOperationLessThan coreOperationLessThan2 = new CoreOperationLessThan(coreOperationGreaterThanOrEqual1, constant0);
      boolean boolean1 = coreOperationLessThanOrEqual0.evaluateCompare(1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Constant constant0 = new Constant("org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression");
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      EvalContext evalContext0 = null;
      coreOperationLessThanOrEqual0.computeValue((EvalContext) null);
      coreOperationLessThanOrEqual0.isSymmetric();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThanOrEqual0, constant0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      // Undeclared exception!
      try { 
        coreOperationLessThanOrEqual1.iteratePointers((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Expression", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Constant constant0 = new Constant("org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression");
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      Object object0 = coreOperationLessThanOrEqual0.computeValue((EvalContext) null);
      assertEquals(false, object0);
      
      boolean boolean0 = coreOperationLessThanOrEqual0.isSymmetric();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThanOrEqual0, constant0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      coreOperationLessThanOrEqual0.computeContextDependent();
      coreOperationGreaterThanOrEqual0.toString();
      coreOperationGreaterThanOrEqual0.getSymbol();
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, coreOperationLessThanOrEqual0);
      coreOperationGreaterThan0.getSymbol();
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-4707), expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThanOrEqual0, coreFunction0);
      Object object1 = coreOperationLessThan0.compute((EvalContext) null);
      assertTrue(object1.equals((Object)boolean0));
      
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(coreOperationLessThanOrEqual0, coreFunction0);
      boolean boolean1 = coreOperationLessThan0.evaluateCompare(3);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Constant constant0 = new Constant("org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression");
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      constant0.toString();
      coreOperationLessThanOrEqual0.computeValue((EvalContext) null);
      boolean boolean0 = coreOperationLessThanOrEqual0.isSymmetric();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThanOrEqual0, constant0);
      coreOperationGreaterThanOrEqual0.computeContextDependent();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationGreaterThanOrEqual0, constant0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationLessThanOrEqual1, coreOperationLessThanOrEqual1);
      coreOperationGreaterThan0.getSymbol();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual1);
      Object object0 = coreOperationLessThan0.compute((EvalContext) null);
      assertTrue(object0.equals((Object)boolean0));
      
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(constant0, coreOperationLessThanOrEqual1);
      boolean boolean1 = coreOperationLessThan1.evaluateCompare((-1035));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Constant constant0 = new Constant("org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression");
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      Object object0 = coreOperationLessThanOrEqual0.computeValue((EvalContext) null);
      assertEquals(false, object0);
      
      boolean boolean0 = coreOperationLessThanOrEqual0.isSymmetric();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThanOrEqual0, constant0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      coreOperationLessThanOrEqual0.computeContextDependent();
      coreOperationGreaterThanOrEqual0.toString();
      coreOperationGreaterThanOrEqual0.getSymbol();
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationGreaterThanOrEqual0, (Expression) null);
      coreOperationGreaterThan0.getSymbol();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThanOrEqual0, constant0);
      Object object1 = coreOperationLessThan0.compute((EvalContext) null);
      assertTrue(object1.equals((Object)boolean0));
      
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(coreOperationLessThan0, coreOperationGreaterThanOrEqual0);
      boolean boolean1 = coreOperationLessThan1.evaluateCompare((-1035));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte) (-103);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationUnion0, coreOperationUnion0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationDivide0, coreOperationDivide0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      coreOperationGreaterThanOrEqual0.evaluateCompare(953);
      coreOperationGreaterThanOrEqual0.isSymmetric();
      coreOperationGreaterThanOrEqual0.evaluateCompare(953);
      // Undeclared exception!
      try { 
        coreOperationGreaterThanOrEqual0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationUnion", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Constant constant0 = new Constant("org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression");
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      coreOperationLessThanOrEqual0.computeValue((EvalContext) null);
      coreOperationLessThanOrEqual0.isSymmetric();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThanOrEqual0, constant0);
      coreOperationGreaterThanOrEqual0.computeContextDependent();
      coreOperationLessThanOrEqual0.computeContextDependent();
      coreOperationGreaterThanOrEqual0.toString();
      coreOperationGreaterThanOrEqual0.getSymbol();
      coreOperationLessThanOrEqual0.isSymmetric();
      coreOperationGreaterThanOrEqual0.getSymbol();
      String string0 = coreOperationGreaterThanOrEqual0.getSymbol();
      assertEquals(">=", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Expression expression0 = null;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual((Expression) null, (Expression) null);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      int int0 = 3;
      coreOperationGreaterThan0.evaluateCompare(3);
      coreOperationGreaterThanOrEqual0.evaluateCompare(1510);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = null;
      coreOperationGreaterThan0.args = expressionArray0;
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      AttributeContext attributeContext0 = new AttributeContext(ancestorContext0, processingInstructionTest0);
      attributeContext0.getContextNodePointer();
      processingInstructionTest0.toString();
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationGreaterThanOrEqual0, coreOperationGreaterThan0);
      PredicateContext predicateContext0 = new PredicateContext(attributeContext0, coreOperationNotEqual0);
      // Undeclared exception!
      try { 
        coreOperationGreaterThanOrEqual0.compute(predicateContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      QName qName0 = new QName("^04", "^04");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(variableReference0, variableReference0);
      coreOperationGreaterThanOrEqual0.evaluateCompare(1860);
      int int0 = coreOperationGreaterThanOrEqual0.getPrecedence();
      assertEquals(3, int0);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      coreOperationLessThan0.isContextDependent();
      coreOperationLessThan0.evaluateCompare(1860);
      coreOperationGreaterThanOrEqual0.evaluateCompare(0);
      boolean boolean0 = coreOperationLessThan0.isSymmetric();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Constant constant0 = new Constant(byte0);
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], expressionArray0[3]);
      expressionArray0[4] = (Expression) coreOperationGreaterThan0;
      expressionArray0[5] = (Expression) constant0;
      Step[] stepArray0 = new Step[8];
      QName qName0 = new QName("  ", "  ");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step((byte)0, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((byte)0, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-270), nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((byte)0, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step((byte)0, nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step((-2474), nodeNameTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step((byte)0, nodeNameTest0, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step(16, nodeNameTest0, expressionArray0);
      stepArray0[7] = step7;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(expressionPath0, expressionArray0[2]);
      assertEquals(">", coreOperationGreaterThan1.getSymbol());
  }
}
