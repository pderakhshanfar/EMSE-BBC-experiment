/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 01:51:47 GMT 2021
 */

package org.apache.commons.jxpath.ri.compiler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.jxpath.BasicNodeSet;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.AncestorContext;
import org.apache.commons.jxpath.ri.axes.DescendantContext;
import org.apache.commons.jxpath.ri.axes.InitialContext;
import org.apache.commons.jxpath.ri.axes.NodeSetContext;
import org.apache.commons.jxpath.ri.axes.ParentContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import org.apache.commons.jxpath.ri.axes.UnionContext;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.CoreFunction;
import org.apache.commons.jxpath.ri.compiler.CoreOperation;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAnd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationDivide;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMod;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNegate;
import org.apache.commons.jxpath.ri.compiler.CoreOperationOr;
import org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract;
import org.apache.commons.jxpath.ri.compiler.CoreOperationUnion;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.ExpressionPath;
import org.apache.commons.jxpath.ri.compiler.ExtensionFunction;
import org.apache.commons.jxpath.ri.compiler.NameAttributeTest;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.Step;
import org.apache.commons.jxpath.ri.compiler.VariableReference;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CoreOperationRelationalExpression_ESTest extends CoreOperationRelationalExpression_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      QName qName0 = new QName("*[ZF*N*CteV!LziC9", "*[ZF*N*CteV!LziC9");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(variableReference0, variableReference0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "*[ZF*N*CteV!LziC9");
      Locale locale0 = Locale.CANADA;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(variableReference0, variableReference0);
      BasicVariables basicVariables0 = (BasicVariables)jXPathContextReferenceImpl0.getVariables();
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)rootContext0.getJXPathContext();
      FileSystemHandling.shouldAllThrowIOExceptions();
      RootContext rootContext1 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      VariablePointer variablePointer1 = (VariablePointer)variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl1, (Object) rootContext1);
      RootContext rootContext2 = new RootContext(jXPathContextReferenceImpl0, variablePointer1);
      rootContext1.getAbsoluteRootContext();
      InitialContext initialContext0 = new InitialContext(rootContext0);
      BasicNodeSet basicNodeSet0 = (BasicNodeSet)initialContext0.getNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(rootContext0, basicNodeSet0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.272.b10-0.fc31.x86_64/jre/lib/jxpath.properties");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "<<unknown namespace>>");
      AncestorContext ancestorContext0 = new AncestorContext(rootContext2, false, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreOperationLessThanOrEqual0.computeValue(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      QName qName0 = new QName("*[ZF*N*CteV!LziC9", "*[ZF*N*CteV!LziC9");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(variableReference0, variableReference0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "*[ZF*N*CteV!LziC9");
      Locale locale0 = Locale.CANADA;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(variableReference0, variableReference0);
      BasicVariables basicVariables0 = (BasicVariables)jXPathContextReferenceImpl0.getVariables();
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)rootContext1.getJXPathContext();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BasicVariables basicVariables1 = (BasicVariables)jXPathContextReferenceImpl1.getVariables();
      VariablePointer variablePointer1 = new VariablePointer(basicVariables1, qName0);
      RootContext rootContext2 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      VariablePointer variablePointer2 = new VariablePointer(basicVariables0, qName0);
      Boolean boolean0 = (Boolean)coreOperationLessThan0.compute(rootContext2);
      assertFalse(boolean0);
      
      variablePointer2.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) boolean0);
      rootContext1.getAbsoluteRootContext();
      InitialContext initialContext0 = new InitialContext(rootContext0);
      initialContext0.getNodeSet();
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThan0, coreOperationLessThan0);
      Expression[] expressionArray0 = new Expression[0];
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(nameAttributeTest0, expressionArray0, stepArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(nameAttributeTest0, expressionPath0);
      coreOperationLessThanOrEqual0.computeValue(rootContext1);
      Boolean boolean1 = (Boolean)coreOperationLessThanOrEqual0.computeValue(rootContext2);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      QName qName0 = new QName("*[ZF*N*CteV!LziC9", "*[ZF*N*CteV!LziC9");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(variableReference0, variableReference0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "*[ZF*N*CteV!LziC9");
      Locale locale0 = Locale.CANADA;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(variableReference0, variableReference0);
      BasicVariables basicVariables0 = (BasicVariables)jXPathContextReferenceImpl0.getVariables();
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)rootContext1.getJXPathContext();
      FileSystemHandling.shouldAllThrowIOExceptions();
      VariablePointer variablePointer1 = (VariablePointer)variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl1, (Object) "<<unknown namespace>>");
      RootContext rootContext2 = new RootContext(jXPathContextReferenceImpl0, variablePointer1);
      rootContext0.getAbsoluteRootContext();
      InitialContext initialContext0 = new InitialContext(rootContext0);
      BasicNodeSet basicNodeSet0 = (BasicNodeSet)initialContext0.getNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(rootContext1, basicNodeSet0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "<<unknown namespace>>");
      AncestorContext ancestorContext0 = new AncestorContext(initialContext0, false, nodeNameTest0);
      Boolean boolean0 = (Boolean)coreOperationLessThanOrEqual0.computeValue(ancestorContext0);
      assertFalse(boolean0);
      
      int int0 = coreOperationLessThanOrEqual0.getPrecedence();
      assertEquals(3, int0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationLessThan0, coreOperationLessThan0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual2 = new CoreOperationLessThanOrEqual(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual1);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThanOrEqual0, variableReference0);
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(variableReference0, coreOperationDivide0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationDivide0, coreOperationLessThanOrEqual2);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual3 = new CoreOperationLessThanOrEqual(coreOperationSubtract0, coreOperationLessThan1);
      boolean boolean1 = coreOperationLessThanOrEqual3.isSymmetric();
      assertFalse(boolean1);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual4 = new CoreOperationLessThanOrEqual(variableReference0, variableReference0);
      boolean boolean2 = coreOperationLessThanOrEqual1.evaluateCompare(3);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      QName qName0 = new QName("Invalid XPath: '", "Invalid XPath: '");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(variableReference0, variableReference0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "Invalid XPath: '");
      Locale locale0 = Locale.FRANCE;
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, coreOperationLessThan0, locale0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationLessThan0, variableReference0);
      coreOperationLessThanOrEqual0.computeValue(rootContext0);
      Expression[] expressionArray0 = new Expression[8];
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[4] = (Expression) coreOperationLessThan0;
      expressionArray0[5] = (Expression) coreOperationLessThan0;
      expressionArray0[6] = (Expression) coreOperationLessThan0;
      expressionArray0[7] = (Expression) coreOperationLessThan0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(variableReference0, extensionFunction0);
      coreOperationGreaterThan0.evaluateCompare(Integer.MIN_VALUE);
      RootContext rootContext1 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4702);
      DescendantContext descendantContext0 = new DescendantContext(rootContext1, false, nodeTypeTest0);
      EvalContext[] evalContextArray0 = new EvalContext[6];
      evalContextArray0[0] = (EvalContext) rootContext1;
      evalContextArray0[1] = (EvalContext) rootContext1;
      RootContext rootContext2 = rootContext1.getRootContext();
      evalContextArray0[2] = (EvalContext) rootContext2;
      evalContextArray0[3] = (EvalContext) rootContext1;
      ParentContext parentContext0 = new ParentContext(evalContextArray0[1], nodeTypeTest0);
      evalContextArray0[4] = (EvalContext) parentContext0;
      evalContextArray0[5] = (EvalContext) rootContext0;
      UnionContext unionContext0 = new UnionContext(descendantContext0, evalContextArray0);
      // Undeclared exception!
      try { 
        coreOperationGreaterThan0.computeValue(unionContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined function: Invalid XPath: ':Invalid XPath: '
         //
         verifyException("org.apache.commons.jxpath.ri.JXPathContextReferenceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      QName qName0 = new QName("", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(variableReference0, variableReference0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      Locale.lookup(linkedList0, linkedList2);
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, jXPathContext0, (Locale) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, "", nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(variableReference0, variableReference0);
      coreOperationLessThan0.iteratePointers(rootContext0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.272.b10-0.fc31.x86_64/jre/lib/jxpath.properties");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      coreOperationGreaterThanOrEqual0.evaluateCompare((-1911));
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(coreOperationLessThan0, variableReference0);
      coreOperationGreaterThanOrEqual0.isSymmetric();
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThan1, coreOperationLessThan1);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(nameAttributeTest0, coreOperationLessThan0);
      coreOperationLessThanOrEqual0.computeValue(rootContext0);
      coreOperationLessThanOrEqual0.getPrecedence();
      Expression[] expressionArray0 = new Expression[0];
      coreOperationLessThanOrEqual0.args = expressionArray0;
      rootContext0.reset();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      // Undeclared exception!
      try { 
        coreOperationLessThanOrEqual0.computeValue(rootContext0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      QName qName0 = new QName("", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(variableReference0, variableReference0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.lookup(linkedList0, linkedList1);
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, jXPathContext0, (Locale) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, "", nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(variableReference0, variableReference0);
      coreOperationGreaterThanOrEqual0.evaluateCompare((-1911));
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(coreOperationLessThan0, variableReference0);
      coreOperationGreaterThanOrEqual0.isSymmetric();
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThan1, coreOperationLessThan1);
      coreOperationGreaterThanOrEqual0.evaluateCompare((-1014));
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationLessThan1, nameAttributeTest0);
      CoreOperationLessThan coreOperationLessThan2 = new CoreOperationLessThan(coreOperationLessThan1, coreOperationMod0);
      coreOperationGreaterThanOrEqual0.isSymmetric();
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(variableReference0, coreOperationGreaterThanOrEqual0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationLessThan2, nameAttributeTest1);
      // Undeclared exception!
      try { 
        coreOperationLessThanOrEqual0.computeValue(rootContext0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      QName qName0 = new QName((String) null, "|N8]");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(variableReference0, variableReference0);
      coreOperationLessThanOrEqual0.getSymbol();
      coreOperationLessThanOrEqual0.toString();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThanOrEqual0, variableReference0);
      coreOperationGreaterThanOrEqual0.evaluateCompare(0);
      coreOperationLessThanOrEqual0.getSymbol();
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      coreOperationGreaterThan0.getSymbol();
      boolean boolean0 = coreOperationGreaterThan0.isSymmetric();
      coreOperationGreaterThanOrEqual0.evaluateCompare(0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThan0, coreOperationGreaterThanOrEqual0);
      Locale locale0 = Locale.forLanguageTag("");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, ">", locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, coreOperationLessThan0, nodePointer0);
      variableReference0.toString();
      jXPathContextReferenceImpl0.getRelativeContext(nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      Constant constant0 = new Constant("<=");
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(constant0, coreOperationLessThan0);
      coreOperationLessThan1.iterate(rootContext0);
      int int0 = coreOperationLessThan0.getPrecedence();
      assertEquals(3, int0);
      
      Constant constant1 = new Constant("org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002 <= org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002");
      CoreOperationLessThan coreOperationLessThan2 = new CoreOperationLessThan(coreOperationLessThan1, constant1);
      coreOperationLessThan2.isSymmetric();
      coreOperationLessThanOrEqual0.getSymbol();
      Object object0 = coreOperationLessThan1.computeValue(rootContext0);
      assertTrue(object0.equals((Object)boolean0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      QName qName0 = new QName((String) null, "|N8]");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(variableReference0, variableReference0);
      coreOperationLessThanOrEqual0.getSymbol();
      coreOperationLessThanOrEqual0.toString();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThanOrEqual0, variableReference0);
      coreOperationGreaterThanOrEqual0.evaluateCompare(0);
      coreOperationLessThanOrEqual0.getSymbol();
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      coreOperationGreaterThan0.getSymbol();
      coreOperationGreaterThan0.isSymmetric();
      coreOperationGreaterThanOrEqual0.evaluateCompare(0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThan0, coreOperationGreaterThanOrEqual0);
      Locale locale0 = Locale.forLanguageTag("");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, ">", locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, coreOperationLessThan0, nodePointer0);
      variableReference0.toString();
      jXPathContextReferenceImpl0.getRelativeContext(nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      Constant constant0 = new Constant(Integer.MIN_VALUE);
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(constant0, coreOperationLessThan0);
      CoreOperationLessThan coreOperationLessThan2 = new CoreOperationLessThan(coreOperationGreaterThan0, constant0);
      coreOperationLessThan0.computeValue(rootContext0);
      coreOperationGreaterThanOrEqual0.isSymmetric();
      CoreOperationLessThan coreOperationLessThan3 = new CoreOperationLessThan(coreOperationLessThan2, coreOperationLessThan2);
      coreOperationLessThan3.computeValue(rootContext0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual((Expression) null, constant0);
      coreOperationGreaterThanOrEqual1.isSymmetric();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationGreaterThanOrEqual1, coreOperationGreaterThan0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationLessThan3);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual2 = new CoreOperationLessThanOrEqual(coreOperationNegate0, coreOperationGreaterThanOrEqual1);
      // Undeclared exception!
      try { 
        coreOperationLessThanOrEqual2.computeValue(rootContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      QName qName0 = new QName((String) null, "|N8]");
      VariableReference variableReference0 = new VariableReference(qName0);
      VariableReference variableReference1 = new VariableReference(qName0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(variableReference1, variableReference0);
      Object object0 = new Object();
      JXPathContext jXPathContext0 = JXPathContext.newContext(object0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      JXPathContext.newContext((Object) variableReference1);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      Locale.lookup(linkedList2, linkedList1);
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, (Object) null, (Locale) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, variableReference1, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      EvalContext evalContext0 = rootContext1.getAbsoluteRootContext();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "|N8]");
      DescendantContext descendantContext0 = new DescendantContext(evalContext0, true, nodeNameTest0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, descendantContext0, nodePointer0);
      DescendantContext descendantContext1 = new DescendantContext(rootContext0, false, nodeNameTest0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContext0, descendantContext1, nodePointer0);
      RootContext rootContext2 = new RootContext(jXPathContextReferenceImpl2, nodePointer0);
      coreOperationLessThan0.iterate(rootContext0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThan0, coreOperationLessThan0);
      coreOperationGreaterThanOrEqual0.evaluateCompare((-2147483646));
      Constant constant0 = new Constant("<<unknown namespace>>");
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThanOrEqual0, constant0);
      coreOperationLessThanOrEqual0.compute(rootContext0);
      Object object1 = coreOperationLessThanOrEqual0.computeValue(evalContext0);
      assertEquals(false, object1);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(variableReference0, coreOperationGreaterThanOrEqual0);
      coreOperationGreaterThanOrEqual0.evaluateCompare((-2493));
      coreOperationLessThanOrEqual0.getSymbol();
      boolean boolean0 = coreOperationLessThanOrEqual0.isSymmetric();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      QName qName0 = new QName((String) null, "|N8]");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(variableReference0, variableReference0);
      coreOperationLessThanOrEqual0.getSymbol();
      coreOperationLessThanOrEqual0.toString();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThanOrEqual0, variableReference0);
      coreOperationGreaterThanOrEqual0.evaluateCompare(0);
      coreOperationLessThanOrEqual0.getSymbol();
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      coreOperationGreaterThan0.getSymbol();
      coreOperationGreaterThan0.isSymmetric();
      coreOperationGreaterThanOrEqual0.evaluateCompare(0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThan0, coreOperationGreaterThanOrEqual0);
      Locale locale0 = Locale.forLanguageTag("");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, ">", locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, coreOperationLessThan0, nodePointer0);
      variableReference0.toString();
      jXPathContextReferenceImpl0.getRelativeContext(nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      Constant constant0 = new Constant(Integer.MIN_VALUE);
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(constant0, coreOperationLessThan0);
      coreOperationLessThan1.iterate(rootContext0);
      coreOperationLessThan0.getPrecedence();
      Constant constant1 = new Constant("org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002 <= org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002");
      CoreOperationLessThan coreOperationLessThan2 = new CoreOperationLessThan(coreOperationLessThan1, constant1);
      coreOperationLessThan2.isSymmetric();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(constant1, constant1);
      coreOperationLessThan0.getPrecedence();
      CoreOperationLessThan coreOperationLessThan3 = new CoreOperationLessThan(variableReference0, constant0);
      assertFalse(coreOperationLessThan3.equals((Object)coreOperationLessThan1));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      QName qName0 = new QName("", "org.apache.commons.jxpath.ClassFunctions");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(variableReference0, variableReference0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.lookup(linkedList0, linkedList1);
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, jXPathContextReferenceImpl0, (Locale) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, "org.apache.commons.jxpath.ClassFunctions", beanPointer0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl1, (Object) null, beanPointer0);
      Integer integer0 = new Integer((-886));
      JXPathContextReferenceImpl jXPathContextReferenceImpl3 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, integer0, beanPointer0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl4 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) qName0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl5 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl4, jXPathContextReferenceImpl2, beanPointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(rootContext0, basicNodeSet0);
      RootContext rootContext1 = new RootContext(jXPathContextReferenceImpl3, beanPointer0);
      coreOperationLessThan0.getPrecedence();
      coreOperationLessThan0.isSymmetric();
      CoreFunction coreFunction0 = new CoreFunction((-986), (Expression[]) null);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(variableReference0, coreFunction0);
      coreOperationLessThanOrEqual0.evaluateCompare((-886));
      coreOperationLessThan0.getPrecedence();
      coreOperationLessThanOrEqual0.computeValue(rootContext1);
      String string0 = coreOperationLessThanOrEqual0.getSymbol();
      assertEquals("<=", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      QName qName0 = new QName("", "org.apache.commons.jxpath.ClassFunctions");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(variableReference0, variableReference0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.lookup(linkedList0, linkedList1);
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, jXPathContext0, (Locale) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, "org.apache.commons.jxpath.ClassFunctions", nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      coreOperationLessThan0.iterate(rootContext0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(variableReference0, coreOperationLessThan0);
      coreOperationGreaterThanOrEqual0.evaluateCompare(11);
      coreOperationGreaterThanOrEqual0.evaluateCompare(0);
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(coreOperationGreaterThanOrEqual0, coreOperationLessThan0);
      coreOperationLessThan1.computeValue(rootContext0);
      coreOperationGreaterThanOrEqual0.isSymmetric();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual((Expression) null, (Expression) null);
      // Undeclared exception!
      try { 
        coreOperationLessThanOrEqual0.computeValue(rootContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      QName qName0 = new QName((String) null, "|N8]");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(variableReference0, variableReference0);
      coreOperationLessThanOrEqual0.getSymbol();
      coreOperationLessThanOrEqual0.toString();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThanOrEqual0, variableReference0);
      coreOperationLessThanOrEqual0.evaluateCompare(0);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      coreOperationGreaterThanOrEqual0.args = expressionArray0;
      coreOperationLessThanOrEqual0.getSymbol();
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      coreOperationGreaterThan0.getSymbol();
      coreOperationGreaterThan0.isSymmetric();
      coreOperationGreaterThanOrEqual0.evaluateCompare(0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThan0, coreOperationGreaterThanOrEqual0);
      Locale locale0 = Locale.forLanguageTag("");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, ">", locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, coreOperationLessThan0, nodePointer0);
      variableReference0.toString();
      jXPathContextReferenceImpl0.getRelativeContext(nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      variableReference0.iteratePointers(rootContext0);
      coreOperationLessThan0.evaluateCompare(27);
      coreOperationGreaterThanOrEqual0.evaluateCompare((-2539));
      coreOperationGreaterThanOrEqual0.evaluateCompare(0);
      coreOperationLessThan0.computeValue(rootContext0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      QName qName0 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(variableReference0, variableReference0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.lookup(linkedList0, linkedList1);
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, linkedList0, (Locale) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, variableReference0, nodePointer0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, linkedList1, nodePointer0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContext0, nodePointer0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl2, nodePointer0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(rootContext0, basicNodeSet0);
      jXPathContextReferenceImpl2.getRelativeContext(nodePointer0);
      RootContext rootContext1 = new RootContext(jXPathContextReferenceImpl1, nodePointer0);
      VariableReference variableReference1 = new VariableReference(qName0);
      variableReference1.iteratePointers(rootContext0);
      coreOperationLessThan0.evaluateCompare((-1));
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(variableReference1, variableReference0);
      coreOperationGreaterThanOrEqual0.evaluateCompare((-1));
      coreOperationGreaterThanOrEqual0.evaluateCompare(27);
      jXPathContextReferenceImpl2.getAbsoluteRootContext();
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(coreOperationLessThan0, variableReference1);
      coreOperationLessThan1.computeValue(rootContext0);
      coreOperationGreaterThanOrEqual0.isSymmetric();
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(variableReference0, variableReference0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationMultiply0, coreOperationLessThan1);
      // Undeclared exception!
      try { 
        coreOperationLessThanOrEqual0.computeValue(nodeSetContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: 
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      QName qName0 = new QName("", "org.apache.commons.jxpath.ClassFunctions");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(variableReference0, variableReference0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.lookup(linkedList0, linkedList1);
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, jXPathContext0, (Locale) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, "org.apache.commons.jxpath.ClassFunctions", nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      coreOperationLessThan0.iterate(rootContext0);
      coreOperationLessThan0.getPrecedence();
      coreOperationLessThan0.isSymmetric();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationLessThan0, variableReference0);
      coreOperationLessThanOrEqual0.evaluateCompare(0);
      coreOperationLessThan0.getPrecedence();
      coreOperationLessThanOrEqual0.computeValue(rootContext0);
      String string0 = coreOperationLessThanOrEqual0.getSymbol();
      assertEquals("<=", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      int int0 = CoreOperation.ADD_PRECEDENCE;
      Constant constant0 = new Constant(4);
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      expressionArray0[2] = (Expression) coreFunction0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationOr0, expressionArray0[1]);
      expressionArray0[3] = (Expression) coreOperationSubtract0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationUnion0, coreOperationUnion0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationGreaterThan0, expressionArray0[3]);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationUnion0, coreFunction0);
      // Undeclared exception!
      try { 
        coreOperationLessThanOrEqual0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationUnion", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      QName qName0 = new QName((String) null, "|N8]");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(variableReference0, variableReference0);
      coreOperationLessThanOrEqual0.getSymbol();
      coreOperationLessThanOrEqual0.toString();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThanOrEqual0, variableReference0);
      coreOperationGreaterThanOrEqual0.evaluateCompare(0);
      coreOperationLessThanOrEqual0.getSymbol();
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      coreOperationGreaterThan0.getSymbol();
      coreOperationGreaterThan0.isSymmetric();
      coreOperationGreaterThanOrEqual0.evaluateCompare(0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThan0, coreOperationGreaterThanOrEqual0);
      Locale locale0 = Locale.forLanguageTag("");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, ">", locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, coreOperationLessThan0, nodePointer0);
      String string0 = variableReference0.toString();
      jXPathContextReferenceImpl0.getRelativeContext(nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      variableReference0.iteratePointers(rootContext0);
      coreOperationLessThan0.evaluateCompare(27);
      coreOperationGreaterThanOrEqual0.evaluateCompare((-2539));
      coreOperationGreaterThanOrEqual0.evaluateCompare(0);
      coreOperationLessThan0.computeValue(rootContext0);
      coreOperationGreaterThanOrEqual0.isSymmetric();
      coreOperationLessThanOrEqual0.computeValue(rootContext0);
      String string1 = coreOperationLessThanOrEqual0.getSymbol();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      QName qName0 = new QName("", "org.apache.commons.jxpath.ClassFunctions");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(variableReference0, variableReference0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.lookup(linkedList0, linkedList1);
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, jXPathContext0, (Locale) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, "org.apache.commons.jxpath.ClassFunctions", nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      coreOperationLessThan0.iterate(rootContext0);
      coreOperationLessThan0.getPrecedence();
      coreOperationLessThan0.isSymmetric();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationLessThan0, variableReference0);
      coreOperationLessThanOrEqual0.evaluateCompare(0);
      int int0 = coreOperationLessThan0.getPrecedence();
      assertEquals(3, int0);
      
      boolean boolean0 = coreOperationLessThanOrEqual0.isSymmetric();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      QName qName0 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(variableReference0, variableReference0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationLessThanOrEqual0, variableReference0);
      // Undeclared exception!
      try { 
        coreOperationLessThanOrEqual0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply((Expression) null, (Expression) null);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationMultiply0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction((-1645), expressionArray0);
      coreFunction0.getArg3();
      expressionArray0[1] = null;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      Expression expression0 = coreFunction0.getArg3();
      expressionArray0[3] = expression0;
      Expression expression1 = coreFunction0.getArg3();
      expressionArray0[4] = expression1;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationAnd1;
      CoreOperationSubtract coreOperationSubtract1 = new CoreOperationSubtract(expressionArray0[5], coreOperationNegate0);
      expressionArray0[6] = (Expression) coreOperationSubtract1;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationUnion0, expressionArray0[5]);
      coreOperationGreaterThanOrEqual0.getPrecedence();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[5], (Expression) null);
      coreOperationLessThanOrEqual0.evaluateCompare(1190);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationAnd1, expression0);
      coreOperationLessThan0.getSymbol();
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationLessThan0, coreOperationUnion0);
      coreOperationGreaterThan0.getSymbol();
      boolean boolean0 = coreOperationGreaterThanOrEqual0.evaluateCompare((-1645));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Double double0 = new Double(0.0);
      Constant constant0 = new Constant(double0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      int int0 = (-2618);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      JXPathContext.newContext((Object) constant0);
      QName qName0 = new QName("");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      // Undeclared exception!
      try { 
        expressionPath0.isSimplePath();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }
}
