/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 03:59:47 GMT 2020
 */

package org.apache.commons.jxpath.ri.compiler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.AncestorContext;
import org.apache.commons.jxpath.ri.axes.ChildContext;
import org.apache.commons.jxpath.ri.axes.InitialContext;
import org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.CoreFunction;
import org.apache.commons.jxpath.ri.compiler.CoreOperation;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAdd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationDivide;
import org.apache.commons.jxpath.ri.compiler.CoreOperationEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMod;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.ExpressionPath;
import org.apache.commons.jxpath.ri.compiler.ExtensionFunction;
import org.apache.commons.jxpath.ri.compiler.LocationPath;
import org.apache.commons.jxpath.ri.compiler.NameAttributeTest;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.compiler.Step;
import org.apache.commons.jxpath.ri.compiler.VariableReference;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CoreOperationRelationalExpression_ESTest extends CoreOperationRelationalExpression_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      QName qName0 = new QName("oJ`*+c`,0>i", "oJ`*+c`,0>i");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(variableReference0, variableReference0);
      coreOperationLessThanOrEqual0.toString();
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationLessThanOrEqual0, variableReference0);
      coreOperationLessThanOrEqual0.getSymbol();
      FileSystemHandling.shouldAllThrowIOExceptions();
      coreOperationLessThanOrEqual0.getSymbol();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      coreOperationLessThanOrEqual0.getPrecedence();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThan0, variableReference0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreOperationGreaterThan0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(jXPathContext0, (Object) coreOperationLessThanOrEqual0);
      Locale locale0 = Locale.KOREAN;
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, coreOperationGreaterThan0, locale0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      coreOperationLessThan0.iterate(rootContext0);
      jXPathContextReferenceImpl0.getNamespaceResolver();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      Expression[] expressionArray0 = new Expression[0];
      Step[] stepArray0 = new Step[0];
      jXPathContextReferenceImpl0.iteratePointers("java.util.concurrent.atomic.AtomicLong", (Expression) coreOperationGreaterThanOrEqual0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThan0, expressionArray0, stepArray0);
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(coreOperationLessThanOrEqual0, coreOperationLessThan0);
      CoreOperationLessThan coreOperationLessThan2 = new CoreOperationLessThan(expressionPath0, expressionPath0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      Step step0 = new Step(3, nodeTypeTest0, expressionArray0);
      ExpressionPath expressionPath1 = new ExpressionPath(coreOperationLessThanOrEqual0, expressionArray0, stepArray0);
      CoreOperationLessThan coreOperationLessThan3 = new CoreOperationLessThan(coreOperationLessThan2, variableReference0);
      coreOperationLessThan3.computeValue(rootContext0);
      coreOperationLessThanOrEqual0.getSymbol();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      QName qName0 = new QName("oJ`*+c`,0>i", "oJ`*+c`,0>i");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(variableReference0, variableReference0);
      coreOperationLessThanOrEqual0.toString();
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationLessThanOrEqual0, variableReference0);
      coreOperationLessThanOrEqual0.getSymbol();
      FileSystemHandling.shouldAllThrowIOExceptions();
      coreOperationLessThanOrEqual0.getSymbol();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      coreOperationLessThanOrEqual0.getPrecedence();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThan0, variableReference0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreOperationGreaterThan0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(jXPathContext0, (Object) coreOperationLessThanOrEqual0);
      Locale locale0 = Locale.KOREAN;
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, coreOperationGreaterThan0, locale0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      coreOperationLessThan0.iterate(rootContext0);
      jXPathContextReferenceImpl0.getNamespaceResolver();
      Expression[] expressionArray0 = new Expression[0];
      coreOperationLessThanOrEqual0.getSymbol();
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThan0, expressionArray0, stepArray0);
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(coreOperationLessThanOrEqual0, coreOperationLessThan0);
      CoreOperationLessThan coreOperationLessThan2 = new CoreOperationLessThan(expressionPath0, expressionPath0);
      coreOperationLessThan2.computeValue(rootContext0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AncestorContext ancestorContext0 = new AncestorContext(rootContext0, true, nodeNameTest0);
      coreOperationLessThan2.computeValue(ancestorContext0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      QName qName0 = new QName("oJ`*+c`,0>i", "oJ`*+c`,0>i");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(variableReference0, variableReference0);
      coreOperationLessThanOrEqual0.getSymbol();
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationLessThanOrEqual0, variableReference0);
      variableReference0.toString();
      coreOperationGreaterThan0.evaluateCompare(1);
      coreOperationLessThanOrEqual0.isSymmetric();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.272.b10-0.fc31.x86_64/jre/lib/jxpath.properties");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      coreOperationLessThanOrEqual0.getSymbol();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      coreOperationGreaterThanOrEqual0.evaluateCompare(3232);
      coreOperationLessThanOrEqual0.getPrecedence();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThan0, variableReference0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreOperationGreaterThan0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(jXPathContext0, (Object) coreOperationLessThanOrEqual0);
      Locale locale0 = Locale.KOREAN;
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, coreOperationGreaterThan0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, coreOperationLessThanOrEqual0, beanPointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, beanPointer0);
      coreOperationLessThan0.iterate(rootContext0);
      jXPathContextReferenceImpl0.getNamespaceResolver();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "<=");
      Expression[] expressionArray0 = new Expression[0];
      Step step0 = new Step((-1879048192), nodeNameTest0, expressionArray0);
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThan0, expressionArray0, stepArray0);
      coreOperationLessThan0.computeContextDependent();
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(expressionPath0, variableReference0);
      CoreOperationLessThan coreOperationLessThan2 = new CoreOperationLessThan(coreOperationLessThanOrEqual0, coreOperationLessThan1);
      CoreOperationLessThan coreOperationLessThan3 = new CoreOperationLessThan(coreOperationLessThan0, coreOperationLessThan2);
      coreOperationLessThan3.computeValue(rootContext0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      QName qName0 = new QName("oJ`*+c`,0>i", "oJ`*+c`,0>i");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(variableReference0, variableReference0);
      coreOperationLessThanOrEqual0.getSymbol();
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationLessThanOrEqual0, variableReference0);
      variableReference0.toString();
      coreOperationGreaterThan0.evaluateCompare(1);
      coreOperationLessThanOrEqual0.isSymmetric();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.272.b10-0.fc31.x86_64/jre/lib/jxpath.properties");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      coreOperationLessThanOrEqual0.getSymbol();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      coreOperationGreaterThanOrEqual0.evaluateCompare(3232);
      coreOperationLessThanOrEqual0.getPrecedence();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThan0, variableReference0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreOperationGreaterThan0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(jXPathContext0, (Object) coreOperationLessThanOrEqual0);
      Locale locale0 = Locale.KOREAN;
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, coreOperationGreaterThan0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, coreOperationLessThanOrEqual0, beanPointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, beanPointer0);
      coreOperationLessThan0.iterate(rootContext0);
      jXPathContextReferenceImpl0.getNamespaceResolver();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "<=");
      Expression[] expressionArray0 = new Expression[0];
      Step step0 = new Step((-1879048192), nodeNameTest0, expressionArray0);
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThan0, expressionArray0, stepArray0);
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(variableReference0, coreOperationGreaterThanOrEqual0);
      CoreOperationLessThan coreOperationLessThan2 = new CoreOperationLessThan(coreOperationLessThan1, expressionPath0);
      coreOperationGreaterThan0.isSymmetric();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationLessThan2, variableReference0);
      coreOperationLessThanOrEqual1.computeValue(rootContext0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      QName qName0 = new QName("oJ`*+c`,0>i", "oJ`*+c`,0>i");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(variableReference0, variableReference0);
      coreOperationLessThanOrEqual0.getSymbol();
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationLessThanOrEqual0, variableReference0);
      variableReference0.toString();
      coreOperationGreaterThan0.evaluateCompare(1);
      coreOperationLessThanOrEqual0.isSymmetric();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.272.b10-0.fc31.x86_64/jre/lib/jxpath.properties");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      coreOperationLessThanOrEqual0.getSymbol();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      coreOperationGreaterThanOrEqual0.evaluateCompare(3232);
      coreOperationLessThanOrEqual0.getPrecedence();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThan0, variableReference0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreOperationGreaterThan0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(jXPathContext0, (Object) coreOperationLessThanOrEqual0);
      Locale locale0 = Locale.KOREAN;
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, coreOperationGreaterThan0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, coreOperationLessThanOrEqual0, beanPointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, beanPointer0);
      coreOperationLessThan0.iterate(rootContext0);
      jXPathContextReferenceImpl0.getNamespaceResolver();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "<=");
      Expression[] expressionArray0 = new Expression[0];
      Step step0 = new Step((-1879048192), nodeNameTest0, expressionArray0);
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThan0, expressionArray0, stepArray0);
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(variableReference0, coreOperationGreaterThanOrEqual0);
      CoreOperationLessThan coreOperationLessThan2 = new CoreOperationLessThan(coreOperationLessThan1, expressionPath0);
      coreOperationLessThan2.computeValue(rootContext0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      QName qName0 = new QName("oJ`*+c`,0>i", "oJ`*+c`,0>i");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(variableReference0, variableReference0);
      coreOperationLessThanOrEqual0.getSymbol();
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationLessThanOrEqual0, variableReference0);
      coreOperationGreaterThan0.evaluateCompare(1);
      coreOperationLessThanOrEqual0.isSymmetric();
      coreOperationLessThanOrEqual0.getSymbol();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      coreOperationLessThanOrEqual0.getPrecedence();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreOperationGreaterThan0);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) coreOperationLessThanOrEqual0);
      Locale locale0 = Locale.ITALIAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreOperationGreaterThan0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, coreOperationLessThanOrEqual0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThan0, coreOperationGreaterThan0);
      coreOperationLessThan0.getSymbol();
      Expression[] expressionArray0 = new Expression[0];
      Step[] stepArray0 = new Step[1];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "http://www.w3.org/XML/1998/namespace");
      Step step0 = new Step(1, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThanOrEqual0, expressionArray0, stepArray0);
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(coreOperationGreaterThan0, expressionPath0);
      CoreOperationLessThan coreOperationLessThan2 = new CoreOperationLessThan(coreOperationLessThan0, coreOperationLessThan0);
      coreOperationLessThan2.iterate(rootContext0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(variableReference0, expressionPath0);
      CoreOperationLessThan coreOperationLessThan3 = new CoreOperationLessThan(coreOperationGreaterThan0, coreOperationGreaterThanOrEqual1);
      coreOperationLessThan3.computeValue(rootContext0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      QName qName0 = new QName("oJ`*+c`,0>i", "oJ`*+c`,0>i");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(variableReference0, variableReference0);
      coreOperationLessThanOrEqual0.getSymbol();
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationLessThanOrEqual0, variableReference0);
      variableReference0.toString();
      coreOperationGreaterThan0.evaluateCompare(1);
      coreOperationLessThanOrEqual0.isSymmetric();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.272.b10-0.fc31.x86_64/jre/lib/jxpath.properties");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      coreOperationLessThanOrEqual0.getSymbol();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      int int0 = 3232;
      coreOperationGreaterThanOrEqual0.evaluateCompare(3232);
      coreOperationLessThanOrEqual0.getPrecedence();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThan0, variableReference0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreOperationGreaterThan0);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) coreOperationLessThanOrEqual0);
      Locale locale0 = Locale.KOREAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreOperationGreaterThan0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, coreOperationLessThanOrEqual0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      coreOperationLessThan0.iterate(rootContext0);
      coreOperationGreaterThan0.getSymbol();
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(variableReference0, coreOperationGreaterThanOrEqual0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual1;
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      coreOperationGreaterThan0.args = expressionArray0;
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(coreOperationGreaterThanOrEqual0, coreOperationLessThan0);
      // Undeclared exception!
      coreOperationLessThan1.computeValue(rootContext0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      QName qName0 = new QName("oJ`*+c`,0>i", "oJ`*+c`,0>i");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(variableReference0, variableReference0);
      coreOperationLessThanOrEqual0.getSymbol();
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationLessThanOrEqual0, variableReference0);
      variableReference0.toString();
      coreOperationGreaterThan0.evaluateCompare(1);
      coreOperationLessThanOrEqual0.isSymmetric();
      coreOperationLessThanOrEqual0.getSymbol();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      coreOperationGreaterThanOrEqual0.evaluateCompare(3232);
      coreOperationLessThanOrEqual0.getPrecedence();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThan0, variableReference0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreOperationGreaterThan0);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) coreOperationLessThanOrEqual0);
      Locale locale0 = Locale.KOREAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreOperationGreaterThan0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, coreOperationLessThanOrEqual0, nodePointer0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationLessThan0, variableReference0);
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(coreOperationGreaterThan0, coreOperationSubtract0);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      // Undeclared exception!
      try { 
        coreOperationLessThan1.computeValue(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: oJ`*+c`,0>i:oJ`*+c`,0>i
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      QName qName0 = new QName("oJ`*+c`,0>i", "oJ`*+c`,0>i");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(variableReference0, variableReference0);
      coreOperationLessThanOrEqual0.getSymbol();
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationLessThanOrEqual0, variableReference0);
      variableReference0.toString();
      coreOperationGreaterThan0.evaluateCompare(1);
      boolean boolean0 = coreOperationLessThanOrEqual0.isSymmetric();
      coreOperationLessThanOrEqual0.getSymbol();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      int int0 = coreOperationLessThanOrEqual0.getPrecedence();
      assertEquals(3, int0);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThan0, variableReference0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreOperationGreaterThan0);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) coreOperationLessThanOrEqual0);
      Locale locale0 = Locale.KOREAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreOperationGreaterThan0, locale0);
      coreOperationLessThan0.toString();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, coreOperationLessThanOrEqual0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      coreOperationLessThan0.iterate(rootContext0);
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(coreOperationGreaterThan0, coreOperationGreaterThan0);
      coreOperationLessThan1.getSymbol();
      Expression[] expressionArray0 = new Expression[0];
      Step[] stepArray0 = new Step[1];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "http://www.w3.org/XML/1998/namespace");
      Step step0 = new Step(1, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThanOrEqual0, expressionArray0, stepArray0);
      CoreOperationLessThan coreOperationLessThan2 = new CoreOperationLessThan(coreOperationGreaterThan0, expressionPath0);
      CoreOperationLessThan coreOperationLessThan3 = new CoreOperationLessThan(coreOperationLessThan1, coreOperationLessThan1);
      Object object0 = new Object();
      coreOperationGreaterThanOrEqual0.getSymbol();
      coreOperationGreaterThanOrEqual0.getSymbol();
      Object object1 = coreOperationLessThan2.computeValue(rootContext0);
      assertTrue(object1.equals((Object)boolean0));
      
      boolean boolean1 = coreOperationLessThan2.isSymmetric();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      QName qName0 = new QName("oJ`*+c`,0>i", "oJ`*+c`,0>i");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(variableReference0, variableReference0);
      coreOperationLessThanOrEqual0.getSymbol();
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationLessThanOrEqual0, variableReference0);
      coreOperationGreaterThan0.evaluateCompare(17);
      boolean boolean0 = coreOperationLessThanOrEqual0.isSymmetric();
      coreOperationLessThanOrEqual0.getSymbol();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThan0, variableReference0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreOperationGreaterThan0);
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(coreOperationLessThan0, variableReference0);
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      CoreOperationLessThan coreOperationLessThan2 = new CoreOperationLessThan(variableReference0, coreOperationLessThan0);
      Boolean boolean1 = (Boolean)coreOperationLessThan2.computeValue(initialContext0);
      assertTrue(boolean1.equals((Object)boolean0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      QName qName0 = new QName("oJ`*+c`,0>i", "oJ`*+c`,0>i");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(variableReference0, variableReference0);
      coreOperationLessThanOrEqual0.getSymbol();
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationLessThanOrEqual0, variableReference0);
      variableReference0.toString();
      coreOperationGreaterThan0.evaluateCompare(1);
      boolean boolean0 = coreOperationLessThanOrEqual0.isSymmetric();
      coreOperationLessThanOrEqual0.getSymbol();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      coreOperationGreaterThanOrEqual0.evaluateCompare(3232);
      int int0 = coreOperationLessThanOrEqual0.getPrecedence();
      assertEquals(3, int0);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThan0, variableReference0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreOperationGreaterThan0);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) coreOperationLessThanOrEqual0);
      Locale locale0 = Locale.KOREAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreOperationGreaterThan0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, coreOperationLessThanOrEqual0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      coreOperationLessThan0.iterate(rootContext0);
      coreOperationLessThan0.getSymbol();
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(coreOperationGreaterThanOrEqual0, coreOperationLessThan0);
      Object object0 = coreOperationLessThan1.computeValue(rootContext0);
      assertFalse(object0.equals((Object)boolean0));
      
      coreOperationGreaterThanOrEqual0.evaluateCompare((-1073741824));
      coreOperationGreaterThan0.isSymmetric();
      Object object1 = coreOperationLessThanOrEqual0.computeValue(rootContext0);
      assertEquals(false, object1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Constant constant0 = new Constant("");
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationLessThan0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreFunction0, coreFunction0);
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(coreOperationDivide0, expressionArray0[0]);
      // Undeclared exception!
      try { 
        coreOperationLessThan1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: namespace-uri(org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000002 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 < org.apache.commons.jxpath.ri.compiler.Constant@0000000001, '', org.apache.commons.jxpath.ri.compiler.Constant@0000000001 < org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      QName qName0 = new QName("oJ`*+c`,0>i", "oJ`*+c`,0>i");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(variableReference0, variableReference0);
      coreOperationLessThanOrEqual0.getSymbol();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<=");
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationLessThanOrEqual0, variableReference0);
      String string0 = variableReference0.toString();
      coreOperationGreaterThan0.evaluateCompare(1);
      coreOperationLessThanOrEqual0.isSymmetric();
      coreOperationLessThanOrEqual0.getSymbol();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      coreOperationGreaterThanOrEqual0.evaluateCompare(3232);
      coreOperationLessThanOrEqual0.getPrecedence();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThan0, variableReference0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreOperationGreaterThan0);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) coreOperationLessThanOrEqual0);
      Locale locale0 = Locale.KOREAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreOperationGreaterThan0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, coreOperationLessThanOrEqual0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      coreOperationLessThan0.iterate(rootContext0);
      coreOperationLessThan0.getSymbol();
      coreOperationLessThan0.getPrecedence();
      String string1 = coreOperationGreaterThan0.getSymbol();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      Constant constant0 = new Constant("A\"G");
      expressionArray0[0] = (Expression) constant0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], constant0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, coreOperationEqual0);
      expressionArray0[1] = (Expression) coreOperationMod0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMod0, coreOperationMod0);
      expressionArray0[2] = (Expression) nameAttributeTest0;
      Step[] stepArray0 = new Step[1];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1073741824));
      Step step0 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationMod0, expressionArray0, stepArray0);
      expressionArray0[3] = (Expression) expressionPath0;
      QName qName0 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[4] = (Expression) variableReference0;
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(expressionArray0[2], expressionArray0[3]);
      expressionArray0[5] = (Expression) nameAttributeTest1;
      VariableReference variableReference1 = new VariableReference(qName0);
      expressionArray0[6] = (Expression) variableReference1;
      CoreFunction coreFunction0 = new CoreFunction((-1073741824), expressionArray0);
      Expression expression0 = coreFunction0.getArg3();
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expression0, expressionArray0[4]);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationNotEqual0, expressionArray0[6]);
      // Undeclared exception!
      try { 
        coreOperationLessThan0.computeValue((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Constant constant0 = new Constant("[ <]-]'5ZOm");
      Constant constant1 = new Constant("");
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant1, constant1);
      coreOperationGreaterThan0.computeContextDependent();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant1, constant0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThan0, coreOperationLessThanOrEqual0);
      coreOperationLessThan0.isSymmetric();
      Expression[] expressionArray0 = new Expression[0];
      coreOperationLessThanOrEqual0.args = expressionArray0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationLessThanOrEqual0, constant1);
      coreOperationLessThanOrEqual0.getSymbol();
      // Undeclared exception!
      try { 
        coreOperationLessThanOrEqual1.computeValue((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Constant constant0 = new Constant("~");
      String string0 = constant0.toString();
      constant0.toString();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      coreOperationGreaterThanOrEqual0.evaluateCompare(1);
      coreOperationGreaterThanOrEqual0.isSymmetric();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThanOrEqual0, constant0);
      coreOperationGreaterThanOrEqual0.isSymmetric();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(coreOperationGreaterThanOrEqual0, constant0);
      int int0 = CoreOperation.UNION_PRECEDENCE;
      Constant constant1 = new Constant(7);
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(coreOperationLessThan0, constant1);
      coreOperationLessThan1.isSymmetric();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      coreOperationGreaterThanOrEqual0.getPrecedence();
      QName qName0 = new QName("~", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      coreOperationLessThan1.computeValue(ancestorContext0);
      String string1 = coreOperationGreaterThanOrEqual1.getSymbol();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Constant constant0 = new Constant("[ <]-]'5ZOm");
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationMultiply0, constant0);
      boolean boolean0 = coreOperationGreaterThan0.computeContextDependent();
      coreOperationGreaterThan0.evaluateCompare(0);
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(constant0, constant0);
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(coreOperationGreaterThan0, coreOperationMultiply1);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThan1, constant0);
      coreOperationLessThan0.getSymbol();
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, false);
      ChildContext childContext0 = new ChildContext(precedingOrFollowingContext0, nodeNameTest0, false, false);
      coreOperationLessThan0.computeValue(precedingOrFollowingContext0);
      coreOperationGreaterThan1.evaluateCompare((-1));
      boolean boolean1 = coreOperationLessThan0.evaluateCompare((-1));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Constant constant0 = new Constant("[ <]-]'5ZOm");
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationMultiply0, constant0);
      coreOperationGreaterThan0.computeContextDependent();
      coreOperationGreaterThan0.evaluateCompare(0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThan0, coreOperationGreaterThan0);
      coreOperationLessThan0.evaluateCompare(0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreFunction0, coreFunction0);
      coreOperationGreaterThanOrEqual0.evaluateCompare(0);
      coreOperationGreaterThanOrEqual0.toString();
      coreOperationLessThan0.evaluateCompare(0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, expressionArray0[0], (Pointer) null);
      coreOperationGreaterThanOrEqual0.toString();
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      InitialContext initialContext0 = new InitialContext(evalContext0);
      RootContext rootContext0 = initialContext0.getRootContext();
      coreOperationGreaterThan0.computeValue(rootContext0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationLessThan0, coreOperationGreaterThanOrEqual0);
      coreOperationLessThanOrEqual0.compute(evalContext0);
      coreOperationLessThanOrEqual0.getSymbol();
      coreOperationGreaterThanOrEqual0.getSymbol();
      boolean boolean0 = coreOperationLessThan0.evaluateCompare(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Constant constant0 = new Constant("[ <]-]'5ZOm");
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationMultiply0, constant0);
      coreOperationGreaterThan0.computeContextDependent();
      coreOperationGreaterThan0.evaluateCompare(0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThan0, coreOperationGreaterThan0);
      coreOperationLessThan0.evaluateCompare(162);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.args = expressionArray0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreFunction0, coreFunction0);
      coreOperationGreaterThanOrEqual0.evaluateCompare(0);
      coreOperationGreaterThanOrEqual0.toString();
      coreOperationLessThan0.evaluateCompare(0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, expressionArray0[0], (Pointer) null);
      coreOperationGreaterThanOrEqual0.toString();
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      InitialContext initialContext0 = new InitialContext(evalContext0);
      RootContext rootContext0 = initialContext0.getRootContext();
      Object object0 = coreOperationGreaterThan0.computeValue(rootContext0);
      assertEquals(false, object0);
      
      coreOperationLessThan0.computeValue(rootContext0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      coreOperationLessThanOrEqual0.getSymbol();
      coreOperationLessThanOrEqual0.evaluateCompare(63);
      coreOperationLessThan0.getSymbol();
      boolean boolean0 = coreOperationLessThanOrEqual0.isSymmetric();
      assertFalse(boolean0);
      
      int int0 = coreOperationGreaterThanOrEqual0.getPrecedence();
      assertEquals(3, int0);
      
      boolean boolean1 = coreOperationLessThan0.evaluateCompare(0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Constant constant0 = new Constant("8]zun$Qo@7)");
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual((Expression) null, constant0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      coreOperationLessThan0.evaluateCompare(1);
      constant0.toString();
      constant0.toString();
      constant0.toString();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThan0, coreOperationLessThanOrEqual0);
      coreOperationGreaterThanOrEqual0.evaluateCompare(1154);
      coreOperationGreaterThanOrEqual0.isSymmetric();
      coreOperationLessThan0.isSymmetric();
      coreOperationGreaterThanOrEqual0.getPrecedence();
      // Undeclared exception!
      try { 
        coreOperationLessThan0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      expressionArray0[0] = null;
      expressionArray0[1] = null;
      expressionArray0[2] = null;
      QName qName0 = new QName("", "");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[3] = (Expression) extensionFunction0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationAdd0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[5] = (Expression) extensionFunction1;
      expressionArray0[6] = null;
      Step[] stepArray0 = new Step[2];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("zss;~O");
      Step step0 = new Step(0, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(0, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, stepArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionPath0, expressionArray0[5]);
      boolean boolean0 = coreOperationGreaterThanOrEqual0.isSymmetric();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(locationPath0, locationPath0);
      coreOperationLessThan0.getSymbol();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThan0, locationPath0);
      coreOperationGreaterThanOrEqual0.computeContextDependent();
      coreOperationLessThan0.toString();
      coreOperationGreaterThanOrEqual0.getSymbol();
      coreOperationGreaterThanOrEqual0.getSymbol();
      coreOperationGreaterThanOrEqual0.getSymbol();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreOperationGreaterThanOrEqual0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.LocationPath", e);
      }
  }
}
