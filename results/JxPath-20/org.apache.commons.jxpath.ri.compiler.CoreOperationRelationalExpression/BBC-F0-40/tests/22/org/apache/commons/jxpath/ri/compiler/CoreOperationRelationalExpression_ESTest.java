/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 01:46:35 GMT 2021
 */

package org.apache.commons.jxpath.ri.compiler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Iterator;
import java.util.Locale;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.AncestorContext;
import org.apache.commons.jxpath.ri.axes.AttributeContext;
import org.apache.commons.jxpath.ri.axes.ChildContext;
import org.apache.commons.jxpath.ri.axes.InitialContext;
import org.apache.commons.jxpath.ri.axes.ParentContext;
import org.apache.commons.jxpath.ri.axes.PredicateContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.CoreFunction;
import org.apache.commons.jxpath.ri.compiler.CoreOperationDivide;
import org.apache.commons.jxpath.ri.compiler.CoreOperationEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMod;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNegate;
import org.apache.commons.jxpath.ri.compiler.CoreOperationOr;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.ExtensionFunction;
import org.apache.commons.jxpath.ri.compiler.LocationPath;
import org.apache.commons.jxpath.ri.compiler.NameAttributeTest;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.compiler.Step;
import org.apache.commons.jxpath.ri.compiler.VariableReference;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CoreOperationRelationalExpression_ESTest extends CoreOperationRelationalExpression_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Constant constant0 = new Constant((String) null);
      QName qName0 = new QName((String) null, "");
      Expression[] expressionArray0 = new Expression[9];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant0;
      expressionArray0[7] = (Expression) constant0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationOr0, expressionArray0[0]);
      expressionArray0[8] = (Expression) coreOperationDivide0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(extensionFunction0, coreOperationDivide0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationOr0, expressionArray0[5]);
      // Undeclared exception!
      coreOperationGreaterThanOrEqual0.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      QName qName0 = new QName("", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      Expression[] expressionArray0 = new Expression[22];
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      coreFunction0.getArg1();
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, (Expression) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreFunction0, nameAttributeTest0);
      coreOperationLessThan0.getPrecedence();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(nameAttributeTest0, coreFunction0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(coreOperationGreaterThanOrEqual0, variableReference0);
      coreOperationGreaterThanOrEqual1.getSymbol();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      ChildContext childContext0 = new ChildContext(parentContext0, nodeTypeTest0, true, true);
      // Undeclared exception!
      try { 
        coreOperationGreaterThanOrEqual1.computeValue(childContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: false(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      QName qName0 = new QName("", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      Expression[] expressionArray0 = new Expression[22];
      expressionArray0[0] = (Expression) variableReference0;
      expressionArray0[2] = (Expression) variableReference0;
      expressionArray0[3] = (Expression) variableReference0;
      expressionArray0[4] = (Expression) variableReference0;
      expressionArray0[5] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction((-2543), expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(variableReference0, expression0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], expression0);
      coreOperationLessThan0.getPrecedence();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) expressionArray0[2]);
      NodePointer nodePointer0 = NodePointer.newChildNodePointer((NodePointer) null, qName0, "?Lq9");
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, expressionArray0[4], nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      RootContext rootContext1 = rootContext0.getRootContext();
      variableReference0.computeValue(rootContext1);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[5], expressionArray0[2]);
      coreOperationGreaterThanOrEqual0.getSymbol();
      coreOperationGreaterThanOrEqual0.getSymbol();
      JXPathContext jXPathContext1 = JXPathContext.newContext((Object) expressionArray0[4]);
      Locale locale0 = Locale.ENGLISH;
      Locale locale1 = Locale.JAPANESE;
      NodePointer nodePointer1 = NodePointer.newNodePointer(qName0, coreOperationLessThan0, locale1);
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext1, expressionArray0[0], nodePointer1);
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContext1, locale1, nodePointer1);
      RootContext rootContext2 = new RootContext(jXPathContextReferenceImpl2, nodePointer1);
      RootContext rootContext3 = rootContext2.getRootContext();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(expressionArray0[5], coreOperationLessThan0);
      coreOperationGreaterThanOrEqual1.computeValue(rootContext2);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      coreOperationLessThan0.computeValue(rootContext3);
      coreOperationLessThan0.getPrecedence();
      coreOperationLessThan0.getPrecedence();
      coreOperationLessThan0.getSymbol();
      coreOperationGreaterThanOrEqual0.evaluateCompare((-2543));
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(nameAttributeTest0, coreOperationLessThan0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(expression0, coreFunction0);
      coreOperationLessThanOrEqual1.getSymbol();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      QName qName0 = new QName("", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}f1hVN]");
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[0] = (Expression) variableReference0;
      expressionArray0[1] = (Expression) variableReference0;
      expressionArray0[2] = (Expression) variableReference0;
      expressionArray0[3] = (Expression) variableReference0;
      expressionArray0[4] = (Expression) variableReference0;
      expressionArray0[5] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction((-2543), expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(variableReference0, expression0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(nameAttributeTest0, expressionArray0[1]);
      coreOperationLessThan0.getPrecedence();
      coreOperationLessThan0.getSymbol();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[2], expressionArray0[5]);
      nameAttributeTest0.args = expressionArray0;
      coreOperationGreaterThanOrEqual0.getSymbol();
      coreOperationGreaterThanOrEqual0.getSymbol();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreOperationLessThan0);
      Locale locale0 = Locale.ENGLISH;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreOperationLessThan0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreOperationLessThan0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      coreOperationGreaterThanOrEqual0.computeValue(rootContext1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      coreOperationLessThan0.computeValue(rootContext1);
      coreOperationLessThan0.getPrecedence();
      coreOperationLessThan0.getPrecedence();
      coreOperationLessThan0.getSymbol();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      QName qName0 = new QName("RunGHr-\"M@|K", "by0ujl^{1I#G$X@C%");
      VariableReference variableReference0 = new VariableReference(qName0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(variableReference0, variableReference0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationMod0, coreOperationMod0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      VariableReference variableReference1 = new VariableReference(qName0);
      CoreOperationMod coreOperationMod1 = new CoreOperationMod(expressionArray0[0], variableReference1);
      expressionArray0[1] = (Expression) coreOperationMod1;
      expressionArray0[2] = (Expression) variableReference0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[2], coreOperationMod1);
      expressionArray0[3] = (Expression) nameAttributeTest0;
      expressionArray0[4] = (Expression) variableReference0;
      expressionArray0[5] = (Expression) variableReference0;
      expressionArray0[6] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction((-2543), expressionArray0);
      coreFunction0.getArg1();
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(expressionArray0[4], coreOperationDivide0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[5], expressionArray0[6]);
      coreOperationLessThan0.getPrecedence();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(variableReference0, coreOperationDivide0);
      coreOperationGreaterThanOrEqual0.getSymbol();
      coreOperationGreaterThanOrEqual0.getSymbol();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) nameAttributeTest1);
      Locale locale0 = Locale.ENGLISH;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreOperationDivide0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      rootContext0.getRootContext();
      // Undeclared exception!
      try { 
        coreOperationGreaterThanOrEqual0.computeValue(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: RunGHr-\"M@|K:by0ujl^{1I#G$X@C%
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      QName qName0 = new QName("", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}f1hVN]");
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[0] = (Expression) variableReference0;
      expressionArray0[1] = (Expression) variableReference0;
      expressionArray0[2] = (Expression) variableReference0;
      expressionArray0[3] = (Expression) variableReference0;
      expressionArray0[4] = (Expression) variableReference0;
      expressionArray0[5] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction((-2543), expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(variableReference0, expression0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(nameAttributeTest0, expressionArray0[1]);
      coreOperationLessThan0.getPrecedence();
      coreOperationLessThan0.getSymbol();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[2], expressionArray0[5]);
      coreOperationGreaterThanOrEqual0.getSymbol();
      coreOperationGreaterThanOrEqual0.getSymbol();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreOperationLessThan0);
      Locale locale0 = Locale.ENGLISH;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreOperationLessThan0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreOperationLessThan0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      coreOperationGreaterThanOrEqual0.computeValue(rootContext1);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      ChildContext childContext0 = new ChildContext(evalContext0, nodeNameTest0, true, false);
      coreOperationGreaterThanOrEqual0.computeValue(childContext0);
      coreOperationLessThan0.getSymbol();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, coreOperationLessThan0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationGreaterThan0, coreOperationGreaterThan0);
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[0];
      coreOperationGreaterThan0.args = expressionArray0;
      // Undeclared exception!
      try { 
        coreOperationGreaterThanOrEqual0.computeValue((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationLessThan0, constant0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThan0, constant0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationGreaterThan0, constant0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(coreOperationGreaterThan0, coreOperationMod0);
      // Undeclared exception!
      try { 
        coreOperationGreaterThanOrEqual1.computeValue((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThanOrEqual0, constant0);
      coreOperationLessThanOrEqual0.computeValue((EvalContext) null);
      coreOperationLessThanOrEqual0.compute((EvalContext) null);
      Expression[] expressionArray0 = new Expression[2];
      coreOperationLessThanOrEqual0.isContextDependent();
      expressionArray0[0] = (Expression) constant0;
      nameAttributeTest0.isContextDependent();
      Iterator iterator0 = new PredicateContext((EvalContext) null, nameAttributeTest0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(constant0, constant0);
      coreOperationLessThanOrEqual0.evaluateCompare((-1));
      coreOperationLessThanOrEqual0.evaluateCompare((-1));
      boolean boolean0 = coreOperationLessThanOrEqual0.isSymmetric();
      coreOperationLessThanOrEqual1.getSymbol();
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], coreOperationLessThanOrEqual1);
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(coreOperationGreaterThan0, nameAttributeTest0);
      coreOperationGreaterThan1.toString();
      coreOperationGreaterThan0.evaluateCompare((-1));
      Object object0 = coreOperationGreaterThan1.compute((EvalContext) null);
      assertEquals(false, object0);
      
      coreOperationGreaterThan1.toString();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationGreaterThan0, constant0);
      coreOperationGreaterThanOrEqual0.iterate((EvalContext) null);
      CoreOperationGreaterThan coreOperationGreaterThan2 = new CoreOperationGreaterThan((Expression) null, expressionArray0[0]);
      coreOperationGreaterThan2.evaluateCompare((-1));
      coreOperationGreaterThanOrEqual0.getSymbol();
      Object object1 = coreOperationGreaterThanOrEqual0.computeValue((EvalContext) null);
      assertFalse(object1.equals((Object)boolean0));
      
      coreOperationGreaterThanOrEqual0.getSymbol();
      boolean boolean1 = coreOperationGreaterThan2.evaluateCompare(0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThanOrEqual0, constant0);
      EvalContext evalContext0 = null;
      coreOperationLessThanOrEqual0.computeValue((EvalContext) null);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, nameAttributeTest0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(constant0, coreOperationLessThanOrEqual0);
      coreOperationGreaterThanOrEqual1.toString();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = (-1);
      coreOperationLessThanOrEqual0.evaluateCompare(4);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationGreaterThanOrEqual1, coreOperationGreaterThanOrEqual0);
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(nameAttributeTest0, coreOperationGreaterThan0);
      coreOperationGreaterThan1.toString();
      coreOperationGreaterThan1.compute((EvalContext) null);
      coreOperationGreaterThan0.toString();
      QName qName0 = new QName("(org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000003) > (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000006)", "org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000005 > (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000004)");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "TEymu");
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      InitialContext initialContext0 = null;
      try {
        initialContext0 = new InitialContext(attributeContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThanOrEqual0, constant0);
      EvalContext evalContext0 = null;
      coreOperationLessThanOrEqual0.computeValue((EvalContext) null);
      coreOperationLessThanOrEqual0.compute((EvalContext) null);
      Expression[] expressionArray0 = new Expression[2];
      coreOperationLessThanOrEqual0.isContextDependent();
      expressionArray0[0] = (Expression) constant0;
      nameAttributeTest0.isContextDependent();
      // Undeclared exception!
      try { 
        coreOperationLessThanOrEqual0.iteratePointers((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Expression", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Constant constant0 = new Constant("+fnN");
      constant0.iterate((EvalContext) null);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      coreOperationNegate0.toString();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationNegate0, coreOperationNegate0);
      coreOperationGreaterThanOrEqual0.toString();
      coreOperationGreaterThanOrEqual0.isSymmetric();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      coreOperationLessThanOrEqual0.evaluateCompare((-1));
      coreOperationLessThanOrEqual0.evaluateCompare((-1));
      boolean boolean0 = coreOperationLessThanOrEqual0.isSymmetric();
      coreOperationLessThanOrEqual0.getSymbol();
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationLessThanOrEqual0, coreOperationNegate0);
      coreOperationGreaterThan0.toString();
      coreOperationLessThanOrEqual0.isContextDependent();
      Object object0 = coreOperationGreaterThan0.compute((EvalContext) null);
      assertTrue(object0.equals((Object)boolean0));
      
      coreOperationGreaterThan0.toString();
      coreOperationGreaterThanOrEqual0.iterate((EvalContext) null);
      coreOperationGreaterThan0.evaluateCompare((-1));
      coreOperationGreaterThanOrEqual0.getSymbol();
      Object object1 = coreOperationGreaterThanOrEqual0.computeValue((EvalContext) null);
      assertEquals(false, object1);
      
      coreOperationGreaterThanOrEqual0.getSymbol();
      boolean boolean1 = coreOperationGreaterThan0.evaluateCompare((-1));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      QName qName0 = new QName("Ecx3");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(variableReference0, variableReference0);
      coreOperationGreaterThanOrEqual0.getPrecedence();
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationGreaterThanOrEqual0, variableReference0);
      coreOperationGreaterThan0.getSymbol();
      NodeTest nodeTest0 = null;
      SelfContext selfContext0 = new SelfContext((EvalContext) null, (NodeTest) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      AncestorContext ancestorContext0 = new AncestorContext(selfContext0, false, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreOperationGreaterThan0.computeValue(ancestorContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      QName qName0 = new QName("org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression");
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate((Expression) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationNegate0, coreOperationNegate0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      Step[] stepArray0 = new Step[7];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Step step0 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[6];
      expressionArray1[0] = (Expression) coreOperationNegate0;
      expressionArray1[1] = (Expression) coreOperationLessThan0;
      expressionArray1[2] = (Expression) coreOperationNegate0;
      expressionArray1[3] = (Expression) coreOperationLessThan0;
      expressionArray1[4] = (Expression) coreOperationLessThan0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray1[1], coreOperationLessThan0);
      expressionArray1[5] = (Expression) coreOperationLessThanOrEqual0;
      Step step1 = new Step(2267, nodeTypeTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step(1435, nodeTypeTest0, expressionArray1);
      stepArray0[2] = step2;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression");
      Step step3 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Cannot setValue of an object that is not some other object's property");
      Expression[] expressionArray2 = new Expression[8];
      expressionArray2[0] = null;
      expressionArray2[1] = (Expression) coreOperationLessThan0;
      expressionArray2[2] = (Expression) coreOperationLessThan0;
      expressionArray2[3] = (Expression) coreOperationNegate0;
      expressionArray2[4] = (Expression) coreOperationNegate0;
      expressionArray2[5] = null;
      expressionArray2[6] = null;
      expressionArray2[7] = (Expression) coreOperationLessThanOrEqual0;
      Step step4 = new Step(0, processingInstructionTest0, expressionArray2);
      stepArray0[4] = step4;
      Step step5 = new Step((-1651), nodeTypeTest0, expressionArray2);
      stepArray0[5] = step5;
      Step step6 = new Step((-1651), nodeTypeTest0, expressionArray0);
      stepArray0[6] = step6;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationNegate0, expressionArray2[7]);
      expressionArray0[2] = (Expression) coreOperationEqual0;
      CoreOperationEqual coreOperationEqual1 = new CoreOperationEqual(coreOperationLessThanOrEqual0, expressionArray1[1]);
      expressionArray0[3] = (Expression) coreOperationEqual1;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      Expression expression0 = coreFunction0.getArg3();
      expressionArray0[4] = expression0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(extensionFunction0, expressionArray0[3]);
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
  }
}
