/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 12:47:22 GMT 2021
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.format.ISOPeriodFormat;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Period_ESTest extends Period_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Period period0 = Period.days(100);
      Duration duration0 = period0.toStandardDuration();
      assertEquals(8640000000L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) fixedDateTimeZone0, 6);
      Period period0 = new Period((long) 6, (Chronology) gregorianChronology0);
      Period period1 = period0.plusDays(6);
      Seconds seconds0 = period1.toStandardSeconds();
      assertEquals(518400, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Period period0 = Period.minutes(6);
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(360, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Period period0 = Period.seconds((-2906));
      Period period1 = period0.minusDays((-410));
      Minutes minutes0 = period1.toStandardMinutes();
      assertEquals(590352, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusHours(2053);
      Minutes minutes0 = period1.toStandardMinutes();
      assertEquals(123180, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Period period0 = Period.seconds((-2906));
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals((-48), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Period period0 = Period.seconds((-2906));
      Hours hours0 = period0.toStandardHours();
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Period period0 = new Period(3355, 2053, 3, 157);
      Days days0 = period0.toStandardDays();
      assertEquals(141, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.minusMinutes((-4176));
      Weeks weeks0 = period1.toStandardWeeks();
      assertNotSame(period1, period0);
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.minusSeconds((-3513));
      Weeks weeks0 = period1.toStandardWeeks();
      assertEquals(0, weeks0.getWeeks());
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Period period0 = new Period(3355, 2053, 3, 157);
      Seconds seconds0 = Seconds.secondsIn((ReadableInterval) null);
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      Period period1 = period0.withFieldAdded(durationFieldType0, (-349));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      YearMonth yearMonth0 = new YearMonth((Chronology) julianChronology0);
      LocalTime localTime0 = new LocalTime((long) 1);
      // Undeclared exception!
      try { 
        Period.fieldDifference(localTime0, yearMonth0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Minutes minutes0 = Minutes.ONE;
      Seconds seconds0 = minutes0.toStandardSeconds();
      Duration duration0 = seconds0.toStandardDuration();
      DateTime dateTime0 = new DateTime();
      Weeks weeks0 = Weeks.ZERO;
      PeriodType periodType0 = weeks0.getPeriodType();
      Period period0 = new Period(duration0, dateTime0, periodType0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Period period0 = new Period(7L);
      Period period1 = period0.withYears(317351877);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Period period0 = Period.days(25);
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(3, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.minusHours(3355);
      Weeks weeks0 = period1.toStandardWeeks();
      assertEquals((-19), weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Period period0 = Period.weeks((-2906));
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals((-1757548800), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Period period0 = Period.weeks((-3513));
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals((-35411040), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Period period0 = Period.weeks(3355);
      Hours hours0 = period0.toStandardHours();
      assertEquals(563640, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Period period0 = Period.minutes((-3889));
      Hours hours0 = period0.toStandardHours();
      assertEquals((-64), hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Period period0 = Period.weeks(151);
      Duration duration0 = period0.toStandardDuration();
      assertEquals(91324800000L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Period period0 = new Period();
      Duration duration0 = period0.toStandardDuration();
      assertEquals(0L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Period period0 = new Period((-918), (-918), 512, 0);
      Duration duration0 = period0.toStandardDuration();
      assertEquals((-3359368000L), duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.minusHours(3355);
      Days days0 = period1.toStandardDays();
      assertEquals((-139), days0.getDays());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      Period period0 = Period.parse("", periodFormatter0);
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Period period0 = Period.seconds((-2906));
      int int0 = period0.getYears();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-2469));
      Period period0 = new Period((ReadableInstant) null, duration0);
      int int0 = period0.getYears();
      assertEquals((-6), int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Period period0 = Period.weeks(3355);
      int int0 = period0.getWeeks();
      assertEquals(3355, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.minusWeeks(12);
      int int0 = period1.getWeeks();
      assertEquals((-12), int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Period period0 = new Period(0, 0, (-714), 121);
      int int0 = period0.getSeconds();
      assertEquals((-714), int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.plusMonths(1842);
      int int0 = period1.getMonths();
      assertEquals(1842, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Period period0 = Period.seconds((-2906));
      Period period1 = period0.plusMonths((-410));
      int int0 = period1.getMonths();
      assertEquals((-410), int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Period period0 = new Period(0, 9, (-714), 121);
      int int0 = period0.getMinutes();
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Period period0 = new Period(3355, 2053, 3, 157);
      int int0 = period0.getMillis();
      assertEquals(157, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Period period0 = new Period(85L, (-2072));
      int int0 = period0.getMillis();
      assertEquals((-157), int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Period period0 = Period.days(1079);
      int int0 = period0.getHours();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gregorianChronology0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0L, lenientChronology0);
      Period period0 = mutablePeriod0.toPeriod();
      Period period1 = period0.minusHours((-3889));
      int int0 = period1.getHours();
      assertEquals(3889, int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Period period0 = Period.minutes(100);
      int int0 = period0.getDays();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Period period0 = Period.minutes(6);
      Period period1 = Period.days(6);
      Period period2 = period0.minus(period1);
      int int0 = period2.getDays();
      assertEquals((-6), int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Period period0 = new Period();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      int[] intArray0 = new int[8];
      intArray0[0] = 1034;
      PeriodType periodType0 = new PeriodType("AST", durationFieldTypeArray0, intArray0);
      Period period1 = period0.withPeriodType(periodType0);
      // Undeclared exception!
      try { 
        period1.withYears(798);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1034
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      YearMonth yearMonth0 = new YearMonth((Chronology) gJChronology0);
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
      try { 
        period0.withWeeks(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.WEEK_INDEX = (-981);
      // Undeclared exception!
      try { 
        period0.withWeeks((-6834));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -981
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Period period0 = Period.seconds(1000);
      PeriodType.SECOND_INDEX = (-2895);
      // Undeclared exception!
      try { 
        period0.withSeconds(1000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2895
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Period period0 = new Period();
      PeriodType periodType0 = new PeriodType("", (DurationFieldType[]) null, (int[]) null);
      // Undeclared exception!
      try { 
        period0.withPeriodType(periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Period period0 = Period.seconds((-2906));
      PeriodType periodType0 = PeriodType.days();
      // Undeclared exception!
      try { 
        period0.withPeriodType(periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'seconds'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      DateTime dateTime0 = new DateTime(2L, dateTimeZone0);
      LocalDateTime localDateTime0 = dateTime0.toLocalDateTime();
      Hours hours0 = Hours.EIGHT;
      PeriodType periodType0 = hours0.getPeriodType();
      Period period0 = new Period(localDateTime0, localDateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.withMonths((-270));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      PeriodType periodType0 = new PeriodType("&.=.m2* z", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(1831L, periodType0);
      // Undeclared exception!
      try { 
        period0.withMonths((-1250));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      PeriodType.MONTH_INDEX = 315;
      Period period0 = new Period(0L, (-225L), periodType0);
      // Undeclared exception!
      try { 
        period0.withMonths(315);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 315
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Weeks weeks0 = Weeks.THREE;
      PeriodType periodType0 = weeks0.getPeriodType();
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      Period period0 = new Period(0L, (-3889), periodType0, julianChronology0);
      // Undeclared exception!
      try { 
        period0.withMinutes((-545));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Period period0 = Period.millis(153692453);
      PeriodType.MINUTE_INDEX = (-1554);
      // Undeclared exception!
      try { 
        period0.withMinutes(690562340);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1554
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      DateTime dateTime0 = new DateTime(2L, dateTimeZone0);
      LocalDateTime localDateTime0 = dateTime0.toLocalDateTime();
      Hours hours0 = Hours.EIGHT;
      PeriodType periodType0 = hours0.getPeriodType();
      Period period0 = new Period(localDateTime0, localDateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.withMillis(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Period period0 = Period.minutes(1837);
      PeriodType.MILLI_INDEX = 1837;
      // Undeclared exception!
      try { 
        period0.withMillis(3681);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1837
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
      try { 
        period0.withHours(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Period period0 = new Period((-1L));
      PeriodType.HOUR_INDEX = 3137;
      // Undeclared exception!
      try { 
        period0.withHours((-3370));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3137
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.withWeeks(1073741824);
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      // Undeclared exception!
      try { 
        period1.withFieldAdded(durationFieldType0, 1073741824);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 1073741824 + 1073741824
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      DateTime dateTime0 = new DateTime(2L, dateTimeZone0);
      LocalDateTime localDateTime0 = dateTime0.toLocalDateTime();
      Hours hours0 = Hours.EIGHT;
      PeriodType periodType0 = hours0.getPeriodType();
      Period period0 = new Period(localDateTime0, localDateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.withDays((-270));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Duration duration0 = Duration.millis((-334L));
      Period period0 = duration0.toPeriod((PeriodType) null);
      PeriodType.DAY_INDEX = (-768);
      // Undeclared exception!
      try { 
        period0.withDays((-20));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -768
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Period period0 = new Period(3355, 2053, 3, 157);
      Period period1 = period0.plusMonths(1932);
      // Undeclared exception!
      try { 
        period1.toStandardWeeks();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Weeks as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Period period0 = Period.millis(1774);
      PeriodType.HOUR_INDEX = 1259;
      // Undeclared exception!
      try { 
        period0.toStandardWeeks();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Period period0 = new Period((-918), 8, 512, 0);
      PeriodType.MONTH_INDEX = 8;
      // Undeclared exception!
      try { 
        period0.toStandardSeconds();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusHours((-3814));
      Period period2 = period1.multipliedBy(1672);
      // Undeclared exception!
      try { 
        period2.toStandardSeconds();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -22957228800
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      YearMonth yearMonth0 = new YearMonth((Chronology) gJChronology0);
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      Period period1 = period0.withFieldAdded(durationFieldType0, 156);
      // Undeclared exception!
      try { 
        period1.toStandardMinutes();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Minutes as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Period period0 = Period.minutes((-3889));
      PeriodType.YEAR_INDEX = (-3889);
      // Undeclared exception!
      try { 
        period0.toStandardMinutes();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(0L);
      Period period0 = duration0.toPeriod();
      Period period1 = period0.plusWeeks(15271875);
      // Undeclared exception!
      try { 
        period1.toStandardMinutes();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 153940500000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Period period0 = Period.years((-947));
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Hours as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.WEEK_INDEX = 2460;
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Period period0 = Period.days(6);
      Period period1 = period0.minusWeeks(20503125);
      // Undeclared exception!
      try { 
        period1.toStandardHours();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -3444524856
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Period period0 = Period.minutes(6);
      PeriodType.HOUR_INDEX = 2319;
      // Undeclared exception!
      try { 
        period0.toStandardDuration();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Period period0 = Period.seconds((-2906));
      Period period1 = period0.plusYears((-2906));
      // Undeclared exception!
      try { 
        period1.toStandardDays();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Days as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.WEEK_INDEX = 826;
      // Undeclared exception!
      try { 
        period0.toStandardDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Period period0 = Period.weeks(623158436);
      // Undeclared exception!
      try { 
        period0.toStandardDays();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 4362109052
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((long) (-349));
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      // Undeclared exception!
      try { 
        period0.plusYears(3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.YEAR_INDEX = (-3947);
      // Undeclared exception!
      try { 
        period0.plusYears((-1593));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      YearMonth yearMonth0 = new YearMonth((Chronology) gJChronology0);
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
      try { 
        period0.plusWeeks(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Period period0 = Period.millis(576);
      PeriodType.WEEK_INDEX = 1318;
      // Undeclared exception!
      try { 
        period0.plusWeeks(576);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      YearMonth yearMonth0 = new YearMonth((Chronology) gJChronology0);
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
      try { 
        period0.plusSeconds((-861));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.SECOND_INDEX = (-4347);
      // Undeclared exception!
      try { 
        period0.plusSeconds((-4347));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      DateTime dateTime0 = new DateTime(2L, dateTimeZone0);
      LocalDateTime localDateTime0 = dateTime0.toLocalDateTime();
      Hours hours0 = Hours.EIGHT;
      PeriodType periodType0 = hours0.getPeriodType();
      Period period0 = new Period(localDateTime0, localDateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.plusMonths(6119);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      PeriodType.MONTH_INDEX = 315;
      Period period0 = new Period(0L, 0L, periodType0);
      // Undeclared exception!
      try { 
        period0.plusMonths(1271);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MINUTE_INDEX = 1578;
      // Undeclared exception!
      try { 
        period0.plusMinutes((-95));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      YearMonth yearMonth0 = new YearMonth((Chronology) julianChronology0);
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
      try { 
        period0.plusMillis((-204));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MILLI_INDEX = 2413;
      // Undeclared exception!
      try { 
        period0.plusMillis(157);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Period period0 = Period.weeks((-1));
      PeriodType.HOUR_INDEX = 109;
      // Undeclared exception!
      try { 
        period0.plusHours(122);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Period period0 = new Period(Integer.MIN_VALUE, Integer.MIN_VALUE, 3, 157);
      // Undeclared exception!
      try { 
        period0.plusHours((-349));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -349
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((Chronology) null);
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
      try { 
        period0.plusDays(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Period period0 = Period.seconds(479);
      PeriodType.DAY_INDEX = (-437);
      // Undeclared exception!
      try { 
        period0.ZERO.plusDays((-638));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Period period0 = Period.minutes(6);
      YearMonth yearMonth0 = new YearMonth();
      Period period1 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
      try { 
        period1.plus(period0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Period period0 = Period.minutes(3892);
      PeriodType.MINUTE_INDEX = 117;
      // Undeclared exception!
      try { 
        period0.plus(period0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Weeks weeks0 = Weeks.MAX_VALUE;
      Duration duration0 = weeks0.toStandardDuration();
      PeriodType periodType0 = weeks0.getPeriodType();
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      Period period0 = duration0.toPeriod(periodType0, (Chronology) julianChronology0);
      // Undeclared exception!
      try { 
        period0.plus(weeks0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse("", (PeriodFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PeriodFormatter periodFormatter0 = ISOPeriodFormat.standard();
      // Undeclared exception!
      try { 
        Period.parse("4dd_N351`)5;Bd.", periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"4dd_N351`)5;Bd.\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Literal", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Period period0 = new Period();
      int[] intArray0 = new int[8];
      PeriodType periodType0 = new PeriodType("jQa2a'^|g k", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      PeriodType.MONTH_INDEX = 315;
      Period period0 = new Period(0L, 0L, periodType0);
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Period period0 = new Period(3355, 2053, 3, 157);
      PeriodType periodType0 = PeriodType.millis();
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 12201183157
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Period period0 = Period.days(0);
      PeriodType.DAY_INDEX = 5894;
      // Undeclared exception!
      try { 
        period0.normalizedStandard();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Period period0 = Period.months(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        period0.negated();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -2147483648 * -1
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      DateTime dateTime0 = new DateTime(2L, dateTimeZone0);
      LocalDateTime localDateTime0 = dateTime0.toLocalDateTime();
      Hours hours0 = Hours.MIN_VALUE;
      PeriodType periodType0 = hours0.getPeriodType();
      Period period0 = new Period(localDateTime0, localDateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.minusYears(1069);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      YearMonth yearMonth0 = new YearMonth((Chronology) gJChronology0);
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
      try { 
        period0.minusWeeks((-800));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Period period0 = new Period();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      PeriodType periodType0 = new PeriodType(" * ", durationFieldTypeArray0, (int[]) null);
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.minusWeeks(3929);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Period period0 = Period.days(0);
      PeriodType.WEEK_INDEX = 15356250;
      // Undeclared exception!
      try { 
        period0.minusWeeks((-1802));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Period period0 = Period.weeks((-512));
      // Undeclared exception!
      try { 
        period0.minusWeeks(Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -512 + -2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Period period0 = Period.ZERO;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-884));
      MutableDateTime mutableDateTime0 = MutableDateTime.now(dateTimeZone0);
      PeriodType periodType0 = PeriodType.yearDay();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.minusSeconds(mutableDateTime0.ROUND_HALF_EVEN);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Period period0 = Period.weeks(25734375);
      PeriodType.SECOND_INDEX = 25734375;
      // Undeclared exception!
      try { 
        period0.minusSeconds((-8));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      PeriodType periodType1 = periodType0.withMonthsRemoved();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Period period0 = new Period(43200000L, 43200000L, periodType1, buddhistChronology0);
      // Undeclared exception!
      try { 
        period0.minusMonths(2938);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Period period0 = Period.years((-254));
      PeriodType.MONTH_INDEX = (-45);
      // Undeclared exception!
      try { 
        period0.minusMonths((-45));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Period period0 = Period.months(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        period0.minusMonths(12);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -12
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-32));
      DateTime dateTime0 = new DateTime(2L, dateTimeZone0);
      LocalDateTime localDateTime0 = dateTime0.toLocalDateTime();
      Hours hours0 = Hours.EIGHT;
      PeriodType periodType0 = hours0.getPeriodType();
      Period period0 = new Period(localDateTime0, localDateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.minusMinutes((-32));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MINUTE_INDEX = 1568;
      // Undeclared exception!
      try { 
        period0.minusMinutes(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      GJChronology gJChronology0 = GJChronology.getInstance();
      Period period0 = new Period(3650L, 3650L, periodType0, gJChronology0);
      // Undeclared exception!
      try { 
        period0.minusMillis((-663));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MILLI_INDEX = 366;
      // Undeclared exception!
      try { 
        period0.minusMillis(543);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Period period0 = Period.millis(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        period0.minusMillis(12);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -12
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      PeriodType.HOUR_INDEX = 97;
      Period period0 = new Period((-612L), (-612L), periodType0, (Chronology) null);
      // Undeclared exception!
      try { 
        period0.minusHours(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.minusHours(12);
      // Undeclared exception!
      try { 
        period1.minusHours(Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -12 + -2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PeriodType periodType0 = PeriodType.time();
      Period period0 = new Period(2834L, periodType0, (Chronology) null);
      // Undeclared exception!
      try { 
        period0.minusDays(2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Period period0 = Period.minutes((-607));
      PeriodType.DAY_INDEX = 23034375;
      // Undeclared exception!
      try { 
        period0.minusDays((-607));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Duration duration0 = Duration.standardHours(0L);
      PeriodType periodType0 = PeriodType.seconds();
      Period period0 = new Period((ReadableInstant) null, duration0, periodType0);
      MonthDay monthDay0 = MonthDay.now();
      LocalDate localDate0 = monthDay0.toLocalDate((-351));
      Interval interval0 = localDate0.toInterval();
      Hours hours0 = Hours.hoursIn(interval0);
      // Undeclared exception!
      try { 
        period0.minus(hours0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-2469));
      Period period0 = new Period((ReadableInstant) null, duration0);
      Period period1 = period0.plusMinutes((-2469));
      Period period2 = period1.normalizedStandard();
      Hours hours0 = Hours.MIN_VALUE;
      // Undeclared exception!
      try { 
        period2.minus(hours0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -17 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Period period0 = Period.millis((-1));
      PeriodType.YEAR_INDEX = (-1);
      // Undeclared exception!
      try { 
        period0.ZERO.getYears();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Period period0 = new Period((-4045L), (-4045L));
      PeriodType.WEEK_INDEX = 3819;
      // Undeclared exception!
      try { 
        period0.ZERO.getWeeks();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MONTH_INDEX = 4356;
      // Undeclared exception!
      try { 
        period0.getMonths();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Period period0 = Period.minutes(57);
      PeriodType.MINUTE_INDEX = 1879;
      // Undeclared exception!
      try { 
        period0.ZERO.getMinutes();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Period period0 = Period.minutes(1303);
      PeriodType.MILLI_INDEX = 957;
      // Undeclared exception!
      try { 
        period0.ZERO.getMillis();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Period period0 = Period.days(0);
      PeriodType.HOUR_INDEX = (-822);
      // Undeclared exception!
      try { 
        period0.getHours();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Period period0 = Period.weeks(3002);
      PeriodType.DAY_INDEX = (-605);
      // Undeclared exception!
      try { 
        period0.getDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      YearMonth yearMonth0 = YearMonth.now(dateTimeZone0);
      YearMonth yearMonth1 = new YearMonth(yearMonth0, (int[]) null);
      // Undeclared exception!
      try { 
        Period.fieldDifference(yearMonth1, yearMonth0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      int[] intArray0 = new int[1];
      YearMonth yearMonth1 = new YearMonth(yearMonth0, intArray0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(yearMonth1, yearMonth0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);
      MonthDay monthDay0 = new MonthDay(dateTimeZone0);
      YearMonth yearMonth0 = new YearMonth(0L, (Chronology) zonedChronology0);
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      Period period0 = null;
      try {
        period0 = new Period(yearMonth0, monthDay0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Months months0 = Months.ZERO;
      PeriodType periodType0 = months0.getPeriodType();
      Period period0 = null;
      try {
        period0 = new Period("", periodType0, (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Object object0 = new Object();
      Period period0 = null;
      try {
        period0 = new Period(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      int[] intArray0 = new int[1];
      PeriodType periodType0 = new PeriodType("$uBV~(DVO=@gR", (DurationFieldType[]) null, intArray0);
      Period period0 = null;
      try {
        period0 = new Period((-521L), periodType0, (Chronology) julianChronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[8];
      DurationFieldType durationFieldType0 = DurationFieldType.MILLIS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldType0;
      durationFieldTypeArray0[3] = durationFieldType0;
      DurationFieldType durationFieldType1 = DurationFieldType.ERAS_TYPE;
      durationFieldTypeArray0[4] = durationFieldType1;
      int[] intArray0 = new int[8];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      Period period0 = null;
      try {
        period0 = new Period(168L, periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[8];
      int[] intArray0 = new int[8];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      Period period0 = null;
      try {
        period0 = new Period(168L, periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      DurationFieldType durationFieldType0 = DurationFieldType.ERAS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      int[] intArray0 = new int[7];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      Period period0 = null;
      try {
        period0 = new Period(0, 1, periodType0, julianChronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Period period0 = new Period(3355, 2053, 3, 157);
      Period period1 = period0.plusMonths(1968);
      PeriodType periodType0 = PeriodType.yearDay();
      period1.normalizedStandard(periodType0);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Period period0 = new Period();
      PeriodType periodType0 = PeriodType.yearDay();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.withSeconds(2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Period period0 = Period.years((-2906));
      Months months0 = Months.parseMonths((String) null);
      PeriodType periodType0 = months0.getPeriodType();
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.plusMillis(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusMillis(157);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      int[] intArray0 = new int[6];
      PeriodType periodType0 = new PeriodType("LA6L$J6m=fL<zl[", durationFieldTypeArray0, intArray0);
      Period period0 = new Period(24L, periodType0);
      Period period1 = period0.plusSeconds(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Period period0 = Period.seconds(Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        period0.plusSeconds(Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      // Undeclared exception!
      try { 
        period0.plusMinutes(8);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      GJChronology gJChronology0 = GJChronology.getInstance();
      Period period0 = new Period(3650L, 3650L, periodType0, gJChronology0);
      // Undeclared exception!
      try { 
        period0.plusHours((-545));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.ZERO.plusWeeks(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Period period0 = new Period((-918), 8, 512, 0);
      int int0 = period0.getHours();
      assertEquals((-918), int0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Period period0 = new Period();
      int int0 = period0.getWeeks();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Period period0 = new Period(3355, 3355, 3355, 3355, 3355, 3355, 3355, 3355);
      int int0 = period0.getYears();
      assertEquals(3355, int0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Period period0 = new Period();
      int int0 = period0.getSeconds();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Period period0 = new Period((Object) null, (PeriodType) null);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Period period0 = new Period(5, 5, 5, 5, 5, 5, 5, 5);
      int int0 = period0.getDays();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-5985L));
      Period period0 = new Period((ReadableInstant) null, duration0);
      int int0 = period0.getMinutes();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null);
      // Undeclared exception!
      try { 
        Period.parse("Fixing duplicate name key - ", periodFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Period period0 = Period.ZERO;
      int int0 = period0.getMonths();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Period period0 = new Period((Object) null, buddhistChronology0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Period period0 = Period.minutes(1303);
      int int0 = period0.ZERO.getMillis();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Period period0 = new Period(2053, (-3889), (-918), 0, 120, 12, 0, 12, (PeriodType) null);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Period period0 = Period.years(5);
      Period period1 = period0.normalizedStandard();
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Period period0 = Period.millis(0);
      Period period1 = period0.minusMonths(1);
      PeriodType periodType0 = PeriodType.yearMonthDay();
      Period period2 = period1.normalizedStandard(periodType0);
      assertFalse(period2.equals((Object)period1));
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Period period0 = new Period(3355, 3355, 3355, 3355, 3355, 3355, 3355, 3355);
      Period period1 = period0.normalizedStandard();
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Period period0 = Period.weeks(0);
      Period period1 = period0.plusYears(1);
      // Undeclared exception!
      try { 
        period1.toStandardDuration();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Duration as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Period period0 = Period.millis(0);
      Period period1 = period0.minusMonths(1);
      // Undeclared exception!
      try { 
        period1.toStandardSeconds();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Seconds as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.withWeeks(0);
      Period period2 = period1.multipliedBy(1);
      assertTrue(period2.equals((Object)period0));
      assertSame(period2, period1);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Period period0 = Period.minutes(2992);
      Period period1 = period0.ZERO.multipliedBy((-9));
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      Period period0 = new Period(21260793600000L, 21260793600000L, periodType0, (Chronology) null);
      Period period1 = period0.minus((ReadablePeriod) null);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Weeks weeks0 = Weeks.THREE;
      PeriodType periodType0 = weeks0.getPeriodType();
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      Period period0 = new Period(0L, (-3889), periodType0, julianChronology0);
      Period period1 = period0.plusHours(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusDays(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Period period0 = Period.days(0);
      Period period1 = period0.plusMonths(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Period period0 = Period.weeks(151);
      Period period1 = period0.plusYears(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.plus((ReadablePeriod) null);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Period period0 = Period.minutes(3892);
      Period period1 = period0.plus(period0);
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Period period0 = new Period();
      Hours hours0 = Hours.MIN_VALUE;
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      Period period1 = period0.withFieldAdded(durationFieldType0, 0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Period period0 = new Period();
      // Undeclared exception!
      try { 
        period0.withFieldAdded((DurationFieldType) null, 3334);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Period period0 = Period.days(0);
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      Period period1 = period0.withFieldAdded(durationFieldType0, 15356250);
      // Undeclared exception!
      try { 
        period1.multipliedBy(1012);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: 15356250 * 1012
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Period period0 = new Period();
      // Undeclared exception!
      try { 
        period0.withField((DurationFieldType) null, (-2023));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Period period0 = Period.minutes(3892);
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      Period period1 = period0.withField(durationFieldType0, 944);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.withFields((ReadablePeriod) null);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      Days days0 = period0.toStandardDays();
      Period period1 = period0.withFields(days0);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Period period0 = Period.weeks(3002);
      PeriodType periodType0 = PeriodType.standard();
      Period period1 = period0.withPeriodType(periodType0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[7];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      int[] intArray0 = new int[9];
      Partial partial0 = new Partial((Chronology) null, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(partial0, partial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not have overlapping fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      YearMonth yearMonth0 = new YearMonth((Chronology) islamicChronology0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(yearMonth0, monthDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((Chronology) null);
      Locale locale0 = Locale.GERMANY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(yearMonth0, localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      YearMonth yearMonth0 = new YearMonth((Chronology) julianChronology0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(yearMonth0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.fieldDifference((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period((ReadableInstant) null, (ReadableInstant) null, periodType0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      // Undeclared exception!
      try { 
        period0.withYears(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Period period0 = new Period();
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Period period0 = new Period((-453), (-453), (-453), 1999);
      PeriodType.YEAR_INDEX = (-453);
      // Undeclared exception!
      try { 
        period0.minusYears(1999);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 1, dateTimeZone0);
      Duration duration0 = Duration.standardSeconds(0L);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      PeriodType periodType0 = new PeriodType(" uO=){v6mW", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(mutableDateTime0, duration0, periodType0);
      // Undeclared exception!
      try { 
        period0.plusHours(18);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Period period0 = Period.ZERO;
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = new Period(period0, (PeriodType) null, (Chronology) null);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      MutableDateTime mutableDateTime0 = new MutableDateTime(576L, (Chronology) islamicChronology0);
      Period period0 = new Period(monthDay0, monthDay0);
      Duration duration0 = period0.toDurationTo(mutableDateTime0);
      Period period1 = new Period(mutableDateTime0, duration0);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Period period0 = Period.weeks(3002);
      Period period1 = period0.withMonths(3002);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Instant instant0 = new Instant();
      Chronology chronology0 = instant0.getChronology();
      LocalTime localTime0 = new LocalTime(chronology0);
      PeriodType periodType0 = PeriodType.yearMonthDay();
      Period period0 = new Period(localTime0, localTime0, periodType0);
      Period period1 = period0.plusMinutes(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Period period0 = new Period((-4045L), (-4045L));
      Period period1 = period0.minusMillis(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      DateTime dateTime0 = new DateTime(0L);
      Period period0 = new Period(dateTime0, dateTime0);
      Period period1 = period0.withMinutes((-2542));
      int int0 = period1.getMinutes();
      assertEquals((-2542), int0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Period period0 = new Period();
      Weeks weeks0 = period0.toStandardWeeks();
      Period period1 = new Period(weeks0);
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Period period0 = Period.hours((-2484));
      PeriodType.SECOND_INDEX = (-2484);
      // Undeclared exception!
      try { 
        period0.getSeconds();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-2469));
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTime dateTime0 = new DateTime((DateTimeZone) fixedDateTimeZone0);
      Period period0 = new Period(duration0, dateTime0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      // Undeclared exception!
      try { 
        period0.minusHours((-886));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Period period0 = new Period(80, 80, 1279, 1279, 504, 504, 1279, 80);
      PeriodType.HOUR_INDEX = 9;
      // Undeclared exception!
      try { 
        period0.minus(period0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Period period0 = new Period(60000L);
      Period period1 = period0.toPeriod();
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      Period period0 = new Period(0, 0, ethiopicChronology0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Period period0 = Period.minutes(1837);
      Period period1 = period0.withMillis(3681);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.minusMonths(104);
      // Undeclared exception!
      try { 
        period1.plusMonths(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -104 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDay();
      Period period0 = null;
      try {
        period0 = new Period(0, 162, 13421772, 162, 13421772, 13421772, 0, 13421772, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'weeks'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Period period0 = new Period(60000L);
      Period period1 = period0.minusYears(576);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Object object0 = new Object();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Period period0 = null;
      try {
        period0 = new Period(object0, buddhistChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Period period0 = Period.parse("P-576YT1M");
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Period period0 = Period.days(0);
      Period period1 = period0.negated();
      assertNotSame(period1, period0);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      PeriodType periodType0 = PeriodType.hours();
      Period period0 = null;
      try {
        period0 = new Period(yearMonth0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: org.joda.time.YearMonth
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.ZERO.withSeconds(1252);
      int int0 = period1.getSeconds();
      assertEquals(1252, int0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Period period0 = new Period(60000L);
      Period period1 = period0.ZERO.withHours((byte)37);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Duration duration0 = Duration.millis((-334L));
      Period period0 = duration0.toPeriod((PeriodType) null);
      Period period1 = period0.withDays((-20));
      assertNotSame(period0, period1);
  }
}
