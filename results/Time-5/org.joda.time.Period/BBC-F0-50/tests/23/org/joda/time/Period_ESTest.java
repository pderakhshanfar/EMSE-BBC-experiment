/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 08:30:32 GMT 2021
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.format.ISOPeriodFormat;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Period_ESTest extends Period_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      Period period0 = new Period((long) 0, (Chronology) ethiopicChronology0);
      Period period1 = period0.minusMonths(1);
      Period period2 = period1.normalizedStandard();
      assertTrue(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Period period0 = new Period((-2072), (-2072), (-2072), (-2072), 350, 2306, 350, (-2072));
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Hours as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Period period0 = Period.weeks(563);
      Duration duration0 = period0.toStandardDuration();
      assertEquals(340502400000L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Period period0 = Period.days(2737);
      Period period1 = period0.plusSeconds(128);
      Duration duration0 = period1.toStandardDuration();
      assertEquals(236476928000L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Period period0 = Period.days(6);
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(518400, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Period period0 = Period.minutes(6);
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(360, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Period period0 = new Period(0L);
      Period period1 = period0.withWeeks(2395);
      Minutes minutes0 = period1.toStandardMinutes();
      assertEquals(24141600, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Period period0 = new Period((-909L), 747L);
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Period period0 = Period.days((-66));
      Period period1 = period0.normalizedStandard();
      Days days0 = period1.toStandardDays();
      assertEquals((-66), days0.getDays());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Period period0 = new Period((-112), (-112), (-112), (-112));
      Days days0 = period0.toStandardDays();
      assertEquals((-4), days0.getDays());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Duration duration0 = Duration.standardHours(201L);
      PeriodType periodType0 = PeriodType.seconds();
      Period period0 = duration0.toPeriodFrom((ReadableInstant) null, periodType0);
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(1, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Period period0 = Period.minutes(6);
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      Period period1 = period0.withFieldAdded(durationFieldType0, (-1379));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      LocalDateTime localDateTime0 = LocalDateTime.now();
      // Undeclared exception!
      try { 
        Period.fieldDifference(yearMonth0, localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Duration duration0 = Duration.standardHours(201L);
      Period period0 = new Period(duration0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      DateTime dateTime0 = DateTime.now(dateTimeZone0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0);
      Period period0 = new Period(494L, periodType0, (Chronology) gJChronology0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Period period0 = Period.weeks((-1788));
      Period period1 = period0.withMinutes(210);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Period period0 = Period.hours(30);
      Period period1 = period0.withDays((-3785));
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Period period0 = Period.minutes((-354));
      Period period1 = Period.days((-354));
      Period period2 = period0.minus(period1);
      Weeks weeks0 = period2.toStandardWeeks();
      assertEquals(50, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Period period0 = Period.hours(1002);
      Period period1 = period0.negated();
      Weeks weeks0 = period1.toStandardWeeks();
      assertEquals((-5), weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Period period0 = new Period();
      Seconds seconds0 = Seconds.MAX_VALUE;
      Period period1 = period0.plus(seconds0);
      Seconds seconds1 = period1.toStandardSeconds();
      assertEquals(Integer.MAX_VALUE, seconds1.getSeconds());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Period period0 = new Period((-1619), 0, (-1619), (-1619));
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals((-5830020), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Period period0 = Period.days(2395);
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(3448800, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Period period0 = Period.hours((-66));
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals((-3960), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Period period0 = Period.weeks(4087);
      Hours hours0 = period0.toStandardHours();
      assertEquals(686616, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Period period0 = new Period((-2072), (-2072), (-2072), (-2072), 350, 2306, 350, (-2072));
      PeriodType.HOUR_INDEX = 0;
      Period period1 = period0.withMonths(0);
      Period period2 = period1.minusSeconds((-2580));
      Period period3 = period2.withHours(0);
      assertFalse(period3.equals((Object)period2));
      
      Hours hours0 = period3.toStandardHours();
      assertEquals((-397785), hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Period period0 = Period.millis(0);
      Duration duration0 = period0.toStandardDuration();
      assertEquals(0L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Period period0 = Period.hours((-66));
      Duration duration0 = period0.toStandardDuration();
      assertEquals((-237600000L), duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Period period0 = new Period(4L, (Chronology) null);
      Period period1 = Period.hours((-1777));
      Period period2 = period0.minus(period1);
      Days days0 = period2.toStandardDays();
      assertEquals(74, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      Period period0 = Period.parse("", periodFormatter0);
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Period period0 = Period.parse("P");
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Period period0 = new Period(3845, 3845, 3479, (-852));
      int int0 = period0.getYears();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Period period0 = Period.years(7);
      int int0 = period0.getYears();
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Period period0 = Period.days((-66));
      int int0 = period0.ZERO.getWeeks();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Period period0 = Period.weeks(563);
      int int0 = period0.getWeeks();
      assertEquals(563, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Period period0 = new Period(7, 7, 7, 7, 7, 7, 7, 7);
      int int0 = period0.getSeconds();
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Period period0 = Period.minutes(6);
      Period period1 = period0.minusSeconds(1923);
      int int0 = period1.getSeconds();
      assertEquals((-1923), int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Period period0 = new Period(93, 93, 9, 9);
      Period period1 = period0.plusMonths(9);
      int int0 = period1.getMonths();
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Period period0 = Period.minutes(6);
      int int0 = period0.getMinutes();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Period period0 = Period.years(0);
      int int0 = period0.getMillis();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Period period0 = new Period(61L, 7L, (PeriodType) null);
      Period period1 = period0.multipliedBy((-2024));
      int int0 = period1.getMillis();
      assertEquals(109296, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Period period0 = new Period(0, 5, 5, (-1581), 5, (-1581), (-942), (-570));
      Period period1 = period0.multipliedBy((-1581));
      int int0 = period1.getHours();
      assertEquals((-7905), int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Period period0 = new Period(7, 7, 7, 7, 7, 7, 7, 7);
      int int0 = period0.getDays();
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Period period0 = new Period(0L);
      Period period1 = period0.minusDays(9);
      int int0 = period1.getDays();
      assertEquals((-9), int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PeriodType periodType0 = PeriodType.time();
      Interval interval0 = new Interval((-1194L), 2464L);
      Period period0 = interval0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period0.withYears(1045);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Period period0 = Period.hours((-66));
      PeriodType.YEAR_INDEX = 1046;
      // Undeclared exception!
      try { 
        period0.withYears(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1046
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTime dateTime0 = new DateTime((-12219292800000L), (DateTimeZone) fixedDateTimeZone0);
      Duration duration0 = new Duration(dateTime0, dateTime0);
      PeriodType periodType0 = PeriodType.yearDayTime();
      Period period0 = new Period(dateTime0, duration0, periodType0);
      // Undeclared exception!
      try { 
        period0.withWeeks(170);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.WEEK_INDEX = 2764;
      // Undeclared exception!
      try { 
        period0.withWeeks(60);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2764
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
      try { 
        period0.withSeconds(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.SECOND_INDEX = (int) (byte) (-82);
      // Undeclared exception!
      try { 
        period0.withSeconds(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -82
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Period period0 = Period.hours(3);
      PeriodType periodType0 = PeriodType.yearDayTime();
      Period period1 = period0.withMonths((-66));
      // Undeclared exception!
      try { 
        period1.withPeriodType(periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'months'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Duration duration0 = Duration.millis(3600000L);
      DateTime dateTime0 = new DateTime();
      PeriodType periodType0 = PeriodType.yearDayTime();
      MutablePeriod mutablePeriod0 = new MutablePeriod(duration0, dateTime0, periodType0);
      Period period0 = mutablePeriod0.toPeriod();
      // Undeclared exception!
      try { 
        period0.withMonths(1340);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Period period0 = Period.minutes((-3749));
      PeriodType.MONTH_INDEX = (-3749);
      // Undeclared exception!
      try { 
        period0.withMonths((-3749));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3749
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-805L));
      Duration duration0 = new Duration(dateTime0, dateTime0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      int[] intArray0 = new int[6];
      PeriodType periodType0 = new PeriodType("org.joda.time.convert.AbstractConverter", durationFieldTypeArray0, intArray0);
      Period period0 = duration0.toPeriodTo((ReadableInstant) dateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.withMinutes((-875));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      Period period0 = new Period(0L, periodType0);
      // Undeclared exception!
      try { 
        period0.withMillis(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Period period0 = Period.hours(30);
      PeriodType.MILLI_INDEX = 710;
      // Undeclared exception!
      try { 
        period0.withMillis(2170);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 710
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Period period0 = Period.months((-2072));
      PeriodType.HOUR_INDEX = 2306;
      // Undeclared exception!
      try { 
        period0.withHours(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2306
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Period period0 = Period.years(715);
      MutablePeriod mutablePeriod0 = new MutablePeriod((-2265), 2484, 2484, 168, (-2265), 168, 168, (-1728));
      period0.ZERO.withFields(mutablePeriod0);
      String string0 = "Y%\"00;de";
      // Undeclared exception!
      try { 
        Period.parse(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Y%\"00;de\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
      try { 
        period0.withDays(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      Period period0 = new Period((Object) null, iSOChronology0);
      PeriodType.DAY_INDEX = (-16);
      // Undeclared exception!
      try { 
        period0.withDays(187);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -16
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Period period0 = Period.days(5889);
      Period period1 = period0.withYears((-1));
      // Undeclared exception!
      try { 
        period1.toStandardWeeks();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Weeks as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Period period0 = Period.minutes(6);
      PeriodType.DAY_INDEX = 2427;
      // Undeclared exception!
      try { 
        period0.toStandardWeeks();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Period period0 = Period.years(5);
      // Undeclared exception!
      try { 
        period0.toStandardSeconds();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Seconds as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Period period0 = Period.years(326565);
      PeriodType.YEAR_INDEX = 1331;
      // Undeclared exception!
      try { 
        period0.toStandardSeconds();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.minusWeeks((-673));
      Period period2 = period1.multipliedBy((-673));
      // Undeclared exception!
      try { 
        period2.toStandardSeconds();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -273931459200
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(97).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDateTime localDateTime0 = LocalDateTime.parse("", dateTimeFormatter0);
      LocalDateTime localDateTime1 = localDateTime0.withCenturyOfEra(559);
      Period period0 = new Period(localDateTime1, localDateTime0);
      // Undeclared exception!
      try { 
        period0.toStandardMinutes();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Minutes as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Period period0 = new Period(247, 2, 247, 2);
      PeriodType.MILLI_INDEX = 17971875;
      // Undeclared exception!
      try { 
        period0.toStandardMinutes();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Period period0 = new Period(0L);
      PeriodType.MONTH_INDEX = (-1670);
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.SECOND_INDEX = (-423);
      // Undeclared exception!
      try { 
        period0.toStandardDuration();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Period period0 = Period.years(572);
      // Undeclared exception!
      try { 
        period0.toStandardDays();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Days as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Period period0 = Period.millis(0);
      PeriodType.SECOND_INDEX = 737;
      // Undeclared exception!
      try { 
        period0.toStandardDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, (ReadableInstant) null);
      Days days0 = Days.daysIn(mutableInterval0);
      Duration duration0 = days0.toStandardDuration();
      PeriodType periodType0 = PeriodType.hours();
      Period period0 = new Period((ReadableInstant) null, duration0, periodType0);
      // Undeclared exception!
      try { 
        period0.plusYears(32);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.WEEK_INDEX = (-115);
      // Undeclared exception!
      try { 
        period0.ZERO.plusWeeks(2958);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -115
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
      try { 
        period0.plusSeconds(560);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Period period0 = new Period(0L);
      PeriodType.SECOND_INDEX = 2395;
      // Undeclared exception!
      try { 
        period0.plusSeconds(493);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2395
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Period period0 = new Period();
      Seconds seconds0 = Seconds.MAX_VALUE;
      Period period1 = period0.plus(seconds0);
      // Undeclared exception!
      try { 
        period1.plusSeconds(1309);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 1309
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(12);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      LocalTime localTime0 = new LocalTime((long) 12, dateTimeZone0);
      DateTime dateTime0 = localDate0.toDateTime(localTime0);
      Interval interval0 = new Interval(dateTime0, dateTime0);
      PeriodType periodType0 = PeriodType.yearDayTime();
      Period period0 = interval0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period0.plusMonths((-1969));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Period period0 = Period.hours(8);
      PeriodType.MONTH_INDEX = 1951;
      // Undeclared exception!
      try { 
        period0.plusMonths((-2241));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1951
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(7, 7);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      LocalTime localTime0 = new LocalTime(60L);
      LocalDateTime localDateTime0 = localDate0.toLocalDateTime(localTime0);
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
      try { 
        period0.plusMinutes(297);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      Period period0 = new Period((-938L), (-201L), gregorianChronology0);
      Period period1 = period0.minusMinutes(Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        period1.plusMinutes((-2766));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483647 + -2766
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(21600000L);
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      Days days0 = Days.THREE;
      PeriodType periodType0 = days0.getPeriodType();
      Period period0 = duration0.toPeriodFrom((ReadableInstant) mutableDateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.plusMillis(1005);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[8];
      PeriodType periodType0 = new PeriodType("pF9", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((-637L), (-637L), periodType0);
      // Undeclared exception!
      try { 
        period0.plusMillis(8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      DurationFieldType durationFieldType0 = DurationFieldType.YEARS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[3] = durationFieldTypeArray0[1];
      durationFieldTypeArray0[4] = durationFieldTypeArray0[3];
      int[] intArray0 = new int[4];
      PeriodType periodType0 = new PeriodType("p;u^$cYnLIx'iE<g(v", durationFieldTypeArray0, intArray0);
      Period period0 = new Period((long) 1, periodType0);
      // Undeclared exception!
      try { 
        period0.plusMillis(1008);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
      try { 
        period0.plusHours(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("pF9", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((-637L), (-637L), periodType0);
      // Undeclared exception!
      try { 
        period0.plusHours(1452);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.HOUR_INDEX = 489;
      // Undeclared exception!
      try { 
        period0.plusHours(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 489
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
      try { 
        period0.plusDays(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Duration duration0 = new Duration((Object) null);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      int[] intArray0 = new int[7];
      intArray0[3] = (-1196);
      PeriodType periodType0 = new PeriodType("Subtracting time zone offset caused overflow", durationFieldTypeArray0, intArray0);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      Period period0 = duration0.toPeriod(periodType0, (Chronology) gregorianChronology0);
      // Undeclared exception!
      try { 
        period0.plusDays(1968);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1196
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Period period0 = new Period();
      Days days0 = Days.MIN_VALUE;
      Period period1 = period0.withFields(days0);
      // Undeclared exception!
      try { 
        period1.plusDays((-2060));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -2060
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Period period0 = new Period(3845, 3845, 3479, (-852));
      PeriodType periodType0 = PeriodType.seconds();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.plus(period0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("pF9", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((-637L), (-637L), periodType0);
      Period period1 = Period.hours((-4679));
      // Undeclared exception!
      try { 
        period0.plus(period1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Period period0 = new Period((-2072), (-2072), (-2072), (-2072), 350, 2306, 350, (-2072));
      PeriodType.HOUR_INDEX = 2306;
      // Undeclared exception!
      try { 
        period0.ZERO.plus(period0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2306
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      Period period0 = new Period(31083597720000L, (Chronology) iSOChronology0);
      Hours hours0 = Hours.MAX_VALUE;
      // Undeclared exception!
      try { 
        period0.plus(hours0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 20 + 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null);
      // Undeclared exception!
      try { 
        Period.parse(" as this period contains months and months vary in length", periodFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse("", (PeriodFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Literal", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Period period0 = new Period();
      PeriodType periodType0 = new PeriodType("", (DurationFieldType[]) null, (int[]) null);
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Period period0 = Period.years(572);
      PeriodType periodType0 = PeriodType.seconds();
      PeriodType.MINUTE_INDEX = 572;
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Period period0 = Period.minutes(292271022);
      Seconds seconds0 = Seconds.ZERO;
      PeriodType periodType0 = seconds0.getPeriodType();
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 17536261320
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Period period0 = Period.seconds((-68));
      PeriodType.YEAR_INDEX = (-68);
      // Undeclared exception!
      try { 
        period0.normalizedStandard();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      Period period0 = days0.toPeriod();
      // Undeclared exception!
      try { 
        period0.negated();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -2147483648 * -1
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Period period0 = new Period(572, 572, 572, 572);
      // Undeclared exception!
      try { 
        period0.multipliedBy(153692453);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: 572 * 153692453
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Period period0 = new Period();
      Seconds seconds0 = Seconds.ZERO;
      PeriodType periodType0 = seconds0.getPeriodType();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.minusYears(512);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("pF9", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((-637L), (-637L), periodType0);
      // Undeclared exception!
      try { 
        period0.minusYears(690);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDay();
      PeriodType.YEAR_INDEX = 17971875;
      Period period0 = new Period((Object) null, periodType0);
      // Undeclared exception!
      try { 
        period0.minusYears((-648));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17971875
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PeriodType periodType0 = PeriodType.time();
      Period period0 = new Period((-5290L), (-5290L), periodType0);
      // Undeclared exception!
      try { 
        period0.minusWeeks((-926));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.WEEK_INDEX = (-578);
      // Undeclared exception!
      try { 
        period0.minusWeeks(60);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -578
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDay();
      Period period0 = new Period((long) 0, periodType0);
      // Undeclared exception!
      try { 
        period0.minusSeconds(1923);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Period period0 = new Period(380L);
      PeriodType.SECOND_INDEX = (-229);
      // Undeclared exception!
      try { 
        period0.minusSeconds((-1251));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -229
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Period period0 = Period.seconds(Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        period0.minusSeconds((-4338));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 4338
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Duration duration0 = Duration.standardDays(0L);
      PeriodType periodType0 = PeriodType.weeks();
      Period period0 = duration0.toPeriodFrom((ReadableInstant) null, periodType0);
      // Undeclared exception!
      try { 
        period0.minusMonths(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MONTH_INDEX = 65533;
      // Undeclared exception!
      try { 
        period0.minusMonths(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 65533
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
      try { 
        period0.minusMinutes(551);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Period period0 = Period.hours(30);
      PeriodType.MINUTE_INDEX = 30;
      // Undeclared exception!
      try { 
        period0.minusMinutes(30);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 30
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Period period0 = new Period(0L, 0L, periodType0, ethiopicChronology0);
      // Undeclared exception!
      try { 
        period0.minusMillis(230);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MILLI_INDEX = (-923);
      // Undeclared exception!
      try { 
        period0.ZERO.minusMillis(433);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -923
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-3035L));
      Duration duration1 = duration0.dividedBy(7L);
      Period period0 = new Period((ReadableInstant) null, duration1);
      // Undeclared exception!
      try { 
        period0.minusMillis(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -142 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Duration duration0 = Duration.standardHours(0L);
      Days days0 = Days.FIVE;
      PeriodType periodType0 = days0.getPeriodType();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      Period period0 = duration0.toPeriod(periodType0, (Chronology) islamicChronology0);
      // Undeclared exception!
      try { 
        period0.minusHours(1573);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Period period0 = Period.minutes(6);
      PeriodType.HOUR_INDEX = (-232);
      // Undeclared exception!
      try { 
        period0.minusHours(1034);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -232
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Period period0 = Period.weeks(75);
      PeriodType.DAY_INDEX = 75;
      // Undeclared exception!
      try { 
        period0.minusDays(2013);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 75
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      Period period0 = days0.toPeriod();
      // Undeclared exception!
      try { 
        period0.minusDays((-1));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 1
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Period period0 = Period.years(572);
      PeriodType periodType0 = PeriodType.weeks();
      Period period1 = new Period(0L, periodType0);
      // Undeclared exception!
      try { 
        period1.minus(period0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Period period0 = Period.hours((-66));
      Period period1 = period0.withYears(2);
      PeriodType.YEAR_INDEX = 1073;
      // Undeclared exception!
      try { 
        period0.minus(period1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1073
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      Period period0 = days0.toPeriod();
      Period period1 = period0.negated();
      // Undeclared exception!
      try { 
        period0.minus(period1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Period period0 = Period.days(1143);
      PeriodType.YEAR_INDEX = 1143;
      // Undeclared exception!
      try { 
        period0.getYears();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Period period0 = Period.hours(10209375);
      PeriodType.WEEK_INDEX = 10209375;
      // Undeclared exception!
      try { 
        period0.getWeeks();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Period period0 = Period.days(84);
      PeriodType.SECOND_INDEX = 84;
      // Undeclared exception!
      try { 
        period0.getSeconds();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      PeriodType.MONTH_INDEX = 2493;
      Period period0 = new Period((ReadableDuration) null, (ReadableInstant) null, periodType0);
      // Undeclared exception!
      try { 
        period0.getMonths();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Duration duration0 = new Duration((Object) null);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      int[] intArray0 = new int[7];
      PeriodType periodType0 = new PeriodType("Subtracting time zone offset caused overflow", durationFieldTypeArray0, intArray0);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      Period period0 = duration0.toPeriod(periodType0, (Chronology) gregorianChronology0);
      // Undeclared exception!
      try { 
        period0.getMillis();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.HOUR_INDEX = (-4551);
      // Undeclared exception!
      try { 
        period0.ZERO.getHours();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Period period0 = Period.years(0);
      PeriodType.DAY_INDEX = 1845;
      // Undeclared exception!
      try { 
        period0.getDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      Partial partial0 = new Partial(lenientChronology0, dateTimeFieldTypeArray0, (int[]) null);
      // Undeclared exception!
      try { 
        Period.fieldDifference(partial0, partial0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      Partial partial0 = new Partial(dateTimeFieldType0, 1024, (Chronology) null);
      int[] intArray0 = new int[0];
      Partial partial1 = new Partial(partial0, intArray0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(partial1, partial1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      GJChronology gJChronology0 = GJChronology.getInstance();
      Period period0 = null;
      try {
        period0 = new Period((Object) yearMonth0.MONTH_OF_YEAR, (PeriodType) null, (Chronology) gJChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Integer
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      Period period0 = null;
      try {
        period0 = new Period("`vtkffmnlUF]`5", periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"`vtkffmnlUF]`5\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Object object0 = new Object();
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Period period0 = null;
      try {
        period0 = new Period(object0, gJChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Object object0 = new Object();
      Period period0 = null;
      try {
        period0 = new Period(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      DurationFieldType durationFieldType0 = DurationFieldType.CENTURIES_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldTypeArray0[0];
      DurationFieldType durationFieldType1 = DurationFieldType.eras();
      durationFieldTypeArray0[3] = durationFieldType1;
      int[] intArray0 = new int[2];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      Period period0 = null;
      try {
        period0 = new Period(4L, periodType0, (Chronology) gregorianChronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      int[] intArray0 = new int[4];
      PeriodType periodType0 = new PeriodType("p;u^$cYnLIx'iE<g(v", durationFieldTypeArray0, intArray0);
      Period period0 = null;
      try {
        period0 = new Period((long) 1, periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      DurationFieldType durationFieldType0 = DurationFieldType.SECONDS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      DurationFieldType durationFieldType1 = DurationFieldType.ERAS_TYPE;
      durationFieldTypeArray0[2] = durationFieldType1;
      int[] intArray0 = new int[8];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Period period0 = null;
      try {
        period0 = new Period((-980L), 604800000L, periodType0, ethiopicChronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      int[] intArray0 = new int[8];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Period period0 = null;
      try {
        period0 = new Period((-980L), 604800000L, periodType0, ethiopicChronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-4176));
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      Period period0 = null;
      try {
        period0 = new Period((-900L), (-9223372036854775808L), (PeriodType) null, islamicChronology0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Adding time zone offset caused overflow
         //
         verifyException("org.joda.time.chrono.ZonedChronology$ZonedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Period period0 = Period.years(572);
      PeriodType periodType0 = PeriodType.yearDayTime();
      Period period1 = period0.normalizedStandard(periodType0);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Period period0 = Period.months(1);
      PeriodType periodType0 = PeriodType.minutes();
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Period period0 = Period.weeks(563);
      Seconds seconds0 = Seconds.ZERO;
      PeriodType periodType0 = seconds0.getPeriodType();
      Period period1 = period0.normalizedStandard(periodType0);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusMillis(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Period period0 = Period.days(2737);
      Period period1 = period0.plusMillis(559);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Duration duration0 = new Duration((-2096L));
      Period period0 = duration0.toPeriod();
      Period period1 = period0.plusMinutes((-3224));
      int int0 = period1.getMinutes();
      assertEquals((-3224), int0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusHours(4);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Period period0 = Period.millis(0);
      Period period1 = period0.plusHours(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusDays((-2060));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
      try { 
        period0.plusWeeks(423);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusYears(Integer.MIN_VALUE);
      Period period2 = period1.minusDays((-748));
      // Undeclared exception!
      try { 
        period2.plusYears((-2351));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -2351
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Period period0 = new Period();
      int int0 = period0.ZERO.getHours();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Period period0 = Period.weeks((-3817));
      int int0 = period0.getWeeks();
      assertEquals((-3817), int0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Period period0 = new Period(60000L);
      int int0 = period0.getSeconds();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Period period0 = Period.weeks(563);
      int int0 = period0.ZERO.getDays();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      Partial partial0 = new Partial(dateTimeFieldType0, 0);
      PeriodType periodType0 = PeriodType.years();
      Period period0 = new Period(partial0, partial0, periodType0);
      // Undeclared exception!
      try { 
        period0.minusDays((-280));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Duration duration0 = new Duration((-2096L));
      Period period0 = duration0.toPeriod();
      int int0 = period0.getMinutes();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Period period0 = Period.months((-351));
      int int0 = period0.getMonths();
      assertEquals((-351), int0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Period period0 = new Period(61L, 7L, (PeriodType) null);
      int int0 = period0.getMillis();
      assertEquals((-54), int0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Years years0 = Years.THREE;
      PeriodType periodType0 = years0.getPeriodType();
      Period period0 = new Period(0, 0, 0, 0, 0, 0, 0, 0, periodType0);
      // Undeclared exception!
      try { 
        period0.withHours(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Duration duration0 = Duration.standardHours(0L);
      Period period0 = duration0.toPeriod();
      Period period1 = period0.minusYears((-1616));
      // Undeclared exception!
      try { 
        period1.toStandardDuration();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Duration as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Period period0 = new Period(4L, (Chronology) null);
      MutablePeriod mutablePeriod0 = new MutablePeriod((-2265), 2484, 2484, 168, (-2265), 168, 168, (-1728));
      Period period1 = period0.ZERO.withFields(mutablePeriod0);
      // Undeclared exception!
      try { 
        period1.toStandardHours();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Hours as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Duration duration0 = new Duration((Object) null);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      int[] intArray0 = new int[7];
      PeriodType periodType0 = new PeriodType("Subtracting time zone offset caused overflow", durationFieldTypeArray0, intArray0);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      Period period0 = duration0.toPeriod(periodType0, (Chronology) gregorianChronology0);
      Period period1 = period0.multipliedBy(1);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Period period0 = new Period(93, 93, 9, 9);
      Period period1 = period0.ZERO.multipliedBy(93);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      Period period1 = period0.minus((ReadablePeriod) null);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Period period0 = Period.years(0);
      Period period1 = period0.minusMillis(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusSeconds(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Period period0 = Period.years(0);
      Period period1 = period0.plusMinutes(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Period period0 = Period.millis(0);
      Period period1 = period0.minusHours(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Period period0 = new Period(295L, 0L);
      Period period1 = period0.plusDays(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Period period0 = Period.hours(7);
      Period period1 = period0.plusWeeks(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Period period0 = Period.days((-66));
      Period period1 = period0.plusMonths(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusYears(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Period period0 = Period.days(572);
      Period period1 = period0.plus((ReadablePeriod) null);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Period period0 = Period.weeks(563);
      // Undeclared exception!
      try { 
        period0.withFieldAdded((DurationFieldType) null, (-2698));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      DurationFieldType durationFieldType0 = DurationFieldType.ERAS_TYPE;
      Period period1 = period0.withFieldAdded(durationFieldType0, 0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Period period0 = Period.hours(2510);
      // Undeclared exception!
      try { 
        period0.withField((DurationFieldType) null, (-429));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Period period0 = new Period();
      Days days0 = Days.SIX;
      DurationFieldType durationFieldType0 = days0.getFieldType();
      Period period1 = period0.withField(durationFieldType0, 292272708);
      // Undeclared exception!
      try { 
        period1.toStandardHours();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 7014544992
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      Period period1 = period0.withFields((ReadablePeriod) null);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      int[] intArray0 = new int[2];
      PeriodType periodType0 = new PeriodType("mW`", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        period0.withPeriodType(periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, 1);
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      int[] intArray0 = new int[9];
      Partial partial0 = new Partial(ethiopicChronology0, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(partial0, partial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not have overlapping fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      MonthDay monthDay0 = new MonthDay((Object) null, (Chronology) julianChronology0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(monthDay0, yearMonth0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      LocalDate localDate0 = yearMonth0.toLocalDate(8);
      // Undeclared exception!
      try { 
        Period.fieldDifference(localDate0, yearMonth0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      // Undeclared exception!
      try { 
        Period.fieldDifference(yearMonth0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.fieldDifference((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      Period period0 = new Period((ReadableInstant) null, (ReadableInstant) null, periodType0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Period period0 = Period.minutes(28181250);
      Period period1 = period0.minusWeeks(28181250);
      // Undeclared exception!
      try { 
        period1.minusWeeks(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -28181250 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Period period0 = new Period();
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Period period0 = new Period(0L);
      Period period1 = period0.withPeriodType((PeriodType) null);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Period period0 = new Period(93, 93, 9, 9);
      DurationFieldType durationFieldType0 = DurationFieldType.HOURS_TYPE;
      Period period1 = period0.withFieldAdded(durationFieldType0, 93);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Duration duration0 = Duration.standardHours(201L);
      PeriodType periodType0 = PeriodType.seconds();
      Period period0 = duration0.toPeriodFrom((ReadableInstant) null, periodType0);
      int int0 = period0.getMonths();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Period period0 = Period.minutes(28181250);
      Duration duration0 = period0.toStandardDuration();
      assertEquals(1690875000000L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      Interval interval0 = new Interval(0L, 0L, dateTimeZone0);
      Duration duration0 = interval0.toDuration();
      DateTime dateTime0 = DateTime.now();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      PeriodType periodType0 = new PeriodType("xW", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(duration0, dateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.withMinutes((-2002));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Seconds seconds0 = Seconds.ZERO;
      PeriodType periodType0 = seconds0.getPeriodType();
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Period period0 = new Period((Object) null, periodType0, gJChronology0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Period period0 = Period.days(1170);
      Period period1 = period0.multipliedBy((-1823));
      // Undeclared exception!
      try { 
        period1.toStandardMinutes();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -3071390400
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(5, 5, 236548278, (-51), 5);
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      LocalTime localTime0 = LocalTime.now();
      Period period0 = null;
      try {
        period0 = new Period(localDateTime0, localTime0, (PeriodType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      Period period0 = periodFormatter0.parsePeriod("");
      Period period1 = period0.plusHours(1);
      int int0 = period1.getHours();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Period period0 = new Period(789L, 0L);
      PeriodType.MINUTE_INDEX = 2104;
      // Undeclared exception!
      try { 
        period0.plusMinutes((-837));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2104
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Period period0 = new Period((ReadableInstant) null, (ReadableInstant) null);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Period period0 = new Period();
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Period period0 = Period.seconds(466);
      PeriodType.YEAR_INDEX = (-292275054);
      // Undeclared exception!
      try { 
        period0.plusYears(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -292275054
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Period period0 = new Period();
      Hours hours0 = period0.toStandardHours();
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Duration duration0 = Duration.standardHours(201L);
      Period period0 = new Period(duration0, (ReadableInstant) null);
      Period period1 = period0.minusYears(1000);
      Period period2 = period1.normalizedStandard();
      assertTrue(period2.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Period period0 = new Period((-292275054), (-292275054), 1147, 5, 1147, 5, 1147, (-292275054));
      int int0 = period0.getYears();
      assertEquals((-292275054), int0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Period period0 = Period.millis(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        period0.plusMillis(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.toPeriod();
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Period period0 = Period.hours(30);
      Period period1 = period0.withMillis(2170);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Period period0 = new Period();
      Days days0 = period0.toStandardDays();
      Period period1 = period0.minus(days0);
      assertEquals(0, days0.getDays());
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Seconds seconds0 = Seconds.ZERO;
      PeriodType periodType0 = seconds0.getPeriodType();
      Period period0 = null;
      try {
        period0 = new Period(1000, (-174), 1424, 3163, 1424, 12, 1000, 3163, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'years'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((long) 1, (DateTimeZone) null);
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Period period0 = null;
      try {
        period0 = new Period(localDate0, localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      PeriodFormatter periodFormatter0 = ISOPeriodFormat.standard();
      // Undeclared exception!
      try { 
        Period.parse("", periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.withSeconds(4);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("pF9", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((-643L), (-643L), periodType0);
      // Undeclared exception!
      try { 
        period0.withWeeks((-4679));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      GJChronology gJChronology0 = GJChronology.getInstance();
      Period period0 = new Period(0L, 0, periodType0, gJChronology0);
      // Undeclared exception!
      try { 
        period0.withHours(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
      try { 
        period0.withMinutes((-66));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      PeriodType periodType0 = new PeriodType("U;L6_}7c.vp*rSuc", durationFieldTypeArray0, (int[]) null);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      Period period0 = new Period((-3955L), (-373L), periodType0, buddhistChronology0);
      // Undeclared exception!
      try { 
        period0.withDays(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
}
