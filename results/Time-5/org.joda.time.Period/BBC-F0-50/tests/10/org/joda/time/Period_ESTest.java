/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 08:30:06 GMT 2021
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Period_ESTest extends Period_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Duration duration0 = Duration.ZERO;
      Period period0 = new Period(dateTime0, duration0, (PeriodType) null);
      Period period1 = period0.plusMonths((-1182));
      Period period2 = period1.normalizedStandard((PeriodType) null);
      assertFalse(period2.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Period period0 = new Period((-5450), (-5450), 237, 237, 237, (-5450), 122, 122);
      PeriodType periodType0 = PeriodType.yearWeekDay();
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Duration duration0 = Duration.ZERO;
      Period period0 = new Period(dateTime0, duration0, (PeriodType) null);
      Period period1 = period0.minusMonths(1968);
      // Undeclared exception!
      try { 
        period1.toStandardMinutes();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Minutes as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Period period0 = new Period(749L, 2041L, (PeriodType) null);
      Period period1 = period0.withWeeks((-672));
      Period period2 = period1.normalizedStandard((PeriodType) null);
      Duration duration0 = period2.toStandardDuration();
      assertEquals((-406425598708L), duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Period period0 = new Period(86399997L, 86399997L);
      Period period1 = period0.withWeeks(1);
      Seconds seconds0 = period1.toStandardSeconds();
      assertEquals(604800, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Period period0 = Period.millis(4978125);
      Period period1 = period0.minusHours((-195));
      Seconds seconds0 = period1.toStandardSeconds();
      assertEquals(706978, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Period period0 = new Period(0L);
      Period period1 = period0.ZERO.minusMinutes(3);
      Seconds seconds0 = period1.toStandardSeconds();
      assertEquals((-180), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Period period0 = new Period(0L);
      Period period1 = period0.plusHours((-1689));
      Minutes minutes0 = period1.toStandardMinutes();
      assertEquals((-101340), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Duration duration0 = Duration.ZERO;
      Period period0 = new Period(dateTime0, duration0, (PeriodType) null);
      Period period1 = period0.withSeconds((-1182));
      Minutes minutes0 = period1.toStandardMinutes();
      assertEquals((-19), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Period period0 = Period.weeks(313);
      Hours hours0 = period0.toStandardHours();
      assertEquals(52584, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Period period0 = new Period(13, 60000, 60000, 60000);
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(6, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      MonthDay monthDay0 = MonthDay.now();
      // Undeclared exception!
      try { 
        Period.fieldDifference(localDate0, monthDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      Duration duration0 = new Duration((long) 0);
      Period period0 = new Period(mutableDateTime0, duration0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Years years0 = Years.TWO;
      PeriodType periodType0 = years0.getPeriodType();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      Period period0 = new Period(86399997L, periodType0, (Chronology) islamicChronology0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1414));
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      Period period0 = new Period(580L, (Chronology) gJChronology0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusMinutes((-1306));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Period period0 = Period.minutes(1677);
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Period period0 = Period.days(941);
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(134, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      Period period0 = days0.toPeriod();
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals((-306783378), weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Period period0 = Period.days((-1666));
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals((-143942400), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Duration duration0 = Duration.ZERO;
      Period period0 = new Period(dateTime0, duration0, (PeriodType) null);
      Period period1 = period0.minusWeeks((-1182));
      Minutes minutes0 = period1.toStandardMinutes();
      assertEquals(11914560, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.minusMillis(719527);
      Minutes minutes0 = period1.toStandardMinutes();
      assertEquals((-11), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Period period0 = new Period(1000L, 2589L);
      Hours hours0 = period0.toStandardHours();
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Period period0 = Period.minutes(2159);
      Hours hours0 = period0.toStandardHours();
      assertEquals(35, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Duration duration0 = Duration.ZERO;
      Period period0 = new Period(dateTime0, duration0, (PeriodType) null);
      Period period1 = period0.withHours((-1182));
      Hours hours0 = period1.toStandardHours();
      assertEquals((-1182), hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Period period0 = new Period(86400000L);
      Duration duration0 = period0.toStandardDuration();
      assertEquals(86400000L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Period period0 = new Period(1000L, 2589L);
      Duration duration0 = period0.toStandardDuration();
      assertEquals(1589L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Period period0 = new Period(86399997L);
      Days days0 = period0.toStandardDays();
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      Period period0 = Period.parse("", periodFormatter0);
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Period period0 = new Period(2159, 2159, 2159, 2159, 2159, 2159, 2159, 2159);
      int int0 = period0.getYears();
      assertEquals(2159, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Period period0 = new Period(1726, 1715, 1715, 1726, 494, 918, 5220, 1715);
      Period period1 = period0.withYears((-812));
      int int0 = period1.getYears();
      assertEquals((-812), int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(2, 2);
      Period period0 = new Period(monthDay0, monthDay0);
      Period period1 = period0.withWeeks(940);
      int int0 = period1.getWeeks();
      assertEquals(940, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Period period0 = new Period(0L);
      Period period1 = period0.ZERO.minusWeeks(2312);
      int int0 = period1.getWeeks();
      assertEquals((-2312), int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      Period period0 = days0.toPeriod();
      int int0 = period0.ZERO.getSeconds();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Period period0 = new Period(3600L);
      int int0 = period0.getSeconds();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Period period0 = Period.months((-629));
      int int0 = period0.getMonths();
      assertEquals((-629), int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Period period0 = new Period(1000, 1000, (-1), 1000, (-1), 624, (-1), 2217, (PeriodType) null);
      int int0 = period0.getMinutes();
      assertEquals(624, int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Period period0 = Period.minutes((-2717));
      int int0 = period0.getMinutes();
      assertEquals((-2717), int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(2, 2);
      Period period0 = new Period(monthDay0, monthDay0);
      int int0 = period0.getMillis();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Period period0 = new Period(1000L, 2589L);
      int int0 = period0.getMillis();
      assertEquals(589, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Period period0 = new Period(3875, 3875, 3, 3875, 3875, 256, 3, (-495));
      int int0 = period0.getHours();
      assertEquals(3875, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Period period0 = new Period(1723, 1723, 1723, 1532, 12, 2, (-2095), 1723);
      Period period1 = period0.minusHours(1723);
      int int0 = period1.getHours();
      assertEquals((-1711), int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Period period0 = Period.months((-5682));
      int int0 = period0.getDays();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Period period0 = new Period((-369L), 86400000L);
      int int0 = period0.getDays();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Duration duration0 = Duration.standardHours(0L);
      DateTime dateTime0 = new DateTime(0L);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      int[] intArray0 = new int[4];
      PeriodType periodType0 = new PeriodType("ReadableInstant objects must not be null", durationFieldTypeArray0, intArray0);
      Period period0 = new Period(duration0, dateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.withYears((-876));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDate localDate0 = new LocalDate((DateTimeZone) fixedDateTimeZone0);
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      // Undeclared exception!
      try { 
        period0.withWeeks((-1));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.WEEK_INDEX = (-98);
      // Undeclared exception!
      try { 
        period0.withWeeks(6479);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -98
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Period period0 = new Period();
      PeriodType periodType0 = PeriodType.hours();
      Period period1 = period0.withPeriodType(periodType0);
      // Undeclared exception!
      try { 
        period1.withSeconds((-342));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Period period0 = Period.seconds((-108));
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      DurationFieldType durationFieldType0 = DurationFieldType.MONTHS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldType0;
      durationFieldTypeArray0[3] = durationFieldTypeArray0[1];
      PeriodType periodType0 = new PeriodType("\"o0`U~Ai8", durationFieldTypeArray0, (int[]) null);
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.withSeconds(12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Period period0 = new Period(13, 60000, 60000, 60000);
      PeriodType.SECOND_INDEX = 117;
      // Undeclared exception!
      try { 
        period0.withSeconds((-674));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 117
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Period period0 = new Period();
      int[] intArray0 = new int[0];
      PeriodType periodType0 = new PeriodType("J;4e*QDZ6", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        period0.withPeriodType(periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Period period0 = Period.days(941);
      PeriodType periodType0 = PeriodType.time();
      // Undeclared exception!
      try { 
        period0.withPeriodType(periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'days'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Period period0 = new Period();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      int[] intArray0 = new int[8];
      intArray0[1] = 135;
      PeriodType periodType0 = new PeriodType("Parsing is not supported", durationFieldTypeArray0, intArray0);
      Period period1 = period0.withPeriodType(periodType0);
      // Undeclared exception!
      try { 
        period1.withMonths(10000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 135
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Period period0 = Period.months(9);
      PeriodType.MINUTE_INDEX = (-288);
      // Undeclared exception!
      try { 
        period0.withMinutes(9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -288
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Duration duration0 = new Duration(dateTime0, dateTime0);
      Interval interval0 = new Interval(dateTime0, duration0);
      PeriodType periodType0 = PeriodType.months();
      Period period0 = interval0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period0.withMillis((-33));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MILLI_INDEX = (-1655);
      // Undeclared exception!
      try { 
        period0.withMillis(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1655
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDate localDate0 = new LocalDate((DateTimeZone) fixedDateTimeZone0);
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      // Undeclared exception!
      try { 
        period0.withHours(1632);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.HOUR_INDEX = (-1306);
      // Undeclared exception!
      try { 
        period0.withHours((-1306));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1306
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      LocalTime localTime0 = new LocalTime((Chronology) copticChronology0);
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      // Undeclared exception!
      try { 
        period0.withFields(days0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'days'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Period period0 = Period.days(0);
      PeriodType periodType0 = PeriodType.seconds();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.withDays((-514));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[9];
      int[] intArray0 = new int[7];
      intArray0[3] = 2254;
      PeriodType periodType0 = new PeriodType("<|\"U", durationFieldTypeArray0, intArray0);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Period period0 = new Period((Object) null, periodType0, ethiopicChronology0);
      // Undeclared exception!
      try { 
        period0.withDays(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2254
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Period period0 = Period.minutes(2159);
      PeriodType.SECOND_INDEX = 25;
      // Undeclared exception!
      try { 
        period0.toStandardWeeks();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Period period0 = Period.seconds(98);
      Period period1 = period0.withYears(98);
      // Undeclared exception!
      try { 
        period1.toStandardSeconds();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Seconds as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Period period0 = new Period((long) (-2383));
      PeriodType.MINUTE_INDEX = 1392;
      // Undeclared exception!
      try { 
        period0.toStandardSeconds();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      Period period0 = days0.toPeriod();
      // Undeclared exception!
      try { 
        period0.toStandardSeconds();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -185542587187200
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Duration duration0 = Duration.ZERO;
      Period period0 = new Period(dateTime0, duration0, (PeriodType) null);
      Period period1 = period0.plusMonths(33);
      // Undeclared exception!
      try { 
        period1.toStandardMinutes();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Minutes as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Period period0 = new Period(2108L, 2108L);
      PeriodType.HOUR_INDEX = (-354);
      // Undeclared exception!
      try { 
        period0.toStandardMinutes();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      Period period0 = days0.toPeriod();
      // Undeclared exception!
      try { 
        period0.toStandardMinutes();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -3092376453120
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Period period0 = Period.years((-1));
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Hours as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Days days0 = Days.FOUR;
      Period period0 = days0.toPeriod();
      PeriodType.MONTH_INDEX = 27;
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = 2383;
      Period period0 = Period.months(int0);
      // Undeclared exception!
      try { 
        period0.toStandardDuration();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Duration as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Period period0 = new Period(86399997L, 86399997L);
      PeriodType.DAY_INDEX = (-1328);
      // Undeclared exception!
      try { 
        period0.toStandardDuration();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Duration duration0 = new Duration((Object) null);
      Duration duration1 = Duration.standardDays(4294967295L);
      Duration duration2 = duration0.minus((ReadableDuration) duration1);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      DateTime dateTime0 = new DateTime(4294967295L, dateTimeZone0);
      Period period0 = duration2.toPeriodTo((ReadableInstant) dateTime0);
      // Undeclared exception!
      try { 
        period0.toStandardDays();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Days as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Period period0 = Period.days((-1234));
      PeriodType.MILLI_INDEX = 689;
      // Undeclared exception!
      try { 
        period0.toStandardDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Duration duration0 = new Duration((ReadableInstant) null, (ReadableInstant) null);
      Interval interval0 = new Interval((ReadableInstant) null, duration0);
      PeriodType periodType0 = PeriodType.months();
      Period period0 = interval0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period0.plusYears(255);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Period period0 = Period.weeks(25734375);
      PeriodType.YEAR_INDEX = (-1205);
      // Undeclared exception!
      try { 
        period0.ZERO.plusYears((-1205));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1205
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDate localDate0 = new LocalDate((DateTimeZone) fixedDateTimeZone0);
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      // Undeclared exception!
      try { 
        period0.plusWeeks(70);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.WEEK_INDEX = (-1323);
      // Undeclared exception!
      try { 
        period0.plusWeeks(1024);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1323
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Period period0 = new Period();
      Weeks weeks0 = Weeks.MIN_VALUE;
      Period period1 = period0.withFields(weeks0);
      // Undeclared exception!
      try { 
        period1.plusWeeks((-1838));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -1838
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes((-1311L));
      PeriodType periodType0 = PeriodType.yearDay();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology_LeapYearPatternType0);
      Period period0 = duration0.toPeriod(periodType0, (Chronology) islamicChronology0);
      // Undeclared exception!
      try { 
        period0.plusSeconds(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Period period0 = Period.ZERO;
      PeriodType.SECOND_INDEX = 3556;
      // Undeclared exception!
      try { 
        period0.plusSeconds(1219);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3556
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Period period0 = Period.days(0);
      PeriodType periodType0 = PeriodType.minutes();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.plusMonths((-684));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Period period0 = Period.years((-1658));
      PeriodType.MONTH_INDEX = (-1839);
      // Undeclared exception!
      try { 
        period0.plusMonths(12825000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1839
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      DurationFieldType durationFieldType0 = DurationFieldType.HOURS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      int[] intArray0 = new int[7];
      intArray0[5] = (-4443);
      PeriodType periodType0 = new PeriodType("&kD9", durationFieldTypeArray0, intArray0);
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-833));
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(copticChronology0, dateTimeZone0);
      Period period0 = new Period(3547L, 0L, periodType0, zonedChronology0);
      // Undeclared exception!
      try { 
        period0.plusMinutes(1691);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4443
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Period period0 = new Period(0L);
      PeriodType periodType0 = PeriodType.hours();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.plusMillis(3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Weeks weeks0 = Weeks.TWO;
      Duration duration0 = weeks0.toStandardDuration();
      MutableDateTime mutableDateTime0 = new MutableDateTime((-803L));
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      int[] intArray0 = new int[9];
      PeriodType periodType0 = new PeriodType("\"W(@JF3@", durationFieldTypeArray0, intArray0);
      Period period0 = duration0.toPeriodTo((ReadableInstant) mutableDateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.plusMillis(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      // Undeclared exception!
      try { 
        period0.plusHours(2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Period period0 = Period.ZERO;
      PeriodType.HOUR_INDEX = 3792;
      // Undeclared exception!
      try { 
        period0.plusHours(217);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3792
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      Period period0 = new Period(86400005L, periodType0);
      // Undeclared exception!
      try { 
        period0.plusDays(3880);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.DAY_INDEX = (-890);
      // Undeclared exception!
      try { 
        period0.plusDays(2940);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -890
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      Period period0 = days0.toPeriod();
      period0.negated();
      Period.hours(690562340);
      // Undeclared exception!
      try { 
        period0.plusDays(1171);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 1171
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Period period0 = Period.millis((-1221));
      PeriodType periodType0 = PeriodType.yearDay();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.plus(period0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Period period0 = new Period(1726, 1715, 1715, 1726, 494, 918, 5220, 1715);
      PeriodType.MINUTE_INDEX = (-843);
      // Undeclared exception!
      try { 
        period0.plus(period0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -843
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      Period period0 = days0.toPeriod();
      Days days1 = period0.toStandardDays();
      // Undeclared exception!
      try { 
        period0.plus(days1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null);
      // Undeclared exception!
      try { 
        Period.parse("org.joda.time.convert.NullConverter", periodFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse("", (PeriodFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Literal", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse("Chronology must not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Chronology must not be null\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Period period0 = Period.hours(0);
      int[] intArray0 = new int[9];
      PeriodType periodType0 = new PeriodType("9", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Period period0 = new Period(4L);
      PeriodType periodType0 = PeriodType.hours();
      PeriodType.WEEK_INDEX = 93;
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Period period0 = Period.millis(6);
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      Period period1 = period0.withFieldAdded(durationFieldType0, 23118750);
      PeriodType periodType0 = PeriodType.millis();
      // Undeclared exception!
      try { 
        period1.normalizedStandard(periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 1997460000000006
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Period period0 = Period.seconds(690562340);
      // Undeclared exception!
      try { 
        period0.multipliedBy(690562340);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: 690562340 * 690562340
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      PeriodType periodType0 = PeriodType.seconds();
      Period period0 = new Period(localDate0, localDate0, periodType0);
      // Undeclared exception!
      try { 
        period0.minusYears(604800);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Period period0 = Period.minutes(4113);
      PeriodType.YEAR_INDEX = (-1205);
      // Undeclared exception!
      try { 
        period0.minusYears((-1759));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1205
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Period period0 = Period.millis(8);
      Years years0 = Years.MIN_VALUE;
      Period period1 = period0.minus(years0);
      // Undeclared exception!
      try { 
        period1.minusYears(8);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -8
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Months months0 = Months.TWELVE;
      PeriodType periodType0 = months0.getPeriodType();
      Period period0 = new Period(604800L, 10000000000L, periodType0);
      // Undeclared exception!
      try { 
        period0.minusWeeks((-673));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.WEEK_INDEX = 355;
      // Undeclared exception!
      try { 
        period0.minusWeeks((-1301));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 355
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      MonthDay monthDay0 = MonthDay.fromDateFields(mockDate0);
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      // Undeclared exception!
      try { 
        period0.minusSeconds(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Period period0 = new Period((-2013L), (-2013L));
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[7];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.minusSeconds(2158);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Period period0 = new Period();
      Seconds seconds0 = Seconds.MAX_VALUE;
      Period period1 = period0.minus(seconds0);
      // Undeclared exception!
      try { 
        period1.minusSeconds(4);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483647 + -4
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      Duration duration0 = Duration.standardMinutes(1895L);
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period0.minusMonths(70);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, (int[]) null);
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, periodType0);
      Period period0 = mutablePeriod0.toPeriod();
      // Undeclared exception!
      try { 
        period0.minusMonths((-1830));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MONTH_INDEX = (-38);
      // Undeclared exception!
      try { 
        period0.minusMonths(1287);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -38
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Days days0 = Days.TWO;
      PeriodType periodType0 = days0.getPeriodType();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(ethiopicChronology0);
      Period period0 = new Period(1697L, 1697L, periodType0, lenientChronology0);
      // Undeclared exception!
      try { 
        period0.minusMinutes(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MINUTE_INDEX = (-424);
      // Undeclared exception!
      try { 
        period0.minusMinutes((-1257));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -424
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Period period0 = Period.days(0);
      PeriodType periodType0 = PeriodType.yearMonthDay();
      Period period1 = period0.withPeriodType(periodType0);
      // Undeclared exception!
      try { 
        period1.minusMillis((-539));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MILLI_INDEX = (-97);
      // Undeclared exception!
      try { 
        period0.minusMillis(8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -97
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      PeriodType.HOUR_INDEX = 2118;
      // Undeclared exception!
      try { 
        period0.minusHours(1031);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2118
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusHours(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        period1.minusHours(1761);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -1761
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Period period0 = Period.hours(0);
      PeriodType periodType0 = PeriodType.minutes();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.minusDays((-1846));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Period period0 = Period.months(3673);
      PeriodType.DAY_INDEX = (-966);
      // Undeclared exception!
      try { 
        period0.minusDays(17);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -966
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      Period period0 = days0.toPeriod();
      Period period1 = period0.negated();
      // Undeclared exception!
      try { 
        period1.minusDays(690562340);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483647 + -690562340
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Period period0 = new Period(2390, (-76), 2159, (-76), 12, 4076, 33, 4076);
      PeriodType periodType0 = PeriodType.minutes();
      DateTime dateTime0 = new DateTime((Chronology) null);
      Duration duration0 = Duration.ZERO;
      Period period1 = new Period(dateTime0, duration0, periodType0);
      // Undeclared exception!
      try { 
        period1.minus(period0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Period period0 = new Period(4094, 4094, 0, (-266), (-1660), (-266), 687, (-1660));
      PeriodType.YEAR_INDEX = (-1660);
      // Undeclared exception!
      try { 
        period0.minus(period0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1660
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      Period period0 = days0.toPeriod();
      PeriodType.minutes();
      Months months0 = Months.TWELVE;
      // Undeclared exception!
      try { 
        period0.minus(days0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDate localDate0 = LocalDate.now((DateTimeZone) fixedDateTimeZone0);
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      PeriodType.YEAR_INDEX = 121;
      // Undeclared exception!
      try { 
        period0.ZERO.getYears();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.WEEK_INDEX = (-2463);
      // Undeclared exception!
      try { 
        period0.getWeeks();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Period period0 = new Period((-3L), (-3L));
      PeriodType.SECOND_INDEX = 93;
      // Undeclared exception!
      try { 
        period0.getSeconds();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Period period0 = new Period();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      int[] intArray0 = new int[8];
      intArray0[1] = 135;
      PeriodType periodType0 = new PeriodType("Parsing is not supported", durationFieldTypeArray0, intArray0);
      Period period1 = period0.withPeriodType(periodType0);
      // Undeclared exception!
      try { 
        period1.getMonths();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 135
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MILLI_INDEX = 1937;
      // Undeclared exception!
      try { 
        period0.getMillis();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1937
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Period period0 = Period.seconds((-901));
      PeriodType.DAY_INDEX = (-901);
      // Undeclared exception!
      try { 
        period0.ZERO.getDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -901
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[7];
      int[] intArray0 = new int[3];
      Partial partial0 = new Partial(lenientChronology0, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(partial0, partial0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      YearMonth yearMonth0 = new YearMonth(0L, (Chronology) copticChronology0);
      int[] intArray0 = new int[0];
      YearMonth yearMonth1 = new YearMonth(yearMonth0, intArray0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(yearMonth1, yearMonth1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      YearMonth yearMonth0 = new YearMonth();
      int[] intArray0 = new int[7];
      YearMonth yearMonth1 = new YearMonth(yearMonth0, intArray0);
      Period period0 = null;
      try {
        period0 = new Period(yearMonth1, yearMonth1, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((-355L));
      Period period0 = Period.days(60000);
      LocalDateTime localDateTime1 = localDateTime0.minus((ReadablePeriod) period0);
      Seconds seconds0 = Seconds.MIN_VALUE;
      PeriodType periodType0 = seconds0.getPeriodType();
      Period period1 = null;
      try {
        period1 = new Period(localDateTime1, localDateTime0, periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 5184000000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      DateTime dateTime0 = DateTime.now((Chronology) gregorianChronology0);
      DateTime dateTime1 = dateTime0.plusYears(4132);
      Duration duration0 = new Duration(dateTime1, dateTime0);
      PeriodType periodType0 = PeriodType.seconds();
      Period period0 = null;
      try {
        period0 = new Period(dateTime1, duration0, periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -130393324800
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      Days days0 = Days.MIN_VALUE;
      Duration duration0 = days0.toStandardDuration();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
      DateTime dateTime0 = DateTime.now((Chronology) gregorianChronology0);
      Period period0 = null;
      try {
        period0 = new Period(duration0, dateTime0, periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -3092376453120
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.MILLIS_TYPE;
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      Period period0 = null;
      try {
        period0 = new Period(durationFieldType0, periodType0, iSOChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: org.joda.time.DurationFieldType$StandardDurationFieldType
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      Period period0 = null;
      try {
        period0 = new Period("", periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Period period0 = null;
      try {
        period0 = new Period(fixedDateTimeZone0, (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: org.joda.time.tz.FixedDateTimeZone
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      Period period0 = null;
      try {
        period0 = new Period(periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: org.joda.time.PeriodType
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Weeks weeks0 = Weeks.weeksBetween((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      Hours hours0 = weeks0.toStandardHours();
      PeriodType periodType0 = hours0.getPeriodType();
      Period period0 = null;
      try {
        period0 = new Period(64, 2427, (-3507), 2427, 292272708, 1483, (-70), 1622, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'years'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Period period0 = Period.minutes(2159);
      Period period1 = period0.multipliedBy(0);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusMillis((-1591));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.plusSeconds(1219);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Period period0 = Period.hours(0);
      Period period1 = period0.plusMinutes(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(2, 2);
      Period period0 = new Period(monthDay0, monthDay0);
      Period period1 = period0.plusHours(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusDays(2940);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusWeeks(1024);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Period period0 = new Period(1573L, (-50L));
      Period period1 = period0.plusYears((-1272));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Period period0 = new Period();
      int int0 = period0.getHours();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Duration duration0 = Duration.standardDays(1944L);
      PeriodType periodType0 = PeriodType.seconds();
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period0.withMinutes(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Period period0 = Period.days(0);
      Period period1 = new Period(period0);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(2, 2);
      Period period0 = new Period(monthDay0, monthDay0);
      int int0 = period0.getWeeks();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Period period0 = Period.minutes(2159);
      int int0 = period0.getYears();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Period period0 = new Period(1573L, (-50L));
      int int0 = period0.getSeconds();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Period period0 = Period.days(0);
      PeriodType periodType0 = PeriodType.millis();
      Period period1 = new Period(period0, periodType0);
      // Undeclared exception!
      try { 
        period1.withMonths(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Period period0 = Period.days((-1232));
      int int0 = period0.getDays();
      assertEquals((-1232), int0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Period period0 = new Period(86400000L);
      int int0 = period0.getMinutes();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      // Undeclared exception!
      try { 
        Period.parse("-ZdN0=-pT1r|wea", periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-ZdN0=-pT1r|wea\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Period period0 = new Period();
      int int0 = period0.getMonths();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Duration duration0 = Duration.standardHours((-3873L));
      PeriodType periodType0 = PeriodType.yearMonthDay();
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      Period period0 = duration0.toPeriod(periodType0, (Chronology) julianChronology0);
      PeriodType.MONTH_INDEX = (-766);
      // Undeclared exception!
      try { 
        period0.normalizedStandard();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -766
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Period period0 = Period.millis((-1221));
      int int0 = period0.getMillis();
      assertEquals((-1221), int0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Period period0 = new Period(0L, 0L, (PeriodType) null);
      Period period1 = period0.minusYears((-1234));
      Period period2 = period1.normalizedStandard((PeriodType) null);
      assertTrue(period2.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      PeriodType periodType0 = PeriodType.months();
      Period period0 = new Period(localDate0, localDate0);
      Period period1 = period0.withMonths(11);
      Period period2 = period1.normalizedStandard(periodType0);
      assertFalse(period2.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Period period0 = new Period(2191, 0, 898, 6, 1792, 1, (-834), 6);
      // Undeclared exception!
      try { 
        period0.toStandardWeeks();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Weeks as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Period period0 = Period.hours(1565);
      Period period1 = period0.multipliedBy(1);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDate localDate0 = new LocalDate((DateTimeZone) fixedDateTimeZone0);
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      Period period1 = period0.ZERO.multipliedBy(70);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.minus((ReadablePeriod) null);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDate localDate0 = LocalDate.now((DateTimeZone) fixedDateTimeZone0);
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      Months months0 = Months.TWELVE;
      Period period1 = period0.minus(months0);
      Period period2 = period1.negated();
      int int0 = period2.getMonths();
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Period period0 = Period.seconds(98);
      Period period1 = period0.plusMillis(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Duration duration0 = Duration.ZERO;
      Period period0 = new Period(dateTime0, duration0, (PeriodType) null);
      Period period1 = period0.plusSeconds(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      // Undeclared exception!
      try { 
        period0.plusMinutes(20);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusDays(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Period period0 = new Period(4094, 4094, 0, (-266), (-1660), (-266), 687, (-1660));
      Period period1 = period0.ZERO.plusWeeks(0);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Duration duration0 = Duration.ZERO;
      Period period0 = new Period(dateTime0, duration0, (PeriodType) null);
      Period period1 = period0.plusMonths(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Duration duration0 = new Duration(dateTime0, dateTime0);
      Interval interval0 = new Interval(dateTime0, duration0);
      PeriodType periodType0 = PeriodType.months();
      Period period0 = interval0.toPeriod(periodType0);
      Period period1 = period0.plusYears(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Period period0 = new Period((-1453), (-1453), (-1453), (-16));
      Period period1 = period0.plus((ReadablePeriod) null);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Period period0 = Period.seconds((-108));
      MutablePeriod mutablePeriod0 = new MutablePeriod(1935, 1436, (-188), 12);
      Period period1 = period0.plus(mutablePeriod0);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Period period0 = Period.minutes((-2717));
      DurationFieldType durationFieldType0 = DurationFieldType.MILLIS_TYPE;
      Period period1 = period0.withFieldAdded(durationFieldType0, (-2717));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Period period0 = new Period(86399997L, 86399997L);
      // Undeclared exception!
      try { 
        period0.withFieldAdded((DurationFieldType) null, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      Period period1 = period0.withFieldAdded(durationFieldType0, 0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Period period0 = new Period(3600L);
      // Undeclared exception!
      try { 
        period0.withField((DurationFieldType) null, (-867));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Period period0 = Period.months((-5682));
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKS_TYPE;
      Period period1 = period0.withField(durationFieldType0, 0);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.withFields((ReadablePeriod) null);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Period period0 = new Period(0L);
      Period period1 = period0.withPeriodType((PeriodType) null);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[7];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[1] = dateTimeFieldTypeArray0[0];
      int[] intArray0 = new int[3];
      Partial partial0 = new Partial(lenientChronology0, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(partial0, partial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not have overlapping fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      LocalTime localTime0 = LocalTime.now((Chronology) gJChronology0);
      LocalDateTime localDateTime0 = new LocalDateTime();
      // Undeclared exception!
      try { 
        Period.fieldDifference(localTime0, localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      Partial partial0 = new Partial(dateTimeFieldType0, 4258);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MonthDay monthDay0 = MonthDay.now((DateTimeZone) fixedDateTimeZone0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(partial0, monthDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      // Undeclared exception!
      try { 
        Period.fieldDifference(localDate0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.fieldDifference((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Period period0 = new Period((ReadableInstant) null, (ReadableInstant) null, (PeriodType) null);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.minusSeconds(4);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Period period0 = Period.millis(2);
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Period period0 = new Period(86399997L, 86399997L);
      Period period1 = period0.minusDays((-2383));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Period period0 = null;
      try {
        period0 = new Period((-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -2562047788015
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Period period0 = new Period(59, 59, (-1971), Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        period0.plusHours(Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 59 + 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      int[] intArray0 = new int[0];
      PeriodType periodType0 = new PeriodType("", (DurationFieldType[]) null, intArray0);
      GJChronology gJChronology0 = GJChronology.getInstance();
      Period period0 = null;
      try {
        period0 = new Period(0L, 0L, periodType0, gJChronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Hours hours0 = Hours.TWO;
      Duration duration0 = hours0.toStandardDuration();
      Instant instant0 = Instant.now();
      PeriodType periodType0 = PeriodType.millis();
      Period period0 = duration0.toPeriodTo((ReadableInstant) instant0, periodType0);
      PeriodType.MINUTE_INDEX = (-1000);
      // Undeclared exception!
      try { 
        period0.getMinutes();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1000
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Duration duration0 = Duration.standardDays(762L);
      Period period0 = duration0.toPeriod((Chronology) null);
      Days days0 = period0.toStandardDays();
      assertEquals(762, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Period period0 = new Period(2108L, 2108L);
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Period period0 = new Period(86399997L, 86399997L);
      Duration duration0 = period0.toStandardDuration();
      assertEquals(0L, duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(0L);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = localTime0.toDateTimeToday(dateTimeZone0);
      Period period0 = new Period(dateTime0, dateTime0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      Period period0 = days0.toPeriod();
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 51539607528
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Duration duration0 = Duration.standardHours(1);
      DateTime dateTime0 = new DateTime(1796L, (Chronology) null);
      Period period0 = new Period(duration0, dateTime0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      // Undeclared exception!
      try { 
        period0.minusHours(1031);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Period period0 = Period.millis(2);
      Period period1 = period0.toPeriod();
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Period period0 = Period.weeks((-2446));
      PeriodType.SECOND_INDEX = 29;
      // Undeclared exception!
      try { 
        period0.minusSeconds(317);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 29
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Period period0 = new Period((-1000L), 31083663600000L, buddhistChronology0);
      Period period1 = period0.minusMonths(Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        period1.minusMonths(109);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483647 + -109
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Period period0 = Period.years((-1658));
      Period period1 = period0.withMillis((-1658));
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      PeriodType periodType0 = PeriodType.seconds();
      Period period0 = null;
      try {
        period0 = new Period(10000000000000L, periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 10000000000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      LocalTime localTime0 = LocalTime.now((Chronology) gJChronology0);
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      Period period1 = period0.normalizedStandard();
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Period period0 = Period.millis(4978125);
      Period period1 = new Period(period0, (Chronology) null);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Period period0 = Period.parse("PT0S");
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Period period0 = new Period();
      PeriodType periodType0 = PeriodType.days();
      Period period1 = period0.withPeriodType(periodType0);
      // Undeclared exception!
      try { 
        period1.withYears(13421772);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Period period0 = Period.months(9);
      Period period1 = period0.withMinutes(9);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[9];
      int[] intArray0 = new int[7];
      PeriodType periodType0 = new PeriodType("<|\"U", durationFieldTypeArray0, intArray0);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Period period0 = new Period((Object) null, periodType0, ethiopicChronology0);
      Period period1 = period0.withDays(2);
      assertFalse(period1.equals((Object)period0));
  }
}
