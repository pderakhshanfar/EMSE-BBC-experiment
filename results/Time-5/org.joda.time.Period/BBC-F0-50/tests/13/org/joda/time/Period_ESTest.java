/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 08:30:36 GMT 2021
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.format.ISOPeriodFormat;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Period_ESTest extends Period_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Period period0 = new Period((-216), (-1285), 1, (-216), (-1), 1, (-1), (-216));
      assertNotNull(period0);
      
      Period period1 = period0.normalizedStandard();
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Days days0 = Days.FIVE;
      assertEquals(5, days0.getDays());
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      Duration duration0 = days0.toStandardDuration();
      assertEquals(5, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(5L, duration0.getStandardDays());
      assertEquals(120L, duration0.getStandardHours());
      assertEquals(432000000L, duration0.getMillis());
      assertEquals(7200L, duration0.getStandardMinutes());
      assertEquals(432000L, duration0.getStandardSeconds());
      assertNotNull(duration0);
      
      Duration duration1 = duration0.multipliedBy((-2345L));
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertEquals(5, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(5L, duration0.getStandardDays());
      assertEquals(120L, duration0.getStandardHours());
      assertEquals(432000000L, duration0.getMillis());
      assertEquals(7200L, duration0.getStandardMinutes());
      assertEquals(432000L, duration0.getStandardSeconds());
      assertEquals((-1013040000000L), duration1.getMillis());
      assertEquals((-1013040000L), duration1.getStandardSeconds());
      assertEquals((-11725L), duration1.getStandardDays());
      assertEquals((-281400L), duration1.getStandardHours());
      assertEquals((-16884000L), duration1.getStandardMinutes());
      assertFalse(duration1.equals((Object)duration0));
      assertNotNull(duration1);
      
      Period period0 = duration1.toPeriod();
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertEquals(5, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(5L, duration0.getStandardDays());
      assertEquals(120L, duration0.getStandardHours());
      assertEquals(432000000L, duration0.getMillis());
      assertEquals(7200L, duration0.getStandardMinutes());
      assertEquals(432000L, duration0.getStandardSeconds());
      assertEquals((-1013040000000L), duration1.getMillis());
      assertEquals((-1013040000L), duration1.getStandardSeconds());
      assertEquals((-11725L), duration1.getStandardDays());
      assertEquals((-281400L), duration1.getStandardHours());
      assertEquals((-16884000L), duration1.getStandardMinutes());
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      assertNotNull(period0);
      
      Period period1 = period0.normalizedStandard();
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(5, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(5L, duration0.getStandardDays());
      assertEquals(120L, duration0.getStandardHours());
      assertEquals(432000000L, duration0.getMillis());
      assertEquals(7200L, duration0.getStandardMinutes());
      assertEquals(432000L, duration0.getStandardSeconds());
      assertEquals((-1013040000000L), duration1.getMillis());
      assertEquals((-1013040000L), duration1.getStandardSeconds());
      assertEquals((-11725L), duration1.getStandardDays());
      assertEquals((-281400L), duration1.getStandardHours());
      assertEquals((-16884000L), duration1.getStandardMinutes());
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      Duration duration2 = period1.toStandardDuration();
      assertNotSame(duration0, duration1);
      assertNotSame(duration0, duration2);
      assertNotSame(duration1, duration0);
      assertNotSame(duration1, duration2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotSame(duration2, duration0);
      assertNotSame(duration2, duration1);
      assertEquals(5, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(5L, duration0.getStandardDays());
      assertEquals(120L, duration0.getStandardHours());
      assertEquals(432000000L, duration0.getMillis());
      assertEquals(7200L, duration0.getStandardMinutes());
      assertEquals(432000L, duration0.getStandardSeconds());
      assertEquals((-1013040000000L), duration1.getMillis());
      assertEquals((-1013040000L), duration1.getStandardSeconds());
      assertEquals((-11725L), duration1.getStandardDays());
      assertEquals((-281400L), duration1.getStandardHours());
      assertEquals((-16884000L), duration1.getStandardMinutes());
      assertEquals((-1013040000L), duration2.getStandardSeconds());
      assertEquals((-281400L), duration2.getStandardHours());
      assertEquals((-1013040000000L), duration2.getMillis());
      assertEquals((-16884000L), duration2.getStandardMinutes());
      assertEquals((-11725L), duration2.getStandardDays());
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertTrue(duration2.equals((Object)duration1));
      assertFalse(duration2.equals((Object)duration0));
      assertNotNull(duration2);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Days days0 = Days.FIVE;
      assertEquals(5, days0.getDays());
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      Duration duration0 = days0.toStandardDuration();
      assertEquals(5, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(120L, duration0.getStandardHours());
      assertEquals(5L, duration0.getStandardDays());
      assertEquals(432000L, duration0.getStandardSeconds());
      assertEquals(432000000L, duration0.getMillis());
      assertEquals(7200L, duration0.getStandardMinutes());
      assertNotNull(duration0);
      
      Period period0 = duration0.toPeriod();
      assertEquals(5, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(120L, duration0.getStandardHours());
      assertEquals(5L, duration0.getStandardDays());
      assertEquals(432000L, duration0.getStandardSeconds());
      assertEquals(432000000L, duration0.getMillis());
      assertEquals(7200L, duration0.getStandardMinutes());
      assertNotNull(period0);
      
      Period period1 = period0.withFields(days0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(5, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(120L, duration0.getStandardHours());
      assertEquals(5L, duration0.getStandardDays());
      assertEquals(432000L, duration0.getStandardSeconds());
      assertEquals(432000000L, duration0.getMillis());
      assertEquals(7200L, duration0.getStandardMinutes());
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      Duration duration1 = period1.toStandardDuration();
      assertNotSame(duration0, duration1);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotSame(duration1, duration0);
      assertEquals(5, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(120L, duration0.getStandardHours());
      assertEquals(5L, duration0.getStandardDays());
      assertEquals(432000L, duration0.getStandardSeconds());
      assertEquals(432000000L, duration0.getMillis());
      assertEquals(7200L, duration0.getStandardMinutes());
      assertEquals(14400L, duration1.getStandardMinutes());
      assertEquals(10L, duration1.getStandardDays());
      assertEquals(240L, duration1.getStandardHours());
      assertEquals(864000000L, duration1.getMillis());
      assertEquals(864000L, duration1.getStandardSeconds());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(duration1.equals((Object)duration0));
      assertNotNull(duration1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Period period0 = new Period((-1000L));
      assertNotNull(period0);
      
      Period period1 = period0.withDays(1282);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      Seconds seconds0 = period1.toStandardSeconds();
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(1, seconds0.size());
      assertEquals(110764799, seconds0.getSeconds());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotNull(seconds0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Period period0 = new Period((long) 698);
      assertNotNull(period0);
      
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertNotNull(seconds0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Period period0 = new Period(11, 11, 11, (-1942));
      assertNotNull(period0);
      
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(1, minutes0.size());
      assertEquals(671, minutes0.getMinutes());
      assertNotNull(minutes0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Period period0 = new Period((-1000L));
      assertNotNull(period0);
      
      Period period1 = period0.plusMinutes(1285);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      Hours hours0 = period1.toStandardHours();
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(1, hours0.size());
      assertEquals(21, hours0.getHours());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotNull(hours0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Period period0 = new Period((-1000L));
      assertNotNull(period0);
      
      Period period1 = period0.plusMinutes(1285);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      Days days0 = period1.toStandardDays();
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotNull(days0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Period period0 = Period.hours(1184);
      assertNotNull(period0);
      
      Period period1 = period0.withDays(1184);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      Weeks weeks0 = period1.toStandardWeeks();
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(1, weeks0.size());
      assertEquals(176, weeks0.getWeeks());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotNull(weeks0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Period period0 = new Period(450, (-1100), (-1100), 4606);
      assertNotNull(period0);
      
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(2, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, islamicChronology_LeapYearPatternType0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(60L, (Chronology) islamicChronology0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(mutablePeriod0);
      
      Period period0 = mutablePeriod0.toPeriod();
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(period0);
      
      Months months0 = Months.TWO;
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      assertNotNull(months0);
      
      DurationFieldType durationFieldType0 = months0.getFieldType();
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      Period period1 = period0.withFieldAdded(durationFieldType0, 1948);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertFalse(period1.equals((Object)period0));
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(period1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      LocalTime localTime0 = new LocalTime(5097600000L, (DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      YearMonth yearMonth0 = new YearMonth((DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertNotNull(yearMonth0);
      
      // Undeclared exception!
      try { 
        Period.fieldDifference(localTime0, yearMonth0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Period period0 = Period.months(1736);
      assertNotNull(period0);
      
      Period period1 = period0.withMinutes((-7));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Period period0 = Period.hours((-930));
      assertNotNull(period0);
      
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals((-5), weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      Seconds seconds0 = Seconds.secondsBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localDateTime0.size());
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertNotNull(seconds0);
      
      PeriodType periodType0 = seconds0.getPeriodType();
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localDateTime0.size());
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertNotNull(periodType0);
      
      Period period0 = new Period(localDateTime0, localDateTime0, periodType0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localDateTime0.size());
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertNotNull(period0);
      
      Seconds seconds1 = period0.toStandardSeconds();
      assertSame(seconds0, seconds1);
      assertSame(seconds1, seconds0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localDateTime0.size());
      assertEquals(1, seconds0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, seconds1.size());
      assertEquals(0, seconds1.getSeconds());
      assertNotNull(seconds1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Days days0 = Days.FIVE;
      assertEquals(1, days0.size());
      assertEquals(5, days0.getDays());
      assertNotNull(days0);
      
      Duration duration0 = days0.toStandardDuration();
      assertEquals(1, days0.size());
      assertEquals(5, days0.getDays());
      assertEquals(120L, duration0.getStandardHours());
      assertEquals(5L, duration0.getStandardDays());
      assertEquals(432000L, duration0.getStandardSeconds());
      assertEquals(432000000L, duration0.getMillis());
      assertEquals(7200L, duration0.getStandardMinutes());
      assertNotNull(duration0);
      
      Duration duration1 = duration0.multipliedBy((-2345L));
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertEquals(1, days0.size());
      assertEquals(5, days0.getDays());
      assertEquals(120L, duration0.getStandardHours());
      assertEquals(5L, duration0.getStandardDays());
      assertEquals(432000L, duration0.getStandardSeconds());
      assertEquals(432000000L, duration0.getMillis());
      assertEquals(7200L, duration0.getStandardMinutes());
      assertEquals((-16884000L), duration1.getStandardMinutes());
      assertEquals((-1013040000000L), duration1.getMillis());
      assertEquals((-11725L), duration1.getStandardDays());
      assertEquals((-1013040000L), duration1.getStandardSeconds());
      assertEquals((-281400L), duration1.getStandardHours());
      assertFalse(duration1.equals((Object)duration0));
      assertNotNull(duration1);
      
      Period period0 = duration1.toPeriod();
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertEquals(1, days0.size());
      assertEquals(5, days0.getDays());
      assertEquals(120L, duration0.getStandardHours());
      assertEquals(5L, duration0.getStandardDays());
      assertEquals(432000L, duration0.getStandardSeconds());
      assertEquals(432000000L, duration0.getMillis());
      assertEquals(7200L, duration0.getStandardMinutes());
      assertEquals((-16884000L), duration1.getStandardMinutes());
      assertEquals((-1013040000000L), duration1.getMillis());
      assertEquals((-11725L), duration1.getStandardDays());
      assertEquals((-1013040000L), duration1.getStandardSeconds());
      assertEquals((-281400L), duration1.getStandardHours());
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      assertNotNull(period0);
      
      Seconds seconds0 = period0.toStandardSeconds();
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertEquals(1, days0.size());
      assertEquals(5, days0.getDays());
      assertEquals(120L, duration0.getStandardHours());
      assertEquals(5L, duration0.getStandardDays());
      assertEquals(432000L, duration0.getStandardSeconds());
      assertEquals(432000000L, duration0.getMillis());
      assertEquals(7200L, duration0.getStandardMinutes());
      assertEquals((-16884000L), duration1.getStandardMinutes());
      assertEquals((-1013040000000L), duration1.getMillis());
      assertEquals((-11725L), duration1.getStandardDays());
      assertEquals((-1013040000L), duration1.getStandardSeconds());
      assertEquals((-281400L), duration1.getStandardHours());
      assertEquals((-1013040000), seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      assertNotNull(seconds0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, islamicChronology_LeapYearPatternType0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(60L, (Chronology) islamicChronology0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(mutablePeriod0);
      
      Period period0 = mutablePeriod0.toPeriod();
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(period0);
      
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(minutes0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Duration duration0 = new Duration((-2316L), (-1160L));
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1156L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertNotNull(duration0);
      
      Period period0 = duration0.toPeriod();
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1156L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertNotNull(period0);
      
      Period period1 = period0.plusDays(2323);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1156L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      Period period2 = period1.negated();
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1156L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertNotNull(period2);
      
      Minutes minutes0 = period2.toStandardMinutes();
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1156L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1, minutes0.size());
      assertEquals((-3345120), minutes0.getMinutes());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertNotNull(minutes0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Period period0 = Period.millis(127);
      assertNotNull(period0);
      
      Weeks weeks0 = Weeks.ONE;
      assertEquals(1, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      
      Period period1 = period0.plus(weeks0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(1, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      Hours hours0 = period1.toStandardHours();
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(1, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertEquals(168, hours0.getHours());
      assertEquals(1, hours0.size());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotNull(hours0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Period period0 = Period.hours(0);
      assertNotNull(period0);
      
      Period period1 = period0.withDays((-11));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      Hours hours0 = period1.toStandardHours();
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals((-264), hours0.getHours());
      assertEquals(1, hours0.size());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotNull(hours0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Period period0 = new Period((-1000L));
      assertNotNull(period0);
      
      Period period1 = period0.plusMinutes(1285);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      Duration duration0 = period1.toStandardDuration();
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(21L, duration0.getStandardHours());
      assertEquals(1284L, duration0.getStandardMinutes());
      assertEquals(77099L, duration0.getStandardSeconds());
      assertEquals(77099000L, duration0.getMillis());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotNull(duration0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Period period0 = Period.millis(60000);
      assertNotNull(period0);
      
      Weeks weeks0 = Weeks.ONE;
      assertEquals(1, weeks0.size());
      assertEquals(1, weeks0.getWeeks());
      assertNotNull(weeks0);
      
      Period period1 = period0.plus(weeks0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(1, weeks0.size());
      assertEquals(1, weeks0.getWeeks());
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      Days days0 = period1.toStandardDays();
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(1, weeks0.size());
      assertEquals(1, weeks0.getWeeks());
      assertEquals(1, days0.size());
      assertEquals(7, days0.getDays());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotNull(days0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Period period0 = new Period(0L);
      assertNotNull(period0);
      
      Period period1 = period0.minusHours(90);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      Days days0 = period1.toStandardDays();
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals((-3), days0.getDays());
      assertEquals(1, days0.size());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotNull(days0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatter0);
      
      Period period0 = Period.parse("", periodFormatter0);
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((-209L));
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-209L), mutableDateTime0.getMillis());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertNotNull(mutableDateTime0);
      
      Duration duration0 = Duration.standardHours(10000000L);
      assertEquals(600000000L, duration0.getStandardMinutes());
      assertEquals(36000000000L, duration0.getStandardSeconds());
      assertEquals(416666L, duration0.getStandardDays());
      assertEquals(36000000000000L, duration0.getMillis());
      assertEquals(10000000L, duration0.getStandardHours());
      assertNotNull(duration0);
      
      Period period0 = new Period(duration0, mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-209L), mutableDateTime0.getMillis());
      assertEquals(600000000L, duration0.getStandardMinutes());
      assertEquals(36000000000L, duration0.getStandardSeconds());
      assertEquals(416666L, duration0.getStandardDays());
      assertEquals(36000000000000L, duration0.getMillis());
      assertEquals(10000000L, duration0.getStandardHours());
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertNotNull(period0);
      
      int int0 = period0.getYears();
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-209L), mutableDateTime0.getMillis());
      assertEquals(600000000L, duration0.getStandardMinutes());
      assertEquals(36000000000L, duration0.getStandardSeconds());
      assertEquals(416666L, duration0.getStandardDays());
      assertEquals(36000000000000L, duration0.getMillis());
      assertEquals(10000000L, duration0.getStandardHours());
      assertEquals(1140, int0);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-582), (-196), 2, 959, 0, 2, (-12), 1);
      assertNotNull(mutablePeriod0);
      
      Period period0 = mutablePeriod0.toPeriod();
      assertNotNull(period0);
      
      int int0 = period0.getYears();
      assertEquals((-582), int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Years years0 = Years.TWO;
      assertEquals(1, years0.size());
      assertEquals(2, years0.getYears());
      assertNotNull(years0);
      
      PeriodType periodType0 = years0.getPeriodType();
      assertEquals(1, years0.size());
      assertEquals(2, years0.getYears());
      assertEquals(1, periodType0.size());
      assertEquals("Years", periodType0.getName());
      assertNotNull(periodType0);
      
      Period period0 = new Period(0L, periodType0);
      assertEquals(1, years0.size());
      assertEquals(2, years0.getYears());
      assertEquals(1, periodType0.size());
      assertEquals("Years", periodType0.getName());
      assertNotNull(period0);
      
      int int0 = period0.getWeeks();
      assertEquals(1, years0.size());
      assertEquals(2, years0.getYears());
      assertEquals(1, periodType0.size());
      assertEquals("Years", periodType0.getName());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Period period0 = Period.months(1736);
      assertNotNull(period0);
      
      Period period1 = period0.withWeeks((-1));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      Period period2 = period1.normalizedStandard();
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertNotNull(period2);
      
      int int0 = period2.getWeeks();
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Period period0 = Period.seconds(2884);
      assertNotNull(period0);
      
      int int0 = period0.getSeconds();
      assertEquals(2884, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      LocalTime localTime0 = new LocalTime((long) 1, (DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.withLocalMillis((-1876L));
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotNull(localTime1);
      
      Period period0 = Period.fieldDifference(localTime1, localTime0);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertNotNull(period0);
      
      int int0 = period0.getSeconds();
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals((-58), int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      
      Period period1 = period0.ZERO.withMonths(2858);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      int int0 = period1.getMonths();
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertEquals(2858, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-582), (-196), 2, 959, 0, 2, (-12), 1);
      assertNotNull(mutablePeriod0);
      
      Period period0 = mutablePeriod0.toPeriod();
      assertNotNull(period0);
      
      int int0 = period0.getMinutes();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Period period0 = Period.minutes((-1357));
      assertNotNull(period0);
      
      int int0 = period0.getMinutes();
      assertEquals((-1357), int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Period period0 = new Period((long) 698);
      assertNotNull(period0);
      
      int int0 = period0.getMillis();
      assertEquals(698, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(lenientChronology0);
      
      Period period0 = new Period((-1139L), (Chronology) lenientChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(period0);
      
      int int0 = period0.getMillis();
      assertEquals((-139), int0);
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Days days0 = Days.FIVE;
      assertEquals(5, days0.getDays());
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      Duration duration0 = days0.toStandardDuration();
      assertEquals(5, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(432000L, duration0.getStandardSeconds());
      assertEquals(7200L, duration0.getStandardMinutes());
      assertEquals(432000000L, duration0.getMillis());
      assertEquals(5L, duration0.getStandardDays());
      assertEquals(120L, duration0.getStandardHours());
      assertNotNull(duration0);
      
      Period period0 = duration0.toPeriod();
      assertEquals(5, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(432000L, duration0.getStandardSeconds());
      assertEquals(7200L, duration0.getStandardMinutes());
      assertEquals(432000000L, duration0.getMillis());
      assertEquals(5L, duration0.getStandardDays());
      assertEquals(120L, duration0.getStandardHours());
      assertNotNull(period0);
      
      int int0 = period0.getHours();
      assertEquals(5, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(432000L, duration0.getStandardSeconds());
      assertEquals(7200L, duration0.getStandardMinutes());
      assertEquals(432000000L, duration0.getMillis());
      assertEquals(5L, duration0.getStandardDays());
      assertEquals(120L, duration0.getStandardHours());
      assertEquals(120, int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Days days0 = Days.FOUR;
      assertEquals(1, days0.size());
      assertEquals(4, days0.getDays());
      assertNotNull(days0);
      
      Minutes minutes0 = days0.toStandardMinutes();
      assertEquals(1, days0.size());
      assertEquals(4, days0.getDays());
      assertEquals(5760, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertNotNull(minutes0);
      
      Hours hours0 = minutes0.toStandardHours();
      assertEquals(1, days0.size());
      assertEquals(4, days0.getDays());
      assertEquals(5760, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(96, hours0.getHours());
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      Period period0 = Period.hours(2);
      assertNotNull(period0);
      
      Period period1 = period0.minus(hours0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(1, days0.size());
      assertEquals(4, days0.getDays());
      assertEquals(5760, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(96, hours0.getHours());
      assertEquals(1, hours0.size());
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      int int0 = period1.getHours();
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(1, days0.size());
      assertEquals(4, days0.getDays());
      assertEquals(5760, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(96, hours0.getHours());
      assertEquals(1, hours0.size());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertEquals((-94), int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Period period0 = Period.minutes(698);
      assertNotNull(period0);
      
      Period period1 = period0.minusDays((-1095));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      int int0 = period1.getDays();
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertEquals(1095, int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Period period0 = Period.minutes(698);
      assertNotNull(period0);
      
      Period period1 = period0.minusDays(698);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      int int0 = period1.getDays();
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertEquals((-698), int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Period period0 = Period.millis(7);
      assertNotNull(period0);
      
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(1, weeks0.size());
      assertEquals(0, weeks0.getWeeks());
      assertNotNull(weeks0);
      
      PeriodType periodType0 = weeks0.getPeriodType();
      assertEquals(1, weeks0.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertNotNull(periodType0);
      
      Duration duration0 = Duration.standardSeconds(0L);
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertNotNull(duration0);
      
      Period period1 = duration0.toPeriod(periodType0, (Chronology) null);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(1, weeks0.size());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      // Undeclared exception!
      try { 
        period1.withYears(66);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      DurationFieldType durationFieldType0 = DurationFieldType.MONTHS_TYPE;
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      durationFieldTypeArray0[0] = durationFieldType0;
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      assertEquals(1, durationFieldTypeArray0.length);
      assertEquals(1, periodType0.size());
      assertEquals("", periodType0.getName());
      assertNotNull(periodType0);
      
      Period period0 = new Period(2989L, periodType0);
      assertEquals(1, durationFieldTypeArray0.length);
      assertEquals(1, periodType0.size());
      assertEquals("", periodType0.getName());
      assertNotNull(period0);
      
      // Undeclared exception!
      try { 
        period0.withYears((-840));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      
      PeriodType.YEAR_INDEX = 4036;
      // Undeclared exception!
      try { 
        period0.withYears((-4));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4036
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      assertEquals(1, periodType0.size());
      assertEquals("Minutes", periodType0.getName());
      assertNotNull(periodType0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      Period period0 = new Period(2449L, (-1160L), periodType0, buddhistChronology0);
      assertEquals(1, periodType0.size());
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(period0);
      
      // Undeclared exception!
      try { 
        period0.withWeeks(10);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      
      PeriodType.WEEK_INDEX = (-323);
      // Undeclared exception!
      try { 
        period0.withWeeks(1000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -323
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      assertEquals(Integer.MIN_VALUE, years0.getYears());
      assertEquals(1, years0.size());
      assertNotNull(years0);
      
      Period period0 = new Period(years0);
      assertEquals(Integer.MIN_VALUE, years0.getYears());
      assertEquals(1, years0.size());
      assertNotNull(period0);
      
      // Undeclared exception!
      try { 
        period0.withSeconds((-1323));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      Months months0 = Months.MAX_VALUE;
      assertEquals(1, months0.size());
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertNotNull(months0);
      
      DurationFieldType durationFieldType0 = months0.getFieldType();
      assertEquals(1, months0.size());
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      durationFieldTypeArray0[0] = durationFieldType0;
      int[] intArray0 = new int[4];
      PeriodType periodType0 = new PeriodType(" as this period contains years and years vary in length", durationFieldTypeArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(1, durationFieldTypeArray0.length);
      assertEquals(4, intArray0.length);
      assertEquals(" as this period contains years and years vary in length", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      Period period0 = new Period(10080L, periodType0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(1, durationFieldTypeArray0.length);
      assertEquals(4, intArray0.length);
      assertEquals(" as this period contains years and years vary in length", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(period0);
      
      // Undeclared exception!
      try { 
        period0.withSeconds((-2074));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Period period0 = new Period((-1L));
      assertNotNull(period0);
      
      int[] intArray0 = new int[4];
      PeriodType periodType0 = new PeriodType("Ek/b", (DurationFieldType[]) null, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals("Ek/b", periodType0.getName());
      assertNotNull(periodType0);
      
      // Undeclared exception!
      try { 
        period0.withPeriodType(periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      assertNotNull(periodType0);
      
      Period period0 = Period.hours(2);
      assertNotNull(period0);
      
      // Undeclared exception!
      try { 
        period0.withPeriodType(periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'hours'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      assertEquals(Integer.MIN_VALUE, years0.getYears());
      assertEquals(1, years0.size());
      assertNotNull(years0);
      
      PeriodType periodType0 = years0.getPeriodType();
      assertEquals(Integer.MIN_VALUE, years0.getYears());
      assertEquals(1, years0.size());
      assertEquals("Years", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      Period period0 = new Period(years0, periodType0);
      assertEquals(Integer.MIN_VALUE, years0.getYears());
      assertEquals(1, years0.size());
      assertEquals("Years", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(period0);
      
      // Undeclared exception!
      try { 
        period0.withMonths(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Period period0 = Period.days(9);
      assertNotNull(period0);
      
      PeriodType.MONTH_INDEX = 9;
      // Undeclared exception!
      try { 
        period0.withMonths((-2787));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      PeriodType periodType0 = PeriodType.months();
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertNotNull(periodType0);
      
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      Period period0 = new Period((-1091L), (-927L), periodType0, copticChronology0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, CopticChronology.AM);
      assertNotNull(period0);
      
      // Undeclared exception!
      try { 
        period0.withMillis((-1191));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Duration duration0 = Duration.standardDays(63L);
      assertEquals(5443200L, duration0.getStandardSeconds());
      assertEquals(5443200000L, duration0.getMillis());
      assertEquals(63L, duration0.getStandardDays());
      assertEquals(90720L, duration0.getStandardMinutes());
      assertEquals(1512L, duration0.getStandardHours());
      assertNotNull(duration0);
      
      Interval interval0 = new Interval((ReadableInstant) null, duration0);
      assertEquals(5443200L, duration0.getStandardSeconds());
      assertEquals(5443200000L, duration0.getMillis());
      assertEquals(63L, duration0.getStandardDays());
      assertEquals(90720L, duration0.getStandardMinutes());
      assertEquals(1512L, duration0.getStandardHours());
      assertEquals(1397852481320L, interval0.getEndMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertNotNull(interval0);
      
      PeriodType periodType0 = PeriodType.yearWeekDay();
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      assertNotNull(periodType0);
      
      Period period0 = interval0.toPeriod(periodType0);
      assertEquals(5443200L, duration0.getStandardSeconds());
      assertEquals(5443200000L, duration0.getMillis());
      assertEquals(63L, duration0.getStandardDays());
      assertEquals(90720L, duration0.getStandardMinutes());
      assertEquals(1512L, duration0.getStandardHours());
      assertEquals(1397852481320L, interval0.getEndMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      assertNotNull(period0);
      
      // Undeclared exception!
      try { 
        period0.withHours(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      
      PeriodType.HOUR_INDEX = (-1067);
      // Undeclared exception!
      try { 
        period0.withHours((-1067));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1067
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Duration duration0 = new Duration((-2316L), (-1160L));
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1156L, duration0.getMillis());
      assertNotNull(duration0);
      
      Days days0 = duration0.toStandardDays();
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1156L, duration0.getMillis());
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      Period period0 = days0.toPeriod();
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1156L, duration0.getMillis());
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertNotNull(period0);
      
      Period period1 = Period.months(1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      Period period2 = period0.withFields(period1);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1156L, duration0.getMillis());
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertTrue(period2.equals((Object)period1));
      assertNotNull(period2);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, islamicChronology_LeapYearPatternType0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(60L, (Chronology) islamicChronology0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(mutablePeriod0);
      
      Period period0 = mutablePeriod0.toPeriod();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(period0);
      
      PeriodType.DAY_INDEX = (-59);
      // Undeclared exception!
      try { 
        period0.withDays(3108);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -59
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Period period0 = Period.weeks((-7));
      assertNotNull(period0);
      
      Period period1 = period0.withYears((-1));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      // Undeclared exception!
      try { 
        period1.toStandardWeeks();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Weeks as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      assertEquals("YearWeekDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      assertNotNull(periodType0);
      
      Period period0 = new Period(1L, periodType0);
      assertEquals("YearWeekDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      assertNotNull(period0);
      
      PeriodType.MILLI_INDEX = 29;
      // Undeclared exception!
      try { 
        period0.toStandardWeeks();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Period period0 = new Period(172L, (PeriodType) null);
      assertNotNull(period0);
      
      Period period1 = period0.withMonths(2196);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      // Undeclared exception!
      try { 
        period1.toStandardSeconds();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Seconds as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Years years0 = Years.TWO;
      assertEquals(1, years0.size());
      assertEquals(2, years0.getYears());
      assertNotNull(years0);
      
      PeriodType periodType0 = years0.getPeriodType();
      assertEquals(1, years0.size());
      assertEquals(2, years0.getYears());
      assertEquals(1, periodType0.size());
      assertEquals("Years", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType.DAY_INDEX = 38;
      Period period0 = new Period(0L, periodType0);
      assertEquals(1, years0.size());
      assertEquals(2, years0.getYears());
      assertEquals(1, periodType0.size());
      assertEquals("Years", periodType0.getName());
      assertNotNull(period0);
      
      // Undeclared exception!
      try { 
        period0.toStandardSeconds();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Period period0 = Period.weeks(326565);
      assertNotNull(period0);
      
      // Undeclared exception!
      try { 
        period0.toStandardSeconds();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 197506512000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Period period0 = Period.weeks(1419);
      assertNotNull(period0);
      
      PeriodType.SECOND_INDEX = (-3);
      // Undeclared exception!
      try { 
        period0.toStandardMinutes();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Period period0 = Period.days(12);
      assertNotNull(period0);
      
      Period period1 = period0.withYears(12);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      // Undeclared exception!
      try { 
        period1.toStandardHours();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Hours as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      assertEquals("weekyears", durationFieldType0.getName());
      assertEquals("weekyears", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      durationFieldTypeArray0[0] = durationFieldType0;
      PeriodType periodType0 = new PeriodType("x*El{", durationFieldTypeArray0, (int[]) null);
      assertEquals(1, durationFieldTypeArray0.length);
      assertEquals(1, periodType0.size());
      assertEquals("x*El{", periodType0.getName());
      assertNotNull(periodType0);
      
      Period period0 = new Period((long) 1, periodType0);
      assertEquals(1, durationFieldTypeArray0.length);
      assertEquals(1, periodType0.size());
      assertEquals("x*El{", periodType0.getName());
      assertNotNull(period0);
      
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      Seconds seconds0 = Seconds.secondsBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
      
      PeriodType periodType0 = seconds0.getPeriodType();
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      Period period0 = new Period(0L, periodType0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(period0);
      
      PeriodType.SECOND_INDEX = 1347;
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Period period0 = Period.weeks(25734375);
      assertNotNull(period0);
      
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 4323375000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      DurationFieldType durationFieldType0 = DurationFieldType.MONTHS_TYPE;
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      durationFieldTypeArray0[0] = durationFieldType0;
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      assertEquals(1, durationFieldTypeArray0.length);
      assertEquals(1, periodType0.size());
      assertEquals("", periodType0.getName());
      assertNotNull(periodType0);
      
      Period period0 = new Period(2989L, periodType0);
      assertEquals(1, durationFieldTypeArray0.length);
      assertEquals(1, periodType0.size());
      assertEquals("", periodType0.getName());
      assertNotNull(period0);
      
      // Undeclared exception!
      try { 
        period0.toStandardDuration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Period period0 = new Period((-1000L));
      assertNotNull(period0);
      
      PeriodType.DAY_INDEX = 1285;
      // Undeclared exception!
      try { 
        period0.toStandardDuration();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1285
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Period period0 = Period.minutes(0);
      assertNotNull(period0);
      
      Period period1 = period0.withMonths((-83));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      // Undeclared exception!
      try { 
        period1.toStandardDays();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Days as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Days days0 = Days.TWO;
      assertEquals(2, days0.getDays());
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      Duration duration0 = days0.toStandardDuration();
      assertEquals(2, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(172800L, duration0.getStandardSeconds());
      assertEquals(2880L, duration0.getStandardMinutes());
      assertEquals(48L, duration0.getStandardHours());
      assertEquals(2L, duration0.getStandardDays());
      assertEquals(172800000L, duration0.getMillis());
      assertNotNull(duration0);
      
      Years years0 = Years.MIN_VALUE;
      assertEquals(1, years0.size());
      assertEquals(Integer.MIN_VALUE, years0.getYears());
      assertNotNull(years0);
      
      PeriodType periodType0 = years0.getPeriodType();
      assertEquals(1, years0.size());
      assertEquals(Integer.MIN_VALUE, years0.getYears());
      assertEquals("Years", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType.MILLI_INDEX = (-1762);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      Period period0 = duration0.toPeriod(periodType0, (Chronology) ethiopicChronology0);
      assertEquals(2, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(172800L, duration0.getStandardSeconds());
      assertEquals(2880L, duration0.getStandardMinutes());
      assertEquals(48L, duration0.getStandardHours());
      assertEquals(2L, duration0.getStandardDays());
      assertEquals(172800000L, duration0.getMillis());
      assertEquals(1, years0.size());
      assertEquals(Integer.MIN_VALUE, years0.getYears());
      assertEquals("Years", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(period0);
      
      // Undeclared exception!
      try { 
        period0.toStandardDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1762
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Period period0 = Period.millis(60000);
      assertNotNull(period0);
      
      Weeks weeks0 = Weeks.MAX_VALUE;
      assertEquals(1, weeks0.size());
      assertEquals(Integer.MAX_VALUE, weeks0.getWeeks());
      assertNotNull(weeks0);
      
      Period period1 = period0.plus(weeks0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(1, weeks0.size());
      assertEquals(Integer.MAX_VALUE, weeks0.getWeeks());
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      // Undeclared exception!
      try { 
        period1.toStandardDays();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 15032385529
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      
      PeriodType.YEAR_INDEX = 1916;
      // Undeclared exception!
      try { 
        period0.plusYears(1360);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1916
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, islamicChronology_LeapYearPatternType0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(60L, (Chronology) islamicChronology0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(mutablePeriod0);
      
      Period period0 = mutablePeriod0.toPeriod();
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(period0);
      
      Years years0 = Years.MAX_VALUE;
      assertEquals(1, years0.size());
      assertEquals(Integer.MAX_VALUE, years0.getYears());
      assertNotNull(years0);
      
      Period period1 = period0.plus(years0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(1, years0.size());
      assertEquals(Integer.MAX_VALUE, years0.getYears());
      assertFalse(period1.equals((Object)period0));
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(period1);
      
      // Undeclared exception!
      try { 
        period1.plusYears(1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 1
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Days days0 = Days.TWO;
      assertEquals(1, days0.size());
      assertEquals(2, days0.getDays());
      assertNotNull(days0);
      
      Duration duration0 = days0.toStandardDuration();
      assertEquals(1, days0.size());
      assertEquals(2, days0.getDays());
      assertEquals(2L, duration0.getStandardDays());
      assertEquals(172800L, duration0.getStandardSeconds());
      assertEquals(172800000L, duration0.getMillis());
      assertEquals(2880L, duration0.getStandardMinutes());
      assertEquals(48L, duration0.getStandardHours());
      assertNotNull(duration0);
      
      Years years0 = Years.MIN_VALUE;
      assertEquals(1, years0.size());
      assertEquals(Integer.MIN_VALUE, years0.getYears());
      assertNotNull(years0);
      
      PeriodType periodType0 = years0.getPeriodType();
      assertEquals(1, years0.size());
      assertEquals(Integer.MIN_VALUE, years0.getYears());
      assertEquals(1, periodType0.size());
      assertEquals("Years", periodType0.getName());
      assertNotNull(periodType0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      Period period0 = duration0.toPeriod(periodType0, (Chronology) ethiopicChronology0);
      assertEquals(1, days0.size());
      assertEquals(2, days0.getDays());
      assertEquals(2L, duration0.getStandardDays());
      assertEquals(172800L, duration0.getStandardSeconds());
      assertEquals(172800000L, duration0.getMillis());
      assertEquals(2880L, duration0.getStandardMinutes());
      assertEquals(48L, duration0.getStandardHours());
      assertEquals(1, years0.size());
      assertEquals(Integer.MIN_VALUE, years0.getYears());
      assertEquals(1, periodType0.size());
      assertEquals("Years", periodType0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(period0);
      
      // Undeclared exception!
      try { 
        period0.plusWeeks(667);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Period period0 = Period.minutes(3);
      assertNotNull(period0);
      
      PeriodType.WEEK_INDEX = 623191204;
      // Undeclared exception!
      try { 
        period0.plusWeeks((-407));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 623191204
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(period0);
      
      PeriodType.SECOND_INDEX = 1968;
      // Undeclared exception!
      try { 
        period0.plusSeconds(292272708);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1968
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[9];
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKYEARS_TYPE;
      assertEquals("weekyears", durationFieldType0.toString());
      assertEquals("weekyears", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[2] = durationFieldTypeArray0[1];
      durationFieldTypeArray0[3] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[4] = durationFieldType0;
      durationFieldTypeArray0[5] = durationFieldTypeArray0[4];
      durationFieldTypeArray0[6] = durationFieldTypeArray0[4];
      durationFieldTypeArray0[7] = durationFieldType0;
      durationFieldTypeArray0[8] = durationFieldTypeArray0[2];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, (int[]) null);
      assertEquals(9, durationFieldTypeArray0.length);
      assertNull(periodType0.getName());
      assertEquals(9, periodType0.size());
      assertNotNull(periodType0);
      
      Period period0 = new Period(0L, 31449600000L, periodType0);
      assertEquals(9, durationFieldTypeArray0.length);
      assertNull(periodType0.getName());
      assertEquals(9, periodType0.size());
      assertNotNull(period0);
      
      // Undeclared exception!
      try { 
        period0.plusMonths((-2457));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Instant instant0 = Instant.now();
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(instant0);
      
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[9];
      int[] intArray0 = new int[9];
      intArray0[1] = (-1124);
      PeriodType periodType0 = new PeriodType("p>nj%2&2<mn9u", durationFieldTypeArray0, intArray0);
      assertArrayEquals(new int[] {0, (-1124), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, durationFieldTypeArray0.length);
      assertEquals(9, intArray0.length);
      assertEquals("p>nj%2&2<mn9u", periodType0.getName());
      assertEquals(9, periodType0.size());
      assertNotNull(periodType0);
      
      Period period0 = new Period(instant0, instant0, periodType0);
      assertArrayEquals(new int[] {0, (-1124), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, durationFieldTypeArray0.length);
      assertEquals(9, intArray0.length);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals("p>nj%2&2<mn9u", periodType0.getName());
      assertEquals(9, periodType0.size());
      assertNotNull(period0);
      
      // Undeclared exception!
      try { 
        period0.plusMonths(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1124
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, islamicChronology_LeapYearPatternType0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(60L, (Chronology) islamicChronology0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(mutablePeriod0);
      
      Period period0 = mutablePeriod0.toPeriod();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(period0);
      
      PeriodType.MINUTE_INDEX = 973;
      // Undeclared exception!
      try { 
        period0.plusMinutes(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 973
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(12, 12);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+12:12", dateTimeZone0.toString());
      assertEquals("+12:12", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+12:12", dateTimeZone0.toString());
      assertEquals("+12:12", dateTimeZone0.getID());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      Period period0 = new Period(0, 982L, periodType0, ethiopicChronology0);
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+12:12", dateTimeZone0.toString());
      assertEquals("+12:12", dateTimeZone0.getID());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(period0);
      
      // Undeclared exception!
      try { 
        period0.plusMillis(12);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(gregorianChronology0);
      
      DateTime dateTime0 = new DateTime((Chronology) gregorianChronology0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      LocalDate localDate0 = dateTime0.toLocalDate();
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      Interval interval0 = localDate0.toInterval((DateTimeZone) fixedDateTimeZone0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(3, localDate0.size());
      assertEquals(1392336000000L, interval0.getStartMillis());
      assertEquals(1392422400000L, interval0.getEndMillis());
      assertNotNull(interval0);
      
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      PeriodType periodType0 = new PeriodType("ub(Y<p_cW]p.", durationFieldTypeArray0, (int[]) null);
      assertEquals(2, durationFieldTypeArray0.length);
      assertEquals(2, periodType0.size());
      assertEquals("ub(Y<p_cW]p.", periodType0.getName());
      assertNotNull(periodType0);
      
      Period period0 = interval0.toPeriod(periodType0);
      assertEquals(2, durationFieldTypeArray0.length);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(3, localDate0.size());
      assertEquals(1392336000000L, interval0.getStartMillis());
      assertEquals(1392422400000L, interval0.getEndMillis());
      assertEquals(2, periodType0.size());
      assertEquals("ub(Y<p_cW]p.", periodType0.getName());
      assertNotNull(period0);
      
      // Undeclared exception!
      try { 
        period0.plusMillis((-491));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      
      PeriodType.MILLI_INDEX = (-55);
      // Undeclared exception!
      try { 
        period0.plusMillis(544);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -55
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Days days0 = Days.ZERO;
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      Duration duration0 = days0.toStandardDuration();
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertNotNull(duration0);
      
      Years years0 = Years.MIN_VALUE;
      assertEquals(1, years0.size());
      assertEquals(Integer.MIN_VALUE, years0.getYears());
      assertNotNull(years0);
      
      PeriodType periodType0 = years0.getPeriodType();
      assertEquals(1, years0.size());
      assertEquals(Integer.MIN_VALUE, years0.getYears());
      assertEquals("Years", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      Period period0 = duration0.toPeriod(periodType0, (Chronology) ethiopicChronology0);
      assertEquals(0, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(1, years0.size());
      assertEquals(Integer.MIN_VALUE, years0.getYears());
      assertEquals("Years", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(period0);
      
      // Undeclared exception!
      try { 
        period0.plusHours(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Period period0 = Period.days((-4307));
      assertNotNull(period0);
      
      PeriodType.HOUR_INDEX = (-3108);
      // Undeclared exception!
      try { 
        period0.plusHours((-3108));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3108
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Period period0 = Period.weeks(0);
      assertNotNull(period0);
      
      Hours hours0 = Hours.MIN_VALUE;
      assertEquals(Integer.MIN_VALUE, hours0.getHours());
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      Period period1 = period0.withFields(hours0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(Integer.MIN_VALUE, hours0.getHours());
      assertEquals(1, hours0.size());
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      // Undeclared exception!
      try { 
        period1.plusHours((-264));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -264
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(gregorianChronology0);
      
      DateTime dateTime0 = new DateTime((Chronology) gregorianChronology0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      LocalDate localDate0 = dateTime0.toLocalDate();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      Interval interval0 = localDate0.toInterval((DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(3, localDate0.size());
      assertEquals(1392336000000L, interval0.getStartMillis());
      assertEquals(1392422400000L, interval0.getEndMillis());
      assertNotNull(interval0);
      
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      PeriodType periodType0 = new PeriodType("ub(Y<p_cW]p.", durationFieldTypeArray0, (int[]) null);
      assertEquals(2, durationFieldTypeArray0.length);
      assertEquals("ub(Y<p_cW]p.", periodType0.getName());
      assertEquals(2, periodType0.size());
      assertNotNull(periodType0);
      
      Period period0 = interval0.toPeriod(periodType0);
      assertEquals(2, durationFieldTypeArray0.length);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(3, localDate0.size());
      assertEquals(1392336000000L, interval0.getStartMillis());
      assertEquals(1392422400000L, interval0.getEndMillis());
      assertEquals("ub(Y<p_cW]p.", periodType0.getName());
      assertEquals(2, periodType0.size());
      assertNotNull(period0);
      
      // Undeclared exception!
      try { 
        period0.plusDays((-2597));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, islamicChronology_LeapYearPatternType0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(60L, (Chronology) islamicChronology0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(mutablePeriod0);
      
      Period period0 = mutablePeriod0.toPeriod();
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(period0);
      
      PeriodType.DAY_INDEX = 1937;
      // Undeclared exception!
      try { 
        period0.plusDays(2858);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1937
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Years years0 = Years.TWO;
      assertEquals(1, years0.size());
      assertEquals(2, years0.getYears());
      assertNotNull(years0);
      
      PeriodType periodType0 = years0.getPeriodType();
      assertEquals(1, years0.size());
      assertEquals(2, years0.getYears());
      assertEquals("Years", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      Period period0 = new Period(0L, periodType0);
      assertEquals(1, years0.size());
      assertEquals(2, years0.getYears());
      assertEquals("Years", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(period0);
      
      Period period1 = Period.hours(0);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      Period period2 = period1.withSeconds(13);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertNotNull(period2);
      
      // Undeclared exception!
      try { 
        period0.plus(period2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Period period0 = new Period(622, 622, 622, 303, 303, 999, 354, 622);
      assertNotNull(period0);
      
      Years years0 = Years.MAX_VALUE;
      assertEquals(1, years0.size());
      assertEquals(Integer.MAX_VALUE, years0.getYears());
      assertNotNull(years0);
      
      // Undeclared exception!
      try { 
        period0.plus(years0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 622 + 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null);
      assertFalse(periodFormatter0.isPrinter());
      assertFalse(periodFormatter0.isParser());
      assertNotNull(periodFormatter0);
      
      // Undeclared exception!
      try { 
        Period.parse("yJD%1w*", periodFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse("igHL)", (PeriodFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Literal", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse("Seconds");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Seconds\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Period period0 = Period.seconds((-653));
      assertNotNull(period0);
      
      int[] intArray0 = new int[5];
      PeriodType periodType0 = new PeriodType((String) null, (DurationFieldType[]) null, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertNull(periodType0.getName());
      assertNotNull(periodType0);
      
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Period period0 = Period.years(5);
      assertNotNull(period0);
      
      PeriodType periodType0 = PeriodType.hours();
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType.YEAR_INDEX = 3979;
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3979
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Period period0 = Period.ZERO;
      assertNotNull(period0);
      
      Period period1 = period0.withWeeks((-4251));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      Seconds seconds0 = Seconds.THREE;
      assertEquals(3, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
      
      PeriodType periodType0 = seconds0.getPeriodType();
      assertEquals(3, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      // Undeclared exception!
      try { 
        period1.normalizedStandard(periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -2571004800
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Period period0 = Period.months(1736);
      assertNotNull(period0);
      
      PeriodType.SECOND_INDEX = 100;
      // Undeclared exception!
      try { 
        period0.normalizedStandard();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 100
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(4, localDateTime0.size());
      assertNotNull(period0);
      
      Period period1 = period0.minusDays(86400000);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(4, localDateTime0.size());
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      // Undeclared exception!
      try { 
        period1.multipliedBy((-83));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -86400000 * -83
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      Period period0 = new Period(2551440384L, periodType0);
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(period0);
      
      // Undeclared exception!
      try { 
        period0.minusYears(1414);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      YearMonth yearMonth0 = new YearMonth(6, 5, islamicChronology0);
      assertEquals(6, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(5, yearMonth0.getMonthOfYear());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertNotNull(yearMonth0);
      
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      int[] intArray0 = new int[5];
      intArray0[0] = 5;
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      assertArrayEquals(new int[] {5, 0, 0, 0, 0}, intArray0);
      assertEquals(5, durationFieldTypeArray0.length);
      assertEquals(5, intArray0.length);
      assertEquals(5, periodType0.size());
      assertEquals("", periodType0.getName());
      assertNotNull(periodType0);
      
      Period period0 = new Period(yearMonth0, yearMonth0, periodType0);
      assertArrayEquals(new int[] {5, 0, 0, 0, 0}, intArray0);
      assertEquals(5, durationFieldTypeArray0.length);
      assertEquals(5, intArray0.length);
      assertEquals(6, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(5, yearMonth0.getMonthOfYear());
      assertEquals(5, periodType0.size());
      assertEquals("", periodType0.getName());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertNotNull(period0);
      
      // Undeclared exception!
      try { 
        period0.minusYears(1141);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      LocalTime localTime0 = LocalTime.now((DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertNotNull(period0);
      
      // Undeclared exception!
      try { 
        period0.minusWeeks(2855);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Period period0 = Period.days(8);
      assertNotNull(period0);
      
      PeriodType.WEEK_INDEX = 8;
      // Undeclared exception!
      try { 
        period0.minusWeeks(8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Period period0 = new Period(1329L);
      assertNotNull(period0);
      
      PeriodType.SECOND_INDEX = (-635);
      // Undeclared exception!
      try { 
        period0.minusSeconds(9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -635
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      DurationFieldType durationFieldType0 = DurationFieldType.MONTHS_TYPE;
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      durationFieldTypeArray0[0] = durationFieldType0;
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      assertEquals(1, durationFieldTypeArray0.length);
      assertEquals("", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      Period period0 = new Period(2989L, periodType0);
      assertEquals(1, durationFieldTypeArray0.length);
      assertEquals("", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(period0);
      
      // Undeclared exception!
      try { 
        period0.minusMonths(25734375);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      int[] intArray0 = new int[9];
      intArray0[1] = 110;
      PeriodType periodType0 = new PeriodType("gD@{ IUK72a", durationFieldTypeArray0, intArray0);
      assertArrayEquals(new int[] {0, 110, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(1, durationFieldTypeArray0.length);
      assertEquals(9, intArray0.length);
      assertEquals(1, periodType0.size());
      assertEquals("gD@{ IUK72a", periodType0.getName());
      assertNotNull(periodType0);
      
      Period period0 = new Period(0L, periodType0);
      assertArrayEquals(new int[] {0, 110, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(1, durationFieldTypeArray0.length);
      assertEquals(9, intArray0.length);
      assertEquals(1, periodType0.size());
      assertEquals("gD@{ IUK72a", periodType0.getName());
      assertNotNull(period0);
      
      // Undeclared exception!
      try { 
        period0.minusMonths(1000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 110
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(lenientChronology0);
      
      Period period0 = new Period((-3185L), (Chronology) lenientChronology0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(period0);
      
      PeriodType periodType0 = PeriodType.yearDay();
      assertEquals("YearDay", periodType0.getName());
      assertEquals(2, periodType0.size());
      assertNotNull(periodType0);
      
      Period period1 = period0.normalizedStandard(periodType0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("YearDay", periodType0.getName());
      assertEquals(2, periodType0.size());
      assertFalse(period1.equals((Object)period0));
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(period1);
      
      // Undeclared exception!
      try { 
        period1.minusMinutes(3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Period period0 = Period.ZERO;
      assertNotNull(period0);
      
      PeriodType.MINUTE_INDEX = 292269054;
      // Undeclared exception!
      try { 
        period0.minusMinutes((-947));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 292269054
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      Instant instant0 = new Instant();
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(instant0);
      
      DateTime dateTime0 = instant0.toDateTime((DateTimeZone) fixedDateTimeZone0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      Duration duration0 = new Duration(dateTime0, dateTime0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertNotNull(duration0);
      
      Years years0 = Years.MIN_VALUE;
      assertEquals(Integer.MIN_VALUE, years0.getYears());
      assertEquals(1, years0.size());
      assertNotNull(years0);
      
      PeriodType periodType0 = years0.getPeriodType();
      assertEquals(Integer.MIN_VALUE, years0.getYears());
      assertEquals(1, years0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Years", periodType0.getName());
      assertNotNull(periodType0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      Period period0 = duration0.toPeriod(periodType0, (Chronology) ethiopicChronology0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(Integer.MIN_VALUE, years0.getYears());
      assertEquals(1, years0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Years", periodType0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(period0);
      
      // Undeclared exception!
      try { 
        period0.minusMillis(2029);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, islamicChronology_LeapYearPatternType0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      Years years0 = Years.ONE;
      assertEquals(1, years0.getYears());
      assertEquals(1, years0.size());
      assertNotNull(years0);
      
      PeriodType periodType0 = years0.getPeriodType();
      assertEquals(1, years0.getYears());
      assertEquals(1, years0.size());
      assertEquals("Years", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      Period period0 = new Period((-1353L), periodType0, (Chronology) islamicChronology0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals(1, years0.getYears());
      assertEquals(1, years0.size());
      assertEquals("Years", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(period0);
      
      // Undeclared exception!
      try { 
        period0.minusHours((-23118750));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      
      PeriodType.HOUR_INDEX = (-3402);
      // Undeclared exception!
      try { 
        period0.minusHours(1338);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3402
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Instant instant0 = Instant.now();
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(instant0);
      
      PeriodType periodType0 = PeriodType.hours();
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType0.getName());
      assertNotNull(periodType0);
      
      Period period0 = new Period(instant0, instant0, periodType0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType0.getName());
      assertNotNull(period0);
      
      // Undeclared exception!
      try { 
        period0.minusDays(90);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Period period0 = Period.minutes(698);
      assertNotNull(period0);
      
      PeriodType.DAY_INDEX = 698;
      // Undeclared exception!
      try { 
        period0.minusDays(698);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 698
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Period period0 = new Period((-1362), 690562340, (-1362), (-1073741824), (-1073741824), (-1073741824), (-1362), 954);
      assertNotNull(period0);
      
      Period period1 = period0.plus(period0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      // Undeclared exception!
      try { 
        period1.minusDays(1607);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -1607
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Period period0 = new Period(4860, 4860, 2389, 4860, 419, 454, 4800, 1963, (PeriodType) null);
      assertNotNull(period0);
      
      PeriodType.MONTH_INDEX = 3241;
      // Undeclared exception!
      try { 
        period0.minus(period0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3241
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) 0, (Chronology) islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(mutablePeriod0);
      
      Period period0 = mutablePeriod0.toPeriod();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(period0);
      
      PeriodType.YEAR_INDEX = (-12);
      // Undeclared exception!
      try { 
        period0.getYears();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -12
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Period period0 = new Period(1329L);
      assertNotNull(period0);
      
      PeriodType.SECOND_INDEX = 1963;
      // Undeclared exception!
      try { 
        period0.ZERO.getSeconds();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1963
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Period period0 = new Period((-1272), (-233), (-1272), 1, (-1272), 1, (-233), (-1272));
      assertNotNull(period0);
      
      PeriodType.MONTH_INDEX = 12;
      // Undeclared exception!
      try { 
        period0.ZERO.getMonths();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      
      PeriodType.MINUTE_INDEX = 4218;
      // Undeclared exception!
      try { 
        period0.ZERO.getMinutes();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4218
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Period period0 = new Period(1630, 1630, 1630, 2323);
      assertNotNull(period0);
      
      PeriodType.MILLI_INDEX = 1630;
      // Undeclared exception!
      try { 
        period0.ZERO.getMillis();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1630
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      
      PeriodType.HOUR_INDEX = 20587500;
      // Undeclared exception!
      try { 
        period0.getHours();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 20587500
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Period period0 = Period.minutes(231);
      assertNotNull(period0);
      
      PeriodType.DAY_INDEX = 8;
      // Undeclared exception!
      try { 
        period0.getDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      MonthDay monthDay0 = MonthDay.now((Chronology) islamicChronology0);
      assertEquals(2, monthDay0.size());
      assertEquals(13, monthDay0.getDayOfMonth());
      assertEquals(4, monthDay0.getMonthOfYear());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotNull(monthDay0);
      
      MonthDay monthDay1 = new MonthDay(monthDay0, (int[]) null);
      assertEquals(2, monthDay0.size());
      assertEquals(13, monthDay0.getDayOfMonth());
      assertEquals(4, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay1.size());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertNotNull(monthDay1);
      
      // Undeclared exception!
      try { 
        Period.fieldDifference(monthDay1, monthDay0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((-17L));
      assertEquals(1969, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(12, yearMonth0.getMonthOfYear());
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertNotNull(yearMonth0);
      
      int[] intArray0 = new int[1];
      YearMonth yearMonth1 = new YearMonth(yearMonth0, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1969, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(12, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth1.size());
      assertEquals(0, yearMonth1.getYear());
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertNotNull(yearMonth1);
      
      // Undeclared exception!
      try { 
        Period.fieldDifference(yearMonth1, yearMonth0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) null, (ReadablePartial) null, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(1039L, (Chronology) julianChronology0);
      assertNotNull(mutablePeriod0);
      
      Period period0 = mutablePeriod0.toPeriod();
      assertNotNull(period0);
      
      PeriodType periodType0 = PeriodType.millis();
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      Period period1 = null;
      try {
        period1 = new Period(period0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'seconds'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      Period period0 = null;
      try {
        period0 = new Period("", buddhistChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Period period0 = null;
      try {
        period0 = new Period(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      assertEquals(2, periodType0.size());
      assertEquals("YearDay", periodType0.getName());
      assertNotNull(periodType0);
      
      Period period0 = null;
      try {
        period0 = new Period(1000000000000000000L, periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 11574074074
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Period period0 = Period.millis(3);
      assertNotNull(period0);
      
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      
      PeriodType periodType0 = weeks0.getPeriodType();
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      Period period1 = null;
      try {
        period1 = new Period(5, 5, 5, 1414, 1791, 5, 1414, 6, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'years'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Period period0 = new Period((-1000L));
      assertNotNull(period0);
      
      Years years0 = Years.ZERO;
      assertEquals(0, years0.getYears());
      assertEquals(1, years0.size());
      assertNotNull(years0);
      
      PeriodType periodType0 = years0.getPeriodType();
      assertEquals(0, years0.getYears());
      assertEquals(1, years0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Years", periodType0.getName());
      assertNotNull(periodType0);
      
      Period period1 = period0.normalizedStandard(periodType0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(0, years0.getYears());
      assertEquals(1, years0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Years", periodType0.getName());
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      // Undeclared exception!
      try { 
        period1.minusMonths(23118750);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      Period period1 = period0.multipliedBy((-83));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Period period0 = Period.hours(0);
      Period period1 = period0.plusMillis(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusMillis(544);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
      try { 
        period0.plusSeconds(292272708);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Duration duration0 = new Duration((-2316L), (-1160L));
      Period period0 = duration0.toPeriod();
      Period period1 = period0.plusMinutes(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      DurationFieldType durationFieldType0 = DurationFieldType.MONTHS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(2989L, periodType0);
      // Undeclared exception!
      try { 
        period0.plusHours(2060);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      Seconds seconds0 = Seconds.secondsBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      PeriodType periodType0 = seconds0.getPeriodType();
      Period period0 = new Period((-1319L), periodType0);
      // Undeclared exception!
      try { 
        period0.plusDays((-1));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Period period0 = Period.weeks(866);
      // Undeclared exception!
      try { 
        period0.plusWeeks(Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 866 + 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusYears(1360);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Period period0 = Period.minutes(698);
      Period period1 = period0.plusYears(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Period period0 = new Period();
      int int0 = period0.getHours();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Duration duration0 = new Duration((-2316L), (-1160L));
      Days days0 = duration0.toStandardDays();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      Period period0 = new Period(days0, (PeriodType) null, gregorianChronology0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Period period0 = new Period((-2806), 31, 2389, 1079, 31, 0, (-2806), 121);
      int int0 = period0.getWeeks();
      assertEquals(2389, int0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, islamicChronology_LeapYearPatternType0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(60L, (Chronology) islamicChronology0);
      Period period0 = mutablePeriod0.toPeriod();
      int int0 = period0.getYears();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Period period0 = new Period(1329L);
      int int0 = period0.ZERO.getSeconds();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Instant instant0 = new Instant(0L);
      Hours hours0 = Hours.MAX_VALUE;
      Duration duration0 = hours0.toStandardDuration();
      PeriodType periodType0 = PeriodType.time();
      Period period0 = new Period(instant0, duration0, periodType0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Duration duration0 = Duration.parse((String) null);
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null);
      DateTime dateTime0 = localDateTime0.toDateTime();
      PeriodType periodType0 = PeriodType.hours();
      Period period0 = new Period(duration0, dateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.withDays((-2159));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      MonthDay monthDay0 = MonthDay.now((Chronology) buddhistChronology0);
      Seconds seconds0 = Seconds.secondsBetween((ReadablePartial) monthDay0, (ReadablePartial) monthDay0);
      PeriodType periodType0 = seconds0.getPeriodType();
      Period period0 = new Period((Object) null, periodType0);
      // Undeclared exception!
      try { 
        period0.plusYears(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDay();
      Period period0 = new Period((-2698L), 168L, periodType0);
      // Undeclared exception!
      try { 
        period0.minusSeconds(7);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
      Period period0 = new Period((-1139L), (Chronology) lenientChronology0);
      int int0 = period0.getDays();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Period period0 = new Period();
      int int0 = period0.ZERO.getMinutes();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      Period period0 = new Period(localDate0, localDate0);
      int int0 = period0.getMonths();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Hours hours0 = Hours.MIN_VALUE;
      PeriodType periodType0 = hours0.getPeriodType();
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      Period period0 = new Period((-2937L), periodType0, (Chronology) julianChronology0);
      // Undeclared exception!
      try { 
        period0.plusMonths((-271));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Period period0 = new Period(1630, 1630, 1630, 2323);
      int int0 = period0.ZERO.getMillis();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Years years0 = Years.ZERO;
      PeriodType periodType0 = years0.getPeriodType();
      Period period0 = Period.months(1);
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Period period0 = Period.hours((-2736));
      Period period1 = period0.minusMonths(1099);
      period1.normalizedStandard();
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Years years0 = Years.ZERO;
      PeriodType periodType0 = years0.getPeriodType();
      Period period0 = new Period(1764, 1764, (-1000), 1942, (-22), (-22), (-1003), (-700));
      Period period1 = period0.normalizedStandard(periodType0);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Period period0 = Period.years(1);
      // Undeclared exception!
      try { 
        period0.toStandardDuration();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Duration as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Period period0 = new Period(1764, 1764, (-1000), 1942, (-22), (-22), (-1003), (-700));
      // Undeclared exception!
      try { 
        period0.toStandardMinutes();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Minutes as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, islamicChronology_LeapYearPatternType0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(60L, (Chronology) islamicChronology0);
      Period period0 = mutablePeriod0.toPeriod();
      Period period1 = period0.multipliedBy(1);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Period period0 = new Period((-1000L));
      Period period1 = period0.ZERO.multipliedBy(1285);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Period period0 = Period.hours(0);
      Period period1 = period0.minus((ReadablePeriod) null);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalTime localTime0 = LocalTime.now((DateTimeZone) fixedDateTimeZone0);
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      Months months0 = Months.TWO;
      // Undeclared exception!
      try { 
        period0.minus(months0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Period period0 = new Period((long) 698);
      Period period1 = period0.minusMillis(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Period period0 = Period.days(24);
      Period period1 = period0.plusSeconds(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Period period0 = new Period((long) 698);
      Period period1 = period0.minusMinutes(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Period period0 = Period.hours(0);
      Period period1 = period0.plusHours(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Duration duration0 = new Duration((-2316L), (-1160L));
      Days days0 = duration0.toStandardDays();
      Period period0 = days0.toPeriod();
      Period period1 = period0.plusDays(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Period period0 = Period.hours(0);
      Period period1 = period0.ZERO.plusWeeks(0);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Period period0 = Period.hours(0);
      Period period1 = period0.plusMonths(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Period period0 = new Period((-1000L));
      Period period1 = period0.minusYears(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Period period0 = Period.hours(0);
      Period period1 = period0.plus((ReadablePeriod) null);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Duration duration0 = new Duration((-2316L), (-1160L));
      Days days0 = duration0.toStandardDays();
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      Period period0 = days0.toPeriod();
      Period period1 = period0.withFieldAdded(durationFieldType0, (-393));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Period period0 = Period.hours(2);
      // Undeclared exception!
      try { 
        period0.withFieldAdded((DurationFieldType) null, (-1018));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Duration duration0 = new Duration((-2316L), (-1160L));
      Days days0 = duration0.toStandardDays();
      DurationFieldType durationFieldType0 = days0.getFieldType(0);
      Period period0 = duration0.toPeriod();
      Period period1 = period0.withFieldAdded(durationFieldType0, 0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Period period0 = Period.hours((-292269054));
      // Undeclared exception!
      try { 
        period0.withField((DurationFieldType) null, 2206);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Period period0 = new Period((-1272), (-233), (-1272), 1, (-1272), 1, (-233), (-1272));
      DurationFieldType durationFieldType0 = DurationFieldType.MONTHS_TYPE;
      Period period1 = period0.ZERO.withField(durationFieldType0, 9);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      int[] intArray0 = new int[9];
      PeriodType periodType0 = new PeriodType("gD@{ IUK72a", durationFieldTypeArray0, intArray0);
      Period period0 = new Period(0L, periodType0);
      Period period1 = period0.withPeriodType(periodType0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[6];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[1] = dateTimeFieldTypeArray0[0];
      int[] intArray0 = new int[4];
      Partial partial0 = new Partial(gJChronology0, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(partial0, partial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not have overlapping fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalTime localTime0 = LocalTime.now((DateTimeZone) fixedDateTimeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime();
      // Undeclared exception!
      try { 
        Period.fieldDifference(localTime0, localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalTime localTime0 = LocalTime.fromMillisOfDay(0L);
      LocalDate localDate0 = new LocalDate((DateTimeZone) fixedDateTimeZone0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(localDate0, localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalTime localTime0 = new LocalTime((long) 1, (DateTimeZone) fixedDateTimeZone0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(localTime0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.fieldDifference((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      int[] intArray0 = new int[3];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      Period period0 = new Period(mutableDateTime0, mutableDateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.minusMillis(1671);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Period period0 = Period.years((-677));
      Years years0 = Years.MAX_VALUE;
      // Undeclared exception!
      try { 
        period0.minus(years0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -677 + -2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Period period0 = new Period((-1272), (-233), (-1272), 1, (-1272), 1, (-233), (-1272));
      Period period1 = period0.minusSeconds((-377));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, islamicChronology_LeapYearPatternType0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(60L, (Chronology) islamicChronology0);
      Period period0 = mutablePeriod0.toPeriod();
      Period period1 = period0.minusWeeks(3108);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Period period0 = Period.minutes(231);
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(13860, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Period period0 = new Period((-1L));
      Days days0 = Days.MIN_VALUE;
      Weeks weeks0 = days0.toStandardWeeks();
      Period period1 = period0.minus(weeks0);
      // Undeclared exception!
      try { 
        period1.toStandardMinutes();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 3092376450240
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Period period0 = new Period(Integer.MAX_VALUE, Integer.MAX_VALUE, 583, 97);
      // Undeclared exception!
      try { 
        period0.minusHours((-5));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 5
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = new DateTime(0L, dateTimeZone0);
      Weeks weeks0 = Weeks.MAX_VALUE;
      Duration duration0 = weeks0.toStandardDuration();
      Seconds seconds0 = Seconds.TWO;
      PeriodType periodType0 = seconds0.getPeriodType();
      Period period0 = null;
      try {
        period0 = new Period(dateTime0, duration0, periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 1298798109705600
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gregorianChronology0, dateTimeZone0);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(zonedChronology0);
      PeriodType periodType0 = PeriodType.millis();
      Period period0 = null;
      try {
        period0 = new Period((-1474L), 1000000000000L, periodType0, lenientChronology0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 1000000001474
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalTime localTime0 = LocalTime.now((DateTimeZone) fixedDateTimeZone0);
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      Duration duration0 = period0.toStandardDuration();
      assertEquals(0L, duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      int[] intArray0 = new int[4];
      PeriodType periodType0 = new PeriodType("", (DurationFieldType[]) null, intArray0);
      Period period0 = null;
      try {
        period0 = new Period(0L, 0L, periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Duration duration0 = Duration.standardDays(86400L);
      int[] intArray0 = new int[1];
      PeriodType periodType0 = new PeriodType("", (DurationFieldType[]) null, intArray0);
      Period period0 = null;
      try {
        period0 = new Period(duration0, (ReadableInstant) null, periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      Seconds seconds0 = Seconds.secondsBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      PeriodType periodType0 = seconds0.getPeriodType();
      Object object0 = new Object();
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      Period period0 = null;
      try {
        period0 = new Period(object0, periodType0, gJChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Duration duration0 = Duration.millis((-2051L));
      Period period0 = new Period((ReadableInstant) null, duration0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Period period0 = new Period((-1942L), (-1942L));
      PeriodType.MILLI_INDEX = 13;
      // Undeclared exception!
      try { 
        period0.withMillis(1201);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Period period0 = new Period((ReadableInstant) null, (ReadableInstant) null);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Period period0 = Period.hours(0);
      Period period1 = period0.withFields((ReadablePeriod) null);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Period period0 = Period.parse("P");
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      Period period0 = new Period(21260793600000L, 21260793600000L, gregorianChronology0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Period period0 = Period.days(1395);
      Period period1 = period0.withMillis(1395);
      PeriodType.MILLI_INDEX = 359;
      // Undeclared exception!
      try { 
        period0.plus(period1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 359
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      Period period0 = new Period(localDate0, localDate0);
      Period period1 = period0.minusMonths(12);
      int int0 = period1.getMonths();
      assertEquals((-12), int0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      Seconds seconds0 = Seconds.secondsBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      PeriodType periodType0 = seconds0.getPeriodType();
      Period period0 = new Period((-1319L), periodType0);
      Hours hours0 = period0.toStandardHours();
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Period period0 = new Period(4860, 4860, 2389, 4860, 419, 454, 4800, 1963, (PeriodType) null);
      Period period1 = period0.toPeriod();
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Years years0 = Years.ZERO;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Period period0 = new Period(years0, buddhistChronology0);
      // Undeclared exception!
      try { 
        period0.plusMinutes((-3858));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      PeriodFormatter periodFormatter0 = ISOPeriodFormat.standard();
      // Undeclared exception!
      try { 
        Period.parse("qB+", periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"qB+\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.withHours((-1067));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      Seconds seconds0 = Seconds.secondsBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      PeriodType periodType0 = seconds0.getPeriodType();
      Period period0 = new Period((-1319L), periodType0);
      // Undeclared exception!
      try { 
        period0.withMinutes(3284);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
}
