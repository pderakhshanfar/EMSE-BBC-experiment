/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 08 09:51:01 GMT 2021
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.format.ISOPeriodFormat;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Period_ESTest extends Period_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Period period0 = new Period((-220), (-1509), (-220), (-220));
      Period period1 = period0.minusMonths((-2844));
      period1.normalizedStandard();
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Period period0 = new Period(10080, (-220), (-1509), (-436), (-220), 10080, (-2844), 2468, (PeriodType) null);
      Period period1 = period0.minusMonths((-2844));
      Period period2 = period1.normalizedStandard();
      // Undeclared exception!
      try { 
        period2.toStandardHours();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Hours as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Period period0 = Period.days(2289);
      Weeks weeks0 = Weeks.TWO;
      Period period1 = period0.minus(weeks0);
      Period period2 = period1.withDays(477);
      Duration duration0 = period2.toStandardDuration();
      assertEquals(40003200000L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Duration duration0 = Duration.standardHours(477);
      Period period0 = duration0.toPeriod();
      Duration duration1 = period0.toStandardDuration();
      assertEquals(1717200000L, duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      Period period0 = new Period(1221L, (Chronology) gregorianChronology0);
      Duration duration0 = period0.toStandardDuration();
      assertEquals(1221L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Period period0 = Period.hours(2600);
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(9360000, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Days days0 = Days.FIVE;
      Period period0 = days0.toPeriod();
      PeriodType.DAY_INDEX = 5;
      Period period1 = period0.plus(period0);
      Seconds seconds0 = period1.toStandardSeconds();
      assertEquals(432300, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      Period period0 = new Period(1221L, (Chronology) gregorianChronology0);
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Period period0 = Period.seconds(2289);
      Period period1 = period0.normalizedStandard();
      Hours hours0 = period1.toStandardHours();
      assertEquals(0, hours0.getHours());
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Period period0 = Period.hours(986);
      Period period1 = period0.withMinutes(986);
      Days days0 = period1.toStandardDays();
      assertEquals(41, days0.getDays());
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Days days0 = Days.SIX;
      Period period0 = days0.toPeriod();
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Period period0 = Period.minutes(677);
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      Period period1 = period0.withFieldAdded(durationFieldType0, 2805);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(localTime0, yearMonth0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      MutableDateTime mutableDateTime0 = new MutableDateTime(433L, (Chronology) gregorianChronology0);
      Duration duration0 = new Duration(mutableDateTime0, mutableDateTime0);
      Period period0 = new Period(mutableDateTime0, duration0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Duration duration0 = Duration.standardHours(0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(4);
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      Period period0 = new Period(duration0, mutableDateTime0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      Period period0 = new Period(823L, 1625L, copticChronology0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Period period0 = new Period(1193, 1022, 2596, 2727);
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(7, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Period period0 = Period.hours((-1157));
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals((-6), weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Period period0 = Period.millis((-1157));
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals((-1), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Period period0 = Period.millis((-14));
      Period period1 = period0.minusWeeks((-14));
      Minutes minutes0 = period1.toStandardMinutes();
      assertEquals(141120, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Days days0 = Days.FIVE;
      Period period0 = days0.toPeriod();
      Period period1 = period0.minusWeeks(77);
      Minutes minutes0 = period1.toStandardMinutes();
      assertEquals((-768960), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Period period0 = Period.days((-67));
      Hours hours0 = period0.toStandardHours();
      assertEquals((-1608), hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.minusDays(8);
      Duration duration0 = period1.toStandardDuration();
      assertEquals((-691200000L), duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Period period0 = new Period(0, 0, 0, 0);
      Period period1 = period0.withMinutes((-774));
      Duration duration0 = period1.toStandardDuration();
      assertEquals((-46440000L), duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Days days0 = Days.FIVE;
      Period period0 = days0.toPeriod();
      Period period1 = period0.minusWeeks(77);
      Days days1 = period1.toStandardDays();
      assertEquals((-534), days1.getDays());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      Period period0 = Period.parse("", periodFormatter0);
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Period period0 = Period.years(2289);
      int int0 = period0.getYears();
      assertEquals(2289, int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Period period0 = Period.years((-1));
      int int0 = period0.getYears();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Period period0 = Period.hours(986);
      int int0 = period0.getWeeks();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Period period0 = Period.weeks(2737);
      Period period1 = period0.withWeeks((-539));
      int int0 = period1.getWeeks();
      assertEquals((-539), int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (Chronology) copticChronology0);
      Period period0 = new Period(mutableDateTime0, mutableDateTime0);
      int int0 = period0.getSeconds();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Period period0 = Period.millis((-14));
      Period period1 = period0.minusSeconds(2170);
      int int0 = period1.getSeconds();
      assertEquals((-2170), int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Period period0 = new Period(1374, 2475, 326, 1374, 2475, 326, (-2463), 326);
      Period period1 = period0.negated();
      int int0 = period1.getMonths();
      assertEquals((-2475), int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Period period0 = Period.minutes(677);
      int int0 = period0.getMinutes();
      assertEquals(677, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Period period0 = Period.minutes((-14));
      int int0 = period0.getMinutes();
      assertEquals((-14), int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Period period0 = Period.millis(366);
      int int0 = period0.getMillis();
      assertEquals(366, int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Period period0 = Period.millis((-14));
      int int0 = period0.getMillis();
      assertEquals((-14), int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Duration duration0 = new Duration((Object) null);
      Period period0 = duration0.toPeriod();
      int int0 = period0.getHours();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (Chronology) copticChronology0);
      Period period0 = new Period(mutableDateTime0, mutableDateTime0);
      Period period1 = period0.plusHours(3131);
      int int0 = period1.getHours();
      assertEquals(3131, int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Period period0 = Period.days(0);
      int int0 = period0.getDays();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Period period0 = new Period(2610, 4, 2610, 4, 1518, 1518, (-1), (-1));
      int int0 = period0.getDays();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PeriodType periodType0 = PeriodType.seconds();
      Period period0 = new Period(1000000000000L, 1000000000000L, periodType0);
      // Undeclared exception!
      try { 
        period0.withYears(29);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Period period0 = Period.years((-1));
      Years years0 = Years.MIN_VALUE;
      PeriodType periodType0 = years0.getPeriodType();
      Period period1 = period0.ZERO.withPeriodType(periodType0);
      // Undeclared exception!
      try { 
        period1.withWeeks((-4242));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      Seconds seconds0 = Seconds.ZERO;
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[2] = durationFieldTypeArray0[1];
      durationFieldTypeArray0[3] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[4] = durationFieldTypeArray0[1];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(30L, periodType0);
      // Undeclared exception!
      try { 
        period0.withWeeks((-8));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Period period0 = Period.ZERO;
      PeriodType.WEEK_INDEX = 259;
      // Undeclared exception!
      try { 
        period0.withWeeks((-505));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 259
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      Period period0 = new Period(1221L, 1221L, periodType0);
      // Undeclared exception!
      try { 
        period0.withSeconds(1558);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-854));
      DateTime dateTime0 = new DateTime(604800000L, dateTimeZone0);
      Duration duration0 = new Duration(dateTime0, dateTime0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      int[] intArray0 = new int[0];
      PeriodType periodType0 = new PeriodType("Minutes", durationFieldTypeArray0, intArray0);
      Period period0 = duration0.toPeriodTo((ReadableInstant) dateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.withSeconds((-167));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Period period0 = Period.months((-1757));
      PeriodType periodType0 = PeriodType.yearDay();
      // Undeclared exception!
      try { 
        period0.withPeriodType(periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'months'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      // Undeclared exception!
      try { 
        period0.withMonths(887);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Period period0 = Period.hours(3);
      PeriodType.MONTH_INDEX = (-1379);
      // Undeclared exception!
      try { 
        period0.withMonths(2313);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1379
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      PeriodType periodType1 = periodType0.withMinutesRemoved();
      PeriodType periodType2 = periodType1.withMillisRemoved();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      Period period0 = new Period(112L, periodType2, (Chronology) islamicChronology0);
      // Undeclared exception!
      try { 
        period0.withMinutes((-40));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Period period0 = Period.days(127);
      PeriodType.MINUTE_INDEX = (-3038);
      // Undeclared exception!
      try { 
        period0.withMinutes((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3038
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
      try { 
        period0.withMillis(9);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MILLI_INDEX = 846;
      // Undeclared exception!
      try { 
        period0.withMillis((-229));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 846
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (Chronology) copticChronology0);
      Period period0 = new Period(mutableDateTime0, mutableDateTime0);
      PeriodType periodType0 = PeriodType.days();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.withHours((-4152));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.HOUR_INDEX = 1441;
      // Undeclared exception!
      try { 
        period0.withHours(834);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1441
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      Days days0 = Days.days(12);
      // Undeclared exception!
      try { 
        period0.withFields(days0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'days'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      PeriodType periodType0 = PeriodType.weeks();
      Period period0 = new Period(localDate0, localDate0, periodType0);
      // Undeclared exception!
      try { 
        period0.withDays(1328);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Duration duration0 = new Duration((Object) null);
      Period period0 = duration0.toPeriod();
      PeriodType.DAY_INDEX = 1117;
      // Undeclared exception!
      try { 
        period0.withDays(1607);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1117
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Period period0 = Period.hours((-1157));
      Period period1 = period0.withYears((-206));
      // Undeclared exception!
      try { 
        period1.toStandardWeeks();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Weeks as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Period period0 = new Period(0, 993, 0, (-2282));
      PeriodType.HOUR_INDEX = 1315;
      // Undeclared exception!
      try { 
        period0.toStandardWeeks();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Period period0 = Period.years((-14));
      // Undeclared exception!
      try { 
        period0.toStandardSeconds();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Seconds as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Period period0 = Period.millis((-14));
      PeriodType.MONTH_INDEX = (-14);
      // Undeclared exception!
      try { 
        period0.toStandardSeconds();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.YEAR_INDEX = 958;
      // Undeclared exception!
      try { 
        period0.toStandardMinutes();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Period period0 = new Period();
      Hours hours0 = Hours.MIN_VALUE;
      Period period1 = period0.withFields(hours0);
      // Undeclared exception!
      try { 
        period1.toStandardMinutes();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -128849018880
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Period period0 = Period.seconds(840);
      PeriodType.MONTH_INDEX = (-1977);
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(0L);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(9);
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, dateTimeZone0);
      Period period0 = duration0.toPeriodTo((ReadableInstant) mutableDateTime0);
      Period period1 = period0.minusWeeks((-292269337));
      // Undeclared exception!
      try { 
        period1.toStandardHours();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 49101248616
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Period period0 = Period.years(44);
      // Undeclared exception!
      try { 
        period0.toStandardDuration();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Duration as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Period period0 = new Period((Object) null);
      PeriodType.MILLI_INDEX = (-1298);
      // Undeclared exception!
      try { 
        period0.toStandardDuration();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.minusMonths(3064);
      // Undeclared exception!
      try { 
        period1.toStandardDays();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Days as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      Seconds seconds0 = Seconds.ZERO;
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[2] = durationFieldTypeArray0[1];
      durationFieldTypeArray0[3] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[4] = durationFieldTypeArray0[3];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(30L, periodType0);
      // Undeclared exception!
      try { 
        period0.toStandardDays();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Period period0 = Period.months((-1963));
      PeriodType.MONTH_INDEX = (-1963);
      // Undeclared exception!
      try { 
        period0.toStandardDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      Period period0 = new Period(1221L, (Chronology) gregorianChronology0);
      Days days0 = period0.toStandardDays();
      PeriodType periodType0 = days0.getPeriodType();
      Period period1 = new Period(221, 2436, periodType0);
      // Undeclared exception!
      try { 
        period1.plusYears(2000);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.YEAR_INDEX = (-3048);
      // Undeclared exception!
      try { 
        period0.plusYears(260);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3048
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Period period0 = Period.seconds((-95));
      Period period1 = period0.withYears(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        period1.plusYears((-95));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -95
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      LocalTime localTime0 = LocalTime.fromCalendarFields(calendar0);
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      // Undeclared exception!
      try { 
        period0.plusWeeks(4332);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Period period0 = Period.days((-208));
      PeriodType.WEEK_INDEX = 731;
      // Undeclared exception!
      try { 
        period0.plusWeeks(7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 731
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Period period0 = new Period((-646L));
      PeriodType.SECOND_INDEX = (-11);
      // Undeclared exception!
      try { 
        period0.plusSeconds((-11));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -11
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      // Undeclared exception!
      try { 
        period0.plusMonths((-1));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Days days0 = Days.FIVE;
      Period period0 = days0.toPeriod();
      PeriodType.MONTH_INDEX = 35;
      // Undeclared exception!
      try { 
        period0.plusMonths(665);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 35
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Period period0 = Period.months(Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        period0.plusMonths(Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Duration duration0 = new Duration(2177L, 0L);
      Days days0 = Days.ONE;
      Seconds seconds0 = days0.toStandardSeconds();
      PeriodType periodType0 = seconds0.getPeriodType();
      Period period0 = new Period((ReadableInstant) null, duration0, periodType0);
      // Undeclared exception!
      try { 
        period0.plusMinutes((-471));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Period period0 = new Period(580L);
      PeriodType.MINUTE_INDEX = 236548278;
      // Undeclared exception!
      try { 
        period0.plusMinutes(27);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 236548278
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(86400L);
      PeriodType periodType0 = PeriodType.yearMonthDay();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      Period period0 = duration0.toPeriod(periodType0, (Chronology) iSOChronology0);
      // Undeclared exception!
      try { 
        period0.plusMillis((-2455));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      Seconds seconds0 = Seconds.ZERO;
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[2] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[3] = durationFieldType0;
      durationFieldTypeArray0[4] = durationFieldType0;
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(30L, periodType0);
      // Undeclared exception!
      try { 
        period0.plusMillis(4471);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Period period0 = Period.days((-3810));
      PeriodType.MILLI_INDEX = (-3810);
      // Undeclared exception!
      try { 
        period0.ZERO.plusMillis(8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3810
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.HOUR_INDEX = (-12740625);
      // Undeclared exception!
      try { 
        period0.plusHours(1268);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -12740625
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Period period0 = new Period(4, 4, 4, 4);
      // Undeclared exception!
      try { 
        period0.plusHours(Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 4 + 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Period period0 = new Period(60000L);
      PeriodType periodType0 = PeriodType.millis();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.plusDays((-536));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Period period0 = Period.millis(0);
      PeriodType.DAY_INDEX = 65535;
      // Undeclared exception!
      try { 
        period0.plusDays((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 65535
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      Years years0 = Years.THREE;
      // Undeclared exception!
      try { 
        period0.plus(years0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Days days0 = Days.FIVE;
      Period period0 = days0.toPeriod();
      PeriodType.DAY_INDEX = (-7);
      // Undeclared exception!
      try { 
        period0.plus(period0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -7
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      Duration duration0 = seconds0.toStandardDuration();
      Period period0 = duration0.toPeriod();
      // Undeclared exception!
      try { 
        period0.plus(seconds0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -8 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(Integer.MIN_VALUE).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      // Undeclared exception!
      try { 
        Period.parse("&4@%C19%h>CUnR@eTv", periodFormatter0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse("4_", (PeriodFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PeriodFormatter periodFormatter0 = ISOPeriodFormat.standard();
      // Undeclared exception!
      try { 
        Period.parse("", periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Literal", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse("rcULaKUttC");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"rcULaKUttC\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Period period0 = new Period();
      int[] intArray0 = new int[1];
      PeriodType periodType0 = new PeriodType("3jLSe%Kv%|4Y#IF", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Period period0 = Period.years((-1));
      PeriodType periodType0 = PeriodType.millis();
      PeriodType.SECOND_INDEX = (-1);
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      Period period0 = new Period(1221L, (Chronology) gregorianChronology0);
      Period period1 = period0.plusDays(3062);
      PeriodType periodType0 = PeriodType.millis();
      // Undeclared exception!
      try { 
        period1.normalizedStandard(periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 264556801221
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      Seconds seconds0 = Seconds.ZERO;
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[2] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[3] = durationFieldTypeArray0[2];
      durationFieldTypeArray0[4] = durationFieldTypeArray0[2];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(30L, periodType0);
      // Undeclared exception!
      try { 
        period0.normalizedStandard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PeriodType periodType0 = PeriodType.seconds();
      Period period0 = new Period(1000000000000L, 1000000000000L, periodType0);
      PeriodType.MINUTE_INDEX = 1558;
      // Undeclared exception!
      try { 
        period0.normalizedStandard();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Period period0 = new Period((-4125), (-5), (-4257), Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        period0.negated();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -2147483648 * -1
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Period period0 = Period.seconds(12740625);
      // Undeclared exception!
      try { 
        period0.multipliedBy((-3752));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: 12740625 * -3752
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-425));
      MonthDay monthDay0 = MonthDay.now(dateTimeZone0);
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      // Undeclared exception!
      try { 
        period0.minusYears(5);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Period period0 = Period.years(7);
      PeriodType.YEAR_INDEX = (-1932);
      // Undeclared exception!
      try { 
        period0.ZERO.minusYears(7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1932
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Period period0 = Period.seconds(Integer.MIN_VALUE);
      Period period1 = period0.withYears(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        period1.minusYears(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      PeriodType periodType0 = years0.getPeriodType();
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      Period period0 = new Period(2592000000L, periodType0, (Chronology) iSOChronology0);
      // Undeclared exception!
      try { 
        period0.minusWeeks(5);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-854));
      DateTime dateTime0 = new DateTime(604800000L, dateTimeZone0);
      Duration duration0 = new Duration(dateTime0, dateTime0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      int[] intArray0 = new int[0];
      PeriodType periodType0 = new PeriodType("Minutes", durationFieldTypeArray0, intArray0);
      Period period0 = duration0.toPeriodTo((ReadableInstant) dateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.minusWeeks((-854));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Period period0 = Period.days(0);
      PeriodType periodType0 = PeriodType.millis();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.minusSeconds((-1685));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Period period0 = Period.months(159);
      PeriodType.SECOND_INDEX = (-856);
      // Undeclared exception!
      try { 
        period0.minusSeconds(97);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -856
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      PeriodType.MONTH_INDEX = 2985;
      // Undeclared exception!
      try { 
        period0.minusMonths((-1058));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2985
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Instant instant0 = Instant.now();
      PeriodType periodType0 = PeriodType.weeks();
      Period period0 = new Period(instant0, instant0, periodType0);
      // Undeclared exception!
      try { 
        period0.minusMinutes(1742);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Period period0 = new Period();
      Duration duration0 = period0.toStandardDuration();
      PeriodType periodType0 = PeriodType.days();
      MutableDateTime mutableDateTime0 = new MutableDateTime((-2699L));
      Period period1 = new Period(duration0, mutableDateTime0, periodType0);
      // Undeclared exception!
      try { 
        period1.minusMillis((-241));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Period period0 = Period.minutes((-644));
      PeriodType.MILLI_INDEX = 296;
      // Undeclared exception!
      try { 
        period0.minusMillis((-644));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 296
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
      try { 
        period0.minusHours(2000);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Period period0 = Period.weeks(1190);
      PeriodType.HOUR_INDEX = 1190;
      // Undeclared exception!
      try { 
        period0.ZERO.minusHours(1190);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1190
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Days days0 = Days.SIX;
      Period period0 = days0.toPeriod();
      PeriodType periodType0 = PeriodType.time();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.minusDays(2187);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      PeriodType.DAY_INDEX = (-7);
      Period period0 = Period.days((-1977));
      // Undeclared exception!
      try { 
        period0.minusDays((-1977));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -7
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      Instant instant0 = new Instant(1703L);
      Duration duration0 = new Duration(instant0, instant0);
      Period period0 = new Period(instant0, duration0, periodType0);
      Months months0 = Months.TWO;
      // Undeclared exception!
      try { 
        period0.minus(months0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-854));
      DateTime dateTime0 = new DateTime(604800000L, dateTimeZone0);
      Duration duration0 = new Duration(dateTime0, dateTime0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      int[] intArray0 = new int[0];
      PeriodType periodType0 = new PeriodType("Minutes", durationFieldTypeArray0, intArray0);
      Period period0 = duration0.toPeriodTo((ReadableInstant) dateTime0, periodType0);
      Instant instant0 = Instant.now();
      Weeks weeks0 = Weeks.weeksBetween((ReadableInstant) dateTime0, (ReadableInstant) instant0);
      // Undeclared exception!
      try { 
        period0.minus(weeks0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Period period0 = Period.millis(7593750);
      Minutes minutes0 = Minutes.MAX_VALUE;
      DurationFieldType durationFieldType0 = minutes0.getFieldType();
      Period period1 = period0.withField(durationFieldType0, (-7));
      // Undeclared exception!
      try { 
        period1.minus(minutes0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -7 + -2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      PeriodType periodType0 = years0.getPeriodType();
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      PeriodType.YEAR_INDEX = (-1028);
      Period period0 = new Period(2592000000L, periodType0, (Chronology) iSOChronology0);
      // Undeclared exception!
      try { 
        period0.getYears();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Period period0 = Period.minutes(4);
      PeriodType.SECOND_INDEX = 252;
      // Undeclared exception!
      try { 
        period0.ZERO.getSeconds();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Period period0 = Period.days((-947));
      PeriodType.MONTH_INDEX = (-947);
      // Undeclared exception!
      try { 
        period0.ZERO.getMonths();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Period period0 = new Period(580L);
      PeriodType.MINUTE_INDEX = 236548278;
      // Undeclared exception!
      try { 
        period0.getMinutes();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Period period0 = new Period(1098, 11, 1098, (-387));
      PeriodType.MILLI_INDEX = 3733;
      // Undeclared exception!
      try { 
        period0.ZERO.getMillis();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Period period0 = Period.years(12);
      PeriodType.DAY_INDEX = 1219;
      // Undeclared exception!
      try { 
        period0.getDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      YearMonth yearMonth0 = new YearMonth((Chronology) copticChronology0);
      YearMonth yearMonth1 = new YearMonth(yearMonth0, (int[]) null);
      // Undeclared exception!
      try { 
        Period.fieldDifference(yearMonth1, yearMonth0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(7L);
      int[] intArray0 = new int[1];
      MonthDay monthDay1 = new MonthDay(monthDay0, intArray0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(monthDay1, monthDay0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2369, (-3), 2369);
      LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      LocalDate localDate0 = new LocalDate((-2637L), (DateTimeZone) null);
      PeriodType periodType0 = PeriodType.seconds();
      Period period0 = null;
      try {
        period0 = new Period(localTime0, localDate0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
      Minutes minutes0 = Minutes.minutes(1000);
      Duration duration0 = minutes0.toStandardDuration();
      int[] intArray0 = new int[3];
      PeriodType periodType0 = new PeriodType("rU}}^shH", (DurationFieldType[]) null, intArray0);
      Period period0 = null;
      try {
        period0 = new Period(mutableDateTime0, duration0, periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Integer integer0 = new Integer(2);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      int[] intArray0 = new int[9];
      PeriodType periodType0 = new PeriodType("ReadablePartial objects must not have overlapping fields", durationFieldTypeArray0, intArray0);
      Period period0 = null;
      try {
        period0 = new Period((Object) integer0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Integer
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Period period0 = null;
      try {
        period0 = new Period("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Period period0 = new Period();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.minusDays(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      Period period1 = period0.multipliedBy(1010);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      Period period0 = new Period((-2147483648L), periodType0, (Chronology) islamicChronology0);
      // Undeclared exception!
      try { 
        period0.plusMillis((-181));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -181
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Period period0 = new Period((-646L));
      Period period1 = period0.plusSeconds((-11));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Period period0 = Period.months(2);
      Period period1 = period0.ZERO.plusMinutes(0);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Period period0 = Period.hours(986);
      Period period1 = period0.plusMinutes(1687);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Period period0 = Period.seconds(840);
      Period period1 = period0.plusHours(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusWeeks(86400000);
      // Undeclared exception!
      try { 
        period1.toStandardSeconds();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 52254720000000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusMonths(12);
      int int0 = period1.getMonths();
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Period period0 = Period.days(0);
      Period period1 = period0.plusMonths(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusYears(260);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Period period0 = Period.hours(986);
      Period period1 = period0.plusYears(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Period period0 = Period.hours((-1157));
      int int0 = period0.getHours();
      assertEquals((-1157), int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Days days0 = Days.FIVE;
      PeriodType periodType0 = PeriodType.standard();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Period period0 = new Period(days0, periodType0, buddhistChronology0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Period period0 = Period.weeks(2737);
      int int0 = period0.getWeeks();
      assertEquals(2737, int0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      PeriodType periodType0 = years0.getPeriodType();
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      Period period0 = new Period(2592000000L, periodType0, (Chronology) iSOChronology0);
      int int0 = period0.getYears();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Period period0 = new Period((long) 2289);
      int int0 = period0.getSeconds();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Period period0 = Period.days(0);
      Period period1 = new Period(period0, (PeriodType) null);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      Period period0 = new Period(2629746000L, 2629746000L, periodType0);
      // Undeclared exception!
      try { 
        period0.plusSeconds(78);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      DateTime dateTime0 = new DateTime(0L, (Chronology) null);
      Seconds seconds0 = Seconds.MIN_VALUE;
      Duration duration0 = seconds0.toStandardDuration();
      Period period0 = new Period(dateTime0, duration0, (PeriodType) null);
      int int0 = period0.getDays();
      assertEquals((-4), int0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      PeriodType periodType0 = years0.getPeriodType();
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      Period period0 = new Period(2592000000L, periodType0, (Chronology) iSOChronology0);
      int int0 = period0.ZERO.getMinutes();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Period period0 = new Period();
      int int0 = period0.getMonths();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Period period0 = new Period((Object) null, (Chronology) null);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Days days0 = Days.FIVE;
      Period period0 = days0.toPeriod();
      int int0 = period0.getMillis();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      Period period0 = new Period(localDateTime0, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Period period0 = Period.months((-1));
      PeriodType periodType0 = PeriodType.years();
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Period period0 = Period.years((-1));
      PeriodType periodType0 = PeriodType.years();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.plusHours((-1));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Period period0 = Period.months((-1757));
      // Undeclared exception!
      try { 
        period0.toStandardMinutes();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Minutes as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      Period period0 = new Period(1221L, (Chronology) gregorianChronology0);
      Period period1 = period0.multipliedBy(1);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Period period0 = Period.minutes(4);
      Period period1 = period0.ZERO.multipliedBy((-2797));
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Period period0 = Period.days((-14));
      Period period1 = period0.minus((ReadablePeriod) null);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      Period period0 = new Period(1221L, (Chronology) gregorianChronology0);
      Period period1 = period0.plusMillis(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Period period0 = Period.millis((-14));
      Period period1 = period0.plusSeconds(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Period period0 = Period.millis((-14));
      Period period1 = period0.minusMinutes(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Period period0 = Period.hours(12);
      Period period1 = period0.minusHours(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Period period0 = Period.months((-1963));
      Period period1 = period0.plusWeeks(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Period period0 = Period.millis((-14));
      Period period1 = period0.minusYears(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Period period0 = Period.millis((-1));
      Period period1 = period0.plus((ReadablePeriod) null);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Period period0 = Period.hours(986);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      Period period1 = period0.withFieldAdded(durationFieldType0, 0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Period period0 = Period.days(1172);
      // Undeclared exception!
      try { 
        period0.withFieldAdded((DurationFieldType) null, (-1319));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      Period period0 = days0.toPeriod();
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      Period period1 = period0.withFieldAdded(durationFieldType0, (-1));
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Duration duration0 = new Duration(0L, 604800L);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(117);
      DateTime dateTime0 = DateTime.now(dateTimeZone0);
      Period period0 = duration0.toPeriodTo((ReadableInstant) dateTime0);
      // Undeclared exception!
      try { 
        period0.withField((DurationFieldType) null, 1067);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Period period0 = new Period(2280, 2280, 279, 981, 3, 3679, 2132, 981);
      Period period1 = period0.withFields((ReadablePeriod) null);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Days days0 = Days.FIVE;
      Period period0 = days0.toPeriod();
      PeriodType periodType0 = PeriodType.standard();
      Period period1 = period0.withPeriodType(periodType0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, islamicChronology_LeapYearPatternType0);
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[7];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      int[] intArray0 = new int[5];
      Partial partial0 = new Partial(islamicChronology0, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(partial0, partial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not have overlapping fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      MonthDay monthDay0 = MonthDay.now((Chronology) iSOChronology0);
      LocalDate localDate0 = monthDay0.toLocalDate((-1298));
      LocalTime localTime0 = new LocalTime((long) 2, (Chronology) iSOChronology0);
      LocalDateTime localDateTime0 = localDate0.toLocalDateTime(localTime0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(localDateTime0, localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(yearMonth0, localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      // Undeclared exception!
      try { 
        Period.fieldDifference(localDateTime0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 3, 3, 3, (-3053));
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      // Undeclared exception!
      try { 
        Period.fieldDifference((ReadablePartial) null, localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Period period0 = new Period();
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Period period0 = null;
      try {
        period0 = new Period((-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -2562047788015
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Duration duration0 = new Duration(1L);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("Xx", durationFieldTypeArray0, (int[]) null);
      Period period0 = duration0.toPeriodFrom((ReadableInstant) null, periodType0);
      // Undeclared exception!
      try { 
        period0.toStandardDuration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Period period0 = new Period(2617L, 5, (PeriodType) null, (Chronology) null);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      Period period0 = null;
      try {
        period0 = new Period((-2147483648L), 1, periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 2147483649
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-854));
      DateTime dateTime0 = new DateTime(604800000L, dateTimeZone0);
      Duration duration0 = new Duration(dateTime0, dateTime0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      int[] intArray0 = new int[0];
      PeriodType periodType0 = new PeriodType("Minutes", durationFieldTypeArray0, intArray0);
      Period period0 = duration0.toPeriodTo((ReadableInstant) dateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.getWeeks();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      Period period0 = new Period(1221L, (Chronology) gregorianChronology0);
      Period period1 = period0.plusDays(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
      Period period0 = null;
      try {
        period0 = new Period(periodType0, periodType0, lenientChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: org.joda.time.PeriodType
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Period period0 = new Period(1098, 11, 1098, (-387));
      Period period1 = period0.withMonths(11);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("2", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(localTime0, localTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.plusMonths((-481));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Period period0 = new Period(283L, 0L);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds((-2264L));
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[7];
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[2] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[3] = durationFieldType0;
      durationFieldTypeArray0[4] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[5] = durationFieldTypeArray0[2];
      durationFieldTypeArray0[6] = durationFieldType0;
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Period period0 = duration0.toPeriod(periodType0, (Chronology) buddhistChronology0);
      // Undeclared exception!
      try { 
        period0.minusMinutes((-2681));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Period period0 = Period.seconds((-1932));
      PeriodType.YEAR_INDEX = (-1932);
      // Undeclared exception!
      try { 
        period0.withYears((-1932));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1932
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Days days0 = Days.FIVE;
      Period period0 = days0.toPeriod();
      Hours hours0 = period0.toStandardHours();
      assertEquals(120, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Duration duration0 = Duration.standardHours(10080L);
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      LocalDate localDate0 = new LocalDate((Chronology) copticChronology0);
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      Period period0 = duration0.toPeriodTo((ReadableInstant) dateTime0);
      int[] intArray0 = new int[7];
      PeriodType periodType0 = new PeriodType("must be in the range [", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        period0.withPeriodType(periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Period period0 = Period.parse("P159MT856S");
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Period period0 = Period.millis((byte)7);
      PeriodType.MINUTE_INDEX = (-2507);
      // Undeclared exception!
      try { 
        period0.minusMinutes((byte)7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2507
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Period period0 = Period.days(5);
      Period period1 = period0.toPeriod();
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Period period0 = Period.weeks(Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        period0.toStandardDays();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 15032385529
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Period period0 = Period.months((-1963));
      Period period1 = period0.withMillis(1319);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      // Undeclared exception!
      try { 
        period0.minusMonths((-1058));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      Duration duration0 = days0.toStandardDuration();
      PeriodType periodType0 = PeriodType.standard();
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      Period period0 = duration0.toPeriod(periodType0, (Chronology) iSOChronology0);
      Period period1 = period0.minus(days0);
      // Undeclared exception!
      try { 
        period1.plusDays((-2775));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483646 + -2775
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      Period period0 = null;
      try {
        period0 = new Period((-1), (-1157), 0, (-1157), 785, 785, 785, 2154, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'years'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      Period period0 = null;
      try {
        period0 = new Period("Duration", iSOChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Duration\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      MonthDay monthDay0 = MonthDay.now((Chronology) iSOChronology0);
      LocalTime localTime0 = new LocalTime((Object) null, dateTimeZone0);
      Period period0 = null;
      try {
        period0 = new Period(monthDay0, localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null);
      // Undeclared exception!
      try { 
        Period.parse("", periodFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Period period0 = new Period();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[7];
      PeriodType periodType0 = new PeriodType("J,2ecB@5V:1yMe>", durationFieldTypeArray0, (int[]) null);
      Period period1 = period0.withPeriodType(periodType0);
      // Undeclared exception!
      try { 
        period1.withMonths((-2575));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Period period0 = Period.minutes(4);
      Period period1 = period0.withSeconds(4);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      Period period1 = period0.withHours(639);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Period period0 = Period.months((-1963));
      Period period1 = period0.minusMillis((-1963));
      assertNotSame(period1, period0);
  }
}
