/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 13:39:32 GMT 2020
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.format.ISOPeriodFormat;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Period_ESTest extends Period_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Instant instant0 = new Instant();
      Duration duration0 = new Duration((-1553L), 1440L);
      Period period0 = new Period(instant0, duration0);
      Period period1 = period0.minusMinutes((-3031));
      PeriodType periodType0 = PeriodType.yearMonthDay();
      period1.normalizedStandard(periodType0);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Period period0 = Period.years(158);
      // Undeclared exception!
      try { 
        period0.toStandardDuration();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Duration as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Period period0 = Period.weeks(2260);
      Duration duration0 = period0.toStandardDuration();
      assertEquals(1366848000000L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Period period0 = Period.seconds(2020);
      Duration duration0 = period0.toStandardDuration();
      assertEquals(2020L, duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Days days0 = Days.FIVE;
      Period period0 = days0.toPeriod();
      Period period1 = period0.withWeeks(3);
      Seconds seconds0 = period1.toStandardSeconds();
      assertEquals(2246400, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Period period0 = Period.hours(2640);
      Period period1 = period0.withDays(2640);
      Seconds seconds0 = period1.toStandardSeconds();
      assertEquals(237600000, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Period period0 = new Period(6298L);
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(6, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Period period0 = Period.weeks(2020);
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(20361600, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Period period0 = Period.hours((-3840));
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals((-230400), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Duration duration0 = Duration.millis(923L);
      Duration duration1 = duration0.withDurationAdded((-661L), 400);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-862));
      LocalDate localDate0 = new LocalDate((Object) null, dateTimeZone0);
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      Period period0 = new Period(duration1, dateTime0);
      Hours hours0 = period0.toStandardHours();
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Period period0 = new Period(100000000000000L);
      Days days0 = period0.toStandardDays();
      assertEquals(1157407, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Period period0 = Period.days(925);
      Period period1 = period0.ZERO.plusMinutes(2292);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      LocalDate localDate0 = new LocalDate();
      // Undeclared exception!
      try { 
        Period.fieldDifference(localTime0, localDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Period period0 = new Period(dateTime0, (ReadableDuration) null, (PeriodType) null);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Period period0 = new Period(0L, (Chronology) buddhistChronology0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Period period0 = Period.millis((-32));
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3);
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      MutablePeriod mutablePeriod0 = new MutablePeriod((-4294967296L), (PeriodType) null, (Chronology) islamicChronology0);
      Period period0 = mutablePeriod0.toPeriod();
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals((-7), weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Period period0 = new Period(0L);
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Period period0 = Period.hours((-3840));
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals((-13824000), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Period period0 = Period.seconds(2020);
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(33, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Period period0 = Period.seconds(2020);
      Period period1 = period0.negated();
      Minutes minutes0 = period1.toStandardMinutes();
      assertEquals((-33), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Duration duration0 = Duration.standardDays(343L);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      Period period0 = duration0.toPeriod((Chronology) julianChronology0);
      Hours hours0 = period0.toStandardHours();
      assertEquals(8232, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Period period0 = new Period(1392, 1392, 1392, (-921), 420, 3600000, 1000, 1);
      Period period1 = period0.ZERO.minusDays(3600000);
      Hours hours0 = period1.toStandardHours();
      assertEquals((-86400000), hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Period period0 = Period.hours((-133));
      Duration duration0 = period0.toStandardDuration();
      assertEquals((-478800L), duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Period period0 = new Period(1392, 1392, 1392, (-921), 420, 3600000, (-921), 1);
      Duration duration0 = period0.ZERO.toStandardDuration();
      assertEquals(0L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      Period period0 = new Period(0L, periodType0);
      Period period1 = period0.ZERO.minusSeconds(352831696);
      Days days0 = period1.toStandardDays();
      assertEquals((-4083), days0.getDays());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      Period period0 = Period.parse("", periodFormatter0);
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Period period0 = Period.parse("PT1M");
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Period period0 = Period.months(1);
      Period period1 = period0.withYears(1);
      int int0 = period1.getYears();
      assertEquals(1, int0);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Period period0 = Period.months(2317);
      Period period1 = period0.plusDays(2317);
      Period period2 = period1.normalizedStandard();
      int int0 = period2.getWeeks();
      assertEquals(331, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Period period0 = Period.weeks((-1921));
      int int0 = period0.getWeeks();
      assertEquals((-1921), int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Period period0 = Period.years(788);
      int int0 = period0.ZERO.getSeconds();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Days days0 = Days.FOUR;
      Period period0 = days0.toPeriod();
      Period period1 = period0.withMonths(6);
      int int0 = period1.getMonths();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Period period0 = Period.months((-1262));
      int int0 = period0.getMonths();
      assertEquals((-1262), int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Period period0 = Period.seconds(2020);
      Period period1 = period0.normalizedStandard((PeriodType) null);
      int int0 = period1.getMinutes();
      assertEquals(33, int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Period period0 = Period.seconds(2020);
      Period period1 = period0.negated();
      Period period2 = period1.normalizedStandard((PeriodType) null);
      int int0 = period2.getMinutes();
      assertEquals((-33), int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Period period0 = Period.millis(2020);
      int int0 = period0.getMillis();
      assertEquals(2020, int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Period period0 = Period.millis(2533);
      Period period1 = period0.withHours(67);
      int int0 = period1.getHours();
      assertEquals(67, int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Period period0 = Period.weeks((-2982));
      Period period1 = period0.minusSeconds((-2982));
      Period period2 = period1.normalizedStandard();
      int int0 = period2.getHours();
      assertEquals((-23), int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Period period0 = Period.months(1);
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      Period period1 = period0.withFieldAdded(durationFieldType0, 1);
      int int0 = period1.getDays();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Period period0 = Period.millis(2124);
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      Period period1 = period0.withFieldAdded(durationFieldType0, (-490));
      int int0 = period1.getDays();
      assertEquals((-490), int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      durationFieldTypeArray0[0] = durationFieldType0;
      PeriodType periodType0 = new PeriodType("months", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(2551440384L, periodType0);
      // Undeclared exception!
      try { 
        period0.withYears(3482);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.YEAR_INDEX = (-3731);
      // Undeclared exception!
      try { 
        period0.withYears((-2719));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3731
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      Period period0 = new Period(0L, periodType0);
      // Undeclared exception!
      try { 
        period0.withWeeks(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Days days0 = Days.FIVE;
      Period period0 = days0.toPeriod();
      PeriodType.WEEK_INDEX = 3487;
      // Undeclared exception!
      try { 
        period0.withWeeks((-517));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3487
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      PeriodType periodType0 = PeriodType.weeks();
      Period period0 = new Period(mutableDateTime0, mutableDateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.withSeconds((-1012));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Period period0 = Period.days(9);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      durationFieldTypeArray0[0] = durationFieldType0;
      int[] intArray0 = new int[2];
      PeriodType periodType0 = new PeriodType("Hours", durationFieldTypeArray0, intArray0);
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.withSeconds((-5801));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Period period0 = new Period(1079L, 1079L);
      int[] intArray0 = new int[1];
      PeriodType periodType0 = new PeriodType("ReadableInstant objects must not be null", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        period0.withPeriodType(periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Period period0 = Period.years((-3840));
      PeriodType periodType0 = PeriodType.days();
      // Undeclared exception!
      try { 
        period0.withPeriodType(periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'years'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      Duration duration0 = days0.toStandardDuration();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      StrictChronology strictChronology0 = StrictChronology.getInstance(iSOChronology0);
      DateTime dateTime0 = new DateTime((Chronology) strictChronology0);
      PeriodType periodType0 = PeriodType.seconds();
      PeriodType periodType1 = periodType0.withSecondsRemoved();
      Period period0 = new Period(duration0, dateTime0, periodType1);
      // Undeclared exception!
      try { 
        period0.withMonths(4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Period period0 = new Period(0L, 0L);
      PeriodType.MONTH_INDEX = (-1);
      // Undeclared exception!
      try { 
        period0.withMonths(2000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      // Undeclared exception!
      try { 
        period0.withMinutes(6);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MINUTE_INDEX = 2161;
      // Undeclared exception!
      try { 
        period0.withMinutes((-6));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2161
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PeriodType periodType0 = PeriodType.seconds();
      Period period0 = new Period(0L, periodType0);
      // Undeclared exception!
      try { 
        period0.withMillis(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MILLI_INDEX = 3740;
      // Undeclared exception!
      try { 
        period0.withMillis((-2203));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3740
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      Instant instant0 = Instant.parse("", dateTimeFormatter0);
      Duration duration0 = new Duration(instant0, instant0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[9];
      int[] intArray0 = new int[9];
      intArray0[4] = (-2783);
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period0.withHours(6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2783
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      Weeks weeks0 = Weeks.ONE;
      // Undeclared exception!
      try { 
        period0.withFields(weeks0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'weeks'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      PeriodType periodType0 = PeriodType.weeks();
      Period period0 = new Period(mutableDateTime0, mutableDateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.withDays((-96));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Days days0 = Days.days((-3840));
      Period period0 = days0.toPeriod();
      Period period1 = period0.plusMonths(5);
      // Undeclared exception!
      try { 
        period1.toStandardWeeks();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Weeks as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Period period0 = Period.millis(2124);
      PeriodType.DAY_INDEX = 2124;
      // Undeclared exception!
      try { 
        period0.toStandardWeeks();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Days days0 = Days.SIX;
      Period period0 = days0.toPeriod();
      PeriodType.MINUTE_INDEX = 330;
      // Undeclared exception!
      try { 
        period0.toStandardSeconds();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Period period0 = new Period(31083597720000L);
      // Undeclared exception!
      try { 
        period0.toStandardSeconds();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 31083597720
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MILLI_INDEX = 168;
      // Undeclared exception!
      try { 
        period0.toStandardMinutes();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.minusDays(86400000);
      // Undeclared exception!
      try { 
        period1.toStandardMinutes();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -124416000000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Period period0 = Period.months(1);
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Hours as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Days days0 = Days.SIX;
      Period period0 = days0.toPeriod();
      PeriodType.MONTH_INDEX = (-1581);
      // Undeclared exception!
      try { 
        period0.toStandardDuration();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Period period0 = Period.months((-3413));
      // Undeclared exception!
      try { 
        period0.toStandardDays();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Days as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Period period0 = new Period(669L, (PeriodType) null);
      PeriodType.SECOND_INDEX = 9;
      // Undeclared exception!
      try { 
        period0.toStandardDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Period period0 = Period.months((-3522));
      PeriodType.YEAR_INDEX = 2991;
      // Undeclared exception!
      try { 
        period0.plusYears((-1154));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2991
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Duration duration0 = Duration.standardHours(1535L);
      Hours hours0 = Hours.FOUR;
      PeriodType periodType0 = hours0.getPeriodType();
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period0.plusWeeks(31);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Period period0 = Period.days(616);
      PeriodType.WEEK_INDEX = 616;
      // Undeclared exception!
      try { 
        period0.plusWeeks((-1621));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 616
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      Period period0 = new Period((long) (-3840), periodType0);
      // Undeclared exception!
      try { 
        period0.plusSeconds(352831696);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Days days0 = Days.FIVE;
      Period period0 = days0.toPeriod();
      PeriodType.SECOND_INDEX = 467;
      // Undeclared exception!
      try { 
        period0.plusSeconds(60);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 467
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Duration duration0 = Duration.standardHours(1535L);
      Hours hours0 = Hours.FOUR;
      PeriodType periodType0 = hours0.getPeriodType();
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period0.plusMonths(31);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      PeriodType.MONTH_INDEX = (-3331);
      Period period0 = new Period(3600000L, periodType0, (Chronology) buddhistChronology0);
      // Undeclared exception!
      try { 
        period0.plusMonths(26);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3331
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      PeriodType.MINUTE_INDEX = 60;
      // Undeclared exception!
      try { 
        period0.plusMinutes((-1516));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 60
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Duration duration0 = Duration.standardHours(1535L);
      Hours hours0 = Hours.FOUR;
      PeriodType periodType0 = hours0.getPeriodType();
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period0.plusMillis(31);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MILLI_INDEX = (-806);
      // Undeclared exception!
      try { 
        period0.plusMillis(1968);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -806
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      // Undeclared exception!
      try { 
        period0.plusHours((-2858));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Period period0 = Period.minutes(1);
      PeriodType.HOUR_INDEX = (-897);
      // Undeclared exception!
      try { 
        period0.plusHours((-897));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -897
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      Months months0 = Months.TWELVE;
      // Undeclared exception!
      try { 
        period0.plus(months0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Period period0 = Period.months((-1983));
      PeriodType.MONTH_INDEX = (-330);
      // Undeclared exception!
      try { 
        period0.plus(period0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -330
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse("/l5.4dmbGgI~", (PeriodFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PeriodFormatter periodFormatter0 = ISOPeriodFormat.standard();
      // Undeclared exception!
      try { 
        Period.parse("{\"oK`H`~dEch", periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"{\"oK`H`~dEch\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse("org.joda.time.chrono.BuddhistChronology");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org.joda.time.chrono.BuddhistChr...\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Period period0 = Period.years(481);
      PeriodType periodType0 = PeriodType.days();
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Period period0 = new Period();
      int[] intArray0 = new int[4];
      PeriodType periodType0 = new PeriodType("x\"eQ#=@=SIH?8B", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Days days0 = Days.FIVE;
      Period period0 = days0.toPeriod();
      PeriodType.HOUR_INDEX = 157;
      PeriodType periodType0 = PeriodType.time();
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Period period0 = Period.hours((-1980));
      PeriodType periodType0 = PeriodType.millis();
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -7128000000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Period period0 = Period.hours(3);
      PeriodType.WEEK_INDEX = 67;
      // Undeclared exception!
      try { 
        period0.normalizedStandard();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      Period period0 = days0.toPeriod();
      // Undeclared exception!
      try { 
        period0.negated();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -2147483648 * -1
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Period period0 = new Period();
      Years years0 = Years.MIN_VALUE;
      Period period1 = period0.plus(years0);
      // Undeclared exception!
      try { 
        period1.multipliedBy(6);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -2147483648 * 6
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Period period0 = Period.millis((-1968));
      PeriodType periodType0 = PeriodType.days();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.minusYears((-674));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      DurationFieldType durationFieldType0 = DurationFieldType.HALFDAYS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[3] = durationFieldTypeArray0[0];
      int[] intArray0 = new int[9];
      intArray0[0] = 512;
      PeriodType periodType0 = new PeriodType("org.joda.time.format.DateTimeFormat", durationFieldTypeArray0, intArray0);
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      Period period0 = new Period(544L, periodType0, (Chronology) julianChronology0);
      // Undeclared exception!
      try { 
        period0.minusYears(6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 512
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Period period0 = Period.hours(51);
      PeriodType.WEEK_INDEX = 51;
      // Undeclared exception!
      try { 
        period0.minusWeeks(754);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 51
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      Period period0 = new Period((long) 1, periodType0);
      // Undeclared exception!
      try { 
        period0.minusSeconds((-870));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Period period0 = Period.hours(99);
      PeriodType.SECOND_INDEX = 116;
      // Undeclared exception!
      try { 
        period0.minusSeconds(99);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 116
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PeriodType periodType0 = PeriodType.time();
      Period period0 = new Period(0L, periodType0);
      // Undeclared exception!
      try { 
        period0.minusMonths(1089);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[9];
      Hours hours0 = Hours.hours((-2231));
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[2] = durationFieldTypeArray0[1];
      durationFieldTypeArray0[3] = durationFieldType0;
      durationFieldTypeArray0[4] = durationFieldType0;
      durationFieldTypeArray0[5] = durationFieldTypeArray0[3];
      durationFieldTypeArray0[6] = durationFieldType0;
      durationFieldTypeArray0[7] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[8] = durationFieldTypeArray0[1];
      PeriodType periodType0 = new PeriodType("G|08m},+zt0pyumK\";", durationFieldTypeArray0, (int[]) null);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      Period period0 = new Period((long) 9, periodType0, (Chronology) ethiopicChronology0);
      // Undeclared exception!
      try { 
        period0.minusMonths(9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Period period0 = new Period();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      int[] intArray0 = new int[2];
      intArray0[1] = 775;
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      Period period1 = period0.withPeriodType(periodType0);
      // Undeclared exception!
      try { 
        period1.minusMonths(775);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 775
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      Period period0 = new Period(0L, periodType0);
      // Undeclared exception!
      try { 
        period0.minusMinutes(292278993);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MINUTE_INDEX = 3177;
      // Undeclared exception!
      try { 
        period0.minusMinutes(1373);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3177
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      Period period0 = new Period((Object) null, periodType0);
      // Undeclared exception!
      try { 
        period0.minusMillis((-4016));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Duration duration0 = Duration.parse((String) null);
      Minutes minutes0 = Minutes.MAX_VALUE;
      PeriodType periodType0 = minutes0.getPeriodType();
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period0.minusDays((-1672));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Period period0 = new Period(0L);
      PeriodType.DAY_INDEX = (-346);
      // Undeclared exception!
      try { 
        period0.minusDays(3353);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -346
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Period period0 = Period.months(1);
      PeriodType periodType0 = PeriodType.dayTime();
      Period period1 = new Period((-4404L), (-4404L), periodType0);
      // Undeclared exception!
      try { 
        period1.minus(period0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Period period0 = Period.months((-1983));
      PeriodType.MONTH_INDEX = (-330);
      // Undeclared exception!
      try { 
        period0.minus(period0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -330
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      Period period0 = days0.toPeriod();
      // Undeclared exception!
      try { 
        period0.minus(days0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Period period0 = Period.months(645);
      PeriodType.WEEK_INDEX = (-745);
      // Undeclared exception!
      try { 
        period0.ZERO.getWeeks();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Period period0 = Period.months(1);
      PeriodType.SECOND_INDEX = (-171);
      // Undeclared exception!
      try { 
        period0.getSeconds();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Days days0 = Days.FIVE;
      Period period0 = days0.toPeriod();
      PeriodType.MONTH_INDEX = 30;
      // Undeclared exception!
      try { 
        period0.getMonths();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Period period0 = Period.ZERO;
      PeriodType.MILLI_INDEX = (-292269337);
      // Undeclared exception!
      try { 
        period0.ZERO.getMillis();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Period period0 = Period.minutes(1);
      PeriodType.HOUR_INDEX = (-920);
      // Undeclared exception!
      try { 
        period0.ZERO.getHours();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
      int[] intArray0 = new int[3];
      Partial partial0 = new Partial((Chronology) null, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(partial0, partial0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      Partial partial0 = new Partial(dateTimeFieldType0, 4151);
      int[] intArray0 = new int[0];
      Partial partial1 = new Partial(partial0, intArray0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(partial1, partial1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      Period period0 = null;
      try {
        period0 = new Period("", periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      Period period0 = null;
      try {
        period0 = new Period(iSOChronology0, iSOChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: org.joda.time.chrono.ISOChronology
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Object object0 = new Object();
      Period period0 = null;
      try {
        period0 = new Period(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      PeriodType periodType0 = PeriodType.seconds();
      Period period0 = null;
      try {
        period0 = new Period((-896), (-896), (-896), 1, (-896), (-896), 1, (-896), periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'years'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.multipliedBy(6);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Period period0 = Period.millis(2124);
      Period period1 = period0.plusMillis(12);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Period period0 = Period.weeks((-2982));
      Period period1 = period0.plusSeconds(12);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusHours(6);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      // Undeclared exception!
      try { 
        period0.plusDays(58);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusWeeks(1);
      Days days0 = period1.toStandardDays();
      assertEquals(7, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      // Undeclared exception!
      try { 
        period0.plusYears(2982);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Period period0 = Period.millis(2533);
      int int0 = period0.getHours();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Hours hours0 = Hours.MAX_VALUE;
      PeriodType periodType0 = hours0.getPeriodType();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, islamicChronology_LeapYearPatternType0);
      Period period0 = new Period((Object) null, periodType0, islamicChronology0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Period period0 = Period.months(2317);
      int int0 = period0.getWeeks();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      int int0 = period0.getYears();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Period period0 = Period.seconds((-1381));
      int int0 = period0.getSeconds();
      assertEquals((-1381), int0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      int[] intArray0 = new int[9];
      PeriodType periodType0 = new PeriodType("org.joda.time.tz.UTCProvider", durationFieldTypeArray0, intArray0);
      Period period0 = new Period((Object) null, periodType0);
      // Undeclared exception!
      try { 
        period0.withDays((-292269054));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Period period0 = Period.hours(2124);
      int int0 = period0.getDays();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Period period0 = Period.seconds(2020);
      int int0 = period0.getMinutes();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Period period0 = Period.ZERO;
      int int0 = period0.ZERO.getMillis();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      Period period0 = new Period(localTime0, localTime0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Period period0 = Period.months(1);
      PeriodType periodType0 = PeriodType.yearMonthDay();
      Period period1 = period0.normalizedStandard(periodType0);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Period period0 = new Period();
      PeriodType periodType0 = PeriodType.seconds();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.withHours((-1332));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      LocalDate localDate1 = localDate0.withWeekyear(1000);
      Period period0 = Period.fieldDifference(localDate0, localDate1);
      // Undeclared exception!
      try { 
        period0.toStandardSeconds();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Seconds as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Period period0 = Period.months(1);
      // Undeclared exception!
      try { 
        period0.toStandardMinutes();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Minutes as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Period period0 = Period.months(1);
      Period period1 = period0.multipliedBy(1);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Period period0 = new Period(1392, 1392, 1392, (-921), 420, 3600000, (-921), 1);
      Period period1 = period0.ZERO.multipliedBy(1392);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Days days0 = Days.FIVE;
      Period period0 = days0.toPeriod();
      Period period1 = period0.minus(period0);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Days days0 = Days.ZERO;
      Period period0 = days0.toPeriod();
      Period period1 = period0.plusMillis(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      Period period0 = new Period(0L, periodType0);
      Period period1 = period0.plusSeconds(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Days days0 = Days.FIVE;
      Period period0 = days0.toPeriod();
      Period period1 = period0.plusMinutes(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Period period0 = Period.hours(7);
      Period period1 = period0.plusHours(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Period period0 = Period.years(788);
      Period period1 = period0.plusDays(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Days days0 = Days.FIVE;
      Period period0 = days0.toPeriod();
      Period period1 = period0.plusWeeks(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Period period0 = Period.months(0);
      Period period1 = period0.plusMonths(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Period period0 = Period.months(0);
      Period period1 = period0.plusYears(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Period period0 = new Period(1022, 1022, 291, 291, 291, 0, (-2196), 1022);
      Period period1 = period0.plus((ReadablePeriod) null);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Period period0 = Period.ZERO;
      DurationFieldType durationFieldType0 = DurationFieldType.YEARS_TYPE;
      Period period1 = period0.withFieldAdded(durationFieldType0, 0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Period period0 = Period.minutes(1);
      // Undeclared exception!
      try { 
        period0.withFieldAdded((DurationFieldType) null, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Days days0 = Days.FIVE;
      Period period0 = days0.toPeriod();
      // Undeclared exception!
      try { 
        period0.withField((DurationFieldType) null, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Period period0 = Period.weeks(2260);
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      Period period1 = period0.withField(durationFieldType0, 769);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.withFields((ReadablePeriod) null);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Period period0 = new Period(0L, periodType0, (Chronology) buddhistChronology0);
      Period period1 = period0.withPeriodType(periodType0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      LocalDateTime localDateTime0 = new LocalDateTime();
      // Undeclared exception!
      try { 
        Period.fieldDifference(localTime0, localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(63072000000L, (Chronology) null);
      MockDate mockDate0 = new MockDate(1264, 0, 5, 0, 0, 1264);
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(monthDay0, localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      // Undeclared exception!
      try { 
        Period.fieldDifference(localTime0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      // Undeclared exception!
      try { 
        period0.minusHours(20);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
      int[] intArray0 = new int[5];
      Partial partial0 = new Partial(buddhistChronology0, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        Period.fieldDifference((ReadablePartial) null, partial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      PeriodType periodType0 = PeriodType.weeks();
      Period period0 = new Period(mutableDateTime0, mutableDateTime0, periodType0);
      Period period1 = period0.minus((ReadablePeriod) null);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Period period0 = Period.years((-2036));
      int int0 = period0.getYears();
      assertEquals((-2036), int0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Period period0 = Period.hours(51);
      Period period1 = period0.minusWeeks(754);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Period period0 = new Period(1, 1, 1, 1);
      int int0 = period0.getSeconds();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Days days0 = Days.FIVE;
      Period period0 = days0.toPeriod();
      Duration duration0 = period0.toDurationTo((ReadableInstant) null);
      Seconds seconds0 = duration0.toStandardSeconds();
      PeriodType periodType0 = seconds0.getPeriodType();
      Period period1 = duration0.toPeriodFrom((ReadableInstant) null, periodType0);
      // Undeclared exception!
      try { 
        period1.withYears(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Period period0 = new Period((-2944L), 17L, periodType0, buddhistChronology0);
      // Undeclared exception!
      try { 
        period0.plusMinutes((-587));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Days days0 = Days.SIX;
      Period period0 = days0.toPeriod();
      Duration duration0 = period0.toStandardDuration();
      assertEquals(518400000L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Period period0 = new Period(4377L, 4377L, (PeriodType) null);
      PeriodType.WEEK_INDEX = (-829);
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      Duration duration0 = new Duration(dateTime0, dateTime0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[8];
      int[] intArray0 = new int[3];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, intArray0);
      Period period0 = new Period(duration0, dateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.minusMillis(85);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Period period0 = new Period();
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      Period period0 = Period.hours(2640);
      Seconds seconds0 = period0.toStandardSeconds();
      PeriodType periodType0 = seconds0.getPeriodType();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      Period period1 = null;
      try {
        period1 = new Period(localTime0, periodType0, gregorianChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: org.joda.time.LocalTime
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Instant instant0 = new Instant();
      Duration duration0 = new Duration((-1553L), 1440L);
      Period period0 = new Period(instant0, duration0);
      Period period1 = period0.minusYears(3364);
      PeriodType periodType0 = PeriodType.yearMonthDay();
      period1.normalizedStandard(periodType0);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      Period period0 = new Period(localTime0, localTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.minusWeeks((-5419));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Period period0 = new Period((Object) null);
      int int0 = period0.getMonths();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((-1041L));
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3372);
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay(dateTimeZone0);
      Period period0 = new Period(dateTime0, dateTime0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Period period0 = Period.days(2023);
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(289, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      Period period0 = days0.toPeriod();
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 51539607528
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Literal", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Days days0 = Days.FIVE;
      Period period0 = days0.toPeriod();
      Period period1 = period0.minusHours(6);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Period period0 = Period.minutes((-14));
      Duration duration0 = period0.toStandardDuration();
      assertEquals((-840000L), duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Period period0 = Period.months((-1262));
      Period period1 = period0.toPeriod();
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      Period period0 = new Period(62035200000L, 0L, islamicChronology0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.withMillis((-2203));
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.minusMonths(775);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Period period0 = Period.millis(2124);
      Days days0 = period0.toStandardDays();
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Period period0 = Period.months((-1262));
      Period period1 = period0.normalizedStandard();
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Period period0 = new Period(2020, 15271875, (-1968), (-896), (-1968), (-2463), 15271875, 2405, (PeriodType) null);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Period period0 = Period.millis(1);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0, 1);
      Period period1 = new Period(period0, julianChronology0);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) null, localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null);
      // Undeclared exception!
      try { 
        Period.parse("", periodFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Period period0 = Period.days(9);
      Period period1 = period0.withSeconds((-5801));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Period period0 = Period.seconds((-2));
      Period period1 = period0.minusMillis(273);
      int int0 = period1.getMillis();
      assertEquals((-273), int0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Days days0 = Days.FIVE;
      Period period0 = days0.toPeriod();
      Period period1 = period0.withMinutes(6);
      assertNotSame(period1, period0);
  }
}
