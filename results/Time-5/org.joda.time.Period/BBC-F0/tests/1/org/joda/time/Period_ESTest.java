/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 13:31:28 GMT 2020
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.MutableDateTime;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Period_ESTest extends Period_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Period period0 = new Period(296, 296, 296, 296, 296, 296, 296, 296);
      Period period1 = period0.normalizedStandard();
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-813L));
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      Period period0 = duration0.toPeriod(periodType0, (Chronology) null);
      Duration duration1 = period0.toStandardDuration();
      assertEquals((-70243200000L), duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Period period0 = new Period(1698, 1698, 0, 317);
      Duration duration0 = period0.toStandardDuration();
      assertEquals(6214680317L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Period period0 = Period.millis((-1));
      Period period1 = period0.ZERO.minusSeconds(539);
      Duration duration0 = period1.toStandardDuration();
      assertEquals((-539000L), duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Period period0 = Period.days((-2723));
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals((-3921120), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Duration duration0 = Duration.standardHours(296);
      Duration duration1 = duration0.plus((-388L));
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      Period period0 = duration1.toPeriod((Chronology) islamicChronology0);
      Hours hours0 = period0.toStandardHours();
      assertEquals(295, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Period period0 = new Period(316, 21, 7, 0);
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(1, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Period period0 = Period.millis(296);
      Period period1 = period0.minusMonths(296);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Period period0 = Period.weeks(2500);
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      // Undeclared exception!
      try { 
        period0.withFieldAdded(durationFieldType0, (-432));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'halfdays'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(yearMonth0, localDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Duration duration0 = new Duration(3287L);
      Period period0 = new Period((ReadableInstant) null, duration0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Period period0 = new Period((-813L), (-813L), (Chronology) null);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Period period0 = Period.seconds(997);
      Period period1 = period0.withMillis(0);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Period period0 = new Period(0, 0, 0, 0, 0, 0, 0, 0);
      Period period1 = period0.ZERO.withWeeks(7);
      Weeks weeks0 = period1.toStandardWeeks();
      assertEquals(7, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Period period0 = Period.days((-720));
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals((-102), weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      Period period0 = new Period((-3251L), (-3251L), periodType0);
      Seconds seconds0 = period0.ZERO.toStandardSeconds();
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      Period period0 = new Period(15308640144L, 0L, periodType0);
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals((-15308640), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Period period0 = Period.millis(296);
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(1324L);
      Period period0 = duration0.toPeriod((PeriodType) null);
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(1324, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Period period0 = Period.millis((-1));
      Period period1 = period0.ZERO.minusSeconds(539);
      Minutes minutes0 = period1.toStandardMinutes();
      assertEquals((-8), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Period period0 = Period.weeks(316);
      Hours hours0 = period0.ZERO.toStandardHours();
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Period period0 = new Period(2040L, 2040L);
      Period period1 = period0.plusHours((-1992));
      Hours hours0 = period1.toStandardHours();
      assertEquals((-1992), hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Period period0 = Period.millis(296);
      Period period1 = period0.ZERO.normalizedStandard();
      Duration duration0 = period1.toStandardDuration();
      assertEquals(0L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Period period0 = Period.millis(1428);
      Days days0 = period0.toStandardDays();
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Period period0 = Period.weeks(316);
      Days days0 = period0.toStandardDays();
      assertEquals(2212, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Period period0 = Period.months((-488));
      Period period1 = period0.ZERO.minusYears(Integer.MIN_VALUE);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Period period0 = Period.weeks(316);
      Period period1 = period0.plusYears(316);
      int int0 = period1.getYears();
      assertEquals(316, int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Weeks weeks0 = Weeks.MAX_VALUE;
      Duration duration0 = weeks0.toStandardDuration();
      Duration duration1 = duration0.negated();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 1);
      DateTime dateTime0 = new DateTime((long) 0, dateTimeZone0);
      Period period0 = duration1.toPeriodFrom((ReadableInstant) dateTime0);
      int int0 = period0.getYears();
      assertEquals((-41157273), int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Period period0 = Period.weeks(316);
      int int0 = period0.getWeeks();
      assertEquals(316, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Period period0 = Period.weeks((-3173));
      int int0 = period0.getWeeks();
      assertEquals((-3173), int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Period period0 = new Period(0, 0, 0, 0, 0, 0, 0, 0);
      int int0 = period0.getSeconds();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Period period0 = new Period((-676), 1033, (-676), 1033);
      int int0 = period0.getSeconds();
      assertEquals((-676), int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Period period0 = new Period(0, 0, 0, 0, 0, 0, 0, 0);
      int int0 = period0.getMonths();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Period period0 = Period.years(1000);
      Period period1 = period0.minusMonths((-1));
      int int0 = period1.getMonths();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      PeriodType periodType0 = PeriodType.weeks();
      Period period0 = new Period(dateTime0, dateTime0, periodType0);
      int int0 = period0.getMinutes();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Period period0 = Period.weeks(316);
      Period period1 = period0.plusMinutes(316);
      int int0 = period1.getMinutes();
      assertEquals(316, int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      int int0 = period0.ZERO.getMillis();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(7, 42);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      Period period0 = new Period((-462L), (Chronology) copticChronology0);
      int int0 = period0.getMillis();
      assertEquals((-462), int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Years years0 = Years.ZERO;
      PeriodType periodType0 = years0.getPeriodType();
      Period period0 = new Period(1440L, periodType0);
      int int0 = period0.getHours();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Period period0 = new Period(1698, 1698, 0, 317);
      int int0 = period0.getHours();
      assertEquals(1698, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Period period0 = Period.days((-2723));
      int int0 = period0.getDays();
      assertEquals((-2723), int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      PeriodType periodType1 = periodType0.withYearsRemoved();
      PeriodType periodType2 = periodType1.withSecondsRemoved();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      Period period0 = new Period(0L, periodType2, (Chronology) islamicChronology0);
      // Undeclared exception!
      try { 
        period0.withYears(4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      Period period0 = new Period(dateTime0, dateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.withWeeks(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Period period0 = Period.months(1120);
      PeriodType.WEEK_INDEX = 1120;
      // Undeclared exception!
      try { 
        period0.withWeeks((-292269054));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1120
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      Period period0 = new Period((-813L), (-813L), periodType0);
      // Undeclared exception!
      try { 
        period0.withSeconds((-1734));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      Period period0 = new Period((-3251L), (-3251L), periodType0);
      PeriodType.SECOND_INDEX = (-2090);
      // Undeclared exception!
      try { 
        period0.withSeconds(1692);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2090
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Duration duration0 = Duration.standardHours(296);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      Period period0 = duration0.toPeriod((Chronology) islamicChronology0);
      PeriodType periodType0 = PeriodType.yearDay();
      // Undeclared exception!
      try { 
        period0.withPeriodType(periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'weeks'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      Period period0 = new Period((-3251L), (-3251L), periodType0);
      // Undeclared exception!
      try { 
        period0.withMonths(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Period period0 = Period.millis(296);
      PeriodType.MONTH_INDEX = (-1977);
      // Undeclared exception!
      try { 
        period0.withMonths((-1977));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1977
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Invalid index: ");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      LocalTime localTime0 = LocalTime.now((Chronology) julianChronology0);
      Days days0 = Days.MAX_VALUE;
      PeriodType periodType0 = days0.getPeriodType();
      Period period0 = new Period(localTime0, localTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.withMinutes(18);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MINUTE_INDEX = 8;
      // Undeclared exception!
      try { 
        period0.withMinutes((-1831));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
      try { 
        period0.withHours((-3039));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.HOUR_INDEX = 2322;
      // Undeclared exception!
      try { 
        period0.withHours(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2322
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      Period period0 = new Period(0L, periodType0, (Chronology) islamicChronology0);
      // Undeclared exception!
      try { 
        period0.withDays(649);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.DAY_INDEX = (-481);
      // Undeclared exception!
      try { 
        period0.withDays(2841);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -481
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      Period period0 = days0.toPeriod();
      int int0 = (-2731);
      Period period1 = period0.minusMonths(int0);
      // Undeclared exception!
      try { 
        period1.toStandardWeeks();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Weeks as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Period period0 = Period.weeks(3372);
      PeriodType.MINUTE_INDEX = (-1940);
      // Undeclared exception!
      try { 
        period0.ZERO.toStandardWeeks();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Instant instant0 = new Instant(0L);
      Duration duration0 = new Duration(instant0, instant0);
      Period period0 = new Period(duration0, instant0);
      PeriodType.SECOND_INDEX = (-2713);
      // Undeclared exception!
      try { 
        period0.toStandardSeconds();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      Period period0 = new Period(3662L, (Chronology) buddhistChronology0);
      Period period1 = period0.plusWeeks((-6875));
      // Undeclared exception!
      try { 
        period1.toStandardSeconds();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -4157999997
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Period period0 = Period.months((-488));
      // Undeclared exception!
      try { 
        period0.toStandardMinutes();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Minutes as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Period period0 = Period.weeks(316);
      PeriodType.MINUTE_INDEX = (-1940);
      // Undeclared exception!
      try { 
        period0.toStandardMinutes();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Period period0 = Period.weeks(316);
      Period period1 = period0.plusYears(316);
      Period period2 = period1.normalizedStandard();
      // Undeclared exception!
      try { 
        period2.toStandardHours();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Hours as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Period period0 = Period.weeks(316);
      PeriodType.HOUR_INDEX = 214;
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Period period0 = Period.days((-1565));
      PeriodType.MONTH_INDEX = (-1565);
      // Undeclared exception!
      try { 
        period0.toStandardDuration();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Period period0 = new Period(0L, 0L);
      Period period1 = period0.withYears((-91));
      Period period2 = period1.minusMillis((-5));
      // Undeclared exception!
      try { 
        period2.toStandardDays();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Days as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Duration duration0 = Duration.standardHours(2162L);
      PeriodType periodType0 = PeriodType.time();
      Period period0 = duration0.toPeriod(periodType0);
      PeriodType.MINUTE_INDEX = 5443;
      // Undeclared exception!
      try { 
        period0.ZERO.toStandardDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Period period0 = Period.millis((-3048));
      PeriodType.WEEK_INDEX = 864;
      // Undeclared exception!
      try { 
        period0.plusWeeks(548);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 864
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Period period0 = Period.months((-477));
      PeriodType.SECOND_INDEX = (-477);
      // Undeclared exception!
      try { 
        period0.plusSeconds(25650000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -477
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      Period period0 = new Period((-3257L), periodType0);
      // Undeclared exception!
      try { 
        period0.plusMonths(7);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Period period0 = new Period((-3709), 2113, (-83), 84);
      PeriodType.MONTH_INDEX = (-728);
      // Undeclared exception!
      try { 
        period0.plusMonths(1884);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -728
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Period period0 = Period.months((-1000));
      PeriodType.MINUTE_INDEX = (-1000);
      // Undeclared exception!
      try { 
        period0.plusMinutes((-1193));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1000
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      Period period0 = new Period(0L, periodType0, (Chronology) islamicChronology0);
      // Undeclared exception!
      try { 
        period0.plusMillis(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Duration duration0 = new Duration((-230L), 0L);
      TimeZone timeZone0 = TimeZone.getTimeZone("America/Anchorage");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      DateTime dateTime0 = DateTime.now(dateTimeZone0);
      PeriodType periodType0 = PeriodType.millis();
      Period period0 = new Period(duration0, dateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.plusHours(1322);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.HOUR_INDEX = 1069;
      // Undeclared exception!
      try { 
        period0.plusHours((-1518));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1069
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
      try { 
        period0.plusDays((-2404));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      PeriodType.DAY_INDEX = (-598);
      // Undeclared exception!
      try { 
        period0.plusDays(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -598
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      Period period0 = new Period((long) 0, periodType0, (Chronology) null);
      Weeks weeks0 = Weeks.TWO;
      // Undeclared exception!
      try { 
        period0.plus(weeks0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Period period0 = Period.weeks(316);
      PeriodType.WEEK_INDEX = 316;
      // Undeclared exception!
      try { 
        period0.plus(period0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 316
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null);
      // Undeclared exception!
      try { 
        Period.parse("{", periodFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse("", (PeriodFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      // Undeclared exception!
      try { 
        Period.parse("%}aP.COL'nIo", periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"%}aP.COL'nIo\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Literal", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Period period0 = Period.millis(1428);
      PeriodType periodType0 = PeriodType.days();
      Period period1 = period0.withMonths(1428);
      // Undeclared exception!
      try { 
        period1.normalizedStandard(periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes((-337L));
      Period period0 = duration0.toPeriodTo((ReadableInstant) null);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      int[] intArray0 = new int[2];
      PeriodType periodType0 = new PeriodType("bp1x&c9__1@OD\\", durationFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Period period0 = Period.years(3);
      PeriodType.MILLI_INDEX = (-2940);
      PeriodType periodType0 = PeriodType.time();
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Period period0 = Period.months(676);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      durationFieldTypeArray0[0] = durationFieldType0;
      DurationFieldType durationFieldType1 = DurationFieldType.MILLIS_TYPE;
      durationFieldTypeArray0[1] = durationFieldType1;
      int[] intArray0 = new int[2];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, intArray0);
      Period period1 = period0.withHours((-727));
      // Undeclared exception!
      try { 
        period1.normalizedStandard(periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -2617200000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Period period0 = Period.ZERO;
      PeriodType.HOUR_INDEX = 316;
      // Undeclared exception!
      try { 
        period0.normalizedStandard();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Period period0 = Period.seconds(292272984);
      Years years0 = Years.MIN_VALUE;
      Period period1 = period0.minus(years0);
      // Undeclared exception!
      try { 
        period1.negated();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -2147483648 * -1
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      Period period0 = new Period(dateTime0, dateTime0, periodType0);
      Period period1 = period0.minusMillis(10125000);
      // Undeclared exception!
      try { 
        period1.multipliedBy(1900);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -10125000 * 1900
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Period period0 = Period.millis((-2155));
      PeriodType.YEAR_INDEX = 1000;
      // Undeclared exception!
      try { 
        period0.minusYears((-2155));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1000
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      Period period0 = new Period(dateTime0, dateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.minusWeeks((-1992));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1797L);
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      int[] intArray0 = new int[5];
      intArray0[2] = 2438;
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      Period period0 = new Period(localDate0, localDate0, periodType0);
      // Undeclared exception!
      try { 
        period0.minusWeeks((-1193));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2438
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      Weeks weeks0 = Weeks.MAX_VALUE;
      Duration duration0 = weeks0.toStandardDuration();
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period0.minusSeconds((-2868));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MONTH_INDEX = (-580);
      // Undeclared exception!
      try { 
        period0.minusMonths((-580));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -580
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
      try { 
        period0.minusMinutes(116);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[9];
      int[] intArray0 = new int[4];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      PeriodFormatter periodFormatter1 = periodFormatter0.withParseType(periodType0);
      Period period0 = Period.parse("", periodFormatter1);
      // Undeclared exception!
      try { 
        period0.minusMinutes(316);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDay();
      Period period0 = new Period(15308640144L, (-839L), periodType0);
      // Undeclared exception!
      try { 
        period0.minusMillis((-49));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MILLI_INDEX = 50;
      // Undeclared exception!
      try { 
        period0.ZERO.minusMillis(50);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 50
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Period period0 = Period.millis(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        period0.minusMillis(2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -2
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Period period0 = new Period((-1315L), periodType0, (Chronology) buddhistChronology0);
      // Undeclared exception!
      try { 
        period0.minusHours(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Period period0 = Period.months((-488));
      PeriodType.HOUR_INDEX = (-665);
      // Undeclared exception!
      try { 
        period0.minusHours((-488));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -665
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Years years0 = Years.ZERO;
      PeriodType periodType0 = years0.getPeriodType();
      Period period0 = new Period(1440L, periodType0);
      // Undeclared exception!
      try { 
        period0.minusDays(224);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Period period0 = Period.seconds((-116));
      PeriodType.DAY_INDEX = (-59);
      // Undeclared exception!
      try { 
        period0.minusDays(116);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -59
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Period period0 = Period.months(1120);
      PeriodType.YEAR_INDEX = 1120;
      // Undeclared exception!
      try { 
        period0.getYears();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Period period0 = new Period(0, 0, 1, 0, 1, 1, 0, 0);
      PeriodType.MINUTE_INDEX = 2087;
      // Undeclared exception!
      try { 
        period0.getMinutes();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      PeriodType.DAY_INDEX = 316;
      // Undeclared exception!
      try { 
        period0.getDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[7];
      int[] intArray0 = new int[6];
      Partial partial0 = new Partial(julianChronology0, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(partial0, partial0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(ethiopicChronology0);
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[9];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.era();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      int[] intArray0 = new int[1];
      Partial partial0 = new Partial(strictChronology0, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(partial0, partial0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) null, (ReadablePartial) null, (PeriodType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Period period0 = Period.millis(296);
      Seconds seconds0 = Seconds.standardSecondsIn(period0);
      PeriodType periodType0 = seconds0.getPeriodType();
      Period period1 = null;
      try {
        period1 = new Period("?|o~gq)n;14w(", periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"?|o~gq)n;14w(\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Object object0 = new Object();
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      Period period0 = null;
      try {
        period0 = new Period(object0, iSOChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Object object0 = new Object();
      Period period0 = null;
      try {
        period0 = new Period(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Period period0 = Period.days((-3427));
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      Period period1 = period0.normalizedStandard(periodType0);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Period period0 = Period.years(1000);
      Period period1 = period0.normalizedStandard((PeriodType) null);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Period period0 = new Period(99, 0, 328, 457, 0, 1734, 1, (-1935));
      Period period1 = period0.multipliedBy((-1935));
      Period period2 = period1.normalizedStandard();
      assertNotSame(period1, period0);
      assertFalse(period2.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusMillis((-1552));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Period period0 = Period.days((-720));
      Period period1 = period0.plusSeconds(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
      try { 
        period0.plusSeconds(2274);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
      try { 
        period0.plusMinutes((-2868));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      Period period0 = new Period(dateTime0, dateTime0, periodType0);
      Period period1 = period0.plusHours(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Period period0 = Period.months((-477));
      Period period1 = period0.plusDays(25650000);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
      try { 
        period0.plusWeeks(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Period period0 = Period.weeks(296);
      Period period1 = period0.plusMonths(347);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      Period period0 = new Period(dateTime0, dateTime0, periodType0);
      Period period1 = period0.plusMonths(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Period period0 = Period.hours((-2893));
      int int0 = period0.getHours();
      assertEquals((-2893), int0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Period period0 = Period.weeks(316);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      Period period1 = new Period(period0, (PeriodType) null, gJChronology0);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Period period0 = Period.days((-720));
      Period period1 = new Period(period0);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Period period0 = new Period(2040L, 2040L);
      int int0 = period0.getWeeks();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Period period0 = Period.months(1120);
      int int0 = period0.getYears();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Period period0 = new Period((-1501), (-1501), 255, 3096, 3096, 4707, 255, 316);
      int int0 = period0.getSeconds();
      assertEquals(255, int0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      int int0 = period0.getDays();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Duration duration0 = new Duration(15778800000L, 1L);
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = duration0.toPeriod(periodType0);
      int int0 = period0.getMinutes();
      assertEquals((-59), int0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Period period0 = Period.months((-488));
      int int0 = period0.getMonths();
      assertEquals((-488), int0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Period period0 = Period.millis(296);
      int int0 = period0.getMillis();
      assertEquals(296, int0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Duration duration0 = Duration.standardHours(296);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      Period period0 = duration0.toPeriod((Chronology) islamicChronology0);
      PeriodType periodType0 = period0.getPeriodType();
      Period period1 = new Period(1, (-2994), 296, 3600, (-3404), 512, 3627, (-3404), periodType0);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((-2147483648L));
      Period period0 = new Period(localDate0, localDate0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDay();
      Period period0 = new Period(15308640144L, (-839L), periodType0);
      Period period1 = period0.normalizedStandard(periodType0);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Period period0 = Period.weeks(316);
      Period period1 = period0.plusYears(316);
      // Undeclared exception!
      try { 
        period1.toStandardSeconds();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Seconds as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Period period0 = new Period((-1501), (-1501), 255, 3096, 3096, 4707, 255, 316);
      // Undeclared exception!
      try { 
        period0.toStandardDuration();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Duration as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.multipliedBy(1);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Period period0 = new Period(1564L);
      Period period1 = period0.ZERO.multipliedBy(447);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Period period0 = Period.days((-3427));
      Period period1 = period0.minus((ReadablePeriod) null);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Period period0 = new Period(0, 0, 0, 0, 0, 0, 0, 0);
      Period period1 = period0.plusMillis(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Years years0 = Years.ZERO;
      PeriodType periodType0 = years0.getPeriodType();
      Period period0 = new Period(1440L, periodType0);
      Period period1 = period0.plusMinutes(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Period period0 = Period.weeks(956);
      Period period1 = period0.plusDays(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Period period0 = Period.millis((-1));
      Period period1 = period0.plusWeeks(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(1324L);
      Period period0 = duration0.toPeriod((PeriodType) null);
      Period period1 = period0.plusYears(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Period period0 = Period.days((-720));
      Period period1 = period0.plus((ReadablePeriod) null);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Period period0 = new Period();
      Minutes minutes0 = Minutes.MAX_VALUE;
      Period period1 = period0.plus(minutes0);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Period period0 = Period.seconds(997);
      LocalTime localTime0 = new LocalTime(0, 0, 0);
      Weeks weeks0 = Weeks.weeksBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      DurationFieldType durationFieldType0 = weeks0.getFieldType();
      Period period1 = period0.withFieldAdded(durationFieldType0, 0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Period period0 = Period.days((-2723));
      // Undeclared exception!
      try { 
        period0.withFieldAdded((DurationFieldType) null, 698);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Period period0 = new Period();
      Minutes minutes0 = Minutes.MAX_VALUE;
      DurationFieldType durationFieldType0 = minutes0.getFieldType();
      Period period1 = period0.withFieldAdded(durationFieldType0, 8);
      // Undeclared exception!
      try { 
        period1.plus(minutes0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 8 + 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Period period0 = Period.weeks(316);
      // Undeclared exception!
      try { 
        period0.withField((DurationFieldType) null, (-5));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      Days days0 = Days.MAX_VALUE;
      // Undeclared exception!
      try { 
        period0.withFields(days0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'days'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Period period0 = Period.weeks(316);
      Period period1 = period0.withPeriodType((PeriodType) null);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Period period0 = new Period();
      int[] intArray0 = new int[6];
      PeriodType periodType0 = new PeriodType((String) null, (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        period0.withPeriodType(periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      MonthDay monthDay0 = new MonthDay((long) 1);
      // Undeclared exception!
      try { 
        Period.fieldDifference(yearMonth0, monthDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      // Undeclared exception!
      try { 
        Period.fieldDifference(localTime0, yearMonth0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      // Undeclared exception!
      try { 
        Period.fieldDifference(yearMonth0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((DateTimeZone) null);
      // Undeclared exception!
      try { 
        Period.fieldDifference((ReadablePartial) null, localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      PeriodType periodType0 = PeriodType.weeks();
      Period period0 = new Period(dateTime0, dateTime0, periodType0);
      Period period1 = Period.weeks(0);
      Period period2 = period1.plusSeconds(3331);
      // Undeclared exception!
      try { 
        period0.minus(period2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Period period0 = Period.years((-1037));
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKS_TYPE;
      Period period1 = period0.withField(durationFieldType0, (-1037));
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Period period0 = Period.seconds((-116));
      Period period1 = period0.minusDays(116);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      DateTime dateTime0 = new DateTime(15778800000L);
      Duration duration0 = new Duration(15778800000L, 1L);
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period(dateTime0, duration0, periodType0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      Period period0 = new Period(4, 1, periodType0, islamicChronology0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      PeriodType periodType0 = PeriodType.dayTime();
      Period period0 = new Period(15308640144L, (-815L), periodType0);
      // Undeclared exception!
      try { 
        period0.plusYears((-1762));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      Period period0 = new Period(3662L, (Chronology) buddhistChronology0);
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(3, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Integer integer0 = new Integer(1991);
      PeriodType periodType0 = PeriodType.yearMonthDay();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1991);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      Period period0 = null;
      try {
        period0 = new Period((Object) integer0, periodType0, (Chronology) buddhistChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Integer
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1797L);
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      int[] intArray0 = new int[5];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      Period period0 = new Period(localDate0, localDate0, periodType0);
      Period period1 = period0.minusWeeks((-1193));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Period period0 = new Period(2040L, 2040L);
      Period period1 = period0.minusHours(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime((Chronology) buddhistChronology0);
      Period period0 = new Period(dateTime0, dateTime0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) julianChronology0);
      Duration duration0 = new Duration(mutableDateTime0, mutableDateTime0);
      Hours hours0 = Hours.SEVEN;
      PeriodType periodType0 = hours0.getPeriodType();
      Period period0 = duration0.toPeriodTo((ReadableInstant) mutableDateTime0, periodType0);
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Period period0 = Period.seconds((-1658));
      Period period1 = period0.minusMinutes(2209);
      PeriodType.MINUTE_INDEX = (-3497);
      // Undeclared exception!
      try { 
        period1.minus(period1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3497
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Period period0 = Period.minutes((-4693));
      Period period1 = period0.withFields((ReadablePeriod) null);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Period period0 = new Period((-676), 1033, (-676), 1033);
      Period period1 = period0.toPeriod();
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Period period0 = Period.weeks(236548278);
      // Undeclared exception!
      try { 
        period0.toStandardMinutes();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 2384406642240
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
      try { 
        period0.withMillis((-1063));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Instant instant0 = new Instant();
      Duration duration0 = new Duration(instant0, instant0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      int[] intArray0 = new int[2];
      PeriodType periodType0 = new PeriodType("f\")s@|i$s$<", durationFieldTypeArray0, intArray0);
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period0.withMillis((-155));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Period period0 = new Period((-3709), 2113, (-83), 84);
      Days days0 = period0.toStandardDays();
      assertEquals((-153), days0.getDays());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      Period period0 = null;
      try {
        period0 = new Period(0, 2, 347, 2, 296, 2, (-1905), 347, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'months'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) julianChronology0);
      Duration duration0 = new Duration(mutableDateTime0, mutableDateTime0);
      Hours hours0 = Hours.SEVEN;
      PeriodType periodType0 = hours0.getPeriodType();
      Period period0 = duration0.toPeriodTo((ReadableInstant) mutableDateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.minusYears(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Period period0 = Period.millis(296);
      Duration duration0 = period0.toStandardDuration();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      Period period1 = new Period(duration0, gregorianChronology0);
      assertEquals(296L, duration0.getMillis());
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Period period0 = Period.parse("P");
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      Period period1 = period0.negated();
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      Period period0 = new Period(0, 0, 0, 0, 0, 0, 0, 0);
      Period period1 = new Period(period0, periodType0);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.withSeconds(2762);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Period period0 = new Period((-3709), 2113, (-83), 84);
      Period period1 = period0.ZERO.withMinutes((-1673));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.withDays(2841);
      assertNotSame(period1, period0);
  }
}
