/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 10:39:39 GMT 2021
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Period_ESTest extends Period_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      Period period0 = Period.months((-933));
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Period period0 = new Period((-3419), (-3419), (-3419), (-3419));
      PeriodType periodType0 = period0.ZERO.getPeriodType();
      Period period1 = period0.minusYears((-1));
      period1.normalizedStandard(periodType0);
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Period period0 = Period.weeks((-3453));
      Duration duration0 = period0.toStandardDuration();
      assertEquals((-2088374400000L), duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Period period0 = Period.days((-3416));
      Duration duration0 = period0.toStandardDuration();
      assertEquals((-295142400L), duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PeriodType periodType0 = PeriodType.time();
      Period period0 = new Period(0L, periodType0);
      Period period1 = period0.normalizedStandard();
      Period period2 = period1.withDays(6);
      Seconds seconds0 = period2.toStandardSeconds();
      assertEquals(518400, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Period period0 = Period.minutes((-3436));
      PeriodType periodType0 = PeriodType.standard();
      Period period1 = period0.normalizedStandard(periodType0);
      Minutes minutes0 = period1.toStandardMinutes();
      assertEquals((-3436), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Period period0 = new Period((-1000L), 5638L, ethiopicChronology0);
      Period period1 = period0.plusWeeks((-259));
      PeriodType periodType0 = PeriodType.hours();
      Period period2 = period1.normalizedStandard(periodType0);
      Minutes minutes0 = period2.toStandardMinutes();
      assertEquals((-2610660), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Period period0 = new Period((-3419), (-3419), (-3419), (-3419));
      Weeks weeks0 = Weeks.TWO;
      Days days0 = weeks0.toStandardDays();
      Period period1 = period0.plus(days0);
      Hours hours0 = period1.toStandardHours();
      assertEquals((-3140), hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Period period0 = Period.days((-575));
      Period period1 = period0.minusHours(19);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Period period0 = Period.minutes(0);
      Minutes minutes0 = Minutes.MIN_VALUE;
      DurationFieldType durationFieldType0 = minutes0.getFieldType();
      Period period1 = period0.withFieldAdded(durationFieldType0, (-1659));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1730, (-1420), 11);
      YearMonth yearMonth0 = YearMonth.fromDateFields(mockDate0);
      LocalDate localDate0 = yearMonth0.toLocalDate(1);
      // Undeclared exception!
      try { 
        Period.fieldDifference(localDate0, yearMonth0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      Period period0 = new Period(0L, periodType0, (Chronology) copticChronology0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Period period0 = new Period((-83L), (-83L));
      Period period1 = period0.withMonths(919);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Period period0 = new Period(1533, 1533, (-4001), (-1644));
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(9, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      Period period0 = days0.toPeriod();
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals((-306783378), weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Period period0 = Period.weeks(17);
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(10281600, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PeriodType periodType0 = PeriodType.time();
      Period period0 = new Period(0L, periodType0);
      Period period1 = period0.normalizedStandard();
      Period period2 = period1.withWeeks((-85));
      Seconds seconds0 = period2.toStandardSeconds();
      assertEquals((-51408000), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Period period0 = Period.minutes(584);
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(584, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PeriodType periodType0 = PeriodType.time();
      Period period0 = new Period(0L, periodType0);
      Period period1 = period0.normalizedStandard();
      Period period2 = period1.withWeeks((-85));
      Minutes minutes0 = period2.toStandardMinutes();
      assertEquals((-856800), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PeriodType periodType0 = PeriodType.time();
      Period period0 = new Period(0L, periodType0);
      Hours hours0 = period0.toStandardHours();
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Period period0 = Period.weeks(17);
      Hours hours0 = period0.toStandardHours();
      assertEquals(2856, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Period period0 = Period.millis(352831696);
      Duration duration0 = period0.toStandardDuration();
      assertEquals(352831696L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Period period0 = new Period();
      Duration duration0 = period0.toStandardDuration();
      assertEquals(0L, duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Period period0 = Period.weeks(17);
      Days days0 = period0.toStandardDays();
      assertEquals(119, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Period period0 = new Period((-3453), (-3453), (-3453), (-3453));
      Days days0 = period0.toStandardDays();
      assertEquals((-146), days0.getDays());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Period period0 = new Period(1968, 1968, 17, 17, 1968, 1968, 17, 1968);
      Period period1 = period0.minusMinutes(4);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Period period0 = new Period();
      int int0 = period0.getYears();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Period period0 = Period.years(93);
      int int0 = period0.getYears();
      assertEquals(93, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Period period0 = new Period(1968, 1968, 17, 17, 1968, 1968, 17, 1968);
      int int0 = period0.getWeeks();
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Period period0 = new Period((-3453), (-3453), (-3453), (-3453));
      Period period1 = period0.plusWeeks((-3453));
      int int0 = period1.getWeeks();
      assertEquals((-3453), int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Period period0 = new Period(1968, 1968, 17, 17, 1968, 1968, 17, 1968);
      int int0 = period0.getSeconds();
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Period period0 = Period.seconds((-3416));
      int int0 = period0.getSeconds();
      assertEquals((-3416), int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(0L);
      Months months0 = Months.NINE;
      PeriodType periodType0 = months0.getPeriodType();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Period period0 = duration0.toPeriod(periodType0, (Chronology) buddhistChronology0);
      Period period1 = period0.withFields(months0);
      int int0 = period1.getMonths();
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(0L);
      Months months0 = Months.ONE;
      PeriodType periodType0 = months0.getPeriodType();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Period period0 = duration0.toPeriod(periodType0, (Chronology) buddhistChronology0);
      Period period1 = period0.minusMonths(895);
      int int0 = period1.getMonths();
      assertEquals((-895), int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Period period0 = Period.minutes((-3416));
      Period period1 = period0.multipliedBy((-3416));
      int int0 = period1.getMinutes();
      assertEquals(11669056, int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Period period0 = new Period((-3453), (-3453), (-3453), (-3453));
      int int0 = period0.getMinutes();
      assertEquals((-3453), int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Period period0 = Period.minutes((-3328));
      int int0 = period0.getMillis();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Period period0 = Period.minutes((-3416));
      Period period1 = period0.withMillis((-3416));
      int int0 = period1.getMillis();
      assertEquals((-3416), int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(0L);
      Months months0 = Months.NINE;
      PeriodType periodType0 = months0.getPeriodType();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Period period0 = duration0.toPeriod(periodType0, (Chronology) buddhistChronology0);
      int int0 = period0.getHours();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Period period0 = new Period(1968, 1968, 17, 17, 1968, 1968, 17, 1968);
      int int0 = period0.getHours();
      assertEquals(1968, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      Period period0 = new Period(1073741823L, periodType0);
      int int0 = period0.getDays();
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Period period0 = new Period((-3419), (-3419), (-3419), (-3419));
      Period period1 = period0.normalizedStandard();
      int int0 = period1.getDays();
      assertEquals((-4), int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PeriodType periodType0 = PeriodType.time();
      Period period0 = new Period(0L, periodType0);
      // Undeclared exception!
      try { 
        period0.withYears(684);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Period period0 = Period.millis((-1625));
      PeriodType.YEAR_INDEX = (-1625);
      // Undeclared exception!
      try { 
        period0.withYears(Integer.MIN_VALUE);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1625
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      Period period0 = new Period(0L, (-2182L), periodType0);
      // Undeclared exception!
      try { 
        period0.withWeeks(372);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Period period0 = new Period(1968, 1968, 17, 17, 1968, 1968, 17, 1968);
      PeriodType.WEEK_INDEX = (-3416);
      // Undeclared exception!
      try { 
        period0.withWeeks(17);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3416
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      Hours hours0 = Hours.EIGHT;
      PeriodType periodType0 = hours0.getPeriodType();
      Period period0 = new Period(localDateTime0, localDateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.withSeconds(2186);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Period period0 = new Period((-1014), (-1014), (-1014), (-1014), 12, (-1014), (-1014), 12);
      PeriodType.SECOND_INDEX = 12;
      // Undeclared exception!
      try { 
        period0.withSeconds(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Period period0 = new Period();
      int[] intArray0 = new int[4];
      PeriodType periodType0 = new PeriodType("Months", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        period0.withPeriodType(periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      Period period0 = new Period(86399999, 2, (-121), 1);
      // Undeclared exception!
      try { 
        period0.withPeriodType(periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'hours'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Period period0 = new Period();
      Weeks weeks0 = Weeks.weeks((-486));
      Seconds seconds0 = weeks0.toStandardSeconds();
      PeriodType periodType0 = seconds0.getPeriodType();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.withMonths(6);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Duration duration0 = new Duration((-441L));
      DateTime dateTime0 = new DateTime();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[8];
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldType0;
      durationFieldTypeArray0[3] = durationFieldTypeArray0[2];
      durationFieldTypeArray0[4] = durationFieldType0;
      durationFieldTypeArray0[5] = durationFieldType0;
      durationFieldTypeArray0[6] = durationFieldTypeArray0[2];
      durationFieldTypeArray0[7] = durationFieldTypeArray0[4];
      int[] intArray0 = new int[3];
      intArray0[1] = 1208;
      PeriodType periodType0 = new PeriodType("D0 E", durationFieldTypeArray0, intArray0);
      Period period0 = duration0.toPeriodFrom((ReadableInstant) dateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.withMonths((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1208
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Period period0 = Period.days(0);
      PeriodType periodType0 = PeriodType.years();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.withMinutes(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Period period0 = Period.minutes((-3416));
      PeriodType.MINUTE_INDEX = (-3416);
      // Undeclared exception!
      try { 
        period0.withMinutes(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3416
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Period period0 = new Period(1968, 1968, 17, 17, 1968, 1968, 17, 1968);
      Period period1 = period0.multipliedBy(0);
      PeriodType periodType0 = PeriodType.minutes();
      Period period2 = period1.minusYears(0);
      Period period3 = period2.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period3.withMillis(85);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Period period0 = Period.minutes((-3416));
      PeriodType.MILLI_INDEX = (-3524);
      // Undeclared exception!
      try { 
        period0.withMillis((-2805));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3524
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
      try { 
        period0.withHours((-3453));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(0L, 0L, periodType0);
      // Undeclared exception!
      try { 
        period0.withHours(494);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Period period0 = Period.months(4178);
      PeriodType.HOUR_INDEX = 4178;
      // Undeclared exception!
      try { 
        period0.withHours(4178);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4178
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      Period period0 = new Period(1, 1, periodType0, copticChronology0);
      MutablePeriod mutablePeriod0 = new MutablePeriod((-106L));
      // Undeclared exception!
      try { 
        period0.withFields(mutablePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'millis'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PeriodType periodType0 = PeriodType.time();
      Period period0 = new Period(3228L, periodType0);
      // Undeclared exception!
      try { 
        period0.withDays(955);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Period period0 = new Period((Object) null);
      PeriodType.DAY_INDEX = (-990);
      // Undeclared exception!
      try { 
        period0.withDays((-990));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -990
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Period period0 = Period.minutes((-1723));
      PeriodType.MILLI_INDEX = 870;
      // Undeclared exception!
      try { 
        period0.toStandardWeeks();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PeriodType periodType0 = PeriodType.time();
      Period period0 = new Period(0L, periodType0);
      PeriodType.SECOND_INDEX = 3155;
      // Undeclared exception!
      try { 
        period0.toStandardSeconds();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Period period0 = new Period((-3453), (-3453), (-3453), (-3453));
      Period period1 = period0.multipliedBy(3632);
      // Undeclared exception!
      try { 
        period1.toStandardSeconds();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -45913697197
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Period period0 = Period.years(144);
      // Undeclared exception!
      try { 
        period0.toStandardMinutes();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Minutes as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Period period0 = Period.minutes((-3416));
      PeriodType.MILLI_INDEX = (-3524);
      // Undeclared exception!
      try { 
        period0.toStandardMinutes();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Period period0 = new Period((-1000L), 5638L, ethiopicChronology0);
      Period period1 = period0.plusWeeks((-259));
      Period period2 = period1.multipliedBy((-2836));
      // Undeclared exception!
      try { 
        period2.toStandardMinutes();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 7404001607
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Period period0 = new Period(25, 500, 399, (-171), 3388, 399, 25, 3388);
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Hours as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Period period0 = Period.millis((-63));
      PeriodType.HOUR_INDEX = 539;
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Period period0 = Period.weeks(1073741824);
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 180388626432
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Period period0 = Period.years((-1694));
      // Undeclared exception!
      try { 
        period0.toStandardDuration();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Duration as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Period period0 = Period.minutes((-3419));
      PeriodType.MINUTE_INDEX = (-3419);
      // Undeclared exception!
      try { 
        period0.toStandardDuration();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Period period0 = Period.months((-3416));
      // Undeclared exception!
      try { 
        period0.toStandardDays();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Days as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Period period0 = Period.weeks(17);
      PeriodType.MONTH_INDEX = (-722);
      // Undeclared exception!
      try { 
        period0.toStandardDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.plusWeeks((-352831696));
      // Undeclared exception!
      try { 
        period1.toStandardDays();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -2469821872
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(0L);
      Months months0 = Months.NINE;
      PeriodType periodType0 = months0.getPeriodType();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Period period0 = duration0.toPeriod(periodType0, (Chronology) buddhistChronology0);
      // Undeclared exception!
      try { 
        period0.plusYears((-1172));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.YEAR_INDEX = 1202;
      // Undeclared exception!
      try { 
        period0.plusYears(2139);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1202
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      int[] intArray0 = new int[2];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      Period period0 = duration0.toPeriodFrom((ReadableInstant) null, periodType0);
      // Undeclared exception!
      try { 
        period0.plusWeeks((-525));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Months months0 = Months.ONE;
      PeriodType periodType0 = months0.getPeriodType();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Period period0 = new Period(0L, 0L, periodType0, ethiopicChronology0);
      // Undeclared exception!
      try { 
        period0.plusSeconds(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[9];
      PeriodType periodType0 = new PeriodType("Seconds", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(0L, periodType0);
      // Undeclared exception!
      try { 
        period0.plusSeconds((-3132));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Period period0 = Period.years((-2771));
      PeriodType.SECOND_INDEX = (-1);
      // Undeclared exception!
      try { 
        period0.ZERO.plusSeconds((-2771));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Period period0 = Period.hours((-750));
      Period period1 = period0.minusSeconds((-750));
      // Undeclared exception!
      try { 
        period1.plusSeconds(Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 750 + 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      Period period0 = new Period(0L, periodType0);
      // Undeclared exception!
      try { 
        period0.plusMonths(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MONTH_INDEX = 416;
      // Undeclared exception!
      try { 
        period0.plusMonths((-271));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 416
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      PeriodType periodType0 = PeriodType.seconds();
      PeriodFormatter periodFormatter1 = periodFormatter0.withParseType(periodType0);
      Period period0 = Period.parse("", periodFormatter1);
      // Undeclared exception!
      try { 
        period0.plusMinutes((-1228));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Duration duration0 = Duration.standardHours(0L);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      Period period0 = duration0.toPeriod(periodType0, (Chronology) ethiopicChronology0);
      // Undeclared exception!
      try { 
        period0.plusMinutes(4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      Duration duration0 = seconds0.toStandardDuration();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[9];
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[2] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[3] = durationFieldTypeArray0[1];
      durationFieldTypeArray0[4] = durationFieldType0;
      durationFieldTypeArray0[5] = durationFieldType0;
      durationFieldTypeArray0[6] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[7] = durationFieldType0;
      durationFieldTypeArray0[8] = durationFieldTypeArray0[5];
      int[] intArray0 = new int[5];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period0.plusMinutes(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      Period period0 = new Period(1832L, periodType0);
      // Undeclared exception!
      try { 
        period0.plusMillis(1317);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Period period0 = new Period(1968, 1968, 17, 17, 1968, 1968, 17, 1968);
      PeriodType.MILLI_INDEX = 1968;
      // Undeclared exception!
      try { 
        period0.plusMillis(45);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1968
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Period period0 = Period.millis(680);
      PeriodType.HOUR_INDEX = 1674;
      // Undeclared exception!
      try { 
        period0.plusHours(1674);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1674
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Period period0 = new Period(785, 8, 0, (-1));
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      int[] intArray0 = new int[4];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, intArray0);
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.plusDays((-363));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Days days0 = Days.FIVE;
      Period period0 = days0.toPeriod();
      // Undeclared exception!
      try { 
        period0.plusDays(Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 5 + 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Period period0 = Period.minutes((-3416));
      Seconds seconds0 = Seconds.THREE;
      PeriodType periodType0 = seconds0.getPeriodType();
      Period period1 = new Period((long) (-3416), periodType0);
      // Undeclared exception!
      try { 
        period1.plus(period0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Duration duration0 = Duration.standardHours(0L);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      Period period0 = duration0.toPeriod(periodType0, (Chronology) ethiopicChronology0);
      Hours hours0 = Hours.MIN_VALUE;
      // Undeclared exception!
      try { 
        period0.plus(hours0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(7, 7, 7, Integer.MAX_VALUE);
      Period period0 = mutablePeriod0.toPeriod();
      // Undeclared exception!
      try { 
        period0.plus(period0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null);
      // Undeclared exception!
      try { 
        Period.parse("C4!orzo};5$%T*P`]", periodFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn((-3524)).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, periodParser0);
      // Undeclared exception!
      try { 
        Period.parse("C4!orzo};5$%T*P`]", periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"C4!orzo};5$%T*P`]\" is too short
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Literal", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse("xu?lIT.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"xu?lIT.\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Period period0 = Period.months(1317);
      PeriodType periodType0 = PeriodType.minutes();
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Period period0 = new Period();
      int[] intArray0 = new int[8];
      PeriodType periodType0 = new PeriodType("Offset is too large", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Period period0 = Period.months(5);
      PeriodType periodType0 = PeriodType.weeks();
      PeriodType.YEAR_INDEX = 85;
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Period period0 = Period.days((-810));
      PeriodType periodType0 = PeriodType.millis();
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -69984000000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MONTH_INDEX = (-366);
      // Undeclared exception!
      try { 
        period0.normalizedStandard();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Period period0 = new Period(1968, 292272729, 292272729, 292272729);
      // Undeclared exception!
      try { 
        period0.multipliedBy(292272729);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: 1968 * 292272729
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      Hours hours0 = Hours.hoursBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      PeriodType periodType0 = hours0.getPeriodType();
      Period period0 = new Period(168L, periodType0);
      // Undeclared exception!
      try { 
        period0.minusYears(272);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.YEAR_INDEX = (-545);
      // Undeclared exception!
      try { 
        period0.minusYears((-661));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -545
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PeriodType periodType0 = PeriodType.time();
      Period period0 = new Period(0L, periodType0);
      // Undeclared exception!
      try { 
        period0.minusWeeks((-1));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Period period0 = Period.months(23);
      PeriodType.WEEK_INDEX = (-1468);
      // Undeclared exception!
      try { 
        period0.minusWeeks(12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1468
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(0L);
      Months months0 = Months.NINE;
      PeriodType periodType0 = months0.getPeriodType();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Period period0 = duration0.toPeriod(periodType0, (Chronology) buddhistChronology0);
      // Undeclared exception!
      try { 
        period0.minusSeconds(2582);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Period period0 = Period.years((-319));
      PeriodType.SECOND_INDEX = (-319);
      // Undeclared exception!
      try { 
        period0.minusSeconds((-319));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -319
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      Period period0 = new Period(0L, (-2182L), periodType0);
      // Undeclared exception!
      try { 
        period0.minusMonths((-1117));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Period period0 = Period.millis((-1456));
      PeriodType.MONTH_INDEX = 80;
      // Undeclared exception!
      try { 
        period0.minusMonths((-1456));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 80
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MINUTE_INDEX = (-729);
      // Undeclared exception!
      try { 
        period0.minusMinutes(128);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -729
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Duration duration0 = Duration.standardDays(0L);
      Months months0 = Months.ONE;
      PeriodType periodType0 = months0.getPeriodType();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Period period0 = duration0.toPeriod(periodType0, (Chronology) buddhistChronology0);
      // Undeclared exception!
      try { 
        period0.minusMillis(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MILLI_INDEX = 1000;
      // Undeclared exception!
      try { 
        period0.minusMillis(1000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1000
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Period period0 = Period.weeks((-345));
      PeriodType.HOUR_INDEX = (-345);
      // Undeclared exception!
      try { 
        period0.minusHours((-1070));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -345
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Period period0 = new Period(Integer.MAX_VALUE, Integer.MAX_VALUE, 7, Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        period0.minusHours((-2715));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 2715
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      PeriodType periodType0 = PeriodType.time();
      Period period0 = new Period(0L, periodType0);
      // Undeclared exception!
      try { 
        period0.minusDays(6);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      int[] intArray0 = new int[3];
      PeriodType periodType0 = new PeriodType("K[!=q|S,cC^J-;", durationFieldTypeArray0, intArray0);
      Period period0 = new Period(0L, periodType0);
      // Undeclared exception!
      try { 
        period0.minusDays(292272992);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Period period0 = Period.months(5);
      Period period1 = Period.weeks((-933));
      PeriodType periodType0 = PeriodType.weeks();
      Period period2 = period1.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period2.minus(period0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Period period0 = new Period((-3453), (-3453), (-3453), (-3453));
      PeriodType.MILLI_INDEX = 500;
      // Undeclared exception!
      try { 
        period0.minus(period0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 500
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Period period0 = Period.minutes((-3416));
      Minutes minutes0 = Minutes.MIN_VALUE;
      // Undeclared exception!
      try { 
        period0.minus(minutes0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -3416 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Period period0 = Period.months(5);
      PeriodType.YEAR_INDEX = 85;
      // Undeclared exception!
      try { 
        period0.ZERO.getYears();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Period period0 = Period.ZERO;
      PeriodType.WEEK_INDEX = (-1770);
      // Undeclared exception!
      try { 
        period0.getWeeks();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Period period0 = Period.millis((-881));
      PeriodType.SECOND_INDEX = 1628;
      // Undeclared exception!
      try { 
        period0.getSeconds();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Period period0 = new Period(0L);
      PeriodType.MONTH_INDEX = (-239);
      // Undeclared exception!
      try { 
        period0.getMonths();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Period period0 = Period.millis((-1625));
      PeriodType.MINUTE_INDEX = 2046;
      // Undeclared exception!
      try { 
        period0.getMinutes();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Period period0 = Period.years(17887500);
      PeriodType.MILLI_INDEX = (-1436);
      // Undeclared exception!
      try { 
        period0.getMillis();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(0L);
      Months months0 = Months.NINE;
      PeriodType periodType0 = months0.getPeriodType();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Period period0 = duration0.toPeriod(periodType0, (Chronology) buddhistChronology0);
      PeriodType.HOUR_INDEX = (-2246);
      // Undeclared exception!
      try { 
        period0.getHours();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Period period0 = new Period((-1876), (-1876), (-1876), (-487));
      PeriodType.DAY_INDEX = (-863);
      // Undeclared exception!
      try { 
        period0.ZERO.getDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      YearMonth yearMonth1 = new YearMonth(yearMonth0, (int[]) null);
      // Undeclared exception!
      try { 
        Period.fieldDifference(yearMonth1, yearMonth1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      int[] intArray0 = new int[1];
      YearMonth yearMonth1 = new YearMonth(yearMonth0, intArray0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(yearMonth0, yearMonth1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) null, (ReadablePartial) null, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      LocalDate localDate0 = new LocalDate(0L, (Chronology) copticChronology0);
      LocalDate localDate1 = localDate0.withYearOfEra(7);
      PeriodType periodType0 = PeriodType.millis();
      Period period0 = null;
      try {
        period0 = new Period(localDate1, localDate0, periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 52985232000000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      Period period0 = null;
      try {
        period0 = new Period(localTime0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      Instant instant0 = new Instant();
      Instant instant1 = instant0.withMillis((-4L));
      Period period0 = null;
      try {
        period0 = new Period(instant1, instant0, periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 1392409281324
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTime dateTime0 = DateTime.now((Chronology) buddhistChronology0);
      DateTime dateTime1 = dateTime0.withYearOfEra(1);
      Period period0 = null;
      try {
        period0 = new Period((ReadableInstant) null, dateTime1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Period period0 = new Period((-3416), 1286, (-3416), 1212);
      PeriodType periodType0 = period0.getPeriodType();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Period period1 = null;
      try {
        period1 = new Period("~}_qt[TDnWBf,%IJpo", periodType0, buddhistChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"~}_qt[TDnWBf,%IJpo\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Period period0 = new Period((-3453), (-3453), (-3453), (-3453));
      PeriodType periodType0 = period0.ZERO.getPeriodType();
      Object object0 = new Object();
      Period period1 = null;
      try {
        period1 = new Period(object0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      Period period0 = null;
      try {
        period0 = new Period("Minutes", buddhistChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Minutes\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.MINUTES_TYPE;
      Period period0 = null;
      try {
        period0 = new Period(durationFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: org.joda.time.DurationFieldType$StandardDurationFieldType
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      Period period0 = null;
      try {
        period0 = new Period(1, 9223372036854775807L, periodType0, ethiopicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 292272985 for year must be in the range [-292269337,292272984]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      Period period0 = null;
      try {
        period0 = new Period(5, (-878), 5, 5, 5, (-878), (-878), 5, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'years'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.multipliedBy(684);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Period period0 = Period.months(5);
      Period period1 = period0.plusMillis(3632);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Period period0 = Period.months(0);
      Period period1 = period0.ZERO.plusSeconds(0);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Period period0 = new Period(5, 5, 5, 2291);
      // Undeclared exception!
      try { 
        period0.plusMinutes(Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 5 + 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
      try { 
        period0.plusHours(292278993);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Period period0 = new Period((-83L), (-83L));
      Period period1 = period0.plusDays(292272708);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(0L);
      Months months0 = Months.NINE;
      PeriodType periodType0 = months0.getPeriodType();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Period period0 = duration0.toPeriod(periodType0, (Chronology) buddhistChronology0);
      // Undeclared exception!
      try { 
        period0.plusWeeks(5);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(7, 7, 7, Integer.MAX_VALUE);
      Period period0 = mutablePeriod0.toPeriod();
      Period period1 = period0.plusYears(49);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      Period period0 = Period.parse("", periodFormatter0);
      Period period1 = period0.ZERO.plusYears(0);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Period period0 = new Period((-3453), (-3453), (-3453), (-3453));
      int int0 = period0.getHours();
      assertEquals((-3453), int0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      Period period0 = new Period(0L, periodType0);
      int int0 = period0.getWeeks();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Period period0 = new Period((-292272992), (-292272992), (-292272992), (-292272992), (-292272992), 0, (-292272992), 1440);
      int int0 = period0.getYears();
      assertEquals((-292272992), int0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Period period0 = Period.days((-575));
      int int0 = period0.getSeconds();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      Period period0 = new Period((Object) null, periodType0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Period period0 = new Period((-3419), (-3419), (-3419), (-3419));
      int int0 = period0.getDays();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Period period0 = Period.weeks(17);
      int int0 = period0.getMinutes();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse("", (PeriodFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Period period0 = new Period(0L);
      int int0 = period0.getMonths();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(0L);
      Months months0 = Months.ONE;
      PeriodType periodType0 = months0.getPeriodType();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Period period0 = duration0.toPeriod(periodType0, (Chronology) buddhistChronology0);
      // Undeclared exception!
      try { 
        period0.plusDays(3170);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Period period0 = Period.millis(2435);
      int int0 = period0.getMillis();
      assertEquals(2435, int0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      MockDate mockDate0 = new MockDate(7, (-1219), 7, 7, (-60), 86399999);
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      Period period0 = new Period(localDateTime0, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Period period0 = Period.months(5);
      PeriodType periodType0 = PeriodType.months();
      Period period1 = period0.normalizedStandard(periodType0);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Period period0 = Period.minutes((-3416));
      PeriodType periodType0 = period0.ZERO.getPeriodType();
      Period period1 = period0.withYears((-3416));
      Period period2 = period1.normalizedStandard(periodType0);
      assertFalse(period2.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Period period0 = Period.years(93);
      // Undeclared exception!
      try { 
        period0.toStandardWeeks();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Weeks as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Period period0 = new Period(1968, 1968, 17, 17, 1968, 1968, 17, 1968);
      Period period1 = period0.multipliedBy(1);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Period period0 = new Period((Object) null);
      Period period1 = period0.ZERO.negated();
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Period period0 = new Period((-3453), (-3453), (-3453), (-3453));
      Period period1 = period0.minus((ReadablePeriod) null);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Period period0 = Period.minutes(2648);
      Years years0 = Years.MIN_VALUE;
      Period period1 = period0.minus(years0);
      // Undeclared exception!
      try { 
        period1.plusYears((-1683));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -1683
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Period period0 = Period.minutes(0);
      Period period1 = period0.plusMillis(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Period period0 = Period.minutes(0);
      Period period1 = period0.plusMinutes(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Period period0 = Period.days((-575));
      Period period1 = period0.plusHours(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Period period0 = Period.minutes((-3416));
      Period period1 = period0.plusDays(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Period period0 = Period.minutes(0);
      Period period1 = period0.plusWeeks(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Period period0 = Period.seconds(1);
      Period period1 = period0.plusMonths(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Period period0 = new Period(0L);
      Period period1 = period0.plus((ReadablePeriod) null);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Period period0 = new Period((-1000L), 5638L, ethiopicChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKS_TYPE;
      Period period1 = period0.withFieldAdded(durationFieldType0, 0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Period period0 = new Period(1968, 292272708, 292272708, 292272708);
      // Undeclared exception!
      try { 
        period0.withFieldAdded((DurationFieldType) null, 2500);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Period period0 = Period.seconds(1);
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      Period period1 = period0.withFieldAdded(durationFieldType0, 1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Period period0 = new Period(1968, 292272708, 292272708, 292272708);
      // Undeclared exception!
      try { 
        period0.withField((DurationFieldType) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Period period0 = new Period();
      Weeks weeks0 = Weeks.MAX_VALUE;
      DurationFieldType durationFieldType0 = weeks0.getFieldType();
      Period period1 = period0.withField(durationFieldType0, Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        period1.minusWeeks(2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -2
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      Period period0 = days0.toPeriod();
      // Undeclared exception!
      try { 
        period0.negated();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -2147483648 * -1
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Period period0 = new Period((-3453), (-3453), (-3453), (-3453));
      PeriodType periodType0 = period0.ZERO.getPeriodType();
      Period period1 = period0.withPeriodType(periodType0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[7];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[1] = dateTimeFieldTypeArray0[0];
      int[] intArray0 = new int[3];
      Partial partial0 = new Partial(ethiopicChronology0, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(partial0, partial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not have overlapping fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      MonthDay monthDay0 = MonthDay.now((Chronology) buddhistChronology0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(monthDay0, yearMonth0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      LocalTime localTime0 = new LocalTime(4688L, (DateTimeZone) null);
      // Undeclared exception!
      try { 
        Period.fieldDifference(yearMonth0, localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      // Undeclared exception!
      try { 
        Period.fieldDifference(yearMonth0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.fieldDifference((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      Instant instant0 = new Instant();
      Period period0 = new Period(instant0, instant0, periodType0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Period period0 = Period.years((-2771));
      Period period1 = period0.minusWeeks(51);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Period period0 = new Period((Object) null);
      Seconds seconds0 = period0.ZERO.toStandardSeconds();
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Period period0 = Period.weeks((-3308));
      Period period1 = period0.ZERO.minusDays(1576);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Period period0 = new Period(0L);
      Period period1 = period0.withFields((ReadablePeriod) null);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Instant instant0 = new Instant();
      Duration duration0 = Duration.standardMinutes(0L);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      PeriodType periodType0 = new PeriodType("GJ", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(instant0, duration0, periodType0);
      // Undeclared exception!
      try { 
        period0.withYears((-1237));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Hours hours0 = Hours.ONE;
      PeriodType periodType0 = hours0.getPeriodType();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Period period0 = null;
      try {
        period0 = new Period(1, 9223372036854775807L, periodType0, ethiopicChronology0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 2562047788015
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Period period0 = new Period((-3453), (-3453), (-3453), (-3453));
      Duration duration0 = period0.toStandardDuration();
      assertEquals((-12641436L), duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Period period0 = Period.months(1073741824);
      // Undeclared exception!
      try { 
        period0.plusMonths(1073741824);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 1073741824 + 1073741824
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(789L, (DateTimeZone) null);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      PeriodType periodType0 = new PeriodType("ReadablePartial objects must have the same set of fields", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((ReadableDuration) null, mutableDateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.plusMillis((-2730));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Instant instant0 = new Instant((long) 76);
      Chronology chronology0 = instant0.getChronology();
      Period period0 = new Period(4486L, chronology0);
      Period period1 = period0.plusMonths(2577);
      // Undeclared exception!
      try { 
        period1.toStandardSeconds();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Seconds as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      Period period0 = new Period((Object) null, (PeriodType) null, gregorianChronology0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Days days0 = Days.TWO;
      Duration duration0 = days0.toStandardDuration();
      Period period0 = new Period((ReadableInstant) null, duration0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(0L, 0L, periodType0);
      // Undeclared exception!
      try { 
        period0.withMonths((-3079));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Period period0 = new Period(0L, 2796L);
      PeriodType.SECOND_INDEX = 185;
      // Undeclared exception!
      try { 
        period0.plus(period0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 185
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTime dateTime0 = DateTime.now((Chronology) buddhistChronology0);
      Period period0 = new Period((ReadableInstant) null, dateTime0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
      try { 
        period0.minusMinutes(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(0L, 0L, periodType0);
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Weeks weeks0 = Weeks.TWO;
      Duration duration0 = weeks0.toStandardDuration();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(4, 0);
      MutableDateTime mutableDateTime0 = MutableDateTime.now(dateTimeZone0);
      Period period0 = new Period(duration0, mutableDateTime0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Period period0 = new Period(1000, 838, 838, 5, 5, 838, Integer.MIN_VALUE, (-2898));
      // Undeclared exception!
      try { 
        period0.minusSeconds(1000);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -1000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(0L, 0L, periodType0);
      Period period1 = period0.toPeriod();
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Period period0 = new Period((-1000L), 5638L, ethiopicChronology0);
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Period period0 = Period.ZERO;
      Days days0 = period0.toStandardDays();
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Period period0 = new Period();
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Period period0 = new Period((-3453), (-3453), (-3453), (-3453));
      PeriodType periodType0 = period0.ZERO.getPeriodType();
      Period period1 = new Period(2127, 2659, (-3453), (-1968), (-3540), (-3453), (-3453), (-3453), periodType0);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Period period0 = Period.years(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        period0.minusYears(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      Period period0 = new Period((Object) null, julianChronology0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      Partial partial0 = new Partial(ethiopicChronology0, (DateTimeFieldType[]) null, (int[]) null);
      Period period0 = null;
      try {
        period0 = new Period(partial0, partial0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Period period0 = Period.parse("p");
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      int[] intArray0 = new int[3];
      PeriodType periodType0 = new PeriodType("Days", (DurationFieldType[]) null, intArray0);
      Period period1 = null;
      try {
        period1 = new Period(period0, periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Period period0 = new Period((Object) null);
      Period period1 = period0.withSeconds(3596);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("o", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(yearMonth0, yearMonth0, periodType0);
      // Undeclared exception!
      try { 
        period0.withWeeks(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Period period0 = Period.years(17887500);
      Period period1 = period0.withHours((-1223));
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.minusMillis(1000);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Period period0 = Period.millis(680);
      Period period1 = period0.withMinutes(680);
      assertNotSame(period1, period0);
  }
}
