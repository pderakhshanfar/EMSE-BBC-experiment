/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 23:50:41 GMT 2021
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.format.ISOPeriodFormat;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Period_ESTest extends Period_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Period period0 = Period.minutes(1256);
      Period period1 = period0.ZERO.withMonths(1256);
      Period period2 = period1.normalizedStandard();
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Period period0 = Period.minutes(5087);
      PeriodType periodType0 = PeriodType.millis();
      Period period1 = period0.normalizedStandard(periodType0);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Period period0 = Period.years((-1793));
      // Undeclared exception!
      try { 
        period0.toStandardWeeks();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Weeks as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Period period0 = Period.days((-204));
      Duration duration0 = period0.toStandardDuration();
      assertEquals((-17625600000L), duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      Duration duration0 = Duration.standardSeconds((-1758));
      Period period0 = duration0.toPeriod((Chronology) copticChronology0);
      Duration duration1 = period0.toStandardDuration();
      assertEquals((-1758000L), duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Period period0 = Period.millis((-460));
      Period period1 = period0.plusDays((-460));
      Seconds seconds0 = period1.toStandardSeconds();
      assertEquals((-39744000), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Period period0 = Period.hours(20587500);
      // Undeclared exception!
      try { 
        period0.toStandardSeconds();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 74115000000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Period period0 = new Period((-568L), (-1466L), (Chronology) null);
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Period period0 = Period.hours(20587500);
      Period period1 = period0.plusSeconds((-1));
      Minutes minutes0 = period1.toStandardMinutes();
      assertNotSame(period1, period0);
      assertEquals(1235250000, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(168L);
      Period period0 = duration0.toPeriod();
      Hours hours0 = period0.toStandardHours();
      assertEquals(2, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Period period0 = Period.weeks(5087);
      Days days0 = period0.toStandardDays();
      assertEquals(35609, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Period period0 = Period.seconds(1256);
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Period period0 = Period.millis((-974));
      DurationFieldType durationFieldType0 = DurationFieldType.MILLIS_TYPE;
      Period period1 = period0.withFieldAdded(durationFieldType0, (-974));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(localDateTime0, localDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Duration duration0 = Duration.millis((-556));
      Instant instant0 = Instant.now();
      Period period0 = new Period(duration0, instant0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Period period0 = new Period(132L);
      Period period1 = period0.withSeconds(770);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Period period0 = Period.minutes(1256);
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Period period0 = Period.days(617);
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(88, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Period period0 = Period.hours((-1155));
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals((-6), weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Period period0 = Period.weeks(4);
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(2419200, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Period period0 = Period.minutes(0);
      Period period1 = period0.minusMinutes(326565);
      Seconds seconds0 = period1.toStandardSeconds();
      assertEquals((-19593900), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Period period0 = Period.days(617);
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(888480, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Period period0 = Period.weeks((-1384));
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals((-13950720), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Days days0 = Days.ONE;
      Period period0 = days0.toPeriod();
      Hours hours0 = period0.toStandardHours();
      assertEquals(24, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Period period0 = Period.weeks((-88));
      Hours hours0 = period0.toStandardHours();
      assertEquals((-14784), hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Period period0 = Period.minutes(0);
      Duration duration0 = period0.toStandardDuration();
      assertEquals(0L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Period period0 = Period.hours(20587500);
      Duration duration0 = period0.toStandardDuration();
      assertEquals(74115000000000L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Period period0 = Period.weeks((-1384));
      Duration duration0 = period0.toStandardDuration();
      assertEquals((-837043200000L), duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Period period0 = new Period(35, 35, 35, (-192));
      Days days0 = period0.toStandardDays();
      assertEquals(1, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Period period0 = new Period(35, 35, 35, (-192));
      Period period1 = period0.negated();
      Days days0 = period1.toStandardDays();
      assertEquals((-1), days0.getDays());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      Period period0 = Period.parse("", periodFormatter0);
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Period period0 = Period.parse("PT0S");
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Period period0 = new Period(31, 31, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 31);
      Period period1 = period0.minusWeeks(31);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Period period0 = Period.months(0);
      Period period1 = period0.minusHours((-2410));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Period period0 = new Period(1072, 3, 711, 1072, 0, 1072, 711, 1072);
      int int0 = period0.getYears();
      assertEquals(1072, int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Period period0 = Period.hours((-2495));
      Period period1 = period0.minusYears(20503125);
      int int0 = period1.getYears();
      assertEquals((-20503125), int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Period period0 = Period.ZERO;
      int int0 = period0.getWeeks();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Period period0 = Period.hours((-1114));
      Period period1 = period0.normalizedStandard((PeriodType) null);
      int int0 = period1.getWeeks();
      assertEquals((-6), int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Period period0 = new Period((-333), (-333), (-333), (-333));
      Period period1 = period0.minusSeconds((-2608));
      int int0 = period1.getSeconds();
      assertEquals(2275, int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Period period0 = Period.seconds((-866));
      int int0 = period0.getSeconds();
      assertEquals((-866), int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Period period0 = Period.months((-1384));
      Period period1 = period0.negated();
      int int0 = period1.getMonths();
      assertEquals(1384, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-1005L));
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance();
      LocalDate localDate0 = new LocalDate((-560L), (Chronology) gJChronology0);
      LocalTime localTime0 = new LocalTime((Chronology) gJChronology0);
      DateTime dateTime0 = localDate0.toDateTime(localTime0, (DateTimeZone) fixedDateTimeZone0);
      MutableDateTime mutableDateTime0 = dateTime0.toMutableDateTime((DateTimeZone) fixedDateTimeZone0);
      Period period0 = duration0.toPeriodTo((ReadableInstant) mutableDateTime0);
      int int0 = period0.getMonths();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      int int0 = period0.getMinutes();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Period period0 = new Period((-1), (-1), (-1), (-1));
      int int0 = period0.getMinutes();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Period period0 = new Period(132L);
      int int0 = period0.getMillis();
      assertEquals(132, int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Period period0 = new Period((-4840L));
      int int0 = period0.getMillis();
      assertEquals((-840), int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Period period0 = Period.hours((-1114));
      Period period1 = period0.negated();
      int int0 = period1.getHours();
      assertEquals(1114, int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Period period0 = new Period((-1), (-1), (-1), (-1));
      int int0 = period0.getHours();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Period period0 = Period.days(617);
      int int0 = period0.getDays();
      assertEquals(617, int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      Duration duration0 = days0.toStandardDuration();
      PeriodType periodType0 = PeriodType.yearMonthDay();
      Period period0 = duration0.toPeriodFrom((ReadableInstant) null, periodType0);
      Period period1 = period0.negated();
      int int0 = period1.getDays();
      assertEquals((-10), int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      Duration duration0 = Duration.ZERO;
      DateTime dateTime0 = new DateTime((long) 28);
      Period period0 = duration0.toPeriodFrom((ReadableInstant) dateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.withYears(4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Period period0 = Period.ZERO;
      int int0 = 20503125;
      PeriodType.YEAR_INDEX = int0;
      // Undeclared exception!
      try { 
        period0.withYears(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 20503125
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      // Undeclared exception!
      try { 
        period0.withWeeks((-400));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Period period0 = Period.ZERO;
      PeriodType.WEEK_INDEX = 985;
      // Undeclared exception!
      try { 
        period0.withWeeks(985);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 985
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      // Undeclared exception!
      try { 
        period0.withSeconds(4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.SECOND_INDEX = 28265625;
      // Undeclared exception!
      try { 
        period0.withSeconds((-1114));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 28265625
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Period period0 = Period.days(259);
      PeriodType periodType0 = new PeriodType("", (DurationFieldType[]) null, (int[]) null);
      // Undeclared exception!
      try { 
        period0.withPeriodType(periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Period period0 = new Period(85, (-2575), 85, 85, 3088, 0, (-646), (-646));
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      // Undeclared exception!
      try { 
        period0.withPeriodType(periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'weeks'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Period period0 = Period.minutes(0);
      PeriodType periodType0 = PeriodType.millis();
      Period period1 = period0.ZERO.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.withMonths(2375);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MONTH_INDEX = 1963;
      // Undeclared exception!
      try { 
        period0.withMonths((-166));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1963
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTime dateTime0 = DateTime.now((Chronology) buddhistChronology0);
      PeriodType periodType0 = PeriodType.months();
      Period period0 = new Period(dateTime0, dateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.withMinutes(22);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Minutes minutes0 = Minutes.ZERO;
      Duration duration0 = minutes0.toStandardDuration();
      DateTime dateTime0 = new DateTime(785L);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      PeriodType periodType0 = new PeriodType("Minutes", durationFieldTypeArray0, (int[]) null);
      Period period0 = duration0.toPeriodTo((ReadableInstant) dateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.withMinutes((-332));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DateTime dateTime0 = new DateTime(0L);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      int[] intArray0 = new int[1];
      PeriodType periodType0 = new PeriodType("D@Ul5(O{_U|", durationFieldTypeArray0, intArray0);
      Period period0 = new Period(dateTime0, dateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.withMinutes(84);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PeriodType periodType0 = PeriodType.seconds();
      Period period0 = new Period((ReadableInstant) null, (ReadableDuration) null, periodType0);
      // Undeclared exception!
      try { 
        period0.withMillis(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(60L, 60L, periodType0);
      // Undeclared exception!
      try { 
        period0.withMillis((-2640));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Period period0 = Period.years(4);
      PeriodType.MILLI_INDEX = 61;
      // Undeclared exception!
      try { 
        period0.withMillis(61);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 61
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      Duration duration0 = Duration.standardHours(2185L);
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      DateTime dateTime0 = localDate0.toDateTime(mutableDateTime0);
      PeriodType periodType0 = PeriodType.yearMonthDay();
      Period period0 = new Period(duration0, dateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.withHours(4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Period period0 = new Period(1072, 3, 711, 1072, 0, 1072, 711, 1072);
      PeriodType.HOUR_INDEX = 1994;
      // Undeclared exception!
      try { 
        period0.withHours(352831696);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1994
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      MutableDateTime mutableDateTime0 = new MutableDateTime(1971L, (Chronology) ethiopicChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      MonthDay monthDay0 = MonthDay.now((Chronology) gJChronology0);
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      Minutes minutes0 = Minutes.THREE;
      // Undeclared exception!
      try { 
        period0.withFields(minutes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'minutes'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Period period0 = Period.days(0);
      PeriodType periodType0 = PeriodType.time();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.withDays(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Duration duration0 = Duration.millis((-1156L));
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period0.withDays(2255);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(4, 4, 4);
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      PeriodType.DAY_INDEX = 1907;
      // Undeclared exception!
      try { 
        period0.withDays(9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1907
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Period period0 = Period.months(10000);
      // Undeclared exception!
      try { 
        period0.toStandardWeeks();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Weeks as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Period period0 = Period.hours((-808));
      PeriodType.WEEK_INDEX = 31;
      // Undeclared exception!
      try { 
        period0.toStandardWeeks();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Period period0 = Period.minutes(1256);
      Period period1 = period0.ZERO.withMonths(1256);
      // Undeclared exception!
      try { 
        period1.toStandardSeconds();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Seconds as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Period period0 = Period.ZERO;
      PeriodType.WEEK_INDEX = 985;
      // Undeclared exception!
      try { 
        period0.toStandardSeconds();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Period period0 = Period.minutes((-2274));
      Period period1 = period0.ZERO.withMonths((-2274));
      // Undeclared exception!
      try { 
        period1.toStandardMinutes();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Minutes as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Period period0 = new Period((-1959), (-1959), 2210, 866);
      PeriodType.SECOND_INDEX = 866;
      // Undeclared exception!
      try { 
        period0.toStandardMinutes();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Period period0 = Period.ZERO;
      PeriodType.DAY_INDEX = 1501;
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Period period0 = Period.weeks(15271875);
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 2565675000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Period period0 = Period.years(1320);
      PeriodType.YEAR_INDEX = 1320;
      // Undeclared exception!
      try { 
        period0.toStandardDuration();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Period period0 = Period.minutes(0);
      Period period1 = period0.minusMonths((-1));
      // Undeclared exception!
      try { 
        period1.toStandardDays();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Days as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      PeriodType.MILLI_INDEX = (-2023);
      // Undeclared exception!
      try { 
        period0.toStandardDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Period period0 = Period.minutes(0);
      PeriodType periodType0 = PeriodType.millis();
      Period period1 = period0.ZERO.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.plusYears(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.YEAR_INDEX = 9;
      // Undeclared exception!
      try { 
        period0.plusYears(9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Period period0 = new Period(0L);
      Years years0 = Years.MIN_VALUE;
      Period period1 = period0.withFields(years0);
      // Undeclared exception!
      try { 
        period1.plusYears((-99));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -99
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      // Undeclared exception!
      try { 
        period0.plusWeeks((-3836));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, (int[]) null);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      Period period0 = new Period(0L, 86400L, periodType0, gregorianChronology0);
      // Undeclared exception!
      try { 
        period0.plusWeeks(3694);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Period period0 = Period.months((-1491));
      PeriodType.WEEK_INDEX = (-1491);
      // Undeclared exception!
      try { 
        period0.plusWeeks(1375);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      PeriodType periodType0 = PeriodType.yearMonthDay();
      Period period0 = new Period(localDate0, localDate0, periodType0);
      // Undeclared exception!
      try { 
        period0.plusSeconds((-1));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Period period0 = Period.days(963);
      Duration duration0 = period0.toDurationTo((ReadableInstant) null);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[2] = durationFieldType0;
      PeriodType periodType0 = new PeriodType("d|.?frZ;pE4N/Lh_lT", durationFieldTypeArray0, (int[]) null);
      Period period1 = new Period(duration0, (ReadableInstant) null, periodType0);
      // Undeclared exception!
      try { 
        period1.plusSeconds(193);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Period period0 = Period.years(1919);
      PeriodType.SECOND_INDEX = (-1780);
      // Undeclared exception!
      try { 
        period0.plusSeconds(2598);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Period period0 = Period.seconds(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        period0.plusSeconds(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-1035L));
      PeriodType periodType0 = PeriodType.days();
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period0.plusMonths(2608);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(60L, 60L, periodType0);
      // Undeclared exception!
      try { 
        period0.plusMonths((-2640));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Period period0 = Period.minutes((-1595));
      PeriodType.MONTH_INDEX = (-1595);
      // Undeclared exception!
      try { 
        period0.plusMonths(9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Duration duration0 = Duration.standardHours(1209L);
      PeriodType periodType0 = PeriodType.time();
      PeriodType periodType1 = periodType0.withMinutesRemoved();
      Period period0 = duration0.toPeriod(periodType1);
      // Undeclared exception!
      try { 
        period0.plusMinutes(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(6);
      YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      PeriodType periodType0 = new PeriodType("[]9gN7:4Jv8SCl}BF:", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(yearMonth0, yearMonth0, periodType0);
      // Undeclared exception!
      try { 
        period0.plusMinutes((-1138));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MINUTE_INDEX = (-153692453);
      // Undeclared exception!
      try { 
        period0.plusMinutes(6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Period period0 = Period.years(8);
      Minutes minutes0 = Minutes.MAX_VALUE;
      Period period1 = period0.plus(minutes0);
      // Undeclared exception!
      try { 
        period1.plusMinutes(8);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 8
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      Seconds seconds0 = Seconds.ONE;
      PeriodType periodType0 = seconds0.getPeriodType();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      Period period0 = new Period(4687, 4377L, periodType0, gregorianChronology0);
      // Undeclared exception!
      try { 
        period0.plusMillis(1584);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period(0L, periodType0);
      PeriodType.MILLI_INDEX = 12;
      // Undeclared exception!
      try { 
        period0.plusMillis(2382);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      // Undeclared exception!
      try { 
        period0.plusHours((-1));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      PeriodType.HOUR_INDEX = 1431;
      // Undeclared exception!
      try { 
        period0.plusHours(10000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Period period0 = Period.minutes(0);
      PeriodType periodType0 = PeriodType.millis();
      Period period1 = period0.ZERO.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.plusDays(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(60L, 60L, periodType0);
      // Undeclared exception!
      try { 
        period0.plusDays((-2654));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.DAY_INDEX = 1952;
      // Undeclared exception!
      try { 
        period0.plusDays(3142);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      Hours hours0 = Hours.ONE;
      // Undeclared exception!
      try { 
        period0.plus(hours0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Period period0 = Period.hours((-1040));
      Period period1 = period0.minusMinutes((-1040));
      PeriodType.MINUTE_INDEX = (-876);
      // Undeclared exception!
      try { 
        period0.plus(period1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period((-396L), (-396L), periodType0, (Chronology) null);
      Hours hours0 = Hours.MIN_VALUE;
      Period period1 = period0.withFields(hours0);
      // Undeclared exception!
      try { 
        period1.plus(hours0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null);
      // Undeclared exception!
      try { 
        Period.parse("", periodFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse("ReadablePartial objects must have the same set of fields", (PeriodFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Literal", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Period period0 = new Period();
      int[] intArray0 = new int[7];
      PeriodType periodType0 = new PeriodType("I:OCP\"^qo\"3\"EHX", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Period period0 = Period.millis(1833);
      Months months0 = Months.months(684);
      PeriodType periodType0 = months0.getPeriodType();
      PeriodType.YEAR_INDEX = 1833;
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Period period0 = Period.hours(20587500);
      PeriodType periodType0 = PeriodType.seconds();
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 74115000000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Duration duration0 = Duration.millis((-1156L));
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period0.normalizedStandard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Period period0 = Period.hours((-808));
      PeriodType.MONTH_INDEX = 4302;
      // Undeclared exception!
      try { 
        period0.ZERO.normalizedStandard();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Period period0 = new Period();
      Hours hours0 = Hours.MIN_VALUE;
      Period period1 = period0.plus(hours0);
      // Undeclared exception!
      try { 
        period1.negated();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -2147483648 * -1
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Period period0 = new Period(1326L);
      // Undeclared exception!
      try { 
        period0.multipliedBy(317351877);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: 326 * 317351877
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      Period period0 = new Period(607L, 63072000000L, periodType0);
      // Undeclared exception!
      try { 
        period0.minusYears(1900);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Period period0 = Period.years(8);
      PeriodType.YEAR_INDEX = 8;
      // Undeclared exception!
      try { 
        period0.ZERO.minusYears(8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Period period0 = new Period(0L);
      Years years0 = Years.MIN_VALUE;
      Period period1 = period0.withFields(years0);
      // Undeclared exception!
      try { 
        period1.minusYears(17971875);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -17971875
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      PeriodType.WEEK_INDEX = (-1);
      // Undeclared exception!
      try { 
        period0.minusWeeks(58);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      Period period0 = new Period(0L, (-3820L), periodType0, iSOChronology0);
      // Undeclared exception!
      try { 
        period0.minusSeconds(3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Period period0 = Period.weeks(139);
      PeriodType.SECOND_INDEX = (-2243);
      // Undeclared exception!
      try { 
        period0.minusSeconds(4402);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Period period0 = new Period(3600000L, 3600000L, (PeriodType) null);
      Seconds seconds0 = Seconds.MIN_VALUE;
      Period period1 = period0.plus(seconds0);
      // Undeclared exception!
      try { 
        period1.minusSeconds(12);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -12
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Duration duration0 = Duration.standardHours(10000L);
      PeriodType periodType0 = PeriodType.days();
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period0.minusMonths(1316);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Duration duration0 = new Duration((-392L));
      DateTime dateTime0 = new DateTime(1440L);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[2] = durationFieldType0;
      PeriodType periodType0 = new PeriodType("G@.", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(duration0, dateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.minusMonths(3244);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MONTH_INDEX = 1963;
      // Undeclared exception!
      try { 
        period0.minusMonths(719527);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      Duration duration0 = weeks0.toStandardDuration();
      Period period0 = duration0.toPeriod();
      PeriodType periodType0 = PeriodType.yearDay();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.minusMinutes((-2963));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MINUTE_INDEX = 5466;
      // Undeclared exception!
      try { 
        period0.minusMinutes((-1922));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Period period0 = Period.hours(4023);
      PeriodType.MILLI_INDEX = 2000;
      // Undeclared exception!
      try { 
        period0.minusMillis((-563));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Duration duration0 = Duration.standardHours(10000L);
      PeriodType periodType0 = PeriodType.days();
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period0.minusHours((-577));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Period period0 = Period.hours(20587500);
      PeriodType.HOUR_INDEX = (-1);
      // Undeclared exception!
      try { 
        period0.ZERO.minusHours(20587500);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Period period0 = new Period(Integer.MIN_VALUE, (-1741), 6, (-2));
      // Undeclared exception!
      try { 
        period0.minusHours(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Years years0 = Years.ZERO;
      PeriodType periodType0 = years0.getPeriodType();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Period period0 = new Period(3378L, periodType0, (Chronology) buddhistChronology0);
      // Undeclared exception!
      try { 
        period0.minusDays(115);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(4, 4, 4);
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      PeriodType.DAY_INDEX = 1907;
      // Undeclared exception!
      try { 
        period0.minusDays(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      Period period0 = new Period(0L, periodType0);
      Months months0 = Months.ONE;
      // Undeclared exception!
      try { 
        period0.minus(months0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Duration duration0 = Duration.millis((-1156L));
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      durationFieldTypeArray0[0] = durationFieldType0;
      Months months0 = Months.SEVEN;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period0.minus(months0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Period period0 = Period.years(8);
      PeriodType.YEAR_INDEX = 8;
      // Undeclared exception!
      try { 
        period0.minus(period0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Period period0 = Period.years((-126));
      Weeks weeks0 = Weeks.MAX_VALUE;
      Period period1 = period0.minus(weeks0);
      // Undeclared exception!
      try { 
        period1.minus(weeks0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483647 + -2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Period period0 = Period.ZERO;
      PeriodType.WEEK_INDEX = 15271875;
      // Undeclared exception!
      try { 
        period0.getWeeks();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Period period0 = new Period(1205, (-2258), 1205, 1687);
      PeriodType.SECOND_INDEX = (-2258);
      // Undeclared exception!
      try { 
        period0.ZERO.getSeconds();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Period period0 = Period.hours((-1155));
      PeriodType.MONTH_INDEX = 67;
      // Undeclared exception!
      try { 
        period0.getMonths();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Period period0 = new Period(1290L);
      PeriodType.MINUTE_INDEX = (-2429);
      // Undeclared exception!
      try { 
        period0.ZERO.getMinutes();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Period period0 = Period.minutes((-505));
      PeriodType.MILLI_INDEX = (-505);
      // Undeclared exception!
      try { 
        period0.ZERO.getMillis();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Minutes minutes0 = Minutes.ZERO;
      Duration duration0 = minutes0.toStandardDuration();
      DateTime dateTime0 = new DateTime(785L);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      PeriodType periodType0 = new PeriodType("Minutes", durationFieldTypeArray0, (int[]) null);
      Period period0 = duration0.toPeriodTo((ReadableInstant) dateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.getHours();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      PeriodType.HOUR_INDEX = 61;
      // Undeclared exception!
      try { 
        period0.getHours();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Period period0 = Period.minutes(1773);
      PeriodType.DAY_INDEX = (-497);
      // Undeclared exception!
      try { 
        period0.getDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1099L));
      MonthDay monthDay0 = MonthDay.fromDateFields(mockDate0);
      MonthDay monthDay1 = new MonthDay(monthDay0, (int[]) null);
      // Undeclared exception!
      try { 
        Period.fieldDifference(monthDay1, monthDay0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.minuteOfHour();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[3] = dateTimeFieldType1;
      int[] intArray0 = new int[3];
      Partial partial0 = new Partial(julianChronology0, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(partial0, partial0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      int[] intArray0 = new int[1];
      PeriodType periodType0 = new PeriodType((String) null, (DurationFieldType[]) null, intArray0);
      Period period0 = null;
      try {
        period0 = new Period(localDate0, localDate0, periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      DateTime dateTime0 = new DateTime((Object) null, (DateTimeZone) null);
      Period period0 = Period.years(100);
      DateTime dateTime1 = dateTime0.minus((ReadablePeriod) period0);
      MutableInterval mutableInterval0 = new MutableInterval();
      Weeks weeks0 = Weeks.weeksIn(mutableInterval0);
      Seconds seconds0 = weeks0.toStandardSeconds();
      PeriodType periodType0 = seconds0.getPeriodType();
      Period period1 = null;
      try {
        period1 = new Period(dateTime1, dateTime0, periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 3155760000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Period period0 = Period.years((-4275));
      Duration duration0 = period0.toDurationTo((ReadableInstant) null);
      PeriodType periodType0 = PeriodType.minutes();
      Period period1 = null;
      try {
        period1 = new Period((ReadableInstant) null, duration0, periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -2248433280
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Period period0 = Period.days(963);
      Duration duration0 = period0.toDurationTo((ReadableInstant) null);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      PeriodType periodType0 = new PeriodType("d|.?frZ;pE4N/Lh_lT", durationFieldTypeArray0, (int[]) null);
      Period period1 = null;
      try {
        period1 = new Period(duration0, (ReadableInstant) null, periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Period period0 = Period.weeks(25734375);
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 25734375, (Chronology) copticChronology0);
      Duration duration0 = period0.toDurationFrom(mutableDateTime0);
      Period period1 = null;
      try {
        period1 = new Period(duration0, mutableDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The subtrahend instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Period period0 = null;
      try {
        period0 = new Period("The provider doesn't have any available ids", (PeriodType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"The provider doesn't have any av...\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Object object0 = new Object();
      GJChronology gJChronology0 = GJChronology.getInstance();
      Period period0 = null;
      try {
        period0 = new Period(object0, gJChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Object object0 = new Object();
      Period period0 = null;
      try {
        period0 = new Period(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      Period period0 = null;
      try {
        period0 = new Period(30617280288L, periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 30617280288
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      Period period0 = null;
      try {
        period0 = new Period((-2195L), (-9223372036854775808L), periodType0, iSOChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -292275055 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      Period period0 = null;
      try {
        period0 = new Period((-2195L), (-9223372036854775808L), periodType0, iSOChronology0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -2562047788015
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int[] intArray0 = new int[8];
      PeriodType periodType0 = new PeriodType((String) null, (DurationFieldType[]) null, intArray0);
      Period period0 = null;
      try {
        period0 = new Period(0L, 0L, periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Period period0 = null;
      try {
        period0 = new Period(1000000000000000000L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 277777777777
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      Period period0 = null;
      try {
        period0 = new Period(3, 0, 5, 0, 2, 0, 0, 0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'hours'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      Duration duration0 = weeks0.toStandardDuration();
      Period period0 = duration0.toPeriod();
      Period period1 = period0.minusYears((-2963));
      PeriodType periodType0 = PeriodType.yearDay();
      Period period2 = period1.normalizedStandard(periodType0);
      assertFalse(period2.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Period period0 = Period.weeks(139);
      Period period1 = period0.ZERO.multipliedBy(1314);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Period period0 = Period.months(0);
      Period period1 = period0.multipliedBy(1887);
      assertTrue(period1.equals((Object)period0));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Period period0 = Period.minutes(1256);
      Period period1 = period0.plusMillis(28);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Period period0 = Period.years(8);
      Period period1 = period0.ZERO.plusMinutes(8);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Period period0 = new Period(31, 31, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 31);
      // Undeclared exception!
      try { 
        period0.plusHours(1073741824);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 1073741824 + 1073741824
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusWeeks(12825000);
      // Undeclared exception!
      try { 
        period1.toStandardMinutes();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 129276000000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Period period0 = Period.weeks(15271875);
      Period period1 = period0.plusMonths(23118750);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDay();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      Period period0 = new Period((Object) null, periodType0, copticChronology0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Period period0 = Period.weeks(15271875);
      int int0 = period0.getWeeks();
      assertEquals(15271875, int0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Period period0 = Period.hours((-2495));
      int int0 = period0.getYears();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Period period0 = new Period(1205, (-2258), 1205, 1687);
      int int0 = period0.ZERO.getSeconds();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      Period period0 = new Period((Object) null, periodType0);
      Period period1 = period0.plusDays(4);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      int int0 = period0.getDays();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Period period0 = new Period(35, 35, 35, (-192));
      int int0 = period0.getMinutes();
      assertEquals(35, int0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      PeriodFormatter periodFormatter0 = ISOPeriodFormat.standard();
      // Undeclared exception!
      try { 
        Period.parse("", periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      int int0 = period0.getMonths();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0, 1);
      LocalTime localTime0 = new LocalTime(0L, (Chronology) gregorianChronology0);
      Period period0 = new Period(localTime0, localTime0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-1005L));
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) null);
      LocalDate localDate0 = new LocalDate((-557L), (Chronology) gJChronology0);
      LocalTime localTime0 = new LocalTime((Chronology) gJChronology0);
      DateTime dateTime0 = localDate0.toDateTime(localTime0, (DateTimeZone) fixedDateTimeZone0);
      MutableDateTime mutableDateTime0 = dateTime0.toMutableDateTime((DateTimeZone) fixedDateTimeZone0);
      Period period0 = duration0.toPeriodTo((ReadableInstant) mutableDateTime0);
      PeriodType periodType0 = PeriodType.yearWeekDay();
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Period period0 = Period.months((-161));
      Period period1 = period0.normalizedStandard();
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Period period0 = Period.millis((-1346));
      Period period1 = period0.plusYears((-2));
      Period period2 = period1.normalizedStandard();
      assertNotSame(period1, period2);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTime dateTime0 = DateTime.now((Chronology) buddhistChronology0);
      PeriodType periodType0 = PeriodType.months();
      Period period0 = new Period(dateTime0, dateTime0, periodType0);
      Period period1 = period0.multipliedBy(1);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Period period0 = Period.days(0);
      Period period1 = period0.minus((ReadablePeriod) null);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.ZERO.plusMillis(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Period period0 = Period.hours(0);
      Period period1 = period0.plusSeconds(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(168L);
      Period period0 = duration0.toPeriod();
      Period period1 = period0.plusMinutes(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Period period0 = Period.minutes(1256);
      Period period1 = period0.plusHours(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.plusDays(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Period period0 = Period.minutes(0);
      Period period1 = period0.plusWeeks(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Period period0 = Period.minutes(0);
      Period period1 = period0.plusMonths(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Period period0 = Period.months((-161));
      Period period1 = period0.plusYears(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Period period0 = Period.minutes(1773);
      Period period1 = period0.plus((ReadablePeriod) null);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Period period0 = new Period(23034375, 23034375, 23034375, 23034375);
      Years years0 = Years.MAX_VALUE;
      Period period1 = period0.plus(years0);
      DurationFieldType durationFieldType0 = years0.getFieldType();
      // Undeclared exception!
      try { 
        period1.withFieldAdded(durationFieldType0, 6);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 6
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Period period0 = Period.minutes(0);
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      Period period1 = period0.withFieldAdded(durationFieldType0, 0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Period period0 = Period.hours((-1040));
      // Undeclared exception!
      try { 
        period0.withFieldAdded((DurationFieldType) null, 1233);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Period period0 = Period.months(0);
      // Undeclared exception!
      try { 
        period0.withField((DurationFieldType) null, 1887);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      DurationFieldType durationFieldType0 = DurationFieldType.MONTHS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[2] = durationFieldTypeArray0[1];
      durationFieldTypeArray0[3] = durationFieldTypeArray0[1];
      PeriodType periodType0 = new PeriodType("./X'#]k^pSV/C[6a", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(1882L, periodType0);
      Period period1 = period0.withField(durationFieldTypeArray0[0], 556);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTime dateTime0 = DateTime.now((Chronology) buddhistChronology0);
      PeriodType periodType0 = PeriodType.months();
      Period period0 = new Period(dateTime0, dateTime0, periodType0);
      Period period1 = period0.withFields((ReadablePeriod) null);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Period period0 = Period.minutes((-447));
      Minutes minutes0 = Minutes.MAX_VALUE;
      Period period1 = period0.withFields(minutes0);
      // Undeclared exception!
      try { 
        period1.minusMinutes((-1050));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 1050
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTime dateTime0 = DateTime.now((Chronology) buddhistChronology0);
      PeriodType periodType0 = PeriodType.months();
      Period period0 = new Period(dateTime0, dateTime0, periodType0);
      Period period1 = period0.withPeriodType(periodType0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      int[] intArray0 = new int[3];
      Partial partial0 = new Partial(julianChronology0, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(partial0, partial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not have overlapping fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((DateTimeZone) null);
      MonthDay monthDay0 = new MonthDay((long) 1);
      // Undeclared exception!
      try { 
        Period.fieldDifference(yearMonth0, monthDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      LocalDate localDate0 = new LocalDate((-557L), (Chronology) gJChronology0);
      LocalTime localTime0 = new LocalTime((Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(localDate0, localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      // Undeclared exception!
      try { 
        Period.fieldDifference(localDate0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.fieldDifference((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period(0L, periodType0);
      Period period1 = period0.withYears(1963);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      // Undeclared exception!
      try { 
        period0.minusWeeks(58);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      DurationFieldType durationFieldType0 = DurationFieldType.MONTHS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[3] = durationFieldTypeArray0[1];
      PeriodType periodType0 = new PeriodType("./X'#]k^pSV/C[6a", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(1882L, periodType0);
      // Undeclared exception!
      try { 
        period0.toStandardSeconds();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(4, 4, 4);
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      Period period1 = period0.minusDays(4);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Period period0 = Period.years(1320);
      // Undeclared exception!
      try { 
        period0.toStandardDuration();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Duration as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      Period period0 = new Period(0L, (Chronology) islamicChronology0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Object object0 = new Object();
      PeriodType periodType0 = PeriodType.months();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      Period period0 = null;
      try {
        period0 = new Period(object0, periodType0, islamicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-1005L));
      Period period0 = new Period((ReadableInstant) null, duration0);
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Hours as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      PeriodType periodType0 = PeriodType.yearWeekDay();
      Period period0 = null;
      try {
        period0 = new Period(localDate0, (ReadablePartial) null, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Period period0 = new Period((Object) null);
      Period period1 = period0.withMonths((-1));
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Period period0 = new Period(1323L, 1323L);
      Seconds seconds0 = Seconds.MAX_VALUE;
      PeriodType periodType0 = seconds0.getPeriodType();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.minusMillis(292272994);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) gJChronology0);
      DateTime dateTime0 = localDateTime0.toDateTime((DateTimeZone) fixedDateTimeZone0);
      Period period0 = new Period(dateTime0, dateTime0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      DurationFieldType durationFieldType0 = DurationFieldType.MONTHS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldType0;
      durationFieldTypeArray0[3] = durationFieldTypeArray0[1];
      PeriodType periodType0 = new PeriodType("./X'#]k^pSV/C[6a", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(1882L, periodType0);
      // Undeclared exception!
      try { 
        period0.toStandardWeeks();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Period period0 = new Period(1326L);
      Hours hours0 = period0.toStandardHours();
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Instant instant0 = new Instant(10800000L);
      Duration duration0 = new Duration(10800000L, 0L);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[9];
      DurationFieldType durationFieldType0 = DurationFieldType.SECONDS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldType0;
      durationFieldTypeArray0[3] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[4] = durationFieldType0;
      durationFieldTypeArray0[5] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[6] = durationFieldType0;
      durationFieldTypeArray0[7] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[8] = durationFieldTypeArray0[2];
      PeriodType periodType0 = new PeriodType("O4;%N9R`Sh]aW", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(instant0, duration0, periodType0);
      // Undeclared exception!
      try { 
        period0.minusHours(14);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Period period0 = Period.minutes((-505));
      int int0 = period0.ZERO.getMillis();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Period period0 = new Period();
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      Period period0 = new Period(0L, (-3820L), periodType0, iSOChronology0);
      Period period1 = period0.toPeriod();
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      Period period0 = new Period((-703L), 168L, julianChronology0);
      Weeks weeks0 = Weeks.MIN_VALUE;
      Period period1 = period0.withFields(weeks0);
      // Undeclared exception!
      try { 
        period1.minusWeeks(1938);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -1938
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Period period0 = new Period(23034375, 23034375, 23034375, 23034375);
      Period period1 = period0.withMillis((-2599));
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      Days days0 = period0.toStandardDays();
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Period period0 = Period.seconds((-866));
      Period period1 = period0.normalizedStandard();
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      int int0 = period0.getHours();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Period period0 = new Period((-128), (-128), (-128), (-2920), 5, (-128), 5, (-171), (PeriodType) null);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((-453L), 0L, periodType0);
      // Undeclared exception!
      try { 
        period0.minusYears(841);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Period period0 = new Period((Object) null, gJChronology0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse("M4Otlf8`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"M4Otlf8`\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Minutes minutes0 = Minutes.ZERO;
      Duration duration0 = minutes0.toStandardDuration();
      DateTime dateTime0 = new DateTime(785L);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      PeriodType periodType0 = new PeriodType("Minutes", durationFieldTypeArray0, (int[]) null);
      Period period0 = duration0.toPeriodTo((ReadableInstant) dateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.withSeconds(3804);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Period period0 = new Period(1072, 3, 711, 1072, 0, 1072, 711, 1072);
      Period period1 = period0.withWeeks(0);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Period period0 = Period.years(1919);
      Period period1 = period0.withHours((-1780));
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Period period0 = Period.hours(4023);
      Period period1 = period0.minusMillis((-563));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Period period0 = new Period(1290L);
      Period period1 = period0.withMinutes((-54));
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(4, 4, 4);
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      Period period1 = period0.withDays(9);
      assertFalse(period1.equals((Object)period0));
  }
}
