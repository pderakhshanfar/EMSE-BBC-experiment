/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 03:53:12 GMT 2021
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.LimitChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Period_ESTest extends Period_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Period period0 = new Period((-1116L));
      DurationFieldType durationFieldType0 = DurationFieldType.MONTHS_TYPE;
      Period period1 = period0.withField(durationFieldType0, (-607));
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      // Undeclared exception!
      try { 
        period1.normalizedStandard(periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Period period0 = new Period();
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      Period period1 = period0.withField(durationFieldType0, (-1848));
      // Undeclared exception!
      try { 
        period1.toStandardSeconds();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Seconds as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Period period0 = new Period((-2102L), (-2102L));
      Period period1 = period0.withWeeks(1560);
      Duration duration0 = period1.toStandardDuration();
      assertEquals(943488000L, duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Period period0 = Period.days(2409);
      Duration duration0 = period0.toStandardDuration();
      assertEquals(208137600000L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Period period0 = Period.seconds((-2908));
      Duration duration0 = period0.toStandardDuration();
      assertEquals((-2908L), duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Period period0 = Period.hours((-2713));
      Period period1 = period0.withMinutes((-2713));
      Seconds seconds0 = period1.toStandardSeconds();
      assertEquals((-9929580), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Period period0 = Period.days((-2908));
      Period period1 = period0.normalizedStandard();
      Minutes minutes0 = period1.toStandardMinutes();
      assertEquals((-4187520), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Duration duration0 = Duration.millis((-662));
      Period period0 = duration0.toPeriodFrom((ReadableInstant) null);
      Period period1 = period0.minusMinutes((-1153));
      Period period2 = period1.normalizedStandard();
      Minutes minutes0 = period2.toStandardMinutes();
      assertEquals(1152, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Period period0 = Period.minutes(2);
      Hours hours0 = period0.toStandardHours();
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.withHours(2502);
      Days days0 = period1.toStandardDays();
      assertEquals(104, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Period period0 = Period.days(4);
      DurationFieldType durationFieldType0 = DurationFieldType.MINUTES_TYPE;
      Period period1 = period0.withField(durationFieldType0, 4);
      Days days0 = period1.toStandardDays();
      assertEquals(4, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Period period0 = Period.days(4);
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(1, weeks0.size());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Period period0 = new Period(4, 4, 4, 4);
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      PeriodType periodType0 = PeriodType.days();
      Period period0 = new Period(1L, periodType0, (Chronology) copticChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      // Undeclared exception!
      try { 
        period0.withFieldAdded(durationFieldType0, (-2130));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'eras'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(4);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      LocalDate localDate0 = new LocalDate(0L, (Chronology) julianChronology0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(localDate0, localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Period period0 = Period.days(217);
      Period period1 = new Period(period0);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Instant instant0 = new Instant();
      Duration duration0 = Duration.ZERO;
      Period period0 = new Period(instant0, duration0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(10000000L);
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      Weeks weeks0 = Weeks.standardWeeksIn(period0);
      Duration duration0 = weeks0.toStandardDuration();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      MutableDateTime mutableDateTime0 = MutableDateTime.now(dateTimeZone0);
      Period period1 = new Period(duration0, mutableDateTime0);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Period period0 = Period.days(4);
      Period period1 = period0.withYears(0);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Period period0 = Period.hours(3488);
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(20, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Period period0 = Period.hours((-3794));
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals((-22), weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Period period0 = new Period((-651L), (Chronology) buddhistChronology0);
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Period period0 = Period.weeks(1654);
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(1000339200, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Period period0 = Period.days((-2908));
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals((-251251200), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Period period0 = new Period((-2102L), (-2102L));
      Period period1 = period0.withWeeks(1560);
      Hours hours0 = period1.toStandardHours();
      assertEquals(262080, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Period period0 = Period.days((-2908));
      Hours hours0 = period0.toStandardHours();
      assertEquals((-69792), hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.withHours(2502);
      Duration duration0 = period1.toStandardDuration();
      assertEquals(9007200000L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Period period0 = Period.hours((-2713));
      Period period1 = period0.minus(period0);
      PeriodType periodType0 = PeriodType.time();
      Period period2 = period1.normalizedStandard(periodType0);
      Duration duration0 = period2.toStandardDuration();
      assertFalse(period1.equals((Object)period0));
      assertEquals(0L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Duration duration0 = Duration.millis((-662));
      Period period0 = duration0.toPeriodFrom((ReadableInstant) null);
      Period period1 = period0.minusMinutes((-1153));
      Duration duration1 = period1.toStandardDuration();
      assertEquals(69179L, duration1.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Period period0 = Period.minutes((-2151));
      Duration duration0 = period0.toStandardDuration();
      assertEquals((-129060000L), duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Period period0 = new Period((-1104L), (PeriodType) null, (Chronology) null);
      Days days0 = period0.toStandardDays();
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Period period0 = Period.days((-2361));
      Days days0 = period0.toStandardDays();
      assertEquals((-2361), days0.getDays());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(770).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      Period period0 = Period.parse("R", periodFormatter0);
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Period period0 = Period.months(7);
      Period period1 = period0.minusWeeks(7);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Period period0 = Period.days(2);
      Years years0 = Years.MAX_VALUE;
      DurationFieldType durationFieldType0 = years0.getFieldType();
      Period period1 = period0.withFieldAdded(durationFieldType0, 200);
      int int0 = period1.getYears();
      assertEquals(200, int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = new MutableDateTime(86400L, (Chronology) copticChronology0);
      Period period0 = new Period(mutableDateTime0, mutableDateTime0);
      Period period1 = period0.minusYears(2803);
      int int0 = period1.getYears();
      assertEquals((-2803), int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Period period0 = Period.days(352831696);
      int int0 = period0.getWeeks();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Period period0 = new Period((-547), (-2684), 1, (-2684), (-1331), 1, 2671, 719527);
      int int0 = period0.getWeeks();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Period period0 = new Period((-296), (-1003), (-296), (-1003));
      Period period1 = period0.negated();
      int int0 = period1.getSeconds();
      assertEquals(296, int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Period period0 = new Period((-5159L));
      int int0 = period0.getSeconds();
      assertEquals((-5), int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Period period0 = new Period(290L, 290L);
      int int0 = period0.getMonths();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Period period0 = new Period((-209), (-688), (-2927), (-2927), (-688), (-688), (-209), 2);
      int int0 = period0.getMonths();
      assertEquals((-688), int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.withMinutes(2);
      int int0 = period1.getMinutes();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Period period0 = Period.minutes((-2151));
      int int0 = period0.getMinutes();
      assertEquals((-2151), int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Period period0 = Period.hours((-2713));
      int int0 = period0.ZERO.getMillis();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Period period0 = new Period((-651L), (Chronology) buddhistChronology0);
      int int0 = period0.getMillis();
      assertEquals((-651), int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Period period0 = new Period(25, 221, 221, 221);
      int int0 = period0.getHours();
      assertEquals(25, int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      Duration duration0 = seconds0.toStandardDuration();
      Period period0 = duration0.toPeriodTo((ReadableInstant) null);
      int int0 = period0.getHours();
      assertEquals((-3), int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Period period0 = new Period(10080, 10080, 1422, 816, 10080, 0, 816, 0);
      int int0 = period0.getDays();
      assertEquals(816, int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Period period0 = Period.days((-2908));
      int int0 = period0.getDays();
      assertEquals((-2908), int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Instant instant0 = new Instant();
      Duration duration0 = Duration.ZERO;
      PeriodType periodType0 = PeriodType.dayTime();
      Period period0 = new Period(duration0, instant0, periodType0);
      // Undeclared exception!
      try { 
        period0.withYears(3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Period period0 = Period.ZERO;
      PeriodType.YEAR_INDEX = 9;
      // Undeclared exception!
      try { 
        period0.withYears((-2850));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Duration duration0 = Duration.standardDays(0L);
      PeriodType periodType0 = PeriodType.millis();
      Period period0 = duration0.toPeriodTo((ReadableInstant) null, periodType0);
      // Undeclared exception!
      try { 
        period0.withWeeks((-6));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Period period0 = Period.months((-3309));
      PeriodType.WEEK_INDEX = (-1126);
      // Undeclared exception!
      try { 
        period0.withWeeks((byte)1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1126
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Period period0 = Period.days((-3794));
      PeriodType periodType0 = PeriodType.yearDay();
      Period period1 = period0.withPeriodType(periodType0);
      // Undeclared exception!
      try { 
        period1.withSeconds(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      Period period0 = new Period(86400L, 86400L, periodType0);
      PeriodType.SECOND_INDEX = 3189;
      // Undeclared exception!
      try { 
        period0.withSeconds((-4978125));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3189
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Period period0 = new Period();
      PeriodType periodType0 = new PeriodType("@.6", (DurationFieldType[]) null, (int[]) null);
      // Undeclared exception!
      try { 
        period0.withPeriodType(periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Period period0 = Period.days(4);
      Hours hours0 = Hours.ZERO;
      Seconds seconds0 = hours0.toStandardSeconds();
      PeriodType periodType0 = seconds0.getPeriodType();
      // Undeclared exception!
      try { 
        period0.withPeriodType(periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'days'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Minutes minutes0 = Minutes.TWO;
      Duration duration0 = minutes0.toStandardDuration();
      PeriodType periodType0 = PeriodType.time();
      Period period0 = duration0.toPeriodFrom((ReadableInstant) null, periodType0);
      // Undeclared exception!
      try { 
        period0.withMonths((-2771));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(168L);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      Hours hours0 = Hours.SIX;
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      int[] intArray0 = new int[6];
      intArray0[1] = 355;
      PeriodType periodType0 = new PeriodType("wsX=dcNwo", durationFieldTypeArray0, intArray0);
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period0.withMonths((-4));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 355
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PeriodType periodType0 = PeriodType.time();
      PeriodType periodType1 = periodType0.withMinutesRemoved();
      Period period0 = new Period(0L, 0, periodType1);
      // Undeclared exception!
      try { 
        period0.withMinutes(2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      PeriodFormatter periodFormatter1 = periodFormatter0.withParseType(periodType0);
      Period period0 = periodFormatter1.parsePeriod("");
      // Undeclared exception!
      try { 
        period0.withMinutes(12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      PeriodType.MINUTE_INDEX = (-808);
      Period period0 = new Period((ReadableInstant) null, (ReadableInstant) null, periodType0);
      // Undeclared exception!
      try { 
        period0.withMinutes((-1007));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -808
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Period period0 = Period.ZERO;
      PeriodType periodType0 = PeriodType.hours();
      Period period1 = period0.withPeriodType(periodType0);
      Period period2 = period1.negated();
      // Undeclared exception!
      try { 
        period2.withMillis(Integer.MAX_VALUE);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(1000L, 0L, periodType0);
      // Undeclared exception!
      try { 
        period0.withMillis(112);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Period period0 = new Period(853, 853, (-3889), 853);
      PeriodType.MILLI_INDEX = 853;
      // Undeclared exception!
      try { 
        period0.withMillis(853);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 853
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      Period period0 = new Period(0L, periodType0, (Chronology) null);
      // Undeclared exception!
      try { 
        period0.withHours(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      int[] intArray0 = new int[0];
      PeriodType periodType0 = new PeriodType("Cannot convert to ", durationFieldTypeArray0, intArray0);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Period period0 = new Period((-1324L), (-1324L), periodType0, gJChronology0);
      // Undeclared exception!
      try { 
        period0.withHours(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Seconds seconds0 = Seconds.TWO;
      Duration duration0 = seconds0.toStandardDuration();
      PeriodType periodType0 = PeriodType.dayTime();
      PeriodType periodType1 = periodType0.withSecondsRemoved();
      Period period0 = duration0.toPeriod(periodType1);
      // Undeclared exception!
      try { 
        period0.withFields(seconds0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'seconds'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds((-93L));
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(7593750);
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      PeriodType periodType0 = PeriodType.hours();
      Period period0 = duration0.toPeriodFrom((ReadableInstant) mutableDateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.withDays(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Period period0 = new Period(0L, (Chronology) null);
      PeriodType.DAY_INDEX = 4484;
      // Undeclared exception!
      try { 
        period0.withDays((-134));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4484
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Period period0 = new Period(4, 4, 4, 4, 4, 4, 4, 4);
      // Undeclared exception!
      try { 
        period0.toStandardWeeks();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Weeks as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Period period0 = new Period();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("A R+9,?m<&%,dW@M", durationFieldTypeArray0, (int[]) null);
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.toStandardWeeks();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Period period0 = Period.weeks(352831696);
      PeriodType.SECOND_INDEX = (-1997);
      // Undeclared exception!
      try { 
        period0.ZERO.toStandardWeeks();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.plusMonths((-1286));
      // Undeclared exception!
      try { 
        period1.toStandardSeconds();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Seconds as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Period period0 = Period.weeks(2);
      PeriodType.DAY_INDEX = 98;
      // Undeclared exception!
      try { 
        period0.toStandardSeconds();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Hours hours0 = Hours.MAX_VALUE;
      Duration duration0 = hours0.toStandardDuration();
      Instant instant0 = new Instant(0L);
      Period period0 = duration0.toPeriodFrom((ReadableInstant) instant0);
      // Undeclared exception!
      try { 
        period0.toStandardMinutes();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Minutes as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Period period0 = new Period(0L);
      PeriodType.DAY_INDEX = 121;
      // Undeclared exception!
      try { 
        period0.ZERO.toStandardMinutes();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Period period0 = Period.days(352831696);
      // Undeclared exception!
      try { 
        period0.toStandardMinutes();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 508077642240
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      PeriodFormatter periodFormatter1 = periodFormatter0.withParseType(periodType0);
      Period period0 = periodFormatter1.parsePeriod("");
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      PeriodType.HOUR_INDEX = 2278;
      Period period0 = new Period((-45L), (-3221L), periodType0);
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      Period period0 = days0.toPeriod();
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 51539607528
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      int[] intArray0 = new int[3];
      PeriodType periodType0 = new PeriodType("Hours", durationFieldTypeArray0, intArray0);
      Period period0 = new Period(2069L, 2069L, periodType0);
      // Undeclared exception!
      try { 
        period0.toStandardDuration();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Period period0 = new Period(37, 322, (-636), (-4263), (-404), (-4263), (-3794), (-823));
      // Undeclared exception!
      try { 
        period0.toStandardDays();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Days as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("org.joda.time.base.BaseDateTime", durationFieldTypeArray0, (int[]) null);
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) null);
      Period period0 = new Period(604800000L, 60L, periodType0, copticChronology0);
      // Undeclared exception!
      try { 
        period0.toStandardDays();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Period period0 = Period.hours((-1263));
      PeriodType.HOUR_INDEX = 12740625;
      // Undeclared exception!
      try { 
        period0.toStandardDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Period period0 = Period.hours((-2713));
      PeriodType periodType0 = PeriodType.time();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.plusYears(122);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      PeriodType periodType0 = new PeriodType("The calculation caused an overflow: ", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((ReadableInstant) null, (ReadableDuration) null, periodType0);
      // Undeclared exception!
      try { 
        period0.plusYears((-2320));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      Days days0 = Days.MAX_VALUE;
      DurationFieldType durationFieldType0 = days0.getFieldType();
      durationFieldTypeArray0[0] = durationFieldType0;
      int[] intArray0 = new int[6];
      intArray0[0] = (-744);
      PeriodType periodType0 = new PeriodType("Z1u-DLG8 y", durationFieldTypeArray0, intArray0);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      Period period0 = new Period(0L, (-299L), periodType0, gregorianChronology0);
      // Undeclared exception!
      try { 
        period0.plusYears((-78));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      // Undeclared exception!
      try { 
        period0.plusWeeks((-1880));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Period period0 = Period.years(236548278);
      PeriodType.WEEK_INDEX = 236548278;
      // Undeclared exception!
      try { 
        period0.plusWeeks(3541);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Period period0 = new Period(10L, periodType0, (Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        period0.plusSeconds(3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.SECOND_INDEX = 2331;
      // Undeclared exception!
      try { 
        period0.ZERO.plusSeconds(1102);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("[{G[8?2),", durationFieldTypeArray0, (int[]) null);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      Period period0 = new Period(3600000L, periodType0, (Chronology) islamicChronology0);
      // Undeclared exception!
      try { 
        period0.plusMonths(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Period period0 = new Period(65, 65, 752, 65, (-1021), (-1534), 1968, 752);
      PeriodType.MONTH_INDEX = 665;
      // Undeclared exception!
      try { 
        period0.plusMonths(3712);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Period period0 = Period.millis(971);
      Period period1 = period0.minusMonths(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        period1.plusMonths(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      Period period0 = new Period((Object) null, periodType0, (Chronology) null);
      // Undeclared exception!
      try { 
        period0.plusMinutes(2382);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Duration duration0 = Duration.millis(2551440384L);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[3] = durationFieldTypeArray0[0];
      PeriodType periodType0 = new PeriodType("o1xe2fTGb", durationFieldTypeArray0, (int[]) null);
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period0.plusMinutes(4800);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MINUTE_INDEX = 247;
      // Undeclared exception!
      try { 
        period0.plusMinutes(1416);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      Instant instant0 = new Instant();
      Hours hours0 = Hours.hours(1103);
      Duration duration0 = hours0.toStandardDuration();
      Period period0 = new Period(localDate0, localDate0);
      Minutes minutes0 = period0.toStandardMinutes();
      PeriodType periodType0 = minutes0.getPeriodType();
      Period period1 = new Period(instant0, duration0, periodType0);
      // Undeclared exception!
      try { 
        period1.plusMillis(3620);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Period period0 = Period.weeks(352831696);
      PeriodType.MILLI_INDEX = 352831696;
      // Undeclared exception!
      try { 
        period0.plusMillis(17887500);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Period period0 = Period.days(121);
      PeriodType.HOUR_INDEX = (-1018);
      // Undeclared exception!
      try { 
        period0.ZERO.plusHours(4949);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      Period period0 = new Period((long) 4, periodType0, (Chronology) null);
      // Undeclared exception!
      try { 
        period0.plusDays(4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      DateTime dateTime0 = localTime0.toDateTimeToday();
      Duration duration0 = Duration.standardDays(0L);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      int[] intArray0 = new int[0];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(dateTime0, duration0, periodType0);
      Period period0 = mutablePeriod0.toPeriod();
      // Undeclared exception!
      try { 
        period0.plusDays(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      Period period0 = days0.toPeriod();
      // Undeclared exception!
      try { 
        period0.plusDays(70);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 70
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      Minutes minutes0 = Minutes.TWO;
      // Undeclared exception!
      try { 
        period0.plus(minutes0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Period period0 = Period.millis((-39));
      Period period1 = period0.minusSeconds((-39));
      PeriodType.SECOND_INDEX = 139;
      // Undeclared exception!
      try { 
        period0.ZERO.plus(period1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Period period0 = new Period(663, (-1809), 4292, 180);
      Seconds seconds0 = Seconds.MAX_VALUE;
      // Undeclared exception!
      try { 
        period0.plus(seconds0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 4292 + 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse("-wXKA59yR4", (PeriodFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      // Undeclared exception!
      try { 
        Period.parse("R", periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"R\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Literal", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse("G*wTy");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"G*wTy\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Duration duration0 = Duration.millis(0L);
      Duration duration1 = duration0.withDurationAdded(86400000L, (-2691));
      Period period0 = duration1.toPeriodFrom((ReadableInstant) null);
      Seconds seconds0 = Seconds.ONE;
      PeriodType periodType0 = seconds0.getPeriodType();
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Period period0 = Period.ZERO;
      int[] intArray0 = new int[7];
      PeriodType periodType0 = new PeriodType("", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Period period0 = Period.weeks(2);
      PeriodType periodType0 = PeriodType.years();
      PeriodType.YEAR_INDEX = 32;
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.minusHours((-1293));
      PeriodType periodType0 = PeriodType.millis();
      // Undeclared exception!
      try { 
        period1.normalizedStandard(periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 4654800000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Period period0 = Period.ZERO;
      PeriodType.YEAR_INDEX = (-2289);
      // Undeclared exception!
      try { 
        period0.normalizedStandard();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      Period period0 = days0.toPeriod();
      // Undeclared exception!
      try { 
        period0.negated();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -2147483648 * -1
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Period period0 = Period.days(7678125);
      // Undeclared exception!
      try { 
        period0.multipliedBy(7678125);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: 7678125 * 7678125
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      PeriodType periodType0 = PeriodType.time();
      Period period0 = new Period((-1950L), (-2334L), periodType0);
      // Undeclared exception!
      try { 
        period0.minusYears(72);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.YEAR_INDEX = 2655;
      // Undeclared exception!
      try { 
        period0.minusYears(84);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      LocalDate localDate0 = new LocalDate(0L, (Chronology) julianChronology0);
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      // Undeclared exception!
      try { 
        period0.minusWeeks((-3889));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      int[] intArray0 = new int[4];
      intArray0[2] = (-468);
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, intArray0);
      Period period0 = new Period(0L, periodType0);
      // Undeclared exception!
      try { 
        period0.minusWeeks((-468));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Instant instant0 = new Instant();
      Duration duration0 = Duration.millis(130L);
      PeriodType periodType0 = PeriodType.yearDay();
      Period period0 = new Period(instant0, duration0, periodType0);
      // Undeclared exception!
      try { 
        period0.minusSeconds(2908);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("[{G[8?2),", durationFieldTypeArray0, (int[]) null);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      Period period0 = new Period(3600000L, periodType0, (Chronology) islamicChronology0);
      // Undeclared exception!
      try { 
        period0.minusSeconds(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.SECOND_INDEX = 1659;
      // Undeclared exception!
      try { 
        period0.ZERO.minusSeconds(25650000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Period period0 = new Period();
      PeriodType periodType0 = PeriodType.yearWeekDay();
      Period period1 = period0.withPeriodType(periodType0);
      // Undeclared exception!
      try { 
        period1.minusMonths(2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[8];
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      durationFieldTypeArray0[0] = durationFieldType0;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldType0;
      durationFieldTypeArray0[3] = durationFieldType0;
      durationFieldTypeArray0[4] = durationFieldType0;
      durationFieldTypeArray0[5] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[6] = durationFieldType0;
      durationFieldTypeArray0[7] = durationFieldTypeArray0[1];
      PeriodType periodType0 = new PeriodType(")=3Xx[uj>@(YV", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((-1076L), 0L, periodType0, islamicChronology0);
      // Undeclared exception!
      try { 
        period0.minusMonths(271);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      Period period0 = new Period(0L, periodType0);
      PeriodType.MONTH_INDEX = (-1140);
      // Undeclared exception!
      try { 
        period0.minusMonths((-1140));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      Period period1 = period0.plusMonths((-3590));
      // Undeclared exception!
      try { 
        period1.minusMonths(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -3590 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      Period period0 = new Period(0L, periodType0, (Chronology) null);
      // Undeclared exception!
      try { 
        period0.minusMinutes((-3353));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      PeriodFormatter periodFormatter1 = periodFormatter0.withParseType(periodType0);
      Period period0 = periodFormatter1.parsePeriod("");
      // Undeclared exception!
      try { 
        period0.minusMinutes(12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Period period0 = Period.hours((-1092));
      PeriodType.MINUTE_INDEX = 100;
      // Undeclared exception!
      try { 
        period0.minusMinutes((-2577));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Period period0 = Period.millis(654);
      Minutes minutes0 = Minutes.MIN_VALUE;
      Period period1 = period0.plus(minutes0);
      // Undeclared exception!
      try { 
        period1.minusMinutes(654);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -654
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      Period period0 = new Period(0L, periodType0, (Chronology) null);
      // Undeclared exception!
      try { 
        period0.minusMillis(2832);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Period period0 = Period.hours(1236);
      PeriodType.MILLI_INDEX = 53;
      // Undeclared exception!
      try { 
        period0.minusMillis(8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      // Undeclared exception!
      try { 
        period0.minusHours((-2325));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.HOUR_INDEX = 379;
      // Undeclared exception!
      try { 
        period0.minusHours(99);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      Period period0 = new Period(0L, periodType0, (Chronology) null);
      // Undeclared exception!
      try { 
        period0.minusDays((-6));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Period period0 = new Period((-1), (-354));
      Weeks weeks0 = period0.toStandardWeeks();
      Duration duration0 = weeks0.toStandardDuration();
      Instant instant0 = new Instant((long) 27);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      PeriodType periodType0 = new PeriodType("org.joda.time.base.AbstractPartial", durationFieldTypeArray0, (int[]) null);
      Period period1 = duration0.toPeriodFrom((ReadableInstant) instant0, periodType0);
      // Undeclared exception!
      try { 
        period1.minusDays((-26));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.DAY_INDEX = (-1051);
      // Undeclared exception!
      try { 
        period0.minusDays((-504));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      Period period0 = days0.toPeriod();
      // Undeclared exception!
      try { 
        period0.minusDays(999);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -999
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Period period0 = Period.weeks(2);
      PeriodType periodType0 = PeriodType.millis();
      Period period1 = new Period(0L, periodType0, (Chronology) null);
      // Undeclared exception!
      try { 
        period1.minus(period0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Period period0 = Period.weeks(4);
      PeriodType.WEEK_INDEX = (-665);
      // Undeclared exception!
      try { 
        period0.minus(period0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      Period period0 = days0.toPeriod();
      // Undeclared exception!
      try { 
        period0.minus(period0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Period period0 = Period.millis((-39));
      PeriodType.YEAR_INDEX = 1834;
      // Undeclared exception!
      try { 
        period0.ZERO.getYears();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.WEEK_INDEX = 41;
      // Undeclared exception!
      try { 
        period0.getWeeks();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Period period0 = new Period(836, 836, 836, 836);
      PeriodType.SECOND_INDEX = 9;
      // Undeclared exception!
      try { 
        period0.ZERO.getSeconds();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Period period0 = Period.seconds((-3410));
      PeriodType.MINUTE_INDEX = (-3410);
      // Undeclared exception!
      try { 
        period0.getMinutes();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Period period0 = Period.weeks(352831696);
      PeriodType.HOUR_INDEX = (-3410);
      // Undeclared exception!
      try { 
        period0.getHours();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("[{G[8?2),", durationFieldTypeArray0, (int[]) null);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      Period period0 = new Period(3600000L, periodType0, (Chronology) islamicChronology0);
      // Undeclared exception!
      try { 
        period0.getDays();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      DateTime dateTime1 = dateTime0.minusYears(2);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      LimitChronology limitChronology0 = LimitChronology.getInstance(islamicChronology0, dateTime1, dateTime0);
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) limitChronology0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(localDateTime0, localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant is above the supported maximum of 1435-04-13T20:21:21.320Z (IslamicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[8];
      Partial partial0 = new Partial((Chronology) null, dateTimeFieldTypeArray0, (int[]) null);
      // Undeclared exception!
      try { 
        Period.fieldDifference(partial0, partial0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      int[] intArray0 = new int[0];
      Partial partial0 = new Partial(julianChronology0, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(partial0, partial0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      DateTime dateTime0 = new DateTime(86400L);
      DateTime dateTime1 = dateTime0.withWeekyear(853);
      PeriodType periodType0 = PeriodType.millis();
      Period period0 = null;
      try {
        period0 = new Period(dateTime0, dateTime1, periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -35248953600000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Duration duration0 = new Duration((-478L), 0L);
      int[] intArray0 = new int[2];
      PeriodType periodType0 = new PeriodType("2st$:h", (DurationFieldType[]) null, intArray0);
      Period period0 = null;
      try {
        period0 = new Period((ReadableInstant) null, duration0, periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(4);
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      Weeks weeks0 = Weeks.MAX_VALUE;
      Duration duration0 = weeks0.toStandardDuration();
      PeriodType periodType0 = PeriodType.hours();
      Period period0 = null;
      try {
        period0 = new Period(mutableDateTime0, duration0, periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 360777252696
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Integer integer0 = new Integer(2150);
      Period period0 = null;
      try {
        period0 = new Period((Object) integer0, (PeriodType) null, (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Integer
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Object object0 = new Object();
      Period period0 = null;
      try {
        period0 = new Period(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int[] intArray0 = new int[5];
      PeriodType periodType0 = new PeriodType("C#f] kf[bG", (DurationFieldType[]) null, intArray0);
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      Period period0 = null;
      try {
        period0 = new Period(2795L, periodType0, (Chronology) iSOChronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      DurationFieldType durationFieldType0 = DurationFieldType.MINUTES_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[2] = durationFieldType0;
      durationFieldTypeArray0[3] = durationFieldTypeArray0[2];
      DurationFieldType durationFieldType1 = DurationFieldType.ERAS_TYPE;
      durationFieldTypeArray0[4] = durationFieldType1;
      int[] intArray0 = new int[2];
      PeriodType periodType0 = new PeriodType("wsv(cgYL2E", durationFieldTypeArray0, intArray0);
      Period period0 = null;
      try {
        period0 = new Period((-2169L), periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, 6);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(ethiopicChronology0);
      Period period0 = null;
      try {
        period0 = new Period(9223372036854775804L, (Chronology) lenientChronology0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 15250284452
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      Period period0 = null;
      try {
        period0 = new Period(2, 2, (-915), 1195, (-915), 2409, 2409, 2409, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'months'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.plusMonths((-1286));
      Period period2 = period1.multipliedBy(3189);
      assertNotSame(period2, period1);
      assertFalse(period2.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Period period0 = Period.days(6);
      Period period1 = period0.plusMillis(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusMillis((-1293));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Period period0 = Period.years(0);
      Period period1 = period0.plusSeconds(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusMinutes(1416);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      // Undeclared exception!
      try { 
        period0.plusHours(9);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Period period0 = new Period((-1104L), (PeriodType) null, (Chronology) null);
      Period period1 = period0.plusDays((-281));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Period period0 = new Period(1000, 2101, 2101, 3, 2101, (-115), 77, (-1511));
      // Undeclared exception!
      try { 
        period0.plusWeeks(Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2101 + 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Period period0 = new Period((-1104L), (PeriodType) null, (Chronology) null);
      Period period1 = period0.plusMonths(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Period period0 = new Period(10080, 10080, 1422, 816, 10080, 0, 816, 0);
      Period period1 = period0.plusYears(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Period period0 = new Period();
      int int0 = period0.getHours();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Period period0 = new Period(25734375, 25734375, (-3329), (-3329), 25734375, 3, 292272984, (-4387));
      int int0 = period0.getWeeks();
      assertEquals((-3329), int0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Period period0 = Period.hours((-3794));
      int int0 = period0.getYears();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Period period0 = new Period();
      int int0 = period0.ZERO.getSeconds();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Instant instant0 = new Instant(647L);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      DateTime dateTime0 = instant0.toDateTime(dateTimeZone0);
      PeriodType periodType0 = PeriodType.days();
      Period period0 = new Period((ReadableDuration) null, dateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.plusMonths(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      PeriodType periodType0 = PeriodType.dayTime();
      Period period0 = new Period((Object) null, periodType0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Period period0 = new Period();
      int int0 = period0.getDays();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalTime localTime0 = new LocalTime((Object) null, dateTimeZone0);
      Period period0 = new Period(localTime0, localTime0, (PeriodType) null);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Period period0 = Period.years(0);
      int int0 = period0.getMinutes();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null);
      // Undeclared exception!
      try { 
        Period.parse("", periodFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Period period0 = Period.months(368);
      int int0 = period0.getMonths();
      assertEquals(368, int0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(gregorianChronology0);
      Period period0 = new Period((Object) null, strictChronology0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Period period0 = new Period(2041L);
      int int0 = period0.getMillis();
      assertEquals(41, int0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Period period0 = new Period((-281), (-12), (-281), 1, 2, 2, (-281), 421, (PeriodType) null);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Period period0 = Period.weeks(2);
      PeriodType periodType0 = PeriodType.years();
      Period period1 = period0.plusYears(2409);
      period1.normalizedStandard(periodType0);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Period period0 = Period.months(7);
      PeriodType periodType0 = PeriodType.standard();
      Period period1 = period0.normalizedStandard(periodType0);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Period period0 = Period.years(376);
      // Undeclared exception!
      try { 
        period0.toStandardDuration();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Duration as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Period period0 = new Period((-547), (-2684), 1, (-2684), (-1331), 1, 2671, 719527);
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Hours as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Period period0 = Period.months((-3309));
      Period period1 = period0.ZERO.multipliedBy(3);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.minus((ReadablePeriod) null);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Period period0 = Period.years(0);
      Period period1 = period0.minusMillis(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Period period0 = new Period((-1104L), (PeriodType) null, (Chronology) null);
      Period period1 = period0.plusMinutes(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Period period0 = new Period((-547), (-2684), 1, (-2684), (-1331), 1, 2671, 719527);
      Period period1 = period0.plusHours(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Period period0 = new Period((-5159L));
      Period period1 = period0.plusDays(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(2640L, 2640L);
      Minutes minutes0 = Minutes.minutesIn(mutableInterval0);
      Duration duration0 = minutes0.toStandardDuration();
      PeriodType periodType0 = PeriodType.time();
      Period period0 = duration0.toPeriodFrom((ReadableInstant) null, periodType0);
      Period period1 = period0.plusWeeks(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Period period0 = Period.days(2);
      Period period1 = period0.plus((ReadablePeriod) null);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Period period0 = new Period((-1104L), (PeriodType) null, (Chronology) null);
      DurationFieldType durationFieldType0 = DurationFieldType.YEARS_TYPE;
      Period period1 = period0.ZERO.withFieldAdded(durationFieldType0, 0);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Period period0 = Period.ZERO;
      // Undeclared exception!
      try { 
        period0.withFieldAdded((DurationFieldType) null, 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Period period0 = Period.days((-2908));
      // Undeclared exception!
      try { 
        period0.withField((DurationFieldType) null, (-2435));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Period period0 = Period.minutes(2);
      Period period1 = period0.withFields((ReadablePeriod) null);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("[{G[8?2),", durationFieldTypeArray0, (int[]) null);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      Period period0 = new Period(3600000L, periodType0, (Chronology) islamicChronology0);
      Period period1 = period0.withPeriodType(periodType0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      int[] intArray0 = new int[8];
      Partial partial0 = new Partial(islamicChronology0, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(partial0, partial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not have overlapping fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(1037L);
      LocalDateTime localDateTime0 = LocalDateTime.now();
      // Undeclared exception!
      try { 
        Period.fieldDifference(localTime0, localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      Partial partial0 = new Partial(dateTimeFieldType0, 7);
      // Undeclared exception!
      try { 
        Period.fieldDifference(localDate0, partial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((long) 0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(localDateTime0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.fieldDifference((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("org.joda.time.base.BaseDateTime", durationFieldTypeArray0, (int[]) null);
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) null);
      Period period0 = new Period(604800000L, 60L, periodType0, copticChronology0);
      // Undeclared exception!
      try { 
        period0.withYears(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      PeriodType periodType0 = new PeriodType("A?*D{6-7hN,|Gx!l4", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(0, 0, periodType0, (Chronology) null);
      // Undeclared exception!
      try { 
        period0.minusWeeks(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      Period period0 = days0.toPeriod();
      // Undeclared exception!
      try { 
        period0.toStandardSeconds();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -185542587187200
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Period period0 = new Period((-1), (-354));
      Period period1 = period0.minusDays((-26));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Period period0 = null;
      try {
        period0 = new Period(100000000000000000L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 27777777777
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[8];
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      durationFieldTypeArray0[0] = durationFieldType0;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[2] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[3] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[4] = durationFieldType0;
      durationFieldTypeArray0[5] = durationFieldTypeArray0[1];
      durationFieldTypeArray0[6] = durationFieldType0;
      durationFieldTypeArray0[7] = durationFieldTypeArray0[0];
      PeriodType periodType0 = new PeriodType(")=3Xx[uj>@(YV", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((-1076L), 0L, periodType0, islamicChronology0);
      // Undeclared exception!
      try { 
        period0.normalizedStandard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(1000L, 0L, periodType0);
      // Undeclared exception!
      try { 
        period0.toStandardDuration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Period period0 = Period.months(222);
      PeriodType.DAY_INDEX = 222;
      // Undeclared exception!
      try { 
        period0.getDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-3010L));
      PeriodType periodType0 = PeriodType.millis();
      Period period0 = null;
      try {
        period0 = new Period(duration0, (ReadableInstant) null, periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -260064000000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, 6);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(ethiopicChronology0);
      Period period0 = null;
      try {
        period0 = new Period((-9223372036854775808L), (Chronology) lenientChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The minuend instant is below the supported minimum of 0001-01-01T00:00:00.000Z (EthiopicChronology[UTC,mdfw=6])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      PeriodType periodType0 = new PeriodType("The calculation caused an overflow: ", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((ReadableInstant) null, (ReadableDuration) null, periodType0);
      // Undeclared exception!
      try { 
        period0.toStandardMinutes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      int[] intArray0 = new int[0];
      PeriodType periodType0 = new PeriodType(" as this period contains months and months vary in length", (DurationFieldType[]) null, intArray0);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      Period period1 = null;
      try {
        period1 = new Period(period0, periodType0, julianChronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Period period0 = Period.days(8);
      PeriodType.MILLI_INDEX = 8;
      // Undeclared exception!
      try { 
        period0.getMillis();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(168L);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      Hours hours0 = Hours.SIX;
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      int[] intArray0 = new int[6];
      PeriodType periodType0 = new PeriodType("wsX=dcNwo", durationFieldTypeArray0, intArray0);
      Period period0 = duration0.toPeriod(periodType0);
      Period period1 = period0.withMonths((-4));
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) null, (ReadablePartial) null, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Duration duration0 = Duration.parse((String) null);
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      Period period0 = duration0.toPeriodTo((ReadableInstant) dateTime0);
      Seconds seconds0 = Seconds.MIN_VALUE;
      Period period1 = period0.withFields(seconds0);
      // Undeclared exception!
      try { 
        period1.minusSeconds(1881);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -1881
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Period period0 = Period.minutes(419);
      Weeks weeks0 = Weeks.MAX_VALUE;
      Period period1 = period0.minus(weeks0);
      // Undeclared exception!
      try { 
        period1.minusWeeks(419);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483647 + -419
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      Period period1 = period0.toPeriod();
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      Period period0 = new Period(15778800000L, 0L, gregorianChronology0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.withMillis(1000);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Period period0 = Period.weeks(352831696);
      // Undeclared exception!
      try { 
        period0.toStandardDays();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 2469821872
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Minutes minutes0 = Minutes.THREE;
      PeriodType periodType0 = minutes0.getPeriodType();
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      Period period0 = null;
      try {
        period0 = new Period((-9223372036854775808L), periodType0, (Chronology) iSOChronology0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -153722867280912
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      int[] intArray0 = new int[7];
      PeriodType periodType0 = new PeriodType("Converter[", (DurationFieldType[]) null, intArray0);
      Period period0 = null;
      try {
        period0 = new Period((-1), 7, 7, 7, 7, 20587500, 20587500, 7, periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      Period period0 = null;
      try {
        period0 = new Period(localDate0, iSOChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: org.joda.time.LocalDate
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = new DateTime();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0, 5);
      YearMonth yearMonth0 = new YearMonth(1551L, (Chronology) gJChronology0);
      Period period0 = new Period(yearMonth0, yearMonth0);
      Period period1 = period0.multipliedBy(1);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Period period0 = Period.parse("PT0S");
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Period period0 = Period.weeks(352831696);
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      Period period1 = null;
      try {
        period1 = new Period(period0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'weeks'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Period period0 = Period.seconds((-1000));
      Period period1 = period0.withSeconds((-1000));
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Period period0 = new Period(0L, 60000L);
      Period period1 = period0.withHours((-812));
      // Undeclared exception!
      try { 
        period1.minusHours(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -812 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Period period0 = new Period((-1), 8, (-1), (-1097), (-1097), 8, 368, (-1097));
      // Undeclared exception!
      try { 
        period0.minusMillis(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -1097 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Period period0 = Period.weeks(352831696);
      Period period1 = period0.withDays(17887500);
      assertFalse(period1.equals((Object)period0));
  }
}
