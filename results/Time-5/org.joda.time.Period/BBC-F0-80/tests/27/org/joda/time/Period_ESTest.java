/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 10:49:13 GMT 2021
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Period_ESTest extends Period_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Period period0 = Period.years(2188);
      Period period1 = period0.normalizedStandard();
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Period period0 = Period.millis(2188);
      Period period1 = period0.minusMonths((-6));
      // Undeclared exception!
      try { 
        period1.toStandardDays();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Days as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      Period period0 = new Period(31083597720000L, periodType0);
      Duration duration0 = period0.toStandardDuration();
      assertEquals(31083597720000L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.minusDays((-1085));
      Seconds seconds0 = period1.toStandardSeconds();
      assertEquals(93744000, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Period period0 = Period.weeks((-140));
      Period period1 = period0.withMinutes((-1652));
      Seconds seconds0 = period1.toStandardSeconds();
      assertEquals((-84771120), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Period period0 = Period.weeks(5139);
      Period period1 = period0.minusDays(717);
      Minutes minutes0 = period1.toStandardMinutes();
      assertEquals(50768640, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Period period0 = Period.weeks(109);
      Period period1 = period0.minusSeconds(24);
      Minutes minutes0 = period1.toStandardMinutes();
      assertEquals(1098720, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Period period0 = Period.seconds(23118750);
      Period period1 = period0.minusDays((-648));
      Hours hours0 = period1.toStandardHours();
      assertEquals(21973, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Period period0 = Period.minutes((-1227));
      Hours hours0 = period0.toStandardHours();
      assertEquals((-20), hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      Period period0 = new Period(0L, (Chronology) gJChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      Period period1 = period0.withFieldAdded(durationFieldType0, (-1462));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      MonthDay monthDay0 = new MonthDay(86400000L);
      // Undeclared exception!
      try { 
        Period.fieldDifference(localTime0, monthDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(1561L);
      Duration duration0 = new Duration(mutableDateTime0, mutableDateTime0);
      Period period0 = new Period(duration0, mutableDateTime0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.ZERO.withMonths(3);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Period period0 = new Period(2188, 2188, 2188, 2188);
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(13, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Period period0 = new Period(2018L);
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(2, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Period period0 = new Period();
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Period period0 = Period.weeks((-140));
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals((-1411200), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Period period0 = new Period(0L, 0L, gJChronology0);
      Weeks weeks0 = Weeks.weeks(37);
      Period period1 = period0.minus(weeks0);
      Hours hours0 = period1.toStandardHours();
      assertEquals((-6216), hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Period period0 = Period.seconds(40);
      Period period1 = period0.minusWeeks(40);
      Duration duration0 = period1.toStandardDuration();
      assertEquals((-24191960000L), duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Period period0 = new Period();
      Days days0 = period0.toStandardDays();
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Period period0 = new Period(2629746000L);
      Days days0 = period0.toStandardDays();
      assertEquals(30, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Period period0 = Period.weeks((-140));
      Days days0 = period0.toStandardDays();
      assertEquals((-980), days0.getDays());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(1569).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      Period period0 = Period.parse("org.joda.time.chrono.GJChronology$CutoverField", periodFormatter0);
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Period period0 = new Period(2011L, 2011L);
      Period period1 = period0.minusYears(1000);
      int int0 = period1.getYears();
      assertEquals((-1000), int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Period period0 = Period.months((-1705));
      int int0 = period0.getWeeks();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.minusWeeks(335);
      int int0 = period1.getWeeks();
      assertEquals((-335), int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Period period0 = new Period(2005L);
      int int0 = period0.getSeconds();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Period period0 = Period.months(3153);
      int int0 = period0.getMonths();
      assertEquals(3153, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Period period0 = new Period((-184), (-12), (-2279), (-865), 2146, (-4879), (-865), 1147);
      int int0 = period0.getMonths();
      assertEquals((-12), int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Period period0 = new Period(25, 25, 25, 2);
      int int0 = period0.getMinutes();
      assertEquals(25, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Period period0 = Period.minutes((-2737));
      int int0 = period0.getMinutes();
      assertEquals((-2737), int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      Period period0 = new Period(126L, periodType0);
      int int0 = period0.getMillis();
      assertEquals(126, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Period period0 = new Period((-4446), (-4446), 1, (-4446), (-1113), (-1113), (-1113), (-1113), (PeriodType) null);
      int int0 = period0.getMillis();
      assertEquals((-1113), int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Period period0 = new Period(2011L, (PeriodType) null);
      int int0 = period0.getHours();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Partial partial0 = new Partial();
      Period period0 = new Period(partial0, partial0);
      Period period1 = period0.minusHours((-1537));
      Period period2 = period1.plusMillis(13);
      int int0 = period2.getHours();
      assertNotSame(period2, period1);
      assertEquals(1537, int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Period period0 = new Period(2005L);
      int int0 = period0.getDays();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.minusDays((-905));
      int int0 = period1.getDays();
      assertEquals(905, int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Period period0 = new Period();
      PeriodType periodType0 = PeriodType.dayTime();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.withYears(22);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.YEAR_INDEX = (-2991);
      // Undeclared exception!
      try { 
        period0.withYears(474);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2991
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      Period period0 = new Period(126L, periodType0);
      // Undeclared exception!
      try { 
        period0.withWeeks(883);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      PeriodType periodType0 = PeriodType.minutes();
      Period period0 = new Period(localDateTime0, localDateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.withSeconds(15271875);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("&", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((-97L), (-97L), periodType0);
      // Undeclared exception!
      try { 
        period0.withSeconds((-2566));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      PeriodType.SECOND_INDEX = (-1327);
      // Undeclared exception!
      try { 
        period0.withSeconds(43);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1327
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Period period0 = new Period();
      int[] intArray0 = new int[4];
      PeriodType periodType0 = new PeriodType("5B2ZT+q=KO+k/", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        period0.withPeriodType(periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Period period0 = new Period(0L, (Chronology) gJChronology0);
      Period period1 = period0.withWeeks(236);
      PeriodType periodType0 = PeriodType.time();
      // Undeclared exception!
      try { 
        period1.withPeriodType(periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'weeks'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Seconds seconds0 = Seconds.ONE;
      Days days0 = seconds0.toStandardDays();
      Minutes minutes0 = days0.toStandardMinutes();
      Duration duration0 = minutes0.toStandardDuration();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("org.joda.time.chrono.BasicFixedMonthChronology", durationFieldTypeArray0, (int[]) null);
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period0.withMonths((-256));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MONTH_INDEX = 968;
      // Undeclared exception!
      try { 
        period0.withMonths(86400000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 968
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      Duration duration0 = Duration.standardSeconds((-1582L));
      Period period0 = new Period(mutableDateTime0, duration0, periodType0);
      // Undeclared exception!
      try { 
        period0.withMinutes(4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("&", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((-97L), (-97L), periodType0);
      // Undeclared exception!
      try { 
        period0.withMinutes(639);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MINUTE_INDEX = (-566);
      // Undeclared exception!
      try { 
        period0.withMinutes(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -566
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      Period period0 = new Period(10000000000000000L, periodType0);
      // Undeclared exception!
      try { 
        period0.withMillis(8);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("&", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((-97L), (-97L), periodType0);
      // Undeclared exception!
      try { 
        period0.withMillis((-2566));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(1108L);
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
      try { 
        period0.withHours(37);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[7];
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldTypeArray0[1];
      durationFieldTypeArray0[3] = durationFieldTypeArray0[2];
      durationFieldTypeArray0[4] = durationFieldType0;
      durationFieldTypeArray0[5] = durationFieldTypeArray0[2];
      durationFieldTypeArray0[6] = durationFieldTypeArray0[0];
      PeriodType periodType0 = new PeriodType("_|@]e7M+hm$&/l;wDu[", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(3860L, (-577L), periodType0);
      // Undeclared exception!
      try { 
        period0.withHours(880);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Period period0 = Period.ZERO;
      PeriodType.HOUR_INDEX = 307;
      // Undeclared exception!
      try { 
        period0.withHours(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 307
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Duration duration0 = Duration.ZERO;
      DateTime dateTime0 = DateTime.now((Chronology) gJChronology0);
      Instant instant0 = dateTime0.toInstant();
      Hours hours0 = Hours.FIVE;
      PeriodType periodType0 = hours0.getPeriodType();
      Period period0 = duration0.toPeriodTo((ReadableInstant) instant0, periodType0);
      // Undeclared exception!
      try { 
        period0.withDays(12);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[9];
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldTypeArray0[1];
      durationFieldTypeArray0[3] = durationFieldType0;
      durationFieldTypeArray0[4] = durationFieldTypeArray0[3];
      durationFieldTypeArray0[5] = durationFieldTypeArray0[4];
      durationFieldTypeArray0[6] = durationFieldTypeArray0[3];
      durationFieldTypeArray0[7] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[8] = durationFieldType0;
      PeriodType periodType0 = new PeriodType("XM+'#+D/<']Z>TUR?T", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(24L, 100000000000000000L, periodType0);
      // Undeclared exception!
      try { 
        period0.withDays((-2314));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      DurationFieldType durationFieldType0 = DurationFieldType.MILLIS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[2] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[3] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[4] = durationFieldTypeArray0[1];
      int[] intArray0 = new int[1];
      PeriodType periodType0 = new PeriodType("Jin3hwvLtI&", durationFieldTypeArray0, intArray0);
      Period period0 = new Period(3331L, periodType0, (Chronology) null);
      // Undeclared exception!
      try { 
        period0.withDays((-3091));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Period period0 = new Period(25, 25, 25, 2);
      Period period1 = period0.minusYears((-3605));
      // Undeclared exception!
      try { 
        period1.toStandardWeeks();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Weeks as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Period period0 = new Period();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[7];
      PeriodType periodType0 = new PeriodType("`Un&Wt~os", durationFieldTypeArray0, (int[]) null);
      Period period1 = period0.withPeriodType(periodType0);
      // Undeclared exception!
      try { 
        period1.toStandardWeeks();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.WEEK_INDEX = (-11);
      // Undeclared exception!
      try { 
        period0.toStandardWeeks();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -11
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((Object) null, periodType0);
      // Undeclared exception!
      try { 
        period0.toStandardSeconds();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Period period0 = new Period(2011L);
      PeriodType.DAY_INDEX = (-133);
      // Undeclared exception!
      try { 
        period0.toStandardSeconds();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -133
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Period period0 = Period.hours(3026);
      Period period1 = period0.multipliedBy(3026);
      // Undeclared exception!
      try { 
        period1.toStandardSeconds();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 32964033600
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Period period0 = Period.hours(12);
      PeriodType.MILLI_INDEX = 2170;
      // Undeclared exception!
      try { 
        period0.toStandardMinutes();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2170
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Period period0 = Period.weeks(5139);
      Period period1 = period0.multipliedBy((-1378));
      // Undeclared exception!
      try { 
        period1.toStandardMinutes();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -71381943360
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) null);
      Duration duration0 = new Duration(mutableDateTime0, mutableDateTime0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      PeriodType periodType0 = new PeriodType("@'#i", durationFieldTypeArray0, (int[]) null);
      Period period0 = duration0.toPeriodFrom((ReadableInstant) mutableDateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Period period0 = new Period(2011L, 2011L);
      PeriodType.MILLI_INDEX = (-15271881);
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -15271881
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Duration duration0 = Duration.standardHours(31556952000L);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Period period0 = duration0.toPeriod((Chronology) ethiopicChronology0);
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 31556952000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Period period0 = Period.millis(2188);
      Period period1 = period0.minusMonths(2188);
      // Undeclared exception!
      try { 
        period1.toStandardDuration();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Duration as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Period period0 = Period.minutes(0);
      PeriodType.DAY_INDEX = (-1022);
      // Undeclared exception!
      try { 
        period0.ZERO.toStandardDuration();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1022
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Period period0 = Period.millis(2188);
      Period period1 = period0.minusYears(2);
      // Undeclared exception!
      try { 
        period1.toStandardDays();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Days as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      PeriodType periodType0 = PeriodType.minutes();
      PeriodType.MONTH_INDEX = (-15271875);
      Period period0 = new Period(localDateTime0, localDateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.toStandardDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -15271875
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Duration duration0 = new Duration(3600L);
      Weeks weeks0 = Weeks.ZERO;
      Days days0 = weeks0.toStandardDays();
      PeriodType periodType0 = days0.getPeriodType();
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period0.plusYears(3349);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("&", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((-97L), (-97L), periodType0);
      // Undeclared exception!
      try { 
        period0.plusYears((-2566));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Period period0 = Period.months((-1705));
      PeriodType.YEAR_INDEX = (-1432);
      // Undeclared exception!
      try { 
        period0.plusYears(267);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      Period period0 = new Period(126L, periodType0);
      // Undeclared exception!
      try { 
        period0.plusWeeks((-4446));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("&", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((-97L), (-97L), periodType0);
      // Undeclared exception!
      try { 
        period0.plusWeeks((-1933));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.WEEK_INDEX = (-373);
      // Undeclared exception!
      try { 
        period0.plusWeeks((-1000));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Period period0 = Period.minutes(3100);
      Duration duration0 = Duration.millis((-1445L));
      Minutes minutes0 = duration0.toStandardMinutes();
      PeriodType periodType0 = minutes0.getPeriodType();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.plusSeconds(23034375);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.SECOND_INDEX = 117;
      // Undeclared exception!
      try { 
        period0.plusSeconds((-3066));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      // Undeclared exception!
      try { 
        period0.plusMonths(91);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Period period0 = new Period((-151), (-151), (-3974), (-1120));
      PeriodType.MONTH_INDEX = (-1196);
      // Undeclared exception!
      try { 
        period0.plusMonths(9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      Period period0 = new Period(994L, periodType0);
      // Undeclared exception!
      try { 
        period0.plusMinutes(236);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("&", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((-97L), (-97L), periodType0);
      // Undeclared exception!
      try { 
        period0.plusMinutes((-3292));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Period period0 = Period.months((-1705));
      PeriodType.MINUTE_INDEX = (-1705);
      // Undeclared exception!
      try { 
        period0.plusMinutes(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.ZERO.withMinutes(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        period1.plusMinutes((-5));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -5
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      Period period0 = new Period((-868L), 1699L, periodType0);
      // Undeclared exception!
      try { 
        period0.plusMillis((-3));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((Object) null, periodType0);
      // Undeclared exception!
      try { 
        period0.plusMillis((-5226));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((Object) null);
      Interval interval0 = mutableInterval0.toInterval();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[9];
      int[] intArray0 = new int[5];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      Period period0 = interval0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period0.plusMillis(7678125);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      Period period0 = new Period(133L, 133L, periodType0);
      // Undeclared exception!
      try { 
        period0.plusHours(1430);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.HOUR_INDEX = 551;
      // Undeclared exception!
      try { 
        period0.plusHours((-730));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Period period0 = new Period(37, (-2053), (-2053), Integer.MIN_VALUE, Integer.MIN_VALUE, (-2053), (-2056), 78, (PeriodType) null);
      // Undeclared exception!
      try { 
        period0.plusHours((-1900));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -1900
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      PeriodType periodType0 = PeriodType.millis();
      Period period0 = new Period(localTime0, localTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.plusDays((-6));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((Object) null, periodType0);
      // Undeclared exception!
      try { 
        period0.plusDays(4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.DAY_INDEX = (-382);
      // Undeclared exception!
      try { 
        period0.plusDays(3600);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      Days days0 = Days.ONE;
      // Undeclared exception!
      try { 
        period0.plus(days0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("org.joda.time.chrono.BasicFixedMonthChronology", durationFieldTypeArray0, (int[]) null);
      Duration duration0 = Duration.millis((-256));
      Period period0 = duration0.toPeriodFrom((ReadableInstant) null, periodType0);
      Years years0 = Years.THREE;
      // Undeclared exception!
      try { 
        period0.plus(years0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Period period0 = Period.millis(853);
      Period period1 = period0.withDays(170);
      PeriodType.DAY_INDEX = 853;
      // Undeclared exception!
      try { 
        period0.plus(period1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Period period0 = new Period((-112L), 3203L);
      Seconds seconds0 = Seconds.MAX_VALUE;
      // Undeclared exception!
      try { 
        period0.plus(seconds0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 3 + 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse("org.joda.time.chrono.GJChronology$CutoverField", (PeriodFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      // Undeclared exception!
      try { 
        Period.parse("org.joda.time.chrono.GJChronology$CutoverField", periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org.joda.time.chrono.GJChronolog...\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Literal", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse("+bdM");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+bdM\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Period period0 = new Period(2011L, 2011L);
      Period period1 = period0.plusMonths((-1647));
      PeriodType periodType0 = PeriodType.months();
      // Undeclared exception!
      try { 
        period1.normalizedStandard(periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Period period0 = Period.millis(2598);
      int[] intArray0 = new int[2];
      PeriodType periodType0 = new PeriodType("2rZ", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      Period period0 = new Period(126L, periodType0);
      PeriodType.HOUR_INDEX = 1353;
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1353
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Period period0 = new Period((-1), (-1), 748, (-24));
      Period period1 = period0.withDays(292272984);
      PeriodType periodType0 = PeriodType.seconds();
      // Undeclared exception!
      try { 
        period1.normalizedStandard(periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 25252385814687
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("&", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((-97L), (-97L), periodType0);
      // Undeclared exception!
      try { 
        period0.normalizedStandard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Period period0 = Period.ZERO;
      PeriodType.SECOND_INDEX = 1253;
      // Undeclared exception!
      try { 
        period0.normalizedStandard();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1253
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Period period0 = new Period((-3606), (-1338), (-3606), 4, (-3606), Integer.MIN_VALUE, 1137, 412);
      // Undeclared exception!
      try { 
        period0.negated();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -2147483648 * -1
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusYears(883);
      // Undeclared exception!
      try { 
        period1.multipliedBy(317351877);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: 883 * 317351877
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      // Undeclared exception!
      try { 
        period0.minusYears(3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.YEAR_INDEX = 1471;
      // Undeclared exception!
      try { 
        period0.minusYears((-597));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      Period period0 = new Period(145L, periodType0);
      // Undeclared exception!
      try { 
        period0.minusWeeks((-1));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("&", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((-97L), (-97L), periodType0);
      // Undeclared exception!
      try { 
        period0.minusWeeks((-2566));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.WEEK_INDEX = 1052;
      // Undeclared exception!
      try { 
        period0.minusWeeks((-1011));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      Period period0 = new Period(994L, periodType0);
      // Undeclared exception!
      try { 
        period0.minusSeconds(236);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Instant instant0 = Instant.now();
      PeriodType periodType0 = PeriodType.yearDayTime();
      Period period0 = new Period(instant0, instant0, periodType0);
      PeriodType.SECOND_INDEX = 1747;
      // Undeclared exception!
      try { 
        period0.minusSeconds(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      // Undeclared exception!
      try { 
        period0.minusMonths((-1202));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      PeriodType periodType0 = new PeriodType("sq>p_1\"@wq8zWO{", durationFieldTypeArray0, (int[]) null);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      Period period0 = new Period(0L, periodType0, (Chronology) islamicChronology0);
      // Undeclared exception!
      try { 
        period0.minusMonths(99);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Period period0 = new Period();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      int[] intArray0 = new int[2];
      intArray0[1] = (-1946);
      PeriodType periodType0 = new PeriodType("ReadablePartial objects must not be null", durationFieldTypeArray0, intArray0);
      Period period1 = period0.withPeriodType(periodType0);
      // Undeclared exception!
      try { 
        period1.minusMonths((-1841));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Period period0 = Period.seconds((-1));
      Period period1 = period0.plusMonths((-1));
      // Undeclared exception!
      try { 
        period1.minusMonths(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -1 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      Period period0 = new Period(24L, periodType0, (Chronology) null);
      // Undeclared exception!
      try { 
        period0.minusMinutes(8);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MINUTE_INDEX = (-789);
      // Undeclared exception!
      try { 
        period0.minusMinutes(3402);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Period period0 = Period.minutes(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        period0.minusMinutes(6);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -6
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      Period period0 = new Period(133L, 133L, periodType0);
      // Undeclared exception!
      try { 
        period0.minusMillis((-1963));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MILLI_INDEX = (-86399999);
      // Undeclared exception!
      try { 
        period0.minusMillis(648);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      YearMonth yearMonth0 = YearMonth.now((DateTimeZone) fixedDateTimeZone0);
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
      try { 
        period0.minusHours(9);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      DurationFieldType durationFieldType0 = DurationFieldType.YEARS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldType0;
      PeriodType periodType0 = new PeriodType(";p", durationFieldTypeArray0, (int[]) null);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Period period0 = new Period((-1600L), 2783L, periodType0, ethiopicChronology0);
      // Undeclared exception!
      try { 
        period0.minusHours(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Period period0 = Period.millis((-267));
      PeriodType.HOUR_INDEX = 9;
      // Undeclared exception!
      try { 
        period0.minusHours(7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Period period0 = Period.months((-1235));
      Period period1 = period0.plusHours(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        period1.minusHours(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      Period period0 = new Period(133L, 133L, periodType0);
      // Undeclared exception!
      try { 
        period0.minusDays(2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("&", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((-97L), (-97L), periodType0);
      // Undeclared exception!
      try { 
        period0.minusDays((-2566));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Period period0 = Period.minutes(0);
      PeriodType.DAY_INDEX = (-1022);
      // Undeclared exception!
      try { 
        period0.ZERO.minusDays(3233);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      Period period0 = days0.toPeriod();
      // Undeclared exception!
      try { 
        period0.minusDays(2052);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -2052
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      Period period1 = Period.years(7);
      // Undeclared exception!
      try { 
        period0.minus(period1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Period period0 = Period.months(3195);
      Period period1 = period0.plusHours(3195);
      PeriodType.HOUR_INDEX = 53;
      // Undeclared exception!
      try { 
        period0.minus(period1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 53
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("&", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((-97L), (-97L), periodType0);
      // Undeclared exception!
      try { 
        period0.getYears();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.YEAR_INDEX = (-23);
      // Undeclared exception!
      try { 
        period0.getYears();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -23
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Period period0 = new Period((-3201L));
      PeriodType.WEEK_INDEX = (-2781);
      // Undeclared exception!
      try { 
        period0.getWeeks();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2781
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((Object) null, periodType0);
      // Undeclared exception!
      try { 
        period0.getMonths();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MONTH_INDEX = (-2605);
      // Undeclared exception!
      try { 
        period0.getMonths();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2605
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Period period0 = new Period((-2324), 90, 24, 24);
      PeriodType.MILLI_INDEX = (-24);
      // Undeclared exception!
      try { 
        period0.ZERO.getMillis();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -24
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Period period0 = new Period(2011L, (PeriodType) null);
      PeriodType.HOUR_INDEX = (-1135);
      // Undeclared exception!
      try { 
        period0.getHours();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1135
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.DAY_INDEX = (-4286);
      // Undeclared exception!
      try { 
        period0.getDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4286
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[16];
      int[] intArray0 = new int[4];
      Partial partial0 = new Partial(gJChronology0, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(partial0, partial0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      int[] intArray0 = new int[1];
      MonthDay monthDay1 = new MonthDay(monthDay0, intArray0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(monthDay1, monthDay0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) null, (ReadablePartial) null, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      Duration duration0 = Duration.standardMinutes(5);
      int[] intArray0 = new int[4];
      PeriodType periodType0 = new PeriodType("Days", (DurationFieldType[]) null, intArray0);
      Period period0 = null;
      try {
        period0 = new Period(mutableDateTime0, duration0, periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Period period0 = Period.weeks((-3136));
      Weeks weeks0 = Weeks.MAX_VALUE;
      Period period1 = period0.plus(weeks0);
      Duration duration0 = period1.toStandardDuration();
      PeriodType periodType0 = PeriodType.dayTime();
      Period period2 = null;
      try {
        period2 = new Period((ReadableInstant) null, duration0, periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 15032363577
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Duration duration0 = Duration.millis(31622400000L);
      Instant instant0 = new Instant();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      DurationFieldType durationFieldType0 = DurationFieldType.HOURS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      DurationFieldType durationFieldType1 = DurationFieldType.ERAS_TYPE;
      durationFieldTypeArray0[1] = durationFieldType1;
      int[] intArray0 = new int[2];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      Period period0 = null;
      try {
        period0 = new Period(duration0, instant0, periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      Weeks weeks0 = Weeks.MIN_VALUE;
      Duration duration0 = weeks0.toStandardDuration();
      Period period0 = null;
      try {
        period0 = new Period(duration0, (ReadableInstant) null, periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -360777252864
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Period period0 = null;
      try {
        period0 = new Period("", (PeriodType) null, (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      Period period0 = null;
      try {
        period0 = new Period(periodType0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: org.joda.time.PeriodType
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Object object0 = new Object();
      Period period0 = null;
      try {
        period0 = new Period(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      Minutes minutes0 = seconds0.toStandardMinutes();
      PeriodType periodType0 = minutes0.getPeriodType();
      Instant instant0 = new Instant(1000000000000000L);
      Chronology chronology0 = instant0.getChronology();
      Period period0 = null;
      try {
        period0 = new Period(1000000000000000L, periodType0, chronology0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 16666666666
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      PeriodType periodType0 = PeriodType.seconds();
      Period period0 = null;
      try {
        period0 = new Period(30962844000000L, periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 30962844000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = null;
      try {
        period0 = new Period(4294967295L, 9223372036854775807L, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 292278994 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Period period0 = new Period(604800L, (Chronology) null);
      // Undeclared exception!
      try { 
        period0.plusMillis(Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 800 + 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusSeconds((-3066));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Period period0 = Period.weeks((-140));
      Period period1 = period0.plusMinutes((-140));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      PeriodType periodType0 = PeriodType.minutes();
      Period period0 = new Period(localDateTime0, localDateTime0, periodType0);
      Period period1 = period0.plusDays(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusWeeks((-1000));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Period period0 = Period.days(12);
      Period period1 = period0.plusMonths(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Period period0 = new Period((-3), (-3), (-3), (-3));
      int int0 = period0.getHours();
      assertEquals((-3), int0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Period period0 = Period.months((-1705));
      Period period1 = new Period(period0);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Period period0 = new Period(11, 4214, 4214, (-627), 2971, 4214, 11, (-627));
      int int0 = period0.getWeeks();
      assertEquals(4214, int0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Period period0 = new Period();
      int int0 = period0.getYears();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Period period0 = new Period((-3), (-3), (-3), (-3));
      int int0 = period0.getSeconds();
      assertEquals((-3), int0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Hours hours0 = Hours.MAX_VALUE;
      Duration duration0 = hours0.toStandardDuration();
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) copticChronology0);
      DateTime dateTime0 = mutableDateTime0.toDateTimeISO();
      PeriodType periodType0 = PeriodType.hours();
      Period period0 = new Period(duration0, dateTime0, periodType0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      int[] intArray0 = new int[5];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      Period period0 = new Period((Object) null, periodType0);
      // Undeclared exception!
      try { 
        period0.getSeconds();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Period period0 = Period.days((-111));
      int int0 = period0.getDays();
      assertEquals((-111), int0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Period period0 = Period.minutes(0);
      int int0 = period0.ZERO.getMinutes();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null);
      // Undeclared exception!
      try { 
        Period.parse("", periodFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Period period0 = new Period();
      int int0 = period0.getMonths();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Period period0 = new Period((Object) null, gJChronology0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Period period0 = new Period((-2324), 90, 24, 24);
      int int0 = period0.ZERO.getMillis();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Period period0 = Period.weeks(109);
      Period period1 = period0.plusMonths(24);
      Period period2 = period1.normalizedStandard((PeriodType) null);
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Period period0 = Period.weeks(99);
      Period period1 = period0.plusMonths(4);
      Period period2 = period1.normalizedStandard((PeriodType) null);
      assertTrue(period2.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Period period0 = new Period(2629746000L);
      Period period1 = period0.plusMonths((-4446));
      Period period2 = period1.normalizedStandard();
      assertNotSame(period1, period2);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Period period0 = new Period((-4446), (-4446), 1, (-4446), (-1113), (-1113), (-1113), (-1113), (PeriodType) null);
      Period period1 = period0.normalizedStandard((PeriodType) null);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Period period0 = Period.years(2188);
      // Undeclared exception!
      try { 
        period0.toStandardMinutes();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Minutes as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Period period0 = Period.months((-1705));
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Hours as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Period period0 = Period.minutes(15);
      Period period1 = period0.multipliedBy(1);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.multipliedBy(496);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Period period0 = new Period(2011L, (PeriodType) null);
      Period period1 = period0.minus((ReadablePeriod) null);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Period period0 = Period.millis(2188);
      Period period1 = period0.plusMillis(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period((-2791L), periodType0, (Chronology) null);
      Period period1 = period0.plusSeconds(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Period period0 = new Period(2018L);
      Period period1 = period0.plusMinutes(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      Period period0 = new Period(0L, (Chronology) gJChronology0);
      Period period1 = period0.plusHours(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Period period0 = Period.months((-1705));
      Period period1 = period0.plusWeeks(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Period period0 = new Period(2011L, 2011L);
      Period period1 = period0.plusYears(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.plus((ReadablePeriod) null);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Period period0 = Period.minutes(3100);
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      Period period1 = period0.withFieldAdded(durationFieldType0, 0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      Period period0 = new Period(126L, periodType0);
      // Undeclared exception!
      try { 
        period0.withFieldAdded((DurationFieldType) null, 292278993);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Partial partial0 = new Partial();
      Period period0 = new Period(partial0, partial0);
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      Period period1 = period0.withFieldAdded(durationFieldType0, 13);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Period period0 = new Period(2011L);
      // Undeclared exception!
      try { 
        period0.withField((DurationFieldType) null, (-2069));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Period period0 = Period.millis(2188);
      DurationFieldType durationFieldType0 = DurationFieldType.CENTURIES_TYPE;
      Period period1 = period0.withField(durationFieldType0, 0);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      Period period0 = new Period(0L, (Chronology) gJChronology0);
      Period period1 = period0.withFields((ReadablePeriod) null);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      Seconds seconds0 = Seconds.MAX_VALUE;
      // Undeclared exception!
      try { 
        period0.withFields(seconds0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'seconds'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      Period period0 = new Period(133L, 133L, periodType0);
      Period period1 = period0.withPeriodType(periodType0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[1] = dateTimeFieldTypeArray0[0];
      int[] intArray0 = new int[8];
      Partial partial0 = new Partial((Chronology) null, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(partial0, partial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not have overlapping fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) iSOChronology0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(localTime0, localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      YearMonth yearMonth0 = YearMonth.now((Chronology) julianChronology0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(yearMonth0, localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      // Undeclared exception!
      try { 
        Period.fieldDifference(localTime0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.fieldDifference((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.withYears(474);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Period period0 = Period.years(7);
      int int0 = period0.getYears();
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Period period0 = new Period();
      Seconds seconds0 = period0.ZERO.toStandardSeconds();
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Period period0 = new Period((-2324), (-2324), 24, 24);
      PeriodType.MILLI_INDEX = (-24);
      // Undeclared exception!
      try { 
        period0.withMillis(8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -24
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = new Period(period0, (PeriodType) null, (Chronology) null);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      Duration duration0 = new Duration((-12219292800000L));
      Period period0 = new Period(mutableDateTime0, duration0);
      // Undeclared exception!
      try { 
        period0.toStandardSeconds();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Seconds as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Period period0 = Period.days((-89));
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals((-12), weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      // Undeclared exception!
      try { 
        period0.withMonths(41);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[7];
      Partial partial0 = new Partial(islamicChronology0, dateTimeFieldTypeArray0, (int[]) null);
      Period period0 = null;
      try {
        period0 = new Period(partial0, partial0, (PeriodType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = new MutableDateTime((-2654L), (Chronology) gregorianChronology0);
      Period period0 = new Period(mutableDateTime0, mutableDateTime0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Period period0 = new Period();
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Period period0 = new Period((-3201L));
      Period period1 = period0.minusMinutes(37);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Period period0 = new Period();
      Hours hours0 = period0.toStandardHours();
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      Period period0 = new Period(0L, (Chronology) gJChronology0);
      Duration duration0 = period0.toStandardDuration();
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 0, (Chronology) gJChronology0);
      duration0.toPeriodTo((ReadableInstant) mutableDateTime0);
      assertEquals(0L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Period period0 = Period.seconds((-1));
      Period period1 = period0.minusHours((-1985));
      Minutes minutes0 = period1.toStandardMinutes();
      assertEquals(119100, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Period period0 = Period.millis(37);
      Days days0 = Days.MIN_VALUE;
      Period period1 = period0.plus(days0);
      // Undeclared exception!
      try { 
        period1.minus(days0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Period period0 = new Period((-184), (-12), (-2279), (-865), 2146, (-4879), (-865), 1147);
      Period period1 = period0.toPeriod();
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Period period0 = new Period(0L, 0L, gJChronology0);
      int int0 = period0.getSeconds();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Period period0 = Period.months((-1235));
      Period period1 = period0.withMillis((-1235));
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      int[] intArray0 = new int[3];
      PeriodType periodType0 = new PeriodType("ReadablePartial objects must have the same set of fields", (DurationFieldType[]) null, intArray0);
      Period period0 = null;
      try {
        period0 = new Period(86400000L, periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[7];
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldTypeArray0[1];
      durationFieldTypeArray0[3] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[4] = durationFieldType0;
      durationFieldTypeArray0[5] = durationFieldTypeArray0[1];
      durationFieldTypeArray0[6] = durationFieldTypeArray0[4];
      PeriodType periodType0 = new PeriodType("_|@]e7M+hm$&/l;wDu[", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(3860L, (-577L), periodType0);
      // Undeclared exception!
      try { 
        period0.toStandardDays();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Period period0 = new Period();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      Period period1 = period0.ZERO.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.minusMillis(2668);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDay();
      Period period0 = null;
      try {
        period0 = new Period(1540, 1540, 3088, 1540, 1636, 1540, (-476), 1636, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'weeks'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Integer integer0 = new Integer((-164));
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      Period period0 = null;
      try {
        period0 = new Period((Object) integer0, (Chronology) gregorianChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Integer
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Period period0 = Period.parse("PT0S");
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Period period0 = new Period((-3201L));
      Period period1 = period0.negated();
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      Period period1 = period0.withSeconds(43);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime((DateTimeZone) fixedDateTimeZone0);
      Minutes minutes0 = Minutes.minutes(61);
      Duration duration0 = minutes0.toStandardDuration();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      durationFieldTypeArray0[0] = durationFieldType0;
      int[] intArray0 = new int[0];
      PeriodType periodType0 = new PeriodType("org.joda.time.Period", durationFieldTypeArray0, intArray0);
      Period period0 = new Period(dateTime0, duration0, periodType0);
      // Undeclared exception!
      try { 
        period0.withWeeks(61);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.withHours(1);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.minusMillis(648);
      assertNotSame(period1, period0);
  }
}
