/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 00:09:18 GMT 2021
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.format.ISOPeriodFormat;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Period_ESTest extends Period_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Period period0 = new Period(31536000000L, 0L);
      Period period1 = Period.years((-1542));
      Period period2 = period0.minus(period1);
      PeriodType periodType0 = PeriodType.seconds();
      // Undeclared exception!
      try { 
        period2.normalizedStandard(periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Period period0 = Period.weeks((-525));
      Duration duration0 = period0.toStandardDuration();
      assertEquals((-317520000L), duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Period period0 = new Period(1687, 8, 1687, 2036);
      Period period1 = period0.plusDays(1687);
      Seconds seconds0 = period1.toStandardSeconds();
      assertEquals(151832169, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Period period0 = new Period(3L);
      Period period1 = period0.withWeeks((-1373));
      Hours hours0 = period1.toStandardHours();
      assertEquals((-230664), hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Period period0 = new Period(5, 5, 5, 5);
      Hours hours0 = period0.toStandardHours();
      assertEquals(5, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Period period0 = Period.seconds((-525));
      Hours hours0 = period0.toStandardHours();
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Period period0 = new Period((-612), 899, 899, (-2967));
      Days days0 = period0.toStandardDays();
      assertEquals((-24), days0.getDays());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Period period0 = Period.seconds((-525));
      Days days0 = period0.toStandardDays();
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.millisOfDay();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      int[] intArray0 = new int[4];
      Partial partial0 = new Partial(islamicChronology0, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(partial0, partial0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(7);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) gregorianChronology0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(monthDay0, localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Period period0 = new Period((Object) null);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Period period0 = new Period(21260793600000L, (-3860L), gJChronology0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Period period0 = Period.days(1430);
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDateTime localDateTime0 = LocalDateTime.parse("", dateTimeFormatter0);
      Hours hours0 = Hours.hoursBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      Weeks weeks0 = hours0.toStandardWeeks();
      DurationFieldType durationFieldType0 = weeks0.getFieldType();
      Period period1 = period0.withFieldAdded(durationFieldType0, 1812);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.plus(period0);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.withWeeks(3491);
      Seconds seconds0 = period1.toStandardSeconds();
      assertEquals(2111356800, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Period period0 = Period.seconds(128);
      Period period1 = period0.withSeconds((-1576));
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Period period0 = new Period(10000000000L, (PeriodType) null, (Chronology) null);
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(16, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Period period0 = new Period((-612), 899, 899, (-2967));
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals((-3), weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Period period0 = new Period((-612), 899, 899, (-2967));
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals((-2148363), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Period period0 = new Period((-1526L), (Chronology) null);
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      MutableDateTime mutableDateTime0 = MutableDateTime.now(dateTimeZone0);
      Days days0 = Days.FOUR;
      Duration duration0 = days0.toStandardDuration();
      Period period0 = new Period(mutableDateTime0, duration0, periodType0);
      Hours hours0 = period0.toStandardHours();
      assertEquals(96, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.ZERO.plusHours((-1217));
      Hours hours0 = period1.toStandardHours();
      assertEquals((-1217), hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      Period period0 = new Period(0L, 0L, periodType0);
      Period period1 = period0.minusDays((-1525));
      Duration duration0 = period1.toStandardDuration();
      assertEquals(131760000L, duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Period period0 = new Period((-612), 899, 899, (-2967));
      Duration duration0 = period0.toStandardDuration();
      assertEquals((-2148363967L), duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Period period0 = Period.weeks((-1947));
      Days days0 = period0.toStandardDays();
      assertEquals((-13629), days0.getDays());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Period period0 = Period.parse("P-1947WT2.490S");
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Period period0 = new Period((-612), 899, 899, (-2967));
      Period period1 = period0.minusWeeks(15);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) null);
      Period period0 = new Period(2315L, periodType0, (Chronology) iSOChronology0);
      int int0 = period0.getYears();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Period period0 = Period.years(1);
      int int0 = period0.getYears();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Period period0 = Period.ZERO;
      int int0 = period0.getWeeks();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Period period0 = Period.weeks(1);
      int int0 = period0.getWeeks();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Period period0 = new Period(0L);
      Period period1 = period0.plusSeconds(1);
      int int0 = period1.getSeconds();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Period period0 = new Period((-612), 899, 899, (-2967));
      Period period1 = period0.multipliedBy((-1821));
      int int0 = period1.getSeconds();
      assertEquals((-1637079), int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Period period0 = Period.seconds(2);
      Period period1 = period0.withMonths(2);
      int int0 = period1.getMonths();
      assertEquals(2, int0);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Period period0 = new Period((-1235), (-1235), (-525), 0, 0, 0, (-1235), (-1235));
      int int0 = period0.getMonths();
      assertEquals((-1235), int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Instant instant0 = Instant.now();
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      PeriodType periodType0 = PeriodType.minutes();
      Period period0 = new Period(mutableDateTime0, (ReadableDuration) null, periodType0);
      DurationFieldType durationFieldType0 = DurationFieldType.MINUTES_TYPE;
      Period period1 = period0.withField(durationFieldType0, 5);
      int int0 = period1.getMinutes();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Period period0 = Period.minutes((-3927));
      int int0 = period0.getMinutes();
      assertEquals((-3927), int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      int int0 = period0.ZERO.getMillis();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Hours hours0 = Hours.FIVE;
      Days days0 = hours0.toStandardDays();
      Period period0 = days0.toPeriod();
      Period period1 = period0.minusMillis((-1217));
      int int0 = period1.getMillis();
      assertEquals(1217, int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      MutableDateTime mutableDateTime0 = new MutableDateTime(277L, dateTimeZone0);
      Duration duration0 = Duration.standardHours((-1L));
      Period period0 = new Period(mutableDateTime0, duration0);
      int int0 = period0.getHours();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Period period0 = new Period(0L);
      Period period1 = period0.plusDays(1);
      int int0 = period1.getDays();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.plusDays((-23));
      int int0 = period1.getDays();
      assertEquals((-23), int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(0L);
      PeriodType periodType0 = PeriodType.months();
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period0.withYears(15356250);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.YEAR_INDEX = (-925);
      // Undeclared exception!
      try { 
        period0.withYears(85);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -925
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Days days0 = Days.TWO;
      Duration duration0 = days0.toStandardDuration();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(5);
      DateTime dateTime0 = new DateTime(1, 1, 1, 1, 1, dateTimeZone0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      int[] intArray0 = new int[9];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      Period period0 = duration0.toPeriodFrom((ReadableInstant) dateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.withWeeks(543);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      // Undeclared exception!
      try { 
        period0.withSeconds(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Period period0 = new Period();
      int[] intArray0 = new int[5];
      PeriodType periodType0 = new PeriodType("Asia/Kolkata", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        period0.withPeriodType(periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.minusMonths(4122);
      PeriodType periodType0 = PeriodType.weeks();
      // Undeclared exception!
      try { 
        period1.withPeriodType(periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'months'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      Period period0 = new Period((ReadableInstant) null, (ReadableInstant) null, periodType0);
      // Undeclared exception!
      try { 
        period0.withMonths((-2728));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Duration duration0 = new Duration(0L, (-1029L));
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[2] = durationFieldTypeArray0[1];
      durationFieldTypeArray0[3] = durationFieldTypeArray0[0];
      int[] intArray0 = new int[5];
      intArray0[1] = (-222);
      PeriodType periodType0 = new PeriodType("ConverterManager.alterPartialConverters", durationFieldTypeArray0, intArray0);
      Period period0 = new Period(duration0, (ReadableInstant) null, periodType0);
      // Undeclared exception!
      try { 
        period0.withMonths(2550);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -222
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MINUTE_INDEX = 7593750;
      // Undeclared exception!
      try { 
        period0.ZERO.withMinutes(8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7593750
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      Period period0 = new Period(0L, periodType0);
      // Undeclared exception!
      try { 
        period0.withMillis(1471);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Period period0 = Period.months(1);
      PeriodType.MILLI_INDEX = 258;
      // Undeclared exception!
      try { 
        period0.withMillis(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 258
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-193L));
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      MutableDateTime mutableDateTime0 = new MutableDateTime((-193L), (Chronology) ethiopicChronology0);
      Seconds seconds0 = Seconds.secondsBetween((ReadableInstant) mutableDateTime0, (ReadableInstant) mutableDateTime0);
      PeriodType periodType0 = seconds0.getPeriodType();
      Period period0 = duration0.toPeriod(periodType0, (Chronology) ethiopicChronology0);
      // Undeclared exception!
      try { 
        period0.withHours(3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      Period period0 = new Period(423L, (Chronology) gregorianChronology0);
      DateTime dateTime0 = new DateTime((Chronology) gregorianChronology0);
      Duration duration0 = period0.toDurationFrom(dateTime0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      Years years0 = Years.TWO;
      DurationFieldType durationFieldType0 = years0.getFieldType();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldType0;
      durationFieldTypeArray0[3] = durationFieldType0;
      durationFieldTypeArray0[4] = durationFieldTypeArray0[2];
      PeriodType periodType0 = new PeriodType("\",nq@", durationFieldTypeArray0, (int[]) null);
      Period period1 = duration0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period1.withHours((-1496));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Period period0 = Period.months(1215);
      PeriodType.HOUR_INDEX = (-2);
      // Undeclared exception!
      try { 
        period0.withHours(1215);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Period period0 = new Period((-612), 899, 899, (-2967));
      Minutes minutes0 = period0.toStandardMinutes();
      PeriodType periodType0 = PeriodType.weeks();
      Period period1 = new Period(0L, 357, periodType0, (Chronology) null);
      // Undeclared exception!
      try { 
        period1.withFields(minutes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'minutes'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Period period0 = Period.seconds(117);
      PeriodType periodType0 = PeriodType.weeks();
      Period period1 = period0.ZERO.withPeriodType(periodType0);
      // Undeclared exception!
      try { 
        period1.withDays((-575));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      PeriodType periodType0 = new PeriodType("Field must not be null", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((ReadableInstant) null, (ReadableInstant) null, periodType0);
      // Undeclared exception!
      try { 
        period0.withDays((-3779));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.DAY_INDEX = (-2000);
      // Undeclared exception!
      try { 
        period0.withDays(1234);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2000
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Period period0 = new Period(3, (-2311), 3, 12, 45, (-612), 45, (-15), (PeriodType) null);
      // Undeclared exception!
      try { 
        period0.toStandardWeeks();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Weeks as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      Period period0 = new Period(423L, (Chronology) gregorianChronology0);
      DateTime dateTime0 = new DateTime((Chronology) gregorianChronology0);
      Duration duration0 = period0.toDurationFrom(dateTime0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      Years years0 = Years.TWO;
      DurationFieldType durationFieldType0 = years0.getFieldType();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[2] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[3] = durationFieldType0;
      durationFieldTypeArray0[4] = durationFieldType0;
      PeriodType periodType0 = new PeriodType("\",nq@", durationFieldTypeArray0, (int[]) null);
      Period period1 = duration0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period1.toStandardWeeks();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Period period0 = Period.seconds((-719));
      PeriodType.WEEK_INDEX = (-719);
      // Undeclared exception!
      try { 
        period0.toStandardWeeks();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Period period0 = new Period();
      Weeks weeks0 = Weeks.MIN_VALUE;
      Period period1 = period0.withFields(weeks0);
      Period period2 = period1.minusDays(12);
      // Undeclared exception!
      try { 
        period2.toStandardWeeks();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -2147483649
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Period period0 = new Period(31536000000L, 0L);
      // Undeclared exception!
      try { 
        period0.toStandardSeconds();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Seconds as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Period period0 = Period.seconds((-719));
      PeriodType.WEEK_INDEX = (-719);
      // Undeclared exception!
      try { 
        period0.ZERO.toStandardSeconds();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Period period0 = new Period(623191204, (-1776), (-2967), 513);
      // Undeclared exception!
      try { 
        period0.toStandardSeconds();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 2243488224873
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      Period period0 = new Period(423L, (Chronology) gregorianChronology0);
      DateTime dateTime0 = new DateTime((Chronology) gregorianChronology0);
      Duration duration0 = period0.toDurationFrom(dateTime0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      Years years0 = Years.TWO;
      DurationFieldType durationFieldType0 = years0.getFieldType();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[2] = durationFieldType0;
      durationFieldTypeArray0[3] = durationFieldTypeArray0[2];
      durationFieldTypeArray0[4] = durationFieldType0;
      PeriodType periodType0 = new PeriodType("\",nq@", durationFieldTypeArray0, (int[]) null);
      Period period1 = duration0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period1.toStandardMinutes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MONTH_INDEX = 4153;
      // Undeclared exception!
      try { 
        period0.toStandardMinutes();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Period period0 = Period.hours(1665);
      Period period1 = period0.withDays(1665);
      Period period2 = period1.multipliedBy((-1656));
      // Undeclared exception!
      try { 
        period2.toStandardMinutes();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -4135860000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      PeriodType periodType0 = new PeriodType("^L/$)6pR>=", durationFieldTypeArray0, (int[]) null);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      Period period0 = new Period((long) 0, periodType0, (Chronology) copticChronology0);
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MONTH_INDEX = 39;
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      Period period0 = days0.toPeriod();
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 51539607528
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Period period0 = new Period(31536000000L, 0L);
      // Undeclared exception!
      try { 
        period0.toStandardDuration();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Duration as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Period period0 = new Period(3L);
      Period period1 = period0.plusYears(410);
      // Undeclared exception!
      try { 
        period1.toStandardDays();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Days as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.SECOND_INDEX = (-3);
      // Undeclared exception!
      try { 
        period0.toStandardDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Period period0 = Period.weeks(623191204);
      // Undeclared exception!
      try { 
        period0.toStandardDays();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 4362338428
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Duration duration0 = Duration.standardDays(0L);
      PeriodType periodType0 = PeriodType.months();
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period0.plusYears(4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      DurationFieldType durationFieldType0 = DurationFieldType.YEARS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[3] = durationFieldType0;
      PeriodType periodType0 = new PeriodType("dayOfYear", durationFieldTypeArray0, (int[]) null);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Period period0 = new Period(320L, 1209600000L, periodType0, buddhistChronology0);
      // Undeclared exception!
      try { 
        period0.plusYears(1507);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Seconds seconds0 = Seconds.ONE;
      Days days0 = seconds0.toStandardDays();
      Duration duration0 = days0.toStandardDuration();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      int[] intArray0 = new int[8];
      intArray0[0] = 1217;
      PeriodType periodType0 = new PeriodType("AH", durationFieldTypeArray0, intArray0);
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period0.plusYears(1217);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1217
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(0L);
      PeriodType periodType0 = PeriodType.months();
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period0.plusWeeks(15356250);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      PeriodType periodType0 = new PeriodType("^L/$)6pR>=", durationFieldTypeArray0, (int[]) null);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      Period period0 = new Period((long) 0, periodType0, (Chronology) copticChronology0);
      // Undeclared exception!
      try { 
        period0.plusWeeks((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.WEEK_INDEX = (-292275054);
      // Undeclared exception!
      try { 
        period0.plusWeeks((-1551));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -292275054
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      Period period0 = new Period(0L, 0L, periodType0);
      // Undeclared exception!
      try { 
        period0.plusSeconds(666);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      Duration duration0 = new Duration((long) 1);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      DurationFieldType durationFieldType0 = DurationFieldType.HALFDAYS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[2] = durationFieldTypeArray0[1];
      durationFieldTypeArray0[3] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[4] = durationFieldTypeArray0[2];
      int[] intArray0 = new int[3];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, intArray0);
      Period period0 = new Period(dateTime0, duration0, periodType0);
      // Undeclared exception!
      try { 
        period0.plusSeconds(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Period period0 = new Period((-2554L));
      // Undeclared exception!
      try { 
        period0.plusSeconds(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      Period period0 = new Period(423L, (Chronology) gregorianChronology0);
      DateTime dateTime0 = new DateTime((Chronology) gregorianChronology0);
      Duration duration0 = period0.toDurationFrom(dateTime0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      Years years0 = Years.TWO;
      DurationFieldType durationFieldType0 = years0.getFieldType();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[3] = durationFieldType0;
      durationFieldTypeArray0[4] = durationFieldType0;
      PeriodType periodType0 = new PeriodType("\",nq@", durationFieldTypeArray0, (int[]) null);
      Period period1 = duration0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period1.plusMonths(195);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Period period0 = Period.weeks((-419));
      PeriodType.MONTH_INDEX = 12;
      // Undeclared exception!
      try { 
        period0.plusMonths(12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Duration duration0 = Duration.standardDays(0L);
      PeriodType periodType0 = PeriodType.months();
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period0.plusMinutes(1260);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Period period0 = new Period();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      PeriodType periodType0 = new PeriodType(".aTcviKQ.KB_?s<;9u;", durationFieldTypeArray0, (int[]) null);
      Period period1 = period0.withPeriodType(periodType0);
      // Undeclared exception!
      try { 
        period1.plusMinutes((-2585));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Period period0 = Period.days(5);
      PeriodType.MINUTE_INDEX = (-1137);
      // Undeclared exception!
      try { 
        period0.plusMinutes(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1137
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      // Undeclared exception!
      try { 
        period0.plusMillis((-1542));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldType0;
      durationFieldTypeArray0[3] = durationFieldTypeArray0[2];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      Period period0 = new Period(821L, 308L, periodType0, gregorianChronology0);
      // Undeclared exception!
      try { 
        period0.plusMillis(1659);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MILLI_INDEX = 60000;
      // Undeclared exception!
      try { 
        period0.plusMillis(60000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 60000
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      DurationFieldType durationFieldType0 = DurationFieldType.CENTURIES_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      PeriodType periodType0 = new PeriodType("org.joda.time.format.PeriodFormatterBuilder$Composite", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(0L, (-1831L), periodType0);
      // Undeclared exception!
      try { 
        period0.plusHours((-2079));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTime dateTime0 = DateTime.now((Chronology) buddhistChronology0);
      Interval interval0 = new Interval(dateTime0, dateTime0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      int[] intArray0 = new int[1];
      PeriodType periodType0 = new PeriodType("4+;Vj", durationFieldTypeArray0, intArray0);
      Period period0 = interval0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period0.plusHours(128);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      Period period0 = new Period(0L, 0L, periodType0);
      // Undeclared exception!
      try { 
        period0.plusDays((-2089));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      Period period0 = new Period(0L, (Chronology) gregorianChronology0);
      DateTime dateTime0 = DateTime.now((Chronology) gregorianChronology0);
      Duration duration0 = period0.toDurationTo(dateTime0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      PeriodType periodType0 = new PeriodType("Weeks", durationFieldTypeArray0, (int[]) null);
      Period period1 = duration0.toPeriodTo((ReadableInstant) dateTime0, periodType0);
      // Undeclared exception!
      try { 
        period1.plusDays(1455);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Period period0 = Period.seconds(400);
      PeriodType.DAY_INDEX = (-1325);
      // Undeclared exception!
      try { 
        period0.ZERO.plusDays((-1155));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1325
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0, 1);
      Period period0 = new Period((-1143L), (Chronology) ethiopicChronology0);
      PeriodType.MILLI_INDEX = (-1490);
      // Undeclared exception!
      try { 
        period0.plus(period0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1490
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Period period0 = new Period((-1270), (-1270), 1604, 1604, 1604, 1604, 0, 60000);
      Days days0 = Days.MAX_VALUE;
      // Undeclared exception!
      try { 
        period0.plus(days0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 1604 + 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null);
      // Undeclared exception!
      try { 
        Period.parse("EST", periodFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse("5Qlwh.", (PeriodFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PeriodFormatter periodFormatter0 = ISOPeriodFormat.standard();
      // Undeclared exception!
      try { 
        Period.parse("V^? 4j,]N?@*\"JEI}e", periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"V^? 4j,]N?@*\"JEI}e\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse("^0y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"^0y\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Period period0 = new Period();
      int[] intArray0 = new int[9];
      PeriodType periodType0 = new PeriodType("org/joda/time/tz/data", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.SECOND_INDEX = 1846;
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      DurationFieldType durationFieldType0 = DurationFieldType.SECONDS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      PeriodType periodType0 = PeriodType.forFields(durationFieldTypeArray0);
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Days days0 = Days.TWO;
      Period period0 = days0.toPeriod();
      Period period1 = period0.plusWeeks(2836);
      PeriodType periodType0 = PeriodType.millis();
      // Undeclared exception!
      try { 
        period1.normalizedStandard(periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 1715385600000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      Period period0 = new Period(0L, (Chronology) gregorianChronology0);
      DateTime dateTime0 = DateTime.now((Chronology) gregorianChronology0);
      Duration duration0 = period0.toDurationTo(dateTime0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      PeriodType periodType0 = new PeriodType("Weeks", durationFieldTypeArray0, (int[]) null);
      Period period1 = duration0.toPeriodTo((ReadableInstant) dateTime0, periodType0);
      // Undeclared exception!
      try { 
        period1.normalizedStandard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Hours hours0 = Hours.ZERO;
      Days days0 = hours0.toStandardDays();
      Period period0 = days0.toPeriod();
      PeriodType.DAY_INDEX = (-1217);
      // Undeclared exception!
      try { 
        period0.normalizedStandard();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      Period period0 = days0.toPeriod();
      // Undeclared exception!
      try { 
        period0.negated();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -2147483648 * -1
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      // Undeclared exception!
      try { 
        period0.minusYears((-673));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.YEAR_INDEX = (-4978125);
      // Undeclared exception!
      try { 
        period0.minusYears(1512);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4978125
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(0L);
      PeriodType periodType0 = PeriodType.months();
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period0.minusWeeks((-620));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      Period period0 = new Period((-1872L), periodType0);
      PeriodType.WEEK_INDEX = (-3431);
      // Undeclared exception!
      try { 
        period0.minusWeeks(12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3431
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      Duration duration0 = Duration.millis(0L);
      Period period0 = new Period(duration0, (ReadableInstant) null, periodType0);
      // Undeclared exception!
      try { 
        period0.minusSeconds(4153);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Period period0 = new Period();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      PeriodType periodType0 = new PeriodType("Lz$Bl3YyS-65^]", durationFieldTypeArray0, (int[]) null);
      Period period1 = period0.withPeriodType(periodType0);
      // Undeclared exception!
      try { 
        period1.minusSeconds(3248);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.SECOND_INDEX = (-209);
      // Undeclared exception!
      try { 
        period0.minusSeconds(765);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -209
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      Period period0 = new Period(423L, (Chronology) gregorianChronology0);
      DateTime dateTime0 = new DateTime((Chronology) gregorianChronology0);
      Duration duration0 = period0.toDurationFrom(dateTime0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      Years years0 = Years.TWO;
      DurationFieldType durationFieldType0 = years0.getFieldType();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[2] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[3] = durationFieldTypeArray0[1];
      durationFieldTypeArray0[4] = durationFieldTypeArray0[2];
      PeriodType periodType0 = new PeriodType("\",nq@", durationFieldTypeArray0, (int[]) null);
      Period period1 = duration0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period1.minusMonths(195);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      Duration duration0 = Duration.millis(2629746000L);
      PeriodType periodType0 = PeriodType.weeks();
      Period period0 = duration0.toPeriod(periodType0, (Chronology) iSOChronology0);
      PeriodType.MONTH_INDEX = 20;
      // Undeclared exception!
      try { 
        period0.minusMonths(2221);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 20
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(0L);
      PeriodType periodType0 = PeriodType.months();
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period0.minusMinutes(2007);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      PeriodType periodType0 = new PeriodType("^L/$)6pR>=", durationFieldTypeArray0, (int[]) null);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      Period period0 = new Period((long) 0, periodType0, (Chronology) copticChronology0);
      // Undeclared exception!
      try { 
        period0.minusMinutes((-1705));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MINUTE_INDEX = 2007;
      // Undeclared exception!
      try { 
        period0.minusMinutes(346);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2007
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MILLI_INDEX = 1407;
      // Undeclared exception!
      try { 
        period0.minusMillis(2834);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1407
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Period period0 = new Period();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      PeriodType periodType0 = new PeriodType(".aTcviKQ.KB_?s<;9u;", durationFieldTypeArray0, (int[]) null);
      Period period1 = period0.withPeriodType(periodType0);
      // Undeclared exception!
      try { 
        period1.minusHours((-1590));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.HOUR_INDEX = 439;
      // Undeclared exception!
      try { 
        period0.minusHours((-23));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 439
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Period period0 = new Period(1368L, 686L);
      Hours hours0 = Hours.MAX_VALUE;
      Period period1 = period0.minus(hours0);
      // Undeclared exception!
      try { 
        period1.minusHours(1114);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483647 + -1114
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      Period period0 = new Period(1440L, periodType0);
      // Undeclared exception!
      try { 
        period0.minusDays(92);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      DurationFieldType durationFieldType0 = DurationFieldType.MILLIS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[3] = durationFieldTypeArray0[2];
      durationFieldTypeArray0[4] = durationFieldTypeArray0[0];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(1971L, 1178L, periodType0);
      // Undeclared exception!
      try { 
        period0.minusDays(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Period period0 = new Period(10L);
      PeriodType.DAY_INDEX = 900;
      // Undeclared exception!
      try { 
        period0.ZERO.minusDays(900);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 900
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      Period period0 = days0.toPeriod();
      // Undeclared exception!
      try { 
        period0.minusDays((-3340));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 3340
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Period period0 = new Period(31536000000L, 0L);
      PeriodType periodType0 = PeriodType.dayTime();
      Period period1 = new Period(0, 31536000000L, periodType0);
      // Undeclared exception!
      try { 
        period1.minus(period0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Period period0 = Period.millis((-1775));
      Period period1 = period0.minusMinutes(12740625);
      PeriodType.MINUTE_INDEX = (-2753);
      // Undeclared exception!
      try { 
        period1.minus(period1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2753
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Period period0 = new Period((-84), (-84), (-1279), (-2360));
      Seconds seconds0 = Seconds.MAX_VALUE;
      // Undeclared exception!
      try { 
        period0.minus(seconds0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -1279 + -2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      PeriodType.WEEK_INDEX = 3998;
      Period period0 = new Period((-232), (-232), 12, 12, (-232), (-232), (-1), (-1), periodType0);
      // Undeclared exception!
      try { 
        period0.ZERO.getWeeks();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Period period0 = new Period(0L);
      PeriodType.SECOND_INDEX = (-332);
      // Undeclared exception!
      try { 
        period0.getSeconds();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MONTH_INDEX = 2189;
      // Undeclared exception!
      try { 
        period0.getMonths();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[7];
      int[] intArray0 = new int[7];
      intArray0[5] = (-74);
      PeriodType periodType0 = new PeriodType("8o1m", durationFieldTypeArray0, intArray0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
      Period period0 = mutablePeriod0.toPeriod();
      // Undeclared exception!
      try { 
        period0.getMinutes();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Duration duration0 = new Duration(30585600000L);
      Interval interval0 = new Interval((ReadableInstant) null, duration0);
      DateTime dateTime0 = interval0.getEnd();
      PeriodType periodType0 = PeriodType.yearWeekDay();
      PeriodType.MILLI_INDEX = 64;
      Period period0 = duration0.toPeriodFrom((ReadableInstant) dateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.getMillis();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Period period0 = Period.weeks(2);
      PeriodType.HOUR_INDEX = (-1816);
      // Undeclared exception!
      try { 
        period0.ZERO.getHours();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      int[] intArray0 = new int[0];
      YearMonth yearMonth1 = new YearMonth(yearMonth0, intArray0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(yearMonth1, yearMonth0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((-1109L));
      LocalDate localDate1 = localDate0.withWeekyear(636);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      PeriodType periodType0 = new PeriodType("The type must not be null", durationFieldTypeArray0, (int[]) null);
      Period period0 = null;
      try {
        period0 = new Period(localDate1, localDate0, periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((-2525L));
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) islamicChronology0);
      Minutes minutes0 = Minutes.MAX_VALUE;
      PeriodType periodType0 = minutes0.getPeriodType();
      Period period0 = null;
      try {
        period0 = new Period(localDate0, localDateTime0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      int[] intArray0 = new int[2];
      Partial partial0 = new Partial(islamicChronology0, dateTimeFieldTypeArray0, intArray0);
      Period period0 = null;
      try {
        period0 = new Period(partial0, partial0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.dayOfWeek();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      int[] intArray0 = new int[2];
      Partial partial0 = new Partial(islamicChronology0, dateTimeFieldTypeArray0, intArray0);
      Period period0 = null;
      try {
        period0 = new Period(partial0, partial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must be contiguous
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      MonthDay monthDay0 = MonthDay.parse("", dateTimeFormatter0);
      int[] intArray0 = new int[1];
      intArray0[0] = 12;
      MonthDay monthDay1 = new MonthDay(monthDay0, intArray0);
      Period period0 = null;
      try {
        period0 = new Period(monthDay1, monthDay1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DateTime dateTime0 = new DateTime((long) 5);
      DateTime dateTime1 = DateTime.now();
      PeriodType periodType0 = PeriodType.millis();
      Period period0 = null;
      try {
        period0 = new Period(dateTime0, dateTime1, periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 1392409281315
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      Duration duration0 = new Duration((long) 1);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      durationFieldTypeArray0[0] = durationFieldType0;
      int[] intArray0 = new int[3];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, intArray0);
      Period period0 = null;
      try {
        period0 = new Period(dateTime0, duration0, periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateTime dateTime0 = new DateTime((-739L), (Chronology) islamicChronology0);
      Days days0 = Days.MAX_VALUE;
      Duration duration0 = days0.toStandardDuration();
      Period period0 = Period.hours(1);
      Seconds seconds0 = period0.toStandardSeconds();
      PeriodType periodType0 = seconds0.getPeriodType();
      Period period1 = null;
      try {
        period1 = new Period(dateTime0, duration0, periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 185542587100800
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-262));
      DateTime dateTime0 = new DateTime((-9223372036854775808L), dateTimeZone0);
      Period period0 = new Period();
      Period period1 = period0.withDays((-611));
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      Duration duration0 = period1.toDurationFrom(mutableDateTime0);
      Period period2 = null;
      try {
        period2 = new Period(dateTime0, duration0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -9223372036854775808 + -52790400000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Duration duration0 = new Duration(0L, (-1029L));
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      int[] intArray0 = new int[5];
      PeriodType periodType0 = new PeriodType("ConverterManager.alterPartialConverters", durationFieldTypeArray0, intArray0);
      Period period0 = null;
      try {
        period0 = new Period(duration0, (ReadableInstant) null, periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      DateTime dateTime0 = DateTime.now((Chronology) iSOChronology0);
      Duration duration0 = Duration.standardHours(1733L);
      PeriodType periodType0 = PeriodType.millis();
      Period period0 = null;
      try {
        period0 = new Period(duration0, dateTime0, periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 6238800000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      PeriodType periodType0 = PeriodType.seconds();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      Period period0 = null;
      try {
        period0 = new Period(monthDay0, periodType0, gregorianChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: org.joda.time.MonthDay
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      Object object0 = new Object();
      Period period0 = null;
      try {
        period0 = new Period(object0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Object object0 = new Object();
      Period period0 = null;
      try {
        period0 = new Period(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      Period period0 = null;
      try {
        period0 = new Period((-9223372036854775808L), (Chronology) copticChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The minuend instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      Period period0 = null;
      try {
        period0 = new Period(9223372036854775802L, (Chronology) copticChronology0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 15250284452
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[8];
      durationFieldTypeArray0[0] = durationFieldType0;
      int[] intArray0 = new int[7];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      Period period0 = null;
      try {
        period0 = new Period((-525), (-15L), periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      int[] intArray0 = new int[7];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      Period period0 = null;
      try {
        period0 = new Period((-525), (-15L), periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Period period0 = null;
      try {
        period0 = new Period(10000000000000000L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 2777777777
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Period period0 = new Period((-612), 899, 899, (-2967));
      Minutes minutes0 = period0.toStandardMinutes();
      PeriodType periodType0 = minutes0.getPeriodType();
      Period period1 = null;
      try {
        period1 = new Period(7, 899, 7, 1862, 0, 1320, (-612), 3027, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'years'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      Period period1 = period0.normalizedStandard((PeriodType) null);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusMillis(60000);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusMinutes(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusHours(7);
      int int0 = period1.getHours();
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(0L);
      PeriodType periodType0 = PeriodType.months();
      Period period0 = duration0.toPeriod(periodType0);
      Period period1 = period0.plusMonths(15356250);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      Period period1 = period0.plusYears(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Period period0 = new Period();
      int int0 = period0.getHours();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      Period period0 = new Period(0L, 0L, periodType0);
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTime dateTime0 = DateTime.now((Chronology) gJChronology0);
      Duration duration0 = period0.toStandardDuration();
      MutablePeriod mutablePeriod0 = new MutablePeriod(dateTime0, duration0);
      mutablePeriod0.toPeriod();
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Period period0 = Period.weeks((-525));
      int int0 = period0.getWeeks();
      assertEquals((-525), int0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Period period0 = new Period(31536000000L, 0L);
      int int0 = period0.getYears();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      Period period0 = new Period(0L, 0L, periodType0);
      int int0 = period0.ZERO.getSeconds();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-193L));
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      Seconds seconds0 = Seconds.secondsBetween((ReadableInstant) mutableDateTime0, (ReadableInstant) mutableDateTime0);
      PeriodType periodType0 = seconds0.getPeriodType();
      Period period0 = new Period(mutableDateTime0, duration0, periodType0);
      // Undeclared exception!
      try { 
        period0.multipliedBy(914);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -16675200 * 914
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      Period period0 = new Period((Object) null, periodType0);
      // Undeclared exception!
      try { 
        period0.minusHours((-1783));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      Period period0 = new Period(4676L, 4676L, periodType0, iSOChronology0);
      // Undeclared exception!
      try { 
        period0.minusMillis((-1217));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Period period0 = new Period((-612), 899, 899, (-2967));
      int int0 = period0.getDays();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      int int0 = period0.ZERO.getMinutes();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Period period0 = Period.seconds(2);
      int int0 = period0.getMonths();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Period period0 = new Period(31536000000L, 0L);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      Period period1 = new Period(period0, ethiopicChronology0);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Period period0 = new Period(86400L, 0L);
      int int0 = period0.getMillis();
      assertEquals((-400), int0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Period period0 = new Period(31536000000L, 8L);
      PeriodType periodType0 = PeriodType.time();
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Period period0 = Period.months(1215);
      Period period1 = period0.normalizedStandard();
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Period period0 = new Period(31536000000L, 0L);
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      Period period1 = period0.normalizedStandard(periodType0);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Period period0 = new Period(31536000000L, 0L);
      // Undeclared exception!
      try { 
        period0.toStandardMinutes();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Minutes as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      Period period1 = period0.multipliedBy(1);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.ZERO.multipliedBy((-1034));
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Period period0 = new Period((-1526L), (Chronology) null);
      Period period1 = period0.minus((ReadablePeriod) null);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Period period0 = Period.seconds(117);
      Period period1 = period0.minusSeconds(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Period period0 = Period.millis(5);
      Period period1 = period0.ZERO.plusHours(0);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Period period0 = new Period(0L);
      Period period1 = period0.plusDays(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Period period0 = new Period(3L);
      Period period1 = period0.plusWeeks(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Hours hours0 = Hours.FIVE;
      Days days0 = hours0.toStandardDays();
      Period period0 = days0.toPeriod();
      Period period1 = period0.plusMonths(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(0L);
      PeriodType periodType0 = PeriodType.months();
      Period period0 = duration0.toPeriod(periodType0);
      Period period1 = period0.minusYears(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Period period0 = new Period(0L);
      Period period1 = period0.plus((ReadablePeriod) null);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, 1);
      MutablePeriod mutablePeriod0 = new MutablePeriod((-4275L), (Chronology) ethiopicChronology0);
      // Undeclared exception!
      try { 
        period0.plus(mutablePeriod0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Period period0 = new Period(0L);
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      Period period1 = period0.withFieldAdded(durationFieldType0, 0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Period period0 = new Period();
      // Undeclared exception!
      try { 
        period0.withFieldAdded((DurationFieldType) null, (-1260));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Period period0 = Period.seconds((-1022));
      // Undeclared exception!
      try { 
        period0.withField((DurationFieldType) null, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Period period0 = new Period(31536000000L, 0L);
      Period period1 = period0.withFields((ReadablePeriod) null);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      Period period1 = new Period();
      Period period2 = period1.withFields(period0);
      Period period3 = period2.withPeriodType((PeriodType) null);
      assertSame(period3, period2);
      assertNotSame(period3, period1);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[1] = dateTimeFieldTypeArray0[0];
      int[] intArray0 = new int[4];
      Partial partial0 = new Partial(islamicChronology0, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(partial0, partial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not have overlapping fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalTime localTime0 = new LocalTime(3600L);
      // Undeclared exception!
      try { 
        Period.fieldDifference(localDateTime0, localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      // Undeclared exception!
      try { 
        Period.fieldDifference(localTime0, monthDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      // Undeclared exception!
      try { 
        Period.fieldDifference(monthDay0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.fieldDifference((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.withYears(85);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds(59);
      Duration duration0 = seconds0.toStandardDuration();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      DurationFieldType durationFieldType0 = DurationFieldType.MINUTES_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[2] = durationFieldType0;
      PeriodType periodType0 = new PeriodType("z+,KS5e@", durationFieldTypeArray0, (int[]) null);
      Period period0 = duration0.toPeriod(periodType0, (Chronology) null);
      // Undeclared exception!
      try { 
        period0.minusWeeks(89);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Period period0 = new Period(Integer.MAX_VALUE, Integer.MAX_VALUE, (-1279), (-2360));
      // Undeclared exception!
      try { 
        period0.minusMinutes((-623));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 623
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      Duration duration0 = new Duration((long) 1);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      int[] intArray0 = new int[3];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, intArray0);
      Period period0 = null;
      try {
        period0 = new Period(dateTime0, duration0, periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Period period0 = Period.months((-9));
      PeriodType.YEAR_INDEX = (-9);
      // Undeclared exception!
      try { 
        period0.getYears();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      Period period0 = new Period((Object) null, periodType0, ethiopicChronology0);
      // Undeclared exception!
      try { 
        period0.withMinutes(67);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Period period0 = Period.days(424);
      PeriodType.DAY_INDEX = (-892);
      // Undeclared exception!
      try { 
        period0.getDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((-1109L));
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      PeriodType periodType0 = new PeriodType("The type must not be null", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(localDate0, localDate0, periodType0);
      // Undeclared exception!
      try { 
        period0.withWeeks(2653);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      Period period0 = Period.parse("", periodFormatter0);
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Period period0 = new Period(1368L, 686L);
      Period period1 = period0.plusMillis(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((Object) null);
      Period period0 = new Period(mutableDateTime0, mutableDateTime0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Period period0 = new Period(0, 0, 4, 0, 15356250, (-2), (-2), 780);
      Minutes minutes0 = period0.toStandardMinutes();
      Duration duration0 = minutes0.toStandardDuration();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) julianChronology0);
      Period period1 = new Period(duration0, mutableDateTime0);
      // Undeclared exception!
      try { 
        period1.toStandardHours();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Hours as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.minusHours((-1590));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Period period0 = Period.millis(2495);
      PeriodType.DAY_INDEX = 2640;
      // Undeclared exception!
      try { 
        period0.toStandardDuration();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Period period0 = Period.minutes(1073741824);
      // Undeclared exception!
      try { 
        period0.plusMinutes(1073741824);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 1073741824 + 1073741824
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      DurationFieldType durationFieldType0 = DurationFieldType.CENTURIES_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      PeriodType periodType0 = new PeriodType("org.joda.time.format.PeriodFormatterBuilder$Composite", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(0L, (-1831L), periodType0);
      Period period1 = period0.toPeriod();
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.withMillis((-4978125));
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      Duration duration0 = Duration.millis(2629746000L);
      PeriodType periodType0 = PeriodType.weeks();
      Period period0 = duration0.toPeriod(periodType0, (Chronology) iSOChronology0);
      // Undeclared exception!
      try { 
        period0.minusMonths(2221);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Period period0 = new Period(86400000L);
      Days days0 = period0.toStandardDays();
      assertEquals(1, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Object object0 = new Object();
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      Period period0 = null;
      try {
        period0 = new Period(object0, copticChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      MonthDay monthDay0 = MonthDay.parse("", dateTimeFormatter0);
      Period period0 = new Period(monthDay0, monthDay0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Literal", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      Period period1 = period0.negated();
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Period period0 = new Period();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      PeriodType periodType0 = new PeriodType(".aTcviKQ.KB_?s<;9u;", durationFieldTypeArray0, (int[]) null);
      Period period1 = period0.withPeriodType(periodType0);
      // Undeclared exception!
      try { 
        period1.getHours();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Minutes minutes0 = Minutes.standardMinutesIn((ReadablePeriod) null);
      Duration duration0 = minutes0.toStandardDuration();
      DateTime dateTime0 = new DateTime((-1531L));
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      int[] intArray0 = new int[1];
      PeriodType periodType0 = new PeriodType("85t", durationFieldTypeArray0, intArray0);
      Period period0 = new Period(duration0, dateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.withSeconds(1959);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      // Undeclared exception!
      try { 
        period0.withWeeks(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      Period period0 = new Period(423L, (Chronology) gregorianChronology0);
      Period period1 = period0.withHours((-1496));
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      Period period0 = days0.toPeriod();
      Period period1 = period0.withMinutes(8);
      int int0 = (-2402);
      Period period2 = period1.minusMillis((-2402));
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      // Undeclared exception!
      try { 
        period2.withFieldAdded(durationFieldType0, (-483));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -483
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      Duration duration0 = Duration.millis(2629746000L);
      PeriodType periodType0 = PeriodType.weeks();
      Period period0 = duration0.toPeriod(periodType0, (Chronology) iSOChronology0);
      // Undeclared exception!
      try { 
        period0.withMinutes((-113));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
}
