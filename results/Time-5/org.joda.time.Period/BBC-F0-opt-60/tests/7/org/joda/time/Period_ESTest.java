/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 23:59:10 GMT 2021
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Period_ESTest extends Period_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Period period0 = Period.years((-4181));
      PeriodType periodType0 = PeriodType.yearDayTime();
      Period period1 = period0.normalizedStandard(periodType0);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      Period period0 = new Period(846L, (Chronology) iSOChronology0);
      Period period1 = period0.plusYears((-1924));
      // Undeclared exception!
      try { 
        period1.toStandardDays();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Days as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDate localDate0 = new LocalDate(1596L, (DateTimeZone) fixedDateTimeZone0);
      Period period0 = new Period(localDate0, localDate0);
      Period period1 = period0.plusMinutes(5);
      Duration duration0 = period1.toStandardDuration();
      assertEquals(300000L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Period period0 = Period.seconds(2231);
      Duration duration0 = period0.toStandardDuration();
      assertEquals(2231000L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Period period0 = new Period(999, 999, 999, 999);
      Period period1 = period0.minusDays(999);
      Seconds seconds0 = period1.toStandardSeconds();
      assertEquals((-82656261), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Period period0 = Period.weeks(222);
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(2237760, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Period period0 = Period.seconds(1577);
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(26, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Period period0 = Period.seconds(4);
      Hours hours0 = period0.toStandardHours();
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Period period0 = new Period(8, (-157), 1687, (-157));
      Days days0 = period0.toStandardDays();
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Period period0 = Period.minutes((-536));
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Period period0 = Period.seconds(4);
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Period period0 = Period.days((-863));
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      Period period1 = period0.withFieldAdded(durationFieldType0, (-863));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDate localDate0 = new LocalDate(1596L, (DateTimeZone) fixedDateTimeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime(1596L);
      // Undeclared exception!
      try { 
        Period.fieldDifference(localDate0, localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Period period0 = new Period((Object) null);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Duration duration0 = new Duration(30962844000000L);
      Period period0 = new Period(duration0, (ReadableInstant) null);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Period period0 = Period.seconds(999);
      Period period1 = period0.minus(period0);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Period period0 = Period.weeks(999);
      Period period1 = period0.withMinutes(999);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Period period0 = Period.weeks(999);
      Period period1 = period0.withDays(999);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Period period0 = Period.days(1105);
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(157, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Period period0 = Period.days((-863));
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals((-123), weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Period period0 = Period.millis((-4181));
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals((-4), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Days days0 = Days.THREE;
      Period period0 = days0.toPeriod();
      Period period1 = period0.withSeconds(7);
      Period period2 = period1.withMonths(7);
      days0.getPeriodType();
      Days.days(7);
      period2.withWeeks(7);
      period0.toStandardMinutes();
      Hours hours0 = Hours.ONE;
      assertEquals(1, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Period period0 = Period.millis((-4181));
      Period period1 = period0.plusHours((-4181));
      Minutes minutes0 = period1.toStandardMinutes();
      assertEquals((-250860), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Duration duration0 = Duration.standardHours(10000000L);
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = duration0.toPeriod(periodType0);
      Hours hours0 = period0.toStandardHours();
      assertEquals(10000000, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDate localDate0 = new LocalDate(1596L, (DateTimeZone) fixedDateTimeZone0);
      Period period0 = new Period(localDate0, localDate0);
      Duration duration0 = period0.toStandardDuration();
      assertEquals(0L, duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Period period0 = Period.weeks(999);
      Days days0 = period0.toStandardDays();
      assertEquals(6993, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Period period0 = Period.hours((-1894));
      Days days0 = period0.toStandardDays();
      assertEquals((-78), days0.getDays());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      Period period0 = Period.parse("", periodFormatter0);
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Period period0 = new Period(1559, 869, (-676), (-1890), 0, (-154), (-1890), (-370));
      int int0 = period0.getYears();
      assertEquals(1559, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Period period0 = Period.years((-388));
      int int0 = period0.getYears();
      assertEquals((-388), int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Duration duration0 = Duration.standardHours(10000000L);
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = duration0.toPeriod(periodType0);
      int int0 = period0.getWeeks();
      assertEquals(59523, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Period period0 = new Period(1559, 869, (-676), (-1890), 0, (-154), (-1890), (-370));
      int int0 = period0.getWeeks();
      assertEquals((-676), int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Period period0 = Period.millis(0);
      int int0 = period0.getSeconds();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Period period0 = Period.millis(0);
      Period period1 = period0.minusSeconds((-2360));
      int int0 = period1.getSeconds();
      assertEquals(2360, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Period period0 = Period.weeks(999);
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      Period period1 = period0.withFieldAdded(durationFieldType0, 4);
      int int0 = period1.getMonths();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Period period0 = Period.months((-1));
      int int0 = period0.getMonths();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Period period0 = Period.minutes((-916));
      Period period1 = period0.negated();
      int int0 = period1.getMinutes();
      assertEquals(916, int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Days days0 = Days.parseDays((String) null);
      Period period0 = days0.toPeriod();
      Period period1 = period0.minusMinutes(1820);
      int int0 = period1.getMinutes();
      assertEquals((-1820), int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      Period period0 = new Period(846L, (Chronology) iSOChronology0);
      int int0 = period0.getMillis();
      assertEquals(846, int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Period period0 = new Period((-233L));
      int int0 = period0.getMillis();
      assertEquals((-233), int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Period period0 = Period.millis(0);
      Period period1 = period0.minusHours((-607));
      int int0 = period1.getHours();
      assertEquals(607, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Days days0 = Days.THREE;
      Period period0 = days0.toPeriod();
      Period period1 = period0.minusHours(7);
      Period period2 = period1.withMonths(7);
      PeriodType.weeks();
      Days.days(7);
      Period period3 = period0.minusYears(2);
      Period period4 = period1.plusMonths(7);
      period1.getMonths();
      Period period5 = period1.minusMinutes(0);
      period5.getHours();
      Period period6 = period5.minusDays(61);
      period1.getWeeks();
      Duration duration0 = period6.toStandardDuration();
      assertEquals((-5036400000L), duration0.getMillis());
      
      period2.plusWeeks((-871));
      assertTrue(period2.equals((Object)period4));
      assertNotSame(period0, period3);
      assertSame(period1, period5);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Days days0 = Days.THREE;
      Period period0 = days0.toPeriod();
      Period period1 = period0.minusHours(7);
      Period period2 = period1.withMonths(7);
      PeriodType.weeks();
      Days.days(7);
      Period period3 = period2.withWeeks(7);
      Period period4 = period1.plusMonths(7);
      Integer integer0 = new Integer(2);
      period3.plusYears((-134));
      assertTrue(period2.equals((Object)period4));
      assertFalse(period3.equals((Object)period4));
      
      LocalDateTime localDateTime0 = new LocalDateTime((long) 2);
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(0, weeks0.getWeeks());
      
      int int0 = period1.getDays();
      assertNotSame(period1, period0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Duration duration0 = Duration.standardHours(10000000L);
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = duration0.toPeriod(periodType0);
      Period period1 = period0.minusDays(8);
      int int0 = period1.getDays();
      assertEquals((-3), int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime((Chronology) gJChronology0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      PeriodType periodType0 = new PeriodType("VV?h?oEm]wO!7Q0;U", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((ReadableDuration) null, dateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.withYears(1150);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.YEAR_INDEX = 1000;
      // Undeclared exception!
      try { 
        period0.withYears(15356250);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1000
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      Duration duration0 = Duration.ZERO;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Period period0 = duration0.toPeriod(periodType0, (Chronology) buddhistChronology0);
      // Undeclared exception!
      try { 
        period0.withWeeks((-18));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      PeriodType periodType0 = new PeriodType("u[Nw3x&i/u", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(localDate0, localDate0, periodType0);
      // Undeclared exception!
      try { 
        period0.withWeeks(9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.WEEK_INDEX = (-1431);
      // Undeclared exception!
      try { 
        period0.withWeeks((-4));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1431
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2773);
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      // Undeclared exception!
      try { 
        period0.withSeconds(4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Period period0 = new Period(672, 12, 672, 672, 23, 8, 2362, 2362);
      PeriodType.SECOND_INDEX = 672;
      // Undeclared exception!
      try { 
        period0.withSeconds(672);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 672
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Period period0 = new Period();
      int[] intArray0 = new int[0];
      PeriodType periodType0 = new PeriodType("", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        period0.withPeriodType(periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Period period0 = Period.seconds(999);
      PeriodType periodType0 = PeriodType.hours();
      // Undeclared exception!
      try { 
        period0.withPeriodType(periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'seconds'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Duration duration0 = Duration.millis(0L);
      Years years0 = Years.THREE;
      PeriodType periodType0 = years0.getPeriodType();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Period period0 = duration0.toPeriod(periodType0, (Chronology) buddhistChronology0);
      // Undeclared exception!
      try { 
        period0.withMonths(2140);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Period period0 = Period.millis(74);
      PeriodType.MONTH_INDEX = (-434);
      // Undeclared exception!
      try { 
        period0.withMonths((-77));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -434
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1916, 1916, 4, 4, 4, 1916);
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
      try { 
        period0.withMinutes(153692453);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Period period0 = Period.millis(0);
      PeriodType.MINUTE_INDEX = 117;
      // Undeclared exception!
      try { 
        period0.withMinutes(1850);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 117
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      Duration duration0 = Duration.standardDays((-916));
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Period period0 = duration0.toPeriod(periodType0, (Chronology) ethiopicChronology0);
      // Undeclared exception!
      try { 
        period0.withMillis((-273));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      PeriodType periodType0 = new PeriodType("u[Nw3x&i/u", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(localDate0, localDate0, periodType0);
      // Undeclared exception!
      try { 
        period0.withMillis((-469));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDate localDate0 = new LocalDate(1596L, (DateTimeZone) fixedDateTimeZone0);
      Period period0 = new Period(localDate0, localDate0);
      PeriodType.MILLI_INDEX = 94;
      // Undeclared exception!
      try { 
        period0.withMillis((-916));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 94
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Instant instant0 = Instant.now();
      Interval interval0 = new Interval(instant0, instant0);
      PeriodType periodType0 = PeriodType.minutes();
      Period period0 = interval0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period0.withHours(Integer.MAX_VALUE);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      PeriodType periodType0 = new PeriodType("u[Nw3x&i/u", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(localDate0, localDate0, periodType0);
      // Undeclared exception!
      try { 
        period0.withHours((-4557));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.HOUR_INDEX = 1924;
      // Undeclared exception!
      try { 
        period0.withHours((-837));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1924
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Period period0 = new Period(8, (-157), 1687, (-157));
      Period period1 = period0.ZERO.withFields(period0);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PeriodType periodType0 = PeriodType.time();
      Period period0 = new Period(0L, periodType0);
      // Undeclared exception!
      try { 
        period0.withDays(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.DAY_INDEX = 478;
      // Undeclared exception!
      try { 
        period0.withDays((-52));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 478
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Period period0 = Period.weeks(999);
      Period period1 = period0.withMonths(1047);
      // Undeclared exception!
      try { 
        period1.toStandardWeeks();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Weeks as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PeriodType.HOUR_INDEX = 1860;
      Duration duration0 = Duration.standardHours(0L);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
      StrictChronology strictChronology0 = StrictChronology.getInstance(lenientChronology0);
      Period period0 = duration0.toPeriod((Chronology) strictChronology0);
      // Undeclared exception!
      try { 
        period0.toStandardWeeks();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Period period0 = new Period(1559, 869, (-676), (-1890), 0, 869, (-1890), (-370));
      // Undeclared exception!
      try { 
        period0.toStandardSeconds();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Seconds as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Seconds seconds0 = Seconds.ONE;
      Duration duration0 = seconds0.toStandardDuration();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldType0;
      durationFieldTypeArray0[3] = durationFieldTypeArray0[2];
      durationFieldTypeArray0[4] = durationFieldTypeArray0[3];
      durationFieldTypeArray0[5] = durationFieldTypeArray0[2];
      PeriodType periodType0 = new PeriodType("=X", durationFieldTypeArray0, (int[]) null);
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period0.toStandardSeconds();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MILLI_INDEX = 8;
      // Undeclared exception!
      try { 
        period0.toStandardSeconds();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Period period0 = Period.weeks(20503125);
      // Undeclared exception!
      try { 
        period0.toStandardSeconds();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 12400290000000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Period period0 = new Period(841, (-3), (-1458), 12, (-3), (-911), (-1504), (-911));
      // Undeclared exception!
      try { 
        period0.toStandardMinutes();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Minutes as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Period period0 = new Period(1272L);
      PeriodType.YEAR_INDEX = 19;
      // Undeclared exception!
      try { 
        period0.ZERO.toStandardMinutes();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Period period0 = new Period();
      Days days0 = Days.FIVE;
      DurationFieldType durationFieldType0 = days0.getFieldType();
      Period period1 = period0.withFieldAdded(durationFieldType0, 12825000);
      // Undeclared exception!
      try { 
        period1.toStandardMinutes();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 18468000000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Period period0 = Period.weeks(999);
      PeriodType.YEAR_INDEX = 999;
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.minusDays((-292275054));
      // Undeclared exception!
      try { 
        period1.toStandardHours();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 7014601296
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDate localDate0 = new LocalDate(1596L, (DateTimeZone) fixedDateTimeZone0);
      Period period0 = new Period(localDate0, localDate0);
      PeriodType.HOUR_INDEX = 1860;
      // Undeclared exception!
      try { 
        period0.toStandardDuration();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Period period0 = Period.millis((-4181));
      Period period1 = period0.minusMonths(1894);
      // Undeclared exception!
      try { 
        period1.toStandardDays();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Days as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Period period0 = Period.millis((-1958));
      PeriodType.YEAR_INDEX = (-1124);
      // Undeclared exception!
      try { 
        period0.toStandardDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Period period0 = Period.weeks(Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        period0.toStandardDays();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 15032385529
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      Period period0 = new Period(0L, 0L, copticChronology0);
      PeriodType periodType0 = PeriodType.weeks();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.plusYears(1454);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      PeriodType periodType0 = new PeriodType("u[Nw3x&i/u", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(localDate0, localDate0, periodType0);
      // Undeclared exception!
      try { 
        period0.plusYears((-2643));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      PeriodType.YEAR_INDEX = 1295;
      // Undeclared exception!
      try { 
        period0.plusYears(1057);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1295
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Days days0 = Days.FOUR;
      Duration duration0 = days0.toStandardDuration();
      PeriodType periodType0 = PeriodType.minutes();
      Period period0 = duration0.toPeriodTo((ReadableInstant) null, periodType0);
      // Undeclared exception!
      try { 
        period0.plusWeeks(1289);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Seconds seconds0 = Seconds.ONE;
      Duration duration0 = seconds0.toStandardDuration();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[2] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[3] = durationFieldTypeArray0[2];
      durationFieldTypeArray0[4] = durationFieldTypeArray0[1];
      durationFieldTypeArray0[5] = durationFieldTypeArray0[1];
      PeriodType periodType0 = new PeriodType("=X", durationFieldTypeArray0, (int[]) null);
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period0.plusWeeks((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Period period0 = Period.seconds((-737));
      PeriodType.WEEK_INDEX = (-737);
      // Undeclared exception!
      try { 
        period0.plusWeeks(530);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -737
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Period period0 = new Period(950L, periodType0, (Chronology) buddhistChronology0);
      // Undeclared exception!
      try { 
        period0.plusSeconds((-2291));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.SECOND_INDEX = 2798;
      // Undeclared exception!
      try { 
        period0.plusSeconds((-2839));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2798
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Period period0 = new Period(999, 999, 999, 999);
      Duration duration0 = period0.toDurationFrom((ReadableInstant) null);
      PeriodType periodType0 = PeriodType.yearWeekDay();
      Period period1 = new Period(duration0, (ReadableInstant) null, periodType0);
      // Undeclared exception!
      try { 
        period1.plusMonths((-1));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      PeriodType periodType0 = new PeriodType("u[Nw3x&i/u", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(localDate0, localDate0, periodType0);
      // Undeclared exception!
      try { 
        period0.plusMonths((-155));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MONTH_INDEX = 2958;
      // Undeclared exception!
      try { 
        period0.plusMonths(83);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2958
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Period period0 = new Period();
      Months months0 = Months.MAX_VALUE;
      Period period1 = period0.withFields(months0);
      // Undeclared exception!
      try { 
        period1.plusMonths(895);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 895
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Period period0 = Period.seconds((-676));
      PeriodType periodType0 = PeriodType.yearDay();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.plusMinutes(1559);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MINUTE_INDEX = (-1754);
      // Undeclared exception!
      try { 
        period0.plusMinutes((-1754));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1754
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Duration duration0 = Duration.parse((String) null);
      Seconds seconds0 = Seconds.THREE;
      Duration duration1 = seconds0.toStandardDuration();
      Duration duration2 = duration0.withDurationAdded((ReadableDuration) duration1, Integer.MAX_VALUE);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime((Chronology) iSOChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) dateTime0);
      Period period0 = duration2.toPeriod((Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        period0.plusMinutes(Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 42 + 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Days days0 = Days.FOUR;
      Duration duration0 = days0.toStandardDuration();
      PeriodType periodType0 = PeriodType.minutes();
      Period period0 = duration0.toPeriodTo((ReadableInstant) null, periodType0);
      // Undeclared exception!
      try { 
        period0.plusMillis((-1124));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MILLI_INDEX = 43;
      // Undeclared exception!
      try { 
        period0.plusMillis(9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 43
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Period period0 = new Period((-610L), (Chronology) null);
      // Undeclared exception!
      try { 
        period0.plusMillis((-2147483641));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -610 + -2147483641
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Days days0 = Days.FOUR;
      Duration duration0 = days0.toStandardDuration();
      PeriodType periodType0 = PeriodType.minutes();
      Period period0 = duration0.toPeriodTo((ReadableInstant) null, periodType0);
      // Undeclared exception!
      try { 
        period0.plusHours((-2315));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Period period0 = new Period((-1895), 39, 883, (-1895), 883, 39, (-1895), 10209375);
      PeriodType.HOUR_INDEX = 39;
      // Undeclared exception!
      try { 
        period0.plusHours(10209375);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 39
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Period period0 = Period.months(12);
      PeriodType.DAY_INDEX = (-1522);
      // Undeclared exception!
      try { 
        period0.plusDays(12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1522
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Period period0 = Period.days((-863));
      // Undeclared exception!
      try { 
        period0.plusDays(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -863 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(gregorianChronology0);
      Period period0 = new Period(2773, 2773, strictChronology0);
      Period period1 = period0.plusSeconds(8);
      PeriodType periodType0 = PeriodType.yearWeekDay();
      Period period2 = period1.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period2.plus(period1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Period period0 = new Period(1559, 869, (-676), (-1890), 0, (-154), (-1890), (-370));
      PeriodType.MONTH_INDEX = (-516);
      // Undeclared exception!
      try { 
        period0.plus(period0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -516
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Period period0 = new Period();
      Hours hours0 = Hours.MAX_VALUE;
      Period period1 = period0.plus(hours0);
      // Undeclared exception!
      try { 
        period1.plus(period1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null);
      // Undeclared exception!
      try { 
        Period.parse("8!UAiOr6", periodFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      // Undeclared exception!
      try { 
        Period.parse("Zone must not be null", periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Zone must not be null\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Literal", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse("J|_~r");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"J|_~r\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Period period0 = new Period((-1), (-1), (-1), (-1));
      int[] intArray0 = new int[3];
      PeriodType periodType0 = new PeriodType("Kq#%)$|W=L1%Qan'", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Period period0 = new Period(1559, 869, (-676), (-1890), 0, (-154), (-1890), (-370));
      PeriodType.HOUR_INDEX = (-544);
      PeriodType periodType0 = PeriodType.yearDay();
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Period period0 = Period.days((-863));
      Period period1 = period0.multipliedBy((-863));
      Period period2 = period1.multipliedBy(1772);
      PeriodType periodType0 = PeriodType.time();
      // Undeclared exception!
      try { 
        period2.normalizedStandard(periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 31673536032
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.DAY_INDEX = (-734);
      // Undeclared exception!
      try { 
        period0.normalizedStandard();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Period period0 = Period.millis((-2773));
      // Undeclared exception!
      try { 
        period0.multipliedBy(292272984);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -2773 * 292272984
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Period period0 = new Period(973, 0L, periodType0, buddhistChronology0);
      // Undeclared exception!
      try { 
        period0.minusYears(489);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[8];
      Minutes minutes0 = Minutes.minutes(1702);
      DurationFieldType durationFieldType0 = minutes0.getFieldType();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[2] = durationFieldType0;
      durationFieldTypeArray0[3] = durationFieldTypeArray0[1];
      durationFieldTypeArray0[4] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[5] = durationFieldTypeArray0[3];
      durationFieldTypeArray0[6] = durationFieldTypeArray0[1];
      durationFieldTypeArray0[7] = durationFieldTypeArray0[1];
      PeriodType periodType0 = new PeriodType("ConverterManager.alterPeriodConverters", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((-2408L), periodType0);
      // Undeclared exception!
      try { 
        period0.minusYears((-795));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Period period0 = new Period();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      int[] intArray0 = new int[8];
      intArray0[0] = 28265625;
      PeriodType periodType0 = new PeriodType("GB>%t", durationFieldTypeArray0, intArray0);
      Period period1 = period0.withPeriodType(periodType0);
      // Undeclared exception!
      try { 
        period1.minusYears(1880);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 28265625
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDate localDate0 = new LocalDate(1596L, (DateTimeZone) fixedDateTimeZone0);
      LocalDate localDate1 = localDate0.plusMonths((-916));
      Period period0 = new Period(localDate0, localDate1);
      // Undeclared exception!
      try { 
        period0.minusYears(Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -76 + -2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Days days0 = Days.FOUR;
      Duration duration0 = days0.toStandardDuration();
      PeriodType periodType0 = PeriodType.minutes();
      Period period0 = duration0.toPeriodTo((ReadableInstant) null, periodType0);
      // Undeclared exception!
      try { 
        period0.minusWeeks(67);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      PeriodType periodType0 = new PeriodType("u[Nw3x&i/u", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(localDate0, localDate0, periodType0);
      // Undeclared exception!
      try { 
        period0.minusWeeks(9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      Hours hours0 = seconds0.toStandardHours();
      Duration duration0 = hours0.toStandardDuration();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[7];
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldType0;
      durationFieldTypeArray0[3] = durationFieldType0;
      durationFieldTypeArray0[4] = durationFieldType0;
      durationFieldTypeArray0[5] = durationFieldType0;
      durationFieldTypeArray0[6] = durationFieldType0;
      int[] intArray0 = new int[3];
      intArray0[2] = 1666;
      PeriodType periodType0 = new PeriodType("O -g#~5~pj7G,*?u1G5", durationFieldTypeArray0, intArray0);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Period period0 = duration0.toPeriod(periodType0, (Chronology) ethiopicChronology0);
      // Undeclared exception!
      try { 
        period0.minusWeeks(890);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1666
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Instant instant0 = Instant.now();
      PeriodType periodType0 = PeriodType.yearWeekDay();
      Period period0 = duration0.toPeriodTo((ReadableInstant) instant0, periodType0);
      // Undeclared exception!
      try { 
        period0.minusSeconds(64);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(1063L);
      MutableDateTime mutableDateTime0 = new MutableDateTime((-4200L), (DateTimeZone) null);
      Period period0 = duration0.toPeriodTo((ReadableInstant) mutableDateTime0, (PeriodType) null);
      PeriodType.SECOND_INDEX = (-213);
      // Undeclared exception!
      try { 
        period0.minusSeconds(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -213
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Instant instant0 = gJChronology0.getGregorianCutover();
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      Duration duration0 = new Duration((ReadableInstant) null, mutableDateTime0);
      PeriodType periodType0 = PeriodType.weeks();
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period0.minusMonths(4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      PeriodType periodType0 = new PeriodType("u[Nw3x&i/u", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(localDate0, localDate0, periodType0);
      // Undeclared exception!
      try { 
        period0.minusMonths((-155));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Interval interval0 = new Interval((-597L), (-597L));
      Duration duration0 = interval0.toDuration();
      PeriodType periodType0 = PeriodType.yearDayTime();
      Period period0 = duration0.toPeriodTo((ReadableInstant) null, periodType0);
      PeriodType.MONTH_INDEX = (-1141);
      // Undeclared exception!
      try { 
        period0.minusMonths(244);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1141
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Period period0 = new Period();
      Months months0 = Months.MAX_VALUE;
      Period period1 = period0.withFields(months0);
      // Undeclared exception!
      try { 
        period1.minusMonths((-1524));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 1524
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      PeriodType periodType0 = new PeriodType("u[Nw3x&i/u", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(localDate0, localDate0, periodType0);
      // Undeclared exception!
      try { 
        period0.minusMinutes(9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MINUTE_INDEX = (-4);
      // Undeclared exception!
      try { 
        period0.minusMinutes((-1355));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      Period period0 = new Period((long) (-4181), periodType0);
      // Undeclared exception!
      try { 
        period0.minusMillis((-2496));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      PeriodType periodType0 = new PeriodType("u[Nw3x&i/u", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(localDate0, localDate0, periodType0);
      // Undeclared exception!
      try { 
        period0.minusMillis(974);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Period period0 = new Period(31083663600000L, (-2330L), (Chronology) null);
      // Undeclared exception!
      try { 
        period0.minusMillis(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -330 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      PeriodType periodType0 = PeriodType.years();
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period0.minusHours((-1274));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.HOUR_INDEX = (-854);
      // Undeclared exception!
      try { 
        period0.minusHours((-29));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -854
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Days days0 = Days.FOUR;
      Duration duration0 = days0.toStandardDuration();
      PeriodType periodType0 = PeriodType.minutes();
      Period period0 = duration0.toPeriodTo((ReadableInstant) null, periodType0);
      // Undeclared exception!
      try { 
        period0.minusDays(58);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      PeriodType periodType0 = new PeriodType("u[Nw3x&i/u", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(localDate0, localDate0, periodType0);
      // Undeclared exception!
      try { 
        period0.minusDays(7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Period period0 = Period.weeks((-2161));
      PeriodType.DAY_INDEX = (-2161);
      // Undeclared exception!
      try { 
        period0.minusDays(2156);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2161
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      Period period0 = days0.toPeriod();
      int int0 = (-458);
      // Undeclared exception!
      try { 
        period0.minusDays(int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 458
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Period period0 = new Period(950L, periodType0, (Chronology) buddhistChronology0);
      Hours hours0 = Hours.MAX_VALUE;
      // Undeclared exception!
      try { 
        period0.minus(hours0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Period period0 = new Period(245, (-539), 245, (-539));
      PeriodType.MINUTE_INDEX = (-1616);
      // Undeclared exception!
      try { 
        period0.ZERO.minus(period0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1616
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Period period0 = Period.weeks((-6));
      PeriodType.YEAR_INDEX = (-6);
      // Undeclared exception!
      try { 
        period0.getYears();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Period period0 = Period.millis((-2235));
      PeriodType.SECOND_INDEX = 1926;
      // Undeclared exception!
      try { 
        period0.ZERO.getSeconds();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Period period0 = new Period(1559, 869, (-676), (-1890), 0, 1559, (-1890), (-370));
      PeriodType.MONTH_INDEX = (-370);
      // Undeclared exception!
      try { 
        period0.getMonths();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(131, 131, 599, 131, 131, 599);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      MonthDay monthDay0 = MonthDay.fromDateFields(date0);
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      PeriodType.MINUTE_INDEX = 131;
      // Undeclared exception!
      try { 
        period0.ZERO.getMinutes();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MILLI_INDEX = (-2813);
      // Undeclared exception!
      try { 
        period0.getMillis();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.HOUR_INDEX = 1924;
      // Undeclared exception!
      try { 
        period0.ZERO.getHours();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      PeriodType periodType0 = new PeriodType("u[Nw3x&i/u", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(localDate0, localDate0, periodType0);
      // Undeclared exception!
      try { 
        period0.getDays();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime((-9223372036854775808L), (Chronology) ethiopicChronology0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(localDateTime0, localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant is below the supported minimum of 0001-01-01T00:00:00.000Z (EthiopicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      MonthDay monthDay0 = new MonthDay((Chronology) buddhistChronology0);
      MonthDay monthDay1 = new MonthDay(monthDay0, (int[]) null);
      // Undeclared exception!
      try { 
        Period.fieldDifference(monthDay1, monthDay1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((Object) null);
      Partial partial0 = new Partial(localDate0);
      int[] intArray0 = new int[1];
      Partial partial1 = new Partial(partial0, intArray0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(localDate0, partial1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      MonthDay monthDay0 = new MonthDay((DateTimeZone) null);
      Months months0 = Months.TEN;
      PeriodType periodType0 = months0.getPeriodType();
      Period period0 = null;
      try {
        period0 = new Period(localDateTime0, monthDay0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDate localDate0 = new LocalDate(1596L, (DateTimeZone) fixedDateTimeZone0);
      LocalDate localDate1 = localDate0.plusMonths((-916));
      Period period0 = new Period(localDate1, localDate1);
      Seconds seconds0 = period0.toStandardSeconds();
      PeriodType periodType0 = seconds0.getPeriodType();
      Period period1 = null;
      try {
        period1 = new Period(localDate1, localDate0, periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 2408832000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Object object0 = new Object();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      int[] intArray0 = new int[3];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, intArray0);
      Period period0 = null;
      try {
        period0 = new Period(object0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      Period period0 = null;
      try {
        period0 = new Period(durationFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: org.joda.time.DurationFieldType$StandardDurationFieldType
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      Period period0 = null;
      try {
        period0 = new Period(9223372036854775807L, periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 106751991167
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      Period period0 = new Period(2756, 2756, 2756, 2756);
      Seconds seconds0 = period0.toStandardSeconds();
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[2] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[3] = durationFieldType0;
      DurationFieldType durationFieldType1 = DurationFieldType.ERAS_TYPE;
      durationFieldTypeArray0[4] = durationFieldType1;
      int[] intArray0 = new int[3];
      PeriodType periodType0 = new PeriodType("f`)/}", durationFieldTypeArray0, intArray0);
      GJChronology gJChronology0 = GJChronology.getInstance();
      Period period1 = null;
      try {
        period1 = new Period((-1104L), 0L, periodType0, gJChronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      Period period0 = null;
      try {
        period0 = new Period(1916, 1916, 4, 2856, 1916, 121, 121, 999, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'years'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Period period0 = Period.minutes(6);
      Period period1 = period0.multipliedBy((-548));
      Hours hours0 = period1.toStandardHours();
      assertEquals((-54), hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Period period0 = new Period(1559, 869, (-676), (-1890), 0, 869, (-1890), (-370));
      Period period1 = period0.plusMillis(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusMillis(9);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      Period period0 = new Period(846L, (Chronology) iSOChronology0);
      Period period1 = period0.plusSeconds(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Period period0 = Period.millis(0);
      Period period1 = period0.plusMinutes(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusHours(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        period1.minusHours(1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -1
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDate localDate0 = new LocalDate(1596L, (DateTimeZone) fixedDateTimeZone0);
      Period period0 = new Period(localDate0, localDate0);
      Period period1 = period0.plusMonths(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Period period0 = Period.millis(0);
      Period period1 = period0.ZERO.plusYears(0);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Period period0 = new Period();
      int int0 = period0.ZERO.getHours();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Period period0 = Period.seconds(2336);
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      PeriodType periodType0 = PeriodType.dayTime();
      Period period1 = new Period(period0, periodType0, buddhistChronology0);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, periodType0);
      Period period0 = mutablePeriod0.toPeriod();
      // Undeclared exception!
      try { 
        period0.minusMinutes((-815));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      DateTime dateTime0 = new DateTime((Chronology) null);
      Date date0 = dateTime0.toDate();
      LocalDate localDate0 = LocalDate.fromDateFields(date0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      Interval interval0 = localDate0.toInterval(dateTimeZone0);
      Period period0 = interval0.toPeriod();
      int int0 = period0.getYears();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Period period0 = new Period((-1630L));
      int int0 = period0.getSeconds();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      DateTime dateTime0 = DateTime.now(dateTimeZone0);
      Hours hours0 = Hours.hoursBetween((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      PeriodType periodType0 = hours0.getPeriodType();
      Period period0 = new Period((Object) null, periodType0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period((-522L), (-522L), periodType0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Period period0 = new Period(3071L, 0L, periodType0, buddhistChronology0);
      // Undeclared exception!
      try { 
        period0.plusDays(317351877);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Period period0 = Period.seconds(4);
      int int0 = period0.ZERO.getDays();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse("", (PeriodFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Period period0 = new Period();
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (long) 2686, 7);
      Period period1 = new Period(period0, gJChronology0);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(21600000L);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      Period period0 = duration0.toPeriod((PeriodType) null, (Chronology) gJChronology0);
      int int0 = period0.getMinutes();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Period period0 = new Period();
      int int0 = period0.getMillis();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Days days0 = Days.FOUR;
      Duration duration0 = days0.toStandardDuration();
      Period period0 = new Period((ReadableInstant) null, duration0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period((-863), (-863), (-863), 1916, (-863), (-863), (-863), (-275), periodType0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.withMonths(7);
      PeriodType periodType0 = PeriodType.weeks();
      // Undeclared exception!
      try { 
        period1.normalizedStandard(periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Period period0 = Period.seconds(999);
      Period period1 = period0.minusMonths(1894);
      Period period2 = period1.normalizedStandard();
      assertNotSame(period1, period2);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(gregorianChronology0);
      Period period0 = new Period(2773, 2773, strictChronology0);
      Period period1 = period0.withYears(8);
      PeriodType periodType0 = PeriodType.yearWeekDay();
      Period period2 = period1.normalizedStandard(periodType0);
      assertNotSame(period1, period2);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Period period0 = Period.seconds(999);
      Period period1 = period0.minusYears((-1096));
      // Undeclared exception!
      try { 
        period1.toStandardDuration();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Duration as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.plusDays(1);
      Period period2 = period1.multipliedBy(1);
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period2, period0);
      assertSame(period2, period1);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.multipliedBy((-863));
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Period period0 = Period.weeks(999);
      Period period1 = period0.minus((ReadablePeriod) null);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Period period0 = Period.minutes((-2416));
      Minutes minutes0 = Minutes.MAX_VALUE;
      // Undeclared exception!
      try { 
        period0.minus(minutes0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2416 + -2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Period period0 = new Period((-233L));
      Period period1 = period0.minusMillis(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Period period0 = new Period((-233L));
      Period period1 = period0.plusHours(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      Period period0 = new Period(localDate0, localDate0);
      Period period1 = period0.plusDays(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Period period0 = Period.seconds(4);
      Period period1 = period0.plusWeeks(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Period period0 = Period.seconds(4);
      Period period1 = period0.plus((ReadablePeriod) null);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Period period0 = Period.seconds(4);
      DurationFieldType durationFieldType0 = DurationFieldType.YEARS_TYPE;
      Period period1 = period0.withFieldAdded(durationFieldType0, 0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Period period0 = Period.ZERO;
      // Undeclared exception!
      try { 
        period0.withFieldAdded((DurationFieldType) null, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Period period0 = Period.seconds(0);
      // Undeclared exception!
      try { 
        period0.withField((DurationFieldType) null, 384);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      Period period0 = new Period(0L, 0L, copticChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      Period period1 = period0.withField(durationFieldType0, 1454);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Period period0 = Period.weeks(999);
      Period period1 = period0.withFields((ReadablePeriod) null);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Period period0 = new Period(1848, 667, 1848, 667, 3, 667, 3, 3);
      Seconds seconds0 = Seconds.MIN_VALUE;
      Period period1 = period0.withFields(seconds0);
      // Undeclared exception!
      try { 
        period1.minusSeconds(667);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -667
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDate localDate0 = new LocalDate(1596L, (DateTimeZone) fixedDateTimeZone0);
      Period period0 = new Period(localDate0, localDate0);
      PeriodType periodType0 = PeriodType.weeks();
      Period period1 = period0.withPeriodType(periodType0);
      Period period2 = period1.withPeriodType(periodType0);
      assertNotSame(period2, period0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(12);
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[1] = dateTimeFieldTypeArray0[0];
      int[] intArray0 = new int[5];
      Partial partial0 = new Partial(julianChronology0, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(partial0, partial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not have overlapping fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((long) 2);
      LocalTime localTime0 = localDateTime0.toLocalTime();
      // Undeclared exception!
      try { 
        Period.fieldDifference(localDateTime0, localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1916), (-2773), (-4669));
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      LocalDate localDate0 = new LocalDate((long) (-4669), (Chronology) null);
      // Undeclared exception!
      try { 
        Period.fieldDifference(localDateTime0, localDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1916, 1916, 4, 4, 4, 1916);
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      LocalTime localTime0 = localDateTime0.toLocalTime();
      // Undeclared exception!
      try { 
        Period.fieldDifference(localTime0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.fieldDifference((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      MutableDateTime mutableDateTime0 = MutableDateTime.now(dateTimeZone0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      PeriodType periodType0 = new PeriodType("URF", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(mutableDateTime0, mutableDateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.getMonths();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.minusWeeks((-2147483641));
      // Undeclared exception!
      try { 
        period1.minusWeeks((-2147483641));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483641 + 2147483641
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Duration duration0 = Duration.millis(24L);
      Period period0 = duration0.toPeriod();
      PeriodType.WEEK_INDEX = 724;
      // Undeclared exception!
      try { 
        period0.ZERO.getWeeks();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Period period0 = new Period((-3541), (-3541), (-28), (-3541));
      Period period1 = period0.negated();
      // Undeclared exception!
      try { 
        period1.plusHours(Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 3541 + 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Period period0 = Period.weeks((-2161));
      Period period1 = period0.normalizedStandard();
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      Instant instant0 = new Instant((long) 999);
      Period period0 = new Period(instant0, (ReadableDuration) null, periodType0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Period period0 = Period.weeks(222);
      Duration duration0 = period0.toStandardDuration();
      assertEquals(134265600000L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      PeriodType periodType0 = PeriodType.dayTime();
      Period period0 = null;
      try {
        period0 = new Period((-916), 1000000000000000000L, periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 11574074074
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Period period0 = Period.weeks((-1389));
      Duration duration0 = period0.toDurationTo((ReadableInstant) null);
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      PeriodType periodType0 = PeriodType.millis();
      Period period1 = null;
      try {
        period1 = new Period(duration0, mutableDateTime0, periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -840067200000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Period period0 = new Period(1559, 869, (-676), (-1890), 0, (-154), (-1890), (-370));
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      PeriodType periodType0 = PeriodType.dayTime();
      Period period1 = null;
      try {
        period1 = new Period(period0, periodType0, buddhistChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'years'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Hours hours0 = Hours.SEVEN;
      Seconds seconds0 = hours0.toStandardSeconds();
      Duration duration0 = seconds0.toStandardDuration();
      MutableDateTime mutableDateTime0 = new MutableDateTime(9223372036854775807L);
      Period period0 = null;
      try {
        period0 = new Period(mutableDateTime0, duration0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 9223372036854775807 + 25200000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Period period0 = new Period(5, 1596L);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2773);
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime(dateTimeZone0);
      Period period0 = new Period(dateTime0, dateTime0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Period period0 = Period.hours(1919);
      PeriodType.DAY_INDEX = 1919;
      // Undeclared exception!
      try { 
        period0.getDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Hours hours0 = Hours.SEVEN;
      Seconds seconds0 = hours0.toStandardSeconds();
      Duration duration0 = seconds0.toStandardDuration();
      Period period0 = duration0.toPeriodTo((ReadableInstant) null);
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Period period0 = new Period((-610L), (Chronology) null);
      Period period1 = period0.minusHours(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        period1.negated();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -2147483648 * -1
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      Period period1 = period0.toPeriod();
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      Period period0 = new Period(883L, 883L, islamicChronology0);
      PeriodType.MILLI_INDEX = (-198);
      // Undeclared exception!
      try { 
        period0.minusMillis(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -198
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDate localDate0 = new LocalDate(1596L, (DateTimeZone) fixedDateTimeZone0);
      Period period0 = new Period(localDate0, localDate0);
      Period period1 = period0.withMillis((-916));
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDate localDate0 = new LocalDate(1596L, (DateTimeZone) fixedDateTimeZone0);
      Period period0 = new Period(localDate0, localDate0);
      PeriodType periodType0 = PeriodType.minutes();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.withYears((-2048));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDate localDate0 = new LocalDate(1596L, (DateTimeZone) fixedDateTimeZone0);
      Period period0 = new Period(localDate0, localDate0);
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      int[] intArray0 = new int[2];
      PeriodType periodType0 = new PeriodType("V|g.[-NT%@5'.n46v_g", (DurationFieldType[]) null, intArray0);
      Period period0 = null;
      try {
        period0 = new Period((-5), (-5), 23, (-5), 23, (-86399999), (-5), (-5), periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      Period period0 = null;
      try {
        period0 = new Period(monthDay0, gregorianChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: org.joda.time.MonthDay
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Period period0 = Period.parse("P");
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Seconds seconds0 = Seconds.ONE;
      Duration duration0 = seconds0.toStandardDuration();
      DurationFieldType durationFieldType0 = DurationFieldType.MILLIS_TYPE;
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldTypeArray0[1];
      durationFieldTypeArray0[3] = durationFieldType0;
      durationFieldTypeArray0[4] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[5] = durationFieldTypeArray0[1];
      PeriodType periodType0 = new PeriodType("=X", durationFieldTypeArray0, (int[]) null);
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period0.withSeconds((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Duration duration0 = Duration.parse((String) null);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime((Chronology) iSOChronology0);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) dateTime0);
      Period period0 = duration0.toPeriod((Chronology) gJChronology0);
      Period period1 = period0.withHours((-2290));
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      PeriodType periodType0 = new PeriodType("u[Nw3x&i/u", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(localDate0, localDate0, periodType0);
      // Undeclared exception!
      try { 
        period0.withMinutes(623158436);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      PeriodType periodType0 = new PeriodType("u[Nw3x&i/u", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(localDate0, localDate0, periodType0);
      // Undeclared exception!
      try { 
        period0.withDays(9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
}
