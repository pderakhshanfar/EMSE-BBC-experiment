/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 03:54:39 GMT 2021
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.format.ISOPeriodFormat;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Period_ESTest extends Period_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Period period0 = Period.months((-2723));
      Period period1 = period0.normalizedStandard();
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      Duration duration0 = Duration.standardDays((-775L));
      Period period0 = new Period(duration0, (ReadableInstant) null);
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Period period0 = Period.days(2975);
      Duration duration0 = period0.toStandardDuration();
      assertEquals(257040000000L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Period period0 = Period.weeks(0);
      Period period1 = period0.plusSeconds((-284));
      Duration duration0 = period1.toStandardDuration();
      assertEquals((-284000L), duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Period period0 = Period.minutes(71);
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(4260, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Period period0 = Period.days(2975);
      Period period1 = period0.withMillis(31);
      Seconds seconds0 = period1.toStandardSeconds();
      assertEquals(257040000, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Period period0 = Period.weeks(49);
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(493920, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Period period0 = Period.hours(20);
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(1200, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DateTime dateTime0 = new DateTime(1000000000L);
      Duration duration0 = Duration.ZERO;
      Duration duration1 = duration0.minus(2460L);
      Period period0 = new Period(dateTime0, duration1);
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Period period0 = Period.minutes((-227));
      Period period1 = period0.ZERO.minusWeeks(1333);
      Hours hours0 = period1.toStandardHours();
      assertEquals((-223944), hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Minutes minutes0 = Minutes.TWO;
      Duration duration0 = minutes0.toStandardDuration();
      Period period0 = duration0.toPeriod();
      Hours hours0 = period0.toStandardHours();
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Period period0 = Period.minutes((-227));
      Days days0 = period0.toStandardDays();
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Period period0 = new Period((Object) null);
      Hours hours0 = Hours.hours((-3161));
      Duration duration0 = hours0.toStandardDuration();
      Seconds seconds0 = duration0.toStandardSeconds();
      Period period1 = period0.withFields(seconds0);
      Days days0 = period1.toStandardDays();
      assertEquals((-131), days0.getDays());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Period period0 = Period.hours(2975);
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(17, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Period period0 = Period.minutes(504);
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Period period0 = Period.days(2975);
      Period period1 = period0.minusSeconds(1982);
      Weeks weeks0 = period1.toStandardWeeks();
      assertEquals(424, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      LocalDate localDate0 = monthDay0.toLocalDate(71);
      // Undeclared exception!
      try { 
        Period.fieldDifference(localDate0, monthDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Period period0 = new Period(0L);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Period period0 = Period.weeks(0);
      Period period1 = period0.withYears((-359));
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Period period0 = Period.days(2975);
      Period period1 = period0.withSeconds(8);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Period period0 = Period.days((-37));
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals((-5), weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Period period0 = Period.hours(2065);
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(7434000, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Period period0 = Period.weeks((-2));
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals((-1209600), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Period period0 = Period.days(2975);
      Period period1 = period0.minus(period0);
      Hours hours0 = period1.toStandardHours();
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Period period0 = Period.days(2975);
      Hours hours0 = period0.toStandardHours();
      assertEquals(71400, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Period period0 = Period.millis(5);
      Period period1 = period0.plusHours((-1498));
      Hours hours0 = period1.toStandardHours();
      assertEquals((-1498), hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Period period0 = Period.hours(83);
      Duration duration0 = period0.toStandardDuration();
      assertEquals(298800000L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Period period0 = new Period(354L, 354L, periodType0, gJChronology0);
      Duration duration0 = period0.toStandardDuration();
      assertEquals(0L, duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Period period0 = Period.minutes(504);
      Duration duration0 = period0.toStandardDuration();
      assertEquals(30240000L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Period period0 = Period.days(2975);
      Period period1 = period0.minusMillis(2975);
      Period period2 = period1.minus(period0);
      Duration duration0 = period2.toStandardDuration();
      assertFalse(period2.equals((Object)period1));
      assertEquals((-2975L), duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(0L);
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      Days days0 = period0.toStandardDays();
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Period period0 = Period.weeks(504);
      Days days0 = period0.toStandardDays();
      assertEquals(3528, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Period period0 = Period.weeks(0);
      Period period1 = period0.plusHours((-359));
      Days days0 = period1.toStandardDays();
      assertEquals((-14), days0.getDays());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      Period period0 = Period.parse("", periodFormatter0);
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Period period0 = Period.years(59);
      int int0 = period0.getYears();
      assertEquals(59, int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Period period0 = Period.minutes((-2147483647));
      Period period1 = period0.plusYears((-2147483647));
      int int0 = period1.getYears();
      assertEquals((-2147483647), int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Period period0 = Period.millis(4396);
      Period period1 = period0.withWeeks(4396);
      int int0 = period1.getWeeks();
      assertEquals(4396, int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Period period0 = Period.minutes((-227));
      Period period1 = period0.ZERO.minusWeeks(1333);
      int int0 = period1.getWeeks();
      assertEquals((-1333), int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Period period0 = Period.hours(0);
      int int0 = period0.getSeconds();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Period period0 = Period.weeks(0);
      Period period1 = period0.plusSeconds((-284));
      Period period2 = period1.withDays(532);
      int int0 = period2.getSeconds();
      assertEquals((-284), int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Period period0 = new Period();
      int int0 = period0.ZERO.getMonths();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Period period0 = Period.seconds(71);
      Months months0 = Months.MAX_VALUE;
      Period period1 = period0.minus(months0);
      int int0 = period1.getMonths();
      assertEquals((-2147483647), int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Period period0 = new Period(1038, 1038, 157, 0);
      int int0 = period0.ZERO.getMinutes();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Period period0 = Period.minutes((-86400000));
      int int0 = period0.getMinutes();
      assertEquals((-86400000), int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Period period0 = Period.millis((-2723));
      Period period1 = period0.multipliedBy((-2723));
      int int0 = period1.getMillis();
      assertEquals(7414729, int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Period period0 = Period.days(2975);
      Period period1 = period0.minusMillis(2975);
      int int0 = period1.getMillis();
      assertEquals((-2975), int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((-817L));
      LocalTime localTime1 = localTime0.plusHours(372);
      Period period0 = Period.fieldDifference(localTime1, localTime0);
      int int0 = period0.getHours();
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.minusHours(1);
      int int0 = period1.getHours();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Period period0 = Period.days(2975);
      int int0 = period0.getDays();
      assertEquals(2975, int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Period period0 = Period.days((-3501));
      int int0 = period0.getDays();
      assertEquals((-3501), int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      Duration duration0 = Duration.standardHours(1);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(mutableDateTime0, duration0, periodType0);
      // Undeclared exception!
      try { 
        period0.withYears(4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      int[] intArray0 = new int[3];
      PeriodType periodType0 = new PeriodType("Must supply a chronology", durationFieldTypeArray0, intArray0);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      Period period0 = new Period(0L, 0L, periodType0, gregorianChronology0);
      // Undeclared exception!
      try { 
        period0.withYears(1895);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Duration duration0 = new Duration(190L, (-249L));
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(12);
      DateTime dateTime0 = new DateTime(195L, dateTimeZone0);
      PeriodType periodType0 = PeriodType.seconds();
      Period period0 = new Period(duration0, dateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.withWeeks(40);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Period period0 = Period.weeks(3452);
      PeriodType.WEEK_INDEX = 8;
      // Undeclared exception!
      try { 
        period0.withWeeks(2594);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(0L);
      Period period0 = duration0.toPeriod();
      Days days0 = Days.SEVEN;
      PeriodType periodType0 = days0.getPeriodType();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.withSeconds((-80));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Period period0 = Period.weeks(3452);
      PeriodType.SECOND_INDEX = 3452;
      // Undeclared exception!
      try { 
        period0.ZERO.withSeconds(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3452
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Period period0 = new Period();
      int[] intArray0 = new int[2];
      PeriodType periodType0 = new PeriodType("Minutes", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        period0.withPeriodType(periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds((-36L));
      Period period0 = duration0.toPeriod();
      Weeks weeks0 = Weeks.THREE;
      PeriodType periodType0 = weeks0.getPeriodType();
      // Undeclared exception!
      try { 
        period0.withPeriodType(periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'seconds'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Instant instant0 = Instant.now();
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      DateTime dateTime0 = mutableDateTime0.toDateTime();
      Hours hours0 = Hours.THREE;
      PeriodType periodType0 = hours0.getPeriodType();
      Period period0 = new Period(dateTime0, mutableDateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.withMonths((-3244));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      PeriodType.MONTH_INDEX = (-86400);
      // Undeclared exception!
      try { 
        period0.withMonths(11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -86400
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(0L);
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
      try { 
        period0.withMinutes(4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MINUTE_INDEX = 85;
      // Undeclared exception!
      try { 
        period0.withMinutes((-1050));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 85
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      Duration duration0 = weeks0.toStandardDuration();
      PeriodType periodType0 = PeriodType.weeks();
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period0.withMillis(5);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MILLI_INDEX = 29;
      // Undeclared exception!
      try { 
        period0.withMillis(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 29
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Period period0 = Period.weeks(0);
      Weeks weeks0 = Weeks.THREE;
      PeriodType periodType0 = weeks0.getPeriodType();
      Period period1 = period0.ZERO.withPeriodType(periodType0);
      // Undeclared exception!
      try { 
        period1.withHours(4563);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Period period0 = new Period((-597), (-857), 7, (-597));
      PeriodType.HOUR_INDEX = 2957;
      // Undeclared exception!
      try { 
        period0.withHours((-597));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2957
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Period period0 = new Period(1180L, 0L, periodType0, buddhistChronology0);
      Months months0 = Months.SEVEN;
      // Undeclared exception!
      try { 
        period0.withFields(months0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'months'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Period period0 = Period.days(2975);
      Months months0 = Months.MAX_VALUE;
      Period period1 = period0.minus(months0);
      DurationFieldType durationFieldType0 = months0.getFieldType();
      // Undeclared exception!
      try { 
        period1.withFieldAdded(durationFieldType0, (-71));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483647 + -71
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Duration duration0 = Duration.standardHours(3L);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2026);
      DateTime dateTime0 = new DateTime(3L, dateTimeZone0);
      PeriodType periodType0 = PeriodType.hours();
      Period period0 = duration0.toPeriodFrom((ReadableInstant) dateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.withDays(2026);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.DAY_INDEX = (-21);
      // Undeclared exception!
      try { 
        period0.withDays(3979);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -21
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      Period period1 = period0.plusYears(2);
      // Undeclared exception!
      try { 
        period1.toStandardWeeks();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Weeks as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Period period0 = Period.ZERO;
      PeriodType.MONTH_INDEX = (-687);
      // Undeclared exception!
      try { 
        period0.toStandardWeeks();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Period period0 = Period.ZERO;
      PeriodType.DAY_INDEX = 771;
      // Undeclared exception!
      try { 
        period0.toStandardSeconds();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.withHours(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        period1.toStandardSeconds();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -7730941132800
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      Duration duration0 = Duration.standardMinutes(1073741823L);
      Period period0 = new Period(dateTime0, duration0);
      // Undeclared exception!
      try { 
        period0.toStandardMinutes();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Minutes as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Days days0 = Days.days((-2817));
      Period period0 = days0.toPeriod();
      PeriodType.SECOND_INDEX = (-2817);
      // Undeclared exception!
      try { 
        period0.ZERO.toStandardMinutes();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Period period0 = Period.days((-1587));
      Period period1 = period0.multipliedBy((-2201));
      // Undeclared exception!
      try { 
        period1.toStandardMinutes();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 5029901280
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Period period0 = Period.days(2975);
      Months months0 = Months.MAX_VALUE;
      Period period1 = period0.minus(months0);
      // Undeclared exception!
      try { 
        period1.toStandardHours();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Hours as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Period period0 = new Period(0, 0, 0, 0, 0, 0, 9, 0);
      PeriodType.DAY_INDEX = 157;
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      Period period0 = days0.toPeriod();
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -51539607552
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.HOUR_INDEX = 213;
      // Undeclared exception!
      try { 
        period0.toStandardDuration();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Period period0 = Period.weeks(0);
      Period period1 = period0.plusYears(258);
      // Undeclared exception!
      try { 
        period1.toStandardDays();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Days as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Period period0 = Period.weeks(0);
      PeriodType.MINUTE_INDEX = 898;
      // Undeclared exception!
      try { 
        period0.toStandardDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Period period0 = Period.weeks(0);
      Weeks weeks0 = Weeks.THREE;
      PeriodType periodType0 = weeks0.getPeriodType();
      Period period1 = period0.ZERO.withPeriodType(periodType0);
      // Undeclared exception!
      try { 
        period1.plusYears(9);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.YEAR_INDEX = (-5489);
      // Undeclared exception!
      try { 
        period0.ZERO.plusYears(7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Period period0 = new Period((-2147483647), (-2147483647), (-2147483647), (-2147483647), (-2147483647), (-2147483647), (-2147483647), (-2147483647));
      // Undeclared exception!
      try { 
        period0.plusYears((-2147483647));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483647 + -2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Period period0 = new Period();
      PeriodType periodType0 = PeriodType.months();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.plusWeeks(1647);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Period period0 = Period.weeks(462);
      PeriodType.WEEK_INDEX = 719527;
      // Undeclared exception!
      try { 
        period0.ZERO.plusWeeks(719527);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Duration duration0 = new Duration(2279L);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(4);
      DateTime dateTime0 = DateTime.now(dateTimeZone0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      DurationFieldType durationFieldType0 = DurationFieldType.CENTURIES_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      PeriodType periodType0 = new PeriodType("2mf uY", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(duration0, dateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.plusSeconds(2407);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      PeriodType.SECOND_INDEX = 2619;
      // Undeclared exception!
      try { 
        period0.plusSeconds(2505);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Period period0 = Period.weeks(0);
      Weeks weeks0 = Weeks.THREE;
      PeriodType periodType0 = weeks0.getPeriodType();
      Period period1 = period0.ZERO.withPeriodType(periodType0);
      // Undeclared exception!
      try { 
        period1.plusMonths((-2753));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Period period0 = Period.months(708);
      PeriodType.MONTH_INDEX = 8;
      // Undeclared exception!
      try { 
        period0.plusMonths((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Period period0 = Period.minutes(71);
      Months months0 = Months.MAX_VALUE;
      Period period1 = period0.minus(months0);
      // Undeclared exception!
      try { 
        period1.plusMonths((-1258));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483647 + -1258
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
      try { 
        period0.plusMinutes((-3));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      int[] intArray0 = new int[4];
      PeriodType periodType0 = new PeriodType("|} ^]K(|#Q", durationFieldTypeArray0, intArray0);
      Period period0 = new Period(mutableDateTime0, mutableDateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.plusMinutes(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Period period0 = new Period();
      Minutes minutes0 = Minutes.MIN_VALUE;
      Period period1 = period0.minus(minutes0);
      // Undeclared exception!
      try { 
        period1.plusMinutes((-1338));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -1338
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Period period0 = Period.weeks(0);
      PeriodType periodType0 = PeriodType.yearWeekDay();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.plusMillis(20);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      Duration duration0 = Duration.standardHours(1);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(mutableDateTime0, duration0, periodType0);
      // Undeclared exception!
      try { 
        period0.plusMillis(71);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Duration duration0 = new Duration((-1322L));
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      Weeks weeks0 = Weeks.MIN_VALUE;
      DurationFieldType durationFieldType0 = weeks0.getFieldType();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldTypeArray0[0];
      int[] intArray0 = new int[6];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, intArray0);
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period0.plusMillis((-1877));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(0L);
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
      try { 
        period0.plusHours((-1506));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.HOUR_INDEX = 8;
      // Undeclared exception!
      try { 
        period0.plusHours((-2154));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Period period0 = new Period((-11), (-11), (-11), (-2147483647), (-11), 832, 22, 2);
      // Undeclared exception!
      try { 
        period0.plusHours((-2147483647));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -11 + -2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      Period period0 = Period.hours(20);
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.plusDays(10);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      PeriodType.DAY_INDEX = 24;
      // Undeclared exception!
      try { 
        period0.plusDays((-689));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Period period0 = new Period(12, (-4038), 858, (-626));
      Days days0 = Days.MIN_VALUE;
      Period period1 = period0.withFields(days0);
      // Undeclared exception!
      try { 
        period1.plusDays((-3158));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -3158
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      Duration duration0 = Duration.standardHours(1);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(mutableDateTime0, duration0, periodType0);
      Months months0 = Months.ONE;
      // Undeclared exception!
      try { 
        period0.plus(months0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Period period0 = Period.days(1573);
      Period period1 = Period.months(2333);
      PeriodType.MONTH_INDEX = (-3445);
      // Undeclared exception!
      try { 
        period0.plus(period1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, (PeriodParser) null);
      // Undeclared exception!
      try { 
        Period.parse("", periodFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse("pl`qUZPe\u0001w4%", (PeriodFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PeriodFormatter periodFormatter0 = ISOPeriodFormat.standard();
      // Undeclared exception!
      try { 
        Period.parse("ReadablePartial objects must have the same set of fields", periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"ReadablePartial objects must hav...\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Literal", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Period period0 = new Period();
      int[] intArray0 = new int[4];
      PeriodType periodType0 = new PeriodType("a_kk", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Period period0 = Period.weeks((-2));
      Weeks weeks0 = Weeks.THREE;
      PeriodType periodType0 = weeks0.getPeriodType();
      PeriodType.WEEK_INDEX = (-2);
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Period period0 = Period.days(2975);
      PeriodType periodType0 = PeriodType.millis();
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 257040000000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      Duration duration0 = seconds0.toStandardDuration();
      DateTime dateTime0 = new DateTime();
      Period period0 = duration0.toPeriodTo((ReadableInstant) dateTime0);
      PeriodType.DAY_INDEX = (-260);
      // Undeclared exception!
      try { 
        period0.normalizedStandard();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Hours hours0 = Hours.MIN_VALUE;
      Duration duration0 = hours0.toStandardDuration();
      PeriodType periodType0 = PeriodType.time();
      Period period0 = duration0.toPeriodFrom((ReadableInstant) null, periodType0);
      // Undeclared exception!
      try { 
        period0.negated();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -2147483648 * -1
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Period period0 = Period.minutes(71);
      Months months0 = Months.MAX_VALUE;
      Period period1 = period0.minus(months0);
      // Undeclared exception!
      try { 
        period1.multipliedBy(71);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -2147483647 * 71
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      PeriodType periodType0 = new PeriodType("org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((Object) null, periodType0);
      // Undeclared exception!
      try { 
        period0.minusYears(32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Period period0 = new Period(0L, (-3L));
      PeriodType.YEAR_INDEX = 5;
      PeriodType.YEAR_INDEX = (-21);
      // Undeclared exception!
      try { 
        period0.minusYears((-21));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Period period0 = Period.ZERO;
      Years years0 = Years.MAX_VALUE;
      Period period1 = period0.withFields(years0);
      // Undeclared exception!
      try { 
        period1.minusYears((-2010));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 2010
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Duration duration0 = Duration.standardDays(0L);
      Instant instant0 = new Instant();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      int[] intArray0 = new int[1];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, intArray0);
      Period period0 = new Period(duration0, instant0, periodType0);
      // Undeclared exception!
      try { 
        period0.minusWeeks((-2669));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Period period0 = Period.days(2975);
      PeriodType periodType0 = PeriodType.yearMonthDay();
      Period period1 = period0.withPeriodType(periodType0);
      // Undeclared exception!
      try { 
        period1.minusSeconds(728);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      MutableDateTime mutableDateTime0 = new MutableDateTime(49, 2, 2, 2, 49, 49, 2, dateTimeZone0);
      Duration duration0 = Duration.standardHours(1);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(mutableDateTime0, duration0, periodType0);
      // Undeclared exception!
      try { 
        period0.minusSeconds(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      PeriodType.SECOND_INDEX = 2619;
      Period period0 = Period.millis(4254);
      // Undeclared exception!
      try { 
        period0.minusSeconds(83);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Period period0 = Period.seconds(1377);
      // Undeclared exception!
      try { 
        period0.minusSeconds((-2147483647));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 1377 + 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Period period0 = Period.weeks(0);
      Weeks weeks0 = Weeks.THREE;
      PeriodType periodType0 = weeks0.getPeriodType();
      Period period1 = period0.ZERO.withPeriodType(periodType0);
      // Undeclared exception!
      try { 
        period1.minusMonths(44);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MONTH_INDEX = (-2028);
      // Undeclared exception!
      try { 
        period0.minusMonths(6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Period period0 = Period.minutes(71);
      Months months0 = Months.MAX_VALUE;
      Period period1 = period0.minus(months0);
      // Undeclared exception!
      try { 
        period1.minusMonths(4);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483647 + -4
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds((-11L));
      Period period0 = duration0.toPeriod();
      Days days0 = Days.SEVEN;
      PeriodType periodType0 = days0.getPeriodType();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.minusMinutes(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Period period0 = Period.weeks((-535));
      PeriodType.MINUTE_INDEX = (int) (byte) (-31);
      // Undeclared exception!
      try { 
        period0.ZERO.minusMinutes((-535));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Period period0 = new Period();
      Minutes minutes0 = Minutes.MAX_VALUE;
      Period period1 = period0.withFields(minutes0);
      // Undeclared exception!
      try { 
        period1.minusMinutes((-6));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 6
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      Period period0 = Period.fieldDifference(localDate0, localDate0);
      // Undeclared exception!
      try { 
        period0.minusMillis(463);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MILLI_INDEX = (-5);
      // Undeclared exception!
      try { 
        period0.minusMillis((-1069));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(0L);
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
      try { 
        period0.minusHours(4527);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Period period0 = Period.months(17971875);
      PeriodType.HOUR_INDEX = 2022;
      // Undeclared exception!
      try { 
        period0.minusHours((-154));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Period period0 = Period.ZERO;
      Duration duration0 = period0.toDurationFrom((ReadableInstant) null);
      Weeks weeks0 = Weeks.THREE;
      PeriodType periodType0 = weeks0.getPeriodType();
      Period period1 = duration0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period1.minusDays(86400000);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.DAY_INDEX = (-3307);
      // Undeclared exception!
      try { 
        period0.minusDays((-2324));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(666L);
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      Period period1 = Period.minutes(1659);
      // Undeclared exception!
      try { 
        period0.minus(period1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.withDays((-4));
      PeriodType.DAY_INDEX = (-877);
      // Undeclared exception!
      try { 
        period0.minus(period1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Months months0 = Months.MAX_VALUE;
      Period period0 = new Period((-2796), (-2796), 820, 820, 23034375, (-2796), 1858, 1);
      // Undeclared exception!
      try { 
        period0.minus(months0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2796 + -2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      PeriodType.YEAR_INDEX = 5102;
      Period period0 = new Period((ReadableInstant) null, (ReadableDuration) null, periodType0);
      // Undeclared exception!
      try { 
        period0.getYears();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Period period0 = Period.weeks((-7));
      PeriodType.WEEK_INDEX = (-7);
      // Undeclared exception!
      try { 
        period0.getWeeks();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Period period0 = Period.weeks(0);
      PeriodType.SECOND_INDEX = (-695);
      // Undeclared exception!
      try { 
        period0.ZERO.getSeconds();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MINUTE_INDEX = 2141;
      // Undeclared exception!
      try { 
        period0.ZERO.getMinutes();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Period period0 = Period.days(238);
      PeriodType.MILLI_INDEX = 192;
      // Undeclared exception!
      try { 
        period0.ZERO.getMillis();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.DAY_INDEX = (-1787);
      // Undeclared exception!
      try { 
        period0.ZERO.getDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[7];
      int[] intArray0 = new int[9];
      Partial partial0 = new Partial((Chronology) null, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(partial0, partial0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.millisOfSecond();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      dateTimeFieldTypeArray0[2] = dateTimeFieldTypeArray0[0];
      int[] intArray0 = new int[2];
      Partial partial0 = new Partial(ethiopicChronology0, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(partial0, partial0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((-892L));
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      LocalDate localDate1 = localDate0.withField(dateTimeFieldType0, (-1001));
      PeriodType periodType0 = PeriodType.millis();
      Period period0 = null;
      try {
        period0 = new Period(localDate1, localDate0, periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 93755491200000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Period period0 = Period.days(2975);
      PeriodType periodType0 = PeriodType.time();
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      Period period1 = null;
      try {
        period1 = new Period(period0, periodType0, iSOChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'days'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      Object object0 = new Object();
      Period period0 = null;
      try {
        period0 = new Period(object0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Period period0 = null;
      try {
        period0 = new Period(localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: org.joda.time.LocalDateTime
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int[] intArray0 = new int[9];
      PeriodType periodType0 = new PeriodType("~4V,,kod`YH>^T;RQ", (DurationFieldType[]) null, intArray0);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(julianChronology0);
      Period period0 = null;
      try {
        period0 = new Period(30L, periodType0, (Chronology) lenientChronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int[] intArray0 = new int[2];
      PeriodType periodType0 = new PeriodType((String) null, (DurationFieldType[]) null, intArray0);
      Period period0 = null;
      try {
        period0 = new Period(868L, periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.multipliedBy(292272992);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Period period0 = Period.weeks(0);
      Period period1 = period0.plusMillis(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
      try { 
        period0.plusSeconds(2505);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusMinutes((-1338));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      Period period1 = period0.plusDays(8);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Period period0 = Period.weeks(0);
      Period period1 = period0.plusWeeks(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusWeeks((-2498));
      Duration duration0 = period1.toStandardDuration();
      assertEquals((-1510790400L), duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Period period0 = new Period(0, 0, 0, 0, 0, 338, 9, 702);
      Period period1 = period0.ZERO.plusMonths(338);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Period period0 = new Period();
      int int0 = period0.getHours();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      MutablePeriod mutablePeriod0 = days0.toMutablePeriod();
      Period period0 = mutablePeriod0.toPeriod();
      // Undeclared exception!
      try { 
        period0.minusDays(1380);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -1380
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Period period0 = Period.millis(4396);
      int int0 = period0.getWeeks();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Period period0 = Period.minutes((-2147483647));
      int int0 = period0.getYears();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Period period0 = new Period(0, 0, 0, 0, 0, 0, 9, 0);
      int int0 = period0.getSeconds();
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(6, 1727, 6);
      LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      PeriodType periodType0 = PeriodType.time();
      Period period0 = new Period(localDate0, localDate0, periodType0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(316L);
      PeriodType periodType0 = PeriodType.yearDayTime();
      Period period0 = new Period((ReadableInstant) null, duration0, periodType0);
      int int0 = period0.getMinutes();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(Integer.MIN_VALUE).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      // Undeclared exception!
      try { 
        Period.parse("{eLeVo?yy", periodFormatter0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Duration duration0 = new Duration(1684L, 0L);
      PeriodType periodType0 = PeriodType.millis();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      Period period0 = duration0.toPeriod(periodType0, (Chronology) copticChronology0);
      // Undeclared exception!
      try { 
        period0.withYears(3121);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Period period0 = new Period(1142, 86399999, 1142, 242, 86399999, 1142, 242, 26);
      int int0 = period0.getMonths();
      assertEquals(86399999, int0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      DateTime dateTime0 = new DateTime((Object) null);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0);
      Period period0 = new Period((Object) null, gJChronology0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      PeriodType periodType0 = PeriodType.dayTime();
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      Period period0 = new Period(24L, periodType0, (Chronology) iSOChronology0);
      Period period1 = period0.plusMillis(292271022);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Period period0 = Period.days(238);
      int int0 = period0.ZERO.getMillis();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Period period0 = new Period(512, (-1923), 1, 6, 512, (-3557), Integer.MAX_VALUE, Integer.MAX_VALUE, (PeriodType) null);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Duration duration0 = Duration.standardDays(63L);
      Period period0 = new Period(duration0, (ReadableInstant) null);
      PeriodType periodType0 = PeriodType.yearDayTime();
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      PeriodType periodType0 = PeriodType.yearDayTime();
      Period period1 = period0.plusYears(2);
      Period period2 = period1.normalizedStandard(periodType0);
      assertFalse(period2.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      Period period0 = new Period((long) 61, periodType0);
      Period period1 = period0.minusYears(804);
      // Undeclared exception!
      try { 
        period1.toStandardDuration();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Duration as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Period period0 = Period.millis((-2723));
      Period period1 = period0.ZERO.negated();
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.minus((ReadablePeriod) null);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Period period0 = Period.millis((-2723));
      Period period1 = period0.plusSeconds(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Period period0 = Period.weeks(0);
      Period period1 = period0.plusMinutes(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Period period0 = Period.minutes((-227));
      Period period1 = period0.ZERO.plusHours(0);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Duration duration0 = new Duration((long) 338);
      Period period0 = duration0.toPeriodFrom((ReadableInstant) null);
      Period period1 = period0.plusDays(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(8, 0, 0, (-2007), 0);
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      Hours hours0 = Hours.hoursBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      Days days0 = hours0.toStandardDays();
      Period period0 = days0.toPeriod();
      Period period1 = period0.plusMonths(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusYears(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(0L);
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      Period period1 = period0.plus((ReadablePeriod) null);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      Period period1 = period0.plus(period0);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Period period0 = Period.minutes((-227));
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      Period period1 = period0.withFieldAdded(durationFieldType0, 0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Period period0 = new Period(9, 0, 0, 9);
      // Undeclared exception!
      try { 
        period0.withFieldAdded((DurationFieldType) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Period period0 = Period.millis(5);
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      Period period1 = period0.withFieldAdded(durationFieldType0, 6);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Period period0 = Period.millis((-2723));
      // Undeclared exception!
      try { 
        period0.withField((DurationFieldType) null, (-2723));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Period period0 = new Period(12, (-4038), 858, (-626));
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      Period period1 = period0.withField(durationFieldType0, (-626));
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.withFields((ReadablePeriod) null);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Period period0 = Period.years(790);
      PeriodType periodType0 = PeriodType.standard();
      Period period1 = period0.withPeriodType(periodType0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[7];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      int[] intArray0 = new int[9];
      Partial partial0 = new Partial((Chronology) null, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(partial0, partial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not have overlapping fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      LocalTime localTime0 = new LocalTime((-330L), (Chronology) julianChronology0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(localDateTime0, localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDate localDate0 = new LocalDate(837L, (Chronology) null);
      // Undeclared exception!
      try { 
        Period.fieldDifference(localDate0, localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      // Undeclared exception!
      try { 
        Period.fieldDifference(localDateTime0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.fieldDifference((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Period period0 = Period.years((-2147483647));
      Period period1 = period0.plusMillis((-2147483647));
      // Undeclared exception!
      try { 
        period1.minusMillis(10080);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483647 + -10080
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Period period0 = Period.months(40);
      Period period1 = period0.minusWeeks(40);
      // Undeclared exception!
      try { 
        period1.plusWeeks((-2147483647));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -40 + -2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Period period0 = Period.days(1573);
      Period period1 = period0.minusDays((-1885));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(0L);
      Period period0 = duration0.toPeriod();
      Days days0 = Days.SEVEN;
      PeriodType periodType0 = days0.getPeriodType();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.minusWeeks((-2809));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Weeks weeks0 = Weeks.MAX_VALUE;
      PeriodType periodType0 = weeks0.getPeriodType();
      Period period0 = new Period(0L, 26607895200000L, periodType0, (Chronology) null);
      // Undeclared exception!
      try { 
        period0.plus(weeks0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 43994 + 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      Duration duration0 = Duration.standardHours(1);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(mutableDateTime0, duration0, periodType0);
      // Undeclared exception!
      try { 
        period0.toStandardDuration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Months months0 = Months.EIGHT;
      PeriodType periodType0 = months0.getPeriodType();
      Period period0 = new Period(1000L, 1000L, periodType0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      Duration duration0 = new Duration(dateTime0, dateTime0);
      Months months0 = Months.SEVEN;
      PeriodType periodType0 = months0.getPeriodType();
      Period period0 = new Period(duration0, dateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.minusYears(128);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      Period period0 = new Period(0L, (Chronology) copticChronology0);
      Period period1 = period0.multipliedBy(1);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Period period0 = Period.days((-1587));
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals((-2285280), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      Period period0 = new Period((Object) null, periodType0, copticChronology0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Instant instant0 = new Instant((-1392L));
      Period period0 = duration0.toPeriodFrom((ReadableInstant) instant0);
      Period period1 = period0.plusMillis(1038);
      PeriodType periodType0 = PeriodType.yearDay();
      Period period2 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period2.plus(period1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      Period period1 = period0.withMonths(11);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDate localDate0 = new LocalDate(localDateTime0);
      PeriodType periodType0 = PeriodType.months();
      Period period0 = null;
      try {
        period0 = new Period(localDate0, localDateTime0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Period period0 = new Period((ReadableInstant) null, (ReadableInstant) null);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.minusMinutes((-6));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Period period0 = Period.hours(0);
      int int0 = period0.ZERO.getDays();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      MutableDateTime mutableDateTime0 = new MutableDateTime(49, 2, 2, 2, 49, 49, 2, dateTimeZone0);
      Duration duration0 = Duration.standardHours(1);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(mutableDateTime0, duration0, periodType0);
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = DateTime.now(dateTimeZone0);
      Duration duration0 = new Duration(dateTime0, dateTime0);
      Period period0 = duration0.toPeriodTo((ReadableInstant) dateTime0);
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Period period0 = new Period((-541), (-541), 1058, 1058, 1058, (-541), (-2494), 1147);
      int[] intArray0 = new int[9];
      PeriodType periodType0 = new PeriodType("Duration", (DurationFieldType[]) null, intArray0);
      Period period1 = null;
      try {
        period1 = new Period(period0, periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Period period0 = Period.millis(116);
      PeriodType.MONTH_INDEX = (-1538);
      // Undeclared exception!
      try { 
        period0.getMonths();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      Duration duration0 = Duration.standardHours(1);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(mutableDateTime0, duration0, periodType0);
      Period period1 = period0.toPeriod();
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      Period period0 = new Period(0L, 1000000000000L, islamicChronology0);
      // Undeclared exception!
      try { 
        period0.toStandardSeconds();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Seconds as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.minusMonths(6);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Period period0 = Period.weeks(623191204);
      // Undeclared exception!
      try { 
        period0.toStandardDays();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 4362338428
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Period period0 = new Period((-597), (-857), 7, (-597));
      Period period1 = period0.normalizedStandard();
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Minutes minutes0 = Minutes.ZERO;
      PeriodType periodType0 = minutes0.getPeriodType();
      Period period0 = null;
      try {
        period0 = new Period((-1595), 20587500, (-1595), (-11), (-1595), (-1595), 2512, (-1724), periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'years'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      Period period0 = null;
      try {
        period0 = new Period(localDateTime0, islamicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: org.joda.time.LocalDateTime
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      Period period0 = new Period(localTime0, localTime0);
      PeriodType.HOUR_INDEX = (-1024);
      // Undeclared exception!
      try { 
        period0.getHours();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Period period0 = Period.parse("PT0.002S");
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      PeriodType periodType0 = new PeriodType("org.joda.time.Period", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(0L, periodType0);
      // Undeclared exception!
      try { 
        period0.withSeconds((-1559));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      Duration duration0 = Duration.standardHours(1);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(mutableDateTime0, duration0, periodType0);
      // Undeclared exception!
      try { 
        period0.withWeeks(5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.withMinutes((-1050));
      assertFalse(period1.equals((Object)period0));
  }
}
