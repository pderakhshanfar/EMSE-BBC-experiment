/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 22:33:37 GMT 2021
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Period_ESTest extends Period_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Period period0 = Period.months((-677));
      Period period1 = period0.normalizedStandard();
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Period period0 = new Period(0L, 0L);
      Period period1 = period0.minusMonths(1500);
      Hours hours0 = Hours.ONE;
      PeriodType periodType0 = hours0.getPeriodType();
      // Undeclared exception!
      try { 
        period1.normalizedStandard(periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Period period0 = Period.hours((-12));
      Period period1 = period0.plusYears(623191204);
      Period period2 = period1.normalizedStandard();
      assertTrue(period2.equals((Object)period1));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Period period0 = new Period((Object) null);
      Period period1 = period0.plusYears((-503));
      Period period2 = period1.negated();
      // Undeclared exception!
      try { 
        period2.toStandardDuration();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Duration as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Period period0 = Period.minutes(15);
      Duration duration0 = period0.toStandardDuration();
      assertEquals(900000L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Period period0 = Period.seconds((-29));
      Duration duration0 = period0.toStandardDuration();
      assertEquals((-29000L), duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Period period0 = Period.days(6);
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(518400, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Period period0 = new Period((Object) null);
      Period period1 = period0.plusHours((-21));
      Seconds seconds0 = period1.toStandardSeconds();
      assertEquals((-75600), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.withWeeks(36);
      Hours hours0 = period1.toStandardHours();
      assertEquals(6048, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Period period0 = new Period(20503125, 355, 512, 4338);
      Hours hours0 = period0.toStandardHours();
      assertEquals(20503131, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Period period0 = new Period(366, 366, 20503125, (-2269));
      Days days0 = period0.toStandardDays();
      assertEquals(252, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Period period0 = Period.days(9);
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(1, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Period period0 = Period.days((-12));
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      Period period1 = period0.withFieldAdded(durationFieldType0, (-842));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      LocalDate localDate0 = new LocalDate();
      // Undeclared exception!
      try { 
        Period.fieldDifference(localDateTime0, localDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Duration duration0 = new Duration(624L, 624L);
      Period period0 = new Period((ReadableInstant) null, duration0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      Period period0 = new Period((long) 0, periodType0, (Chronology) islamicChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      Period period1 = period0.withField(durationFieldType0, 0);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Period period0 = new Period(366, 366, 20503125, (-2269));
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(36, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Period period0 = Period.weeks((-29));
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals((-29), weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Period period0 = Period.weeks(52);
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(31449600, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      Period period0 = new Period(168L, periodType0);
      Period period1 = period0.minusSeconds(86400);
      Seconds seconds0 = period1.toStandardSeconds();
      assertEquals((-86400), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-16));
      Duration duration1 = duration0.withMillis((-16));
      Duration duration2 = duration1.minus((ReadableDuration) duration0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-16));
      DateTime dateTime0 = new DateTime(19L, dateTimeZone0);
      Period period0 = duration2.toPeriodFrom((ReadableInstant) dateTime0);
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(23039, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Period period0 = Period.hours((-12));
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals((-720), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Period period0 = new Period((-796L), 86400000L, gJChronology0);
      Hours hours0 = period0.toStandardHours();
      assertEquals(24, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Period period0 = Period.hours((-12));
      Hours hours0 = period0.toStandardHours();
      assertEquals((-12), hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.minusDays(2);
      Duration duration0 = period1.toStandardDuration();
      assertEquals((-172800000L), duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Period period0 = Period.days(0);
      Duration duration0 = period0.toStandardDuration();
      assertEquals(0L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Period period0 = Period.days((-12));
      Period period1 = period0.plusWeeks(1792);
      Duration duration0 = period1.toStandardDuration();
      assertEquals(1082764800L, duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Period period0 = Period.weeks(1);
      Days days0 = period0.toStandardDays();
      assertEquals(7, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      Period period0 = Period.parse("", periodFormatter0);
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Period period0 = new Period(0, 0, 0, 0, 24, (-4822), (-3151), 0);
      Period period1 = period0.minusYears(24);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusYears(60000);
      int int0 = period1.getYears();
      assertEquals(60000, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period((-2445), (-2445), (-2445), (-3022), 1785, (-3022), 400, 400, periodType0);
      int int0 = period0.getYears();
      assertEquals((-2445), int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Period period0 = new Period(1769L, 0L, (Chronology) null);
      Period period1 = period0.plusWeeks(85);
      int int0 = period1.getWeeks();
      assertEquals(85, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Period period0 = new Period(0L, 0L, (Chronology) null);
      Period period1 = period0.plusWeeks((-503));
      Period period2 = period1.plusMonths((-271));
      int int0 = period2.getWeeks();
      assertEquals((-503), int0);
      assertNotSame(period2, period1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Period period0 = Period.days(0);
      int int0 = period0.getSeconds();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Period period0 = new Period(366, 366, 20503125, (-2269));
      int int0 = period0.getSeconds();
      assertEquals(20503125, int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Period period0 = new Period(1769L, 0L, (Chronology) null);
      int int0 = period0.getSeconds();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Period period0 = Period.millis(850);
      Period period1 = period0.minusMonths((-6512));
      int int0 = period1.getMonths();
      assertEquals(6512, int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Period period0 = Period.days((-501));
      Period period1 = period0.ZERO.withMonths((-501));
      Period period2 = period1.withDays((-2656));
      int int0 = period2.getMonths();
      assertEquals((-501), int0);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(1075L);
      LocalDate localDate0 = new LocalDate(0L);
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime();
      Period period0 = duration0.toPeriodFrom((ReadableInstant) dateTime0);
      int int0 = period0.getMinutes();
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.minusMinutes(2);
      int int0 = period1.getMinutes();
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(1075L);
      Duration duration1 = duration0.minus(855L);
      LocalDate localDate0 = new LocalDate(0L);
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime();
      Period period0 = duration1.toPeriodFrom((ReadableInstant) dateTime0);
      int int0 = period0.getMillis();
      assertEquals(145, int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Period period0 = new Period(366, 366, 20503125, (-2269));
      int int0 = period0.getMillis();
      assertEquals((-2269), int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Period period0 = new Period(366, 366, 20503125, (-2269));
      int int0 = period0.getHours();
      assertEquals(366, int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Period period0 = Period.hours((-12));
      int int0 = period0.getHours();
      assertEquals((-12), int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Period period0 = Period.days(3053);
      int int0 = period0.getDays();
      assertEquals(3053, int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Period period0 = Period.days((-4327));
      int int0 = period0.getDays();
      assertEquals((-4327), int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Period period0 = new Period((Object) null);
      PeriodType periodType0 = PeriodType.seconds();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.withYears(2092);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Duration duration0 = Duration.parse((String) null);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      PeriodType periodType0 = new PeriodType("-ODk`DNF'^OqsaTLMn", durationFieldTypeArray0, (int[]) null);
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      Period period0 = duration0.toPeriod(periodType0, (Chronology) copticChronology0);
      // Undeclared exception!
      try { 
        period0.withYears(1988);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.YEAR_INDEX = 987;
      // Undeclared exception!
      try { 
        period0.withYears(987);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 987
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Period period0 = Period.seconds(1);
      PeriodType periodType0 = PeriodType.dayTime();
      Period period1 = period0.withPeriodType(periodType0);
      // Undeclared exception!
      try { 
        period1.withWeeks(875);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Period period0 = new Period();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      PeriodType periodType0 = new PeriodType("The method getChronology() was added in v1.4 and needs to be implemented by subclasses of AbstractReadableInstantFieldProperty", durationFieldTypeArray0, (int[]) null);
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.withWeeks(543);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.WEEK_INDEX = (-2353);
      // Undeclared exception!
      try { 
        period0.withWeeks(91);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2353
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Period period0 = new Period(0L, 0L);
      Hours hours0 = Hours.ONE;
      PeriodType periodType0 = hours0.getPeriodType();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.withSeconds(36);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Period period0 = Period.minutes((-1356));
      PeriodType.SECOND_INDEX = (-1356);
      // Undeclared exception!
      try { 
        period0.withSeconds((-1356));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1356
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Period period0 = Period.days((-929));
      int[] intArray0 = new int[9];
      PeriodType periodType0 = new PeriodType("", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        period0.withPeriodType(periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PeriodType periodType0 = PeriodType.dayTime();
      Period period0 = Period.days((-2269));
      DurationFieldType durationFieldType0 = DurationFieldType.YEARS_TYPE;
      Period period1 = period0.withFieldAdded(durationFieldType0, 366);
      // Undeclared exception!
      try { 
        period1.withPeriodType(periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'years'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Seconds seconds0 = Seconds.ONE;
      Duration duration0 = seconds0.toStandardDuration();
      Minutes minutes0 = duration0.toStandardMinutes();
      Hours hours0 = minutes0.toStandardHours();
      Weeks weeks0 = hours0.toStandardWeeks();
      PeriodType periodType0 = weeks0.getPeriodType();
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period0.withMonths(303);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Period period0 = new Period(0L, (Chronology) gJChronology0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[7];
      PeriodType periodType0 = new PeriodType("g)m>E#Le._t-gb^;", durationFieldTypeArray0, (int[]) null);
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.withMonths((-768));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Period period0 = Period.minutes(1757);
      PeriodType.MONTH_INDEX = 1757;
      // Undeclared exception!
      try { 
        period0.ZERO.withMonths(12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1757
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
      try { 
        period0.withMinutes(366);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Period period0 = new Period(0L, (Chronology) gJChronology0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[7];
      PeriodType periodType0 = new PeriodType("g)m>E#Le._t-gb^;", durationFieldTypeArray0, (int[]) null);
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.withMinutes((-768));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Period period0 = Period.ZERO;
      PeriodType.MINUTE_INDEX = (-1907);
      // Undeclared exception!
      try { 
        period0.withMinutes(2615625);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1907
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Period period0 = new Period(0L, (Chronology) gJChronology0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[7];
      PeriodType periodType0 = new PeriodType("g)m>E#Le._t-gb^;", durationFieldTypeArray0, (int[]) null);
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.withMillis((-768));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Period period0 = Period.years((-346));
      PeriodType.MILLI_INDEX = (-1982);
      // Undeclared exception!
      try { 
        period0.withMillis((-1982));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1982
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      // Undeclared exception!
      try { 
        period0.withHours(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[8];
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[3] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[4] = durationFieldType0;
      durationFieldTypeArray0[5] = durationFieldType0;
      durationFieldTypeArray0[6] = durationFieldType0;
      durationFieldTypeArray0[7] = durationFieldType0;
      int[] intArray0 = new int[4];
      PeriodType periodType0 = new PeriodType("XlMC`\"do L/%", durationFieldTypeArray0, intArray0);
      Period period0 = new Period((-2670L), periodType0);
      // Undeclared exception!
      try { 
        period0.withHours((-928));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      Period period0 = new Period(499L, periodType0, (Chronology) ethiopicChronology0);
      // Undeclared exception!
      try { 
        period0.withDays(4154);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(2506L, 228L, periodType0);
      // Undeclared exception!
      try { 
        period0.withDays((-2532));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.DAY_INDEX = 34;
      // Undeclared exception!
      try { 
        period0.withDays((-1486));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 34
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Period period0 = new Period(24, 24, 24, 24, 24, 24, 24, 24);
      // Undeclared exception!
      try { 
        period0.toStandardWeeks();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Weeks as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Period period0 = Period.seconds(699);
      PeriodType.SECOND_INDEX = (-379);
      // Undeclared exception!
      try { 
        period0.toStandardWeeks();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.ZERO.withMonths(36);
      // Undeclared exception!
      try { 
        period1.toStandardSeconds();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Seconds as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Period period0 = Period.millis((-506));
      PeriodType.SECOND_INDEX = (-506);
      // Undeclared exception!
      try { 
        period0.toStandardSeconds();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Period period0 = Period.ZERO;
      Minutes minutes0 = Minutes.MAX_VALUE;
      Period period1 = period0.plus(minutes0);
      // Undeclared exception!
      try { 
        period1.toStandardSeconds();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 128849018820
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Duration duration0 = Duration.standardDays(0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("w", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(duration0, (ReadableInstant) null, periodType0);
      // Undeclared exception!
      try { 
        period0.toStandardMinutes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Period period0 = Period.millis((-2853));
      PeriodType.MINUTE_INDEX = 112;
      // Undeclared exception!
      try { 
        period0.toStandardMinutes();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Period period0 = Period.days(17887500);
      // Undeclared exception!
      try { 
        period0.toStandardMinutes();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 25758000000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Period period0 = Period.months(57);
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Hours as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Period period0 = Period.ZERO;
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.toStandardHours();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Period period0 = Period.seconds(0);
      PeriodType.WEEK_INDEX = (-557);
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Period period0 = Period.minutes(1);
      Period period1 = period0.minusDays(623158436);
      // Undeclared exception!
      try { 
        period1.toStandardHours();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -14955802464
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Period period0 = Period.hours((-12));
      PeriodType.YEAR_INDEX = (-2874);
      // Undeclared exception!
      try { 
        period0.toStandardDuration();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.ZERO.withMonths(36);
      // Undeclared exception!
      try { 
        period1.toStandardDays();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Days as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(2506L, 228L, periodType0);
      // Undeclared exception!
      try { 
        period0.toStandardDays();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Period period0 = Period.ZERO;
      PeriodType.DAY_INDEX = (-316);
      // Undeclared exception!
      try { 
        period0.toStandardDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      // Undeclared exception!
      try { 
        period0.plusYears(2501);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Period period0 = Period.days((-3287));
      PeriodType.YEAR_INDEX = 376;
      // Undeclared exception!
      try { 
        period0.plusYears(376);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Period period0 = Period.years(1073741824);
      // Undeclared exception!
      try { 
        period0.plusYears(1073741824);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 1073741824 + 1073741824
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Period period0 = Period.seconds(0);
      PeriodType periodType0 = PeriodType.dayTime();
      Period period1 = period0.withPeriodType(periodType0);
      // Undeclared exception!
      try { 
        period1.plusWeeks((-452));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Period period0 = new Period(119, 666, 292, 1811, 1811, 292, 292, 666);
      PeriodType.WEEK_INDEX = 119;
      // Undeclared exception!
      try { 
        period0.plusWeeks(666);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = 6629;
      Weeks weeks0 = Weeks.MAX_VALUE;
      Period period0 = weeks0.toPeriod();
      // Undeclared exception!
      try { 
        period0.plusWeeks(int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 6629
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Period period0 = new Period(0L, (Chronology) gJChronology0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[7];
      PeriodType periodType0 = new PeriodType("g)m>E#Le._t-gb^;", durationFieldTypeArray0, (int[]) null);
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.plusSeconds(106);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[7];
      int[] intArray0 = new int[3];
      PeriodType periodType0 = new PeriodType("|6eN", durationFieldTypeArray0, intArray0);
      Period period0 = new Period(monthDay0, monthDay0, periodType0);
      // Undeclared exception!
      try { 
        period0.plusSeconds((-3871));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Period period0 = new Period(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        period0.plusSeconds(Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Period period0 = new Period(0L, 0L, (Chronology) null);
      Hours hours0 = Hours.ONE;
      PeriodType periodType0 = hours0.getPeriodType();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.plusMonths((-784));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Period period0 = Period.seconds(0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      int[] intArray0 = new int[1];
      PeriodType periodType0 = new PeriodType("LenientChronology[", durationFieldTypeArray0, intArray0);
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.plusMonths(987);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Period period0 = new Period(86400L, (-3383L));
      PeriodType.MINUTE_INDEX = (-1375);
      // Undeclared exception!
      try { 
        period0.plusMinutes(639);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Period period0 = Period.seconds(0);
      PeriodType periodType0 = PeriodType.years();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.plusMillis((-192));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period((-5334), 323, (-5334), 12, 323, 323, 323, (-5334), periodType0);
      PeriodType.MILLI_INDEX = 323;
      // Undeclared exception!
      try { 
        period0.plusMillis(1439);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
      try { 
        period0.plusHours((-710));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Period period0 = Period.seconds(9);
      PeriodType.HOUR_INDEX = 9;
      // Undeclared exception!
      try { 
        period0.plusHours((-807));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Period period0 = Period.hours(Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        period0.plusHours(1024);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 1024
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Period period0 = Period.weeks(59);
      Seconds seconds0 = Seconds.standardSecondsIn(period0);
      Duration duration0 = seconds0.toStandardDuration();
      PeriodType periodType0 = PeriodType.yearDay();
      PeriodType periodType1 = periodType0.withDaysRemoved();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) fixedDateTimeZone0, 5);
      Period period1 = duration0.toPeriod(periodType1, (Chronology) gregorianChronology0);
      // Undeclared exception!
      try { 
        period1.plusDays(59);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(2506L, 228L, periodType0);
      // Undeclared exception!
      try { 
        period0.plusDays(1057);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.DAY_INDEX = 2615625;
      // Undeclared exception!
      try { 
        period0.plusDays((-4079));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Period period0 = Period.years((-2869));
      Days days0 = Days.MIN_VALUE;
      Period period1 = period0.minus(days0);
      // Undeclared exception!
      try { 
        period1.plusDays((-2869));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -2869
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(2506L, 228L, periodType0);
      Weeks weeks0 = Weeks.TWO;
      Days days0 = weeks0.toStandardDays();
      // Undeclared exception!
      try { 
        period0.plus(days0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Period period0 = Period.seconds(0);
      Period period1 = period0.plusYears(1403);
      Period period2 = period1.minusHours(1403);
      PeriodType.YEAR_INDEX = (-1500);
      // Undeclared exception!
      try { 
        period0.plus(period2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      Period period0 = new Period(168L, periodType0);
      Hours hours0 = Hours.MIN_VALUE;
      Period period1 = period0.plus(hours0);
      // Undeclared exception!
      try { 
        period1.plus(hours0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse((String) null, (PeriodFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      // Undeclared exception!
      try { 
        Period.parse("Format invalid: ", periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Format invalid: \"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Literal", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse("K/m");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"K/m\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Period period0 = new Period(7L);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      int[] intArray0 = new int[9];
      PeriodType periodType0 = new PeriodType("fSw D:$4t#g`06Lx^Aa", durationFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Period period0 = Period.ZERO;
      Hours hours0 = Hours.ONE;
      PeriodType periodType0 = hours0.getPeriodType();
      PeriodType.YEAR_INDEX = (-34);
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      Period period0 = days0.toPeriod();
      PeriodType periodType0 = PeriodType.seconds();
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 185542587100800
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(2506L, 228L, periodType0);
      // Undeclared exception!
      try { 
        period0.normalizedStandard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Period period0 = Period.seconds(0);
      PeriodType.HOUR_INDEX = 1143;
      // Undeclared exception!
      try { 
        period0.normalizedStandard();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Period period0 = new Period(366, 366, 20503125, (-2269));
      Weeks weeks0 = Weeks.MAX_VALUE;
      Period period1 = period0.withFields(weeks0);
      // Undeclared exception!
      try { 
        period1.normalizedStandard();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 2147483683
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      Period period0 = days0.toPeriod();
      // Undeclared exception!
      try { 
        period0.negated();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -2147483648 * -1
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.ZERO.withMonths(36);
      // Undeclared exception!
      try { 
        period1.multipliedBy(Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: 36 * 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      PeriodType.YEAR_INDEX = 829;
      // Undeclared exception!
      try { 
        period0.minusYears(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
      try { 
        period0.minusWeeks((-4723));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldType0;
      durationFieldTypeArray0[3] = durationFieldType0;
      durationFieldTypeArray0[4] = durationFieldType0;
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      Period period0 = new Period((-163L), 2533L, periodType0, islamicChronology0);
      // Undeclared exception!
      try { 
        period0.minusWeeks(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Period period0 = new Period(622, (-2327), (-2327), (-2327), (-2327), (-2327), 3509, (-2125), (PeriodType) null);
      PeriodType.WEEK_INDEX = (-4079);
      // Undeclared exception!
      try { 
        period0.minusWeeks((-2214));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
      try { 
        period0.minusSeconds((-710));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      Period period0 = new Period((-881L), 662L, gJChronology0);
      PeriodType.SECOND_INDEX = (-1759);
      // Undeclared exception!
      try { 
        period0.minusSeconds(4957);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      Period period0 = new Period((Object) null, periodType0);
      // Undeclared exception!
      try { 
        period0.minusMonths(820);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MONTH_INDEX = 28181250;
      // Undeclared exception!
      try { 
        period0.minusMonths((-2934));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      PeriodType periodType0 = PeriodType.seconds();
      Period period0 = new Period((long) 0, periodType0);
      // Undeclared exception!
      try { 
        period0.minusMinutes((-21));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Period period0 = new Period();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      PeriodType periodType0 = new PeriodType("The method getChronology() was added in v1.4 and needs to be implemented by subclasses of AbstractReadableInstantFieldProperty", durationFieldTypeArray0, (int[]) null);
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.minusMinutes(543);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MINUTE_INDEX = (-940);
      // Undeclared exception!
      try { 
        period0.minusMinutes(8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      // Undeclared exception!
      try { 
        period0.minusMillis(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Period period0 = new Period();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      PeriodType periodType0 = new PeriodType("The method getChronology() was added in v1.4 and needs to be implemented by subclasses of AbstractReadableInstantFieldProperty", durationFieldTypeArray0, (int[]) null);
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.minusMillis(623191204);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MILLI_INDEX = (-1173);
      // Undeclared exception!
      try { 
        period0.minusMillis(705);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Period period0 = new Period(366, 366, 20503125, (-2269));
      // Undeclared exception!
      try { 
        period0.minusMillis(Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2269 + -2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Period period0 = Period.ZERO;
      PeriodType periodType0 = PeriodType.seconds();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.minusHours(4327);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.HOUR_INDEX = (-497);
      // Undeclared exception!
      try { 
        period0.minusHours(2206);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(2506L, 228L, periodType0);
      // Undeclared exception!
      try { 
        period0.minusDays((-1152));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      Period period0 = days0.toPeriod();
      // Undeclared exception!
      try { 
        period0.minusDays(5);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -5
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      Period period0 = new Period(168L, periodType0);
      Period period1 = Period.weeks(1);
      // Undeclared exception!
      try { 
        period0.minus(period1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MONTH_INDEX = (-674);
      Months months0 = Months.months((-674));
      // Undeclared exception!
      try { 
        period0.minus(months0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Period period0 = new Period(0, 153692453, 1, (-1978), (-3488), (-494), (-494), (-1));
      Days days0 = Days.MIN_VALUE;
      // Undeclared exception!
      try { 
        period0.minus(days0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -1978 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Period period0 = Period.ZERO;
      PeriodType.YEAR_INDEX = (-34);
      // Undeclared exception!
      try { 
        period0.getYears();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Period period0 = Period.seconds(0);
      PeriodType.WEEK_INDEX = (-557);
      // Undeclared exception!
      try { 
        period0.getWeeks();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Period period0 = Period.seconds(1046);
      PeriodType.SECOND_INDEX = 809;
      // Undeclared exception!
      try { 
        period0.getSeconds();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldTypeArray0[1];
      durationFieldTypeArray0[3] = durationFieldType0;
      durationFieldTypeArray0[4] = durationFieldTypeArray0[1];
      PeriodType periodType0 = new PeriodType("cdNL?uICC4KzXj", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((-2621L), (-2774L), periodType0);
      // Undeclared exception!
      try { 
        period0.getMonths();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(2);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      Period period0 = new Period((-2314L), (PeriodType) null, (Chronology) copticChronology0);
      PeriodType.MONTH_INDEX = 1404;
      // Undeclared exception!
      try { 
        period0.getMonths();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Period period0 = Period.years((-710));
      PeriodType.MILLI_INDEX = (-710);
      // Undeclared exception!
      try { 
        period0.ZERO.getMillis();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.HOUR_INDEX = 3328;
      // Undeclared exception!
      try { 
        period0.ZERO.getHours();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.DAY_INDEX = 8;
      // Undeclared exception!
      try { 
        period0.getDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((Object) null);
      MonthDay monthDay1 = new MonthDay(monthDay0, (int[]) null);
      // Undeclared exception!
      try { 
        Period.fieldDifference(monthDay1, monthDay0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      int[] intArray0 = new int[0];
      YearMonth yearMonth1 = new YearMonth(yearMonth0, intArray0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(yearMonth1, yearMonth1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Period period0 = Period.hours(1);
      Seconds seconds0 = Seconds.standardSecondsIn(period0);
      Duration duration0 = seconds0.toStandardDuration();
      LocalDate localDate0 = new LocalDate();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime(dateTimeZone0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[7];
      DurationFieldType durationFieldType0 = DurationFieldType.MONTHS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      DurationFieldType durationFieldType1 = DurationFieldType.eras();
      durationFieldTypeArray0[1] = durationFieldType1;
      int[] intArray0 = new int[7];
      PeriodType periodType0 = new PeriodType("Duration", durationFieldTypeArray0, intArray0);
      Period period1 = null;
      try {
        period1 = new Period(duration0, dateTime0, periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      DateTime dateTime0 = new DateTime((DateTimeZone) null);
      int[] intArray0 = new int[8];
      PeriodType periodType0 = new PeriodType("sOGN+xUWGR", (DurationFieldType[]) null, intArray0);
      Period period0 = null;
      try {
        period0 = new Period((ReadableDuration) null, dateTime0, periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Period period0 = Period.hours((-1012));
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(8);
      MutableDateTime mutableDateTime0 = MutableDateTime.now(dateTimeZone0);
      Duration duration0 = period0.toDurationTo(mutableDateTime0);
      PeriodType periodType0 = PeriodType.millis();
      Period period1 = null;
      try {
        period1 = new Period(duration0, mutableDateTime0, periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -3643200000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      PeriodType periodType0 = PeriodType.seconds();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) null);
      Period period0 = null;
      try {
        period0 = new Period(periodType0, periodType0, gJChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: org.joda.time.PeriodType
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      PeriodType periodType0 = PeriodType.days();
      Period period0 = null;
      try {
        period0 = new Period(monthDay0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: org.joda.time.MonthDay
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Object object0 = new Object();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
      Period period0 = null;
      try {
        period0 = new Period(object0, gregorianChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Period period0 = null;
      try {
        period0 = new Period("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      DurationFieldType durationFieldType0 = DurationFieldType.ERAS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      int[] intArray0 = new int[0];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Period period0 = null;
      try {
        period0 = new Period((-68L), periodType0, (Chronology) gJChronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[9];
      DurationFieldType durationFieldType0 = DurationFieldType.ERAS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      int[] intArray0 = new int[2];
      PeriodType periodType0 = new PeriodType("org.joda.time.Weeks", durationFieldTypeArray0, intArray0);
      Period period0 = null;
      try {
        period0 = new Period((long) 1, periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      Period period0 = null;
      try {
        period0 = new Period(30617280288L, periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 30617280288
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Period period0 = new Period((-245L), (-612L), (PeriodType) null);
      Weeks weeks0 = Weeks.standardWeeksIn(period0);
      PeriodType periodType0 = weeks0.getPeriodType();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      Period period1 = null;
      try {
        period1 = new Period(9223372036854775807L, (-245L), periodType0, islamicChronology0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -245 - 9223372036854775807
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Hours hours0 = Hours.ONE;
      PeriodType periodType0 = hours0.getPeriodType();
      Period period0 = null;
      try {
        period0 = new Period((-784), 1620, (-57), 64, 5, 64, 3090, 64, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'years'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.ZERO.withMonths(36);
      PeriodType periodType0 = PeriodType.standard();
      Period period2 = period1.normalizedStandard(periodType0);
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Period period0 = new Period(0L, 0L, (Chronology) null);
      Period period1 = period0.plusYears((-503));
      Period period2 = period1.minusDays((-271));
      Hours hours0 = Hours.ONE;
      PeriodType periodType0 = hours0.getPeriodType();
      // Undeclared exception!
      try { 
        period2.normalizedStandard(periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Period period0 = Period.weeks((-29));
      Period period1 = period0.multipliedBy((-29));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period((-5334), 323, (-5334), 12, 323, 323, 323, (-5334), periodType0);
      Period period1 = period0.plusMillis(1439);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Period period0 = Period.seconds(0);
      Period period1 = period0.plusSeconds(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.plusSeconds(812);
      Days days0 = period1.toStandardDays();
      assertNotSame(period1, period0);
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Period period0 = new Period(0L, 0L, (Chronology) null);
      Period period1 = period0.plusMinutes(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      // Undeclared exception!
      try { 
        period0.plusMinutes(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(2506L, 228L, periodType0);
      // Undeclared exception!
      try { 
        period0.plusHours(10125000);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Period period0 = Period.seconds(0);
      Period period1 = period0.plusHours(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Period period0 = Period.weeks(1);
      Period period1 = period0.plusDays(1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Period period0 = Period.seconds(0);
      Period period1 = period0.plusMonths(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Period period0 = new Period();
      int int0 = period0.ZERO.getHours();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Period period0 = new Period(0L, 0L, (Chronology) null);
      int int0 = period0.getWeeks();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Period period0 = new Period();
      int int0 = period0.getYears();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(2506L, 228L, periodType0);
      // Undeclared exception!
      try { 
        period0.getSeconds();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Period period0 = new Period();
      int int0 = period0.getDays();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      PeriodType periodType0 = PeriodType.time();
      LocalTime localTime0 = new LocalTime((long) 0, (Chronology) null);
      Period period0 = new Period(localTime0, localTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.minusDays((-1));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Period period0 = new Period();
      int int0 = period0.getMinutes();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Period period0 = new Period();
      int int0 = period0.getMonths();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Period period0 = new Period(0L, periodType0, (Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        period0.withMillis(262);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      Period period0 = new Period(localDateTime0, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Period period0 = Period.hours((-12));
      Period period1 = period0.withMonths(1);
      PeriodType periodType0 = PeriodType.standard();
      Period period2 = period1.normalizedStandard(periodType0);
      assertTrue(period2.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Period period0 = new Period((Object) null);
      Period period1 = period0.plusYears((-503));
      // Undeclared exception!
      try { 
        period1.toStandardDuration();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Duration as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period((-2445), (-2445), (-2445), (-3022), 1785, (-3022), 400, 400, periodType0);
      // Undeclared exception!
      try { 
        period0.toStandardMinutes();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Minutes as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Period period0 = Period.seconds(0);
      Period period1 = period0.multipliedBy(1);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.multipliedBy(10209375);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Duration duration0 = Duration.millis(3600L);
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      Period period0 = duration0.toPeriod((Chronology) copticChronology0);
      Period period1 = period0.minus((ReadablePeriod) null);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Period period0 = Period.days((-12));
      Period period1 = period0.plusMillis(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Period period0 = new Period((Object) null);
      Period period1 = period0.plusDays(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Period period0 = Period.millis(512);
      Period period1 = period0.plusWeeks(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Period period0 = Period.seconds(0);
      Period period1 = period0.plusYears(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((Object) null);
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      Period period1 = period0.ZERO.plus((ReadablePeriod) null);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Period period0 = Period.days((-12));
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      Period period1 = period0.withFieldAdded(durationFieldType0, 0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Period period0 = Period.hours(1562);
      // Undeclared exception!
      try { 
        period0.withFieldAdded((DurationFieldType) null, 1562);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Period period0 = Period.minutes(Integer.MAX_VALUE);
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      // Undeclared exception!
      try { 
        period0.withFieldAdded(durationFieldType0, 1687);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 1687
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Period period0 = new Period(0L, 0L);
      // Undeclared exception!
      try { 
        period0.withField((DurationFieldType) null, (-1867));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.withFields((ReadablePeriod) null);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Period period0 = new Period(0L, 0L);
      Period period1 = period0.withPeriodType((PeriodType) null);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[8];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[1] = dateTimeFieldTypeArray0[0];
      int[] intArray0 = new int[3];
      Partial partial0 = new Partial(buddhistChronology0, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(partial0, partial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not have overlapping fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      MockDate mockDate0 = new MockDate();
      YearMonth yearMonth0 = YearMonth.fromDateFields(mockDate0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(monthDay0, yearMonth0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      LocalDateTime localDateTime0 = new LocalDateTime(0, 1, 1, 0, 0, 1);
      // Undeclared exception!
      try { 
        Period.fieldDifference(monthDay0, localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      // Undeclared exception!
      try { 
        Period.fieldDifference(monthDay0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.fieldDifference((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Interval interval0 = new Interval((ReadableInstant) null, duration0);
      DateTime dateTime0 = interval0.getEnd();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      PeriodType periodType0 = new PeriodType("-!l!qG^Y", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(dateTime0, (ReadableInstant) null, periodType0);
      // Undeclared exception!
      try { 
        period0.minusSeconds(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Period period0 = new Period(1239, 1239, 1239, 2, (-669), 1, 2, 1968);
      Period period1 = period0.withYears(1968);
      Period period2 = period1.withWeeks(2);
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTime dateTime0 = new DateTime((Chronology) copticChronology0);
      Duration duration0 = period2.toDurationFrom(dateTime0);
      Period period3 = null;
      try {
        period3 = new Period(duration0, dateTime0, (PeriodType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The subtrahend instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Period period0 = Period.years((-710));
      int int0 = period0.ZERO.getMillis();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      Period period0 = days0.toPeriod();
      Period period1 = period0.minusWeeks(1409);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Period period0 = Period.hours((-12));
      Seconds seconds0 = period0.ZERO.toStandardSeconds();
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Period period0 = new Period((long) 1);
      Months months0 = Months.MIN_VALUE;
      Period period1 = period0.withFields(months0);
      // Undeclared exception!
      try { 
        period1.plusMonths((-844));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -844
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Duration duration0 = new Duration((long) (-1595));
      PeriodType periodType0 = PeriodType.hours();
      Period period0 = new Period((ReadableInstant) null, duration0, periodType0);
      // Undeclared exception!
      try { 
        period0.plusSeconds(2272);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      int[] intArray0 = new int[0];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      Period period0 = null;
      try {
        period0 = new Period(1101L, 0L, periodType0, (Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Period period0 = Period.hours((-12));
      Duration duration0 = period0.toStandardDuration();
      assertEquals((-43200000L), duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Period period0 = Period.hours((-2614));
      Days days0 = period0.toStandardDays();
      PeriodType periodType0 = PeriodType.yearMonthDay();
      Period period1 = new Period(days0, periodType0, (Chronology) null);
      // Undeclared exception!
      try { 
        period1.plus(period0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      MonthDay monthDay0 = MonthDay.now((Chronology) julianChronology0);
      Period period0 = null;
      try {
        period0 = new Period(monthDay0, (ReadablePartial) null, (PeriodType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Period period0 = new Period(dateTime0, dateTime0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Period period0 = Period.seconds((-29));
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Period period0 = Period.ZERO;
      Hours hours0 = period0.toStandardHours();
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Duration duration0 = Duration.standardDays(0L);
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTime dateTime0 = dateTimeFormatter0.parseDateTime("");
      Period period0 = new Period(duration0, dateTime0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Period period0 = Period.parse("PT1562H");
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Period period0 = Period.seconds(9);
      Period period1 = period0.toPeriod();
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      Interval interval0 = new Interval(1799L, 1799L, dateTimeZone0);
      Period period0 = interval0.toPeriod();
      PeriodType.DAY_INDEX = 26;
      // Undeclared exception!
      try { 
        period0.minusDays((-100));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Period period0 = Period.days((-3287));
      Period period1 = period0.ZERO.withMillis((-3097));
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      DurationFieldType durationFieldType0 = DurationFieldType.MILLIS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[2] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[3] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[4] = durationFieldTypeArray0[1];
      durationFieldTypeArray0[5] = durationFieldTypeArray0[0];
      PeriodType periodType0 = new PeriodType("Asia/Kolkata", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(2723L, periodType0);
      // Undeclared exception!
      try { 
        period0.minusMonths(892);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      int[] intArray0 = new int[5];
      PeriodType periodType0 = new PeriodType("Cannot convert to ", (DurationFieldType[]) null, intArray0);
      Period period0 = null;
      try {
        period0 = new Period((-2205), (-2205), (-2205), (-2205), (-1543), 5, 3089, (-917), periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      // Undeclared exception!
      try { 
        period0.minusYears(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Period period0 = Period.ZERO;
      Minutes minutes0 = period0.ZERO.toStandardMinutes();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
      Period period1 = new Period(minutes0, gregorianChronology0);
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null);
      // Undeclared exception!
      try { 
        Period.parse("41dAUf+|&HfBGHpI", periodFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Period period0 = Period.minutes((-1356));
      Period period1 = period0.withSeconds((-1356));
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Period period0 = Period.hours((-12));
      Period period1 = period0.withHours(210);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Period period0 = new Period(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);
      Period period1 = period0.minusMillis(1465);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.withMinutes(2615625);
      assertFalse(period1.equals((Object)period0));
  }
}
