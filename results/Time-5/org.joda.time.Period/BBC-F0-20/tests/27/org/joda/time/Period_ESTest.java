/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 11:46:52 GMT 2021
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Period_ESTest extends Period_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Period period0 = Period.days(10125002);
      PeriodType periodType0 = PeriodType.yearMonthDay();
      Period period1 = period0.minusMonths(3005);
      Period period2 = period1.normalizedStandard(periodType0);
      assertNotSame(period1, period2);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      Duration duration0 = Duration.standardMinutes((-2666));
      Duration duration1 = duration0.withDurationAdded((ReadableDuration) duration0, 690562340);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 690562340);
      Period period0 = duration1.toPeriodFrom((ReadableInstant) mutableDateTime0);
      Period period1 = period0.normalizedStandard(periodType0);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Period period0 = Period.years((-1279));
      // Undeclared exception!
      try { 
        period0.toStandardMinutes();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Minutes as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Period period0 = Period.days(10125000);
      Hours hours0 = period0.toStandardHours();
      assertEquals(243000000, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Period period0 = new Period(12, 12, 12, 1);
      Hours hours0 = period0.toStandardHours();
      assertEquals(12, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      Period period0 = new Period(2000L, (Chronology) islamicChronology0);
      Hours hours0 = period0.toStandardHours();
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Period period0 = Period.hours(4776);
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(28, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Period period0 = Period.days(10125000);
      Period period1 = period0.plusMinutes((-2048));
      Weeks weeks0 = period1.toStandardWeeks();
      assertNotSame(period1, period0);
      assertEquals(1446428, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Period period0 = Period.hours(4776);
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      Period period1 = period0.withFieldAdded(durationFieldType0, 2);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) fixedDateTimeZone0);
      LocalDate localDate0 = new LocalDate(1086L, (Chronology) julianChronology0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(localDateTime0, localDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Period period0 = Period.days(10125000);
      Period period1 = new Period(period0);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Duration duration0 = Duration.standardHours(3600L);
      Period period0 = new Period((ReadableInstant) null, duration0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Duration duration0 = Duration.standardDays((-8));
      DateTime dateTime0 = DateTime.now((DateTimeZone) fixedDateTimeZone0);
      Period period0 = new Period(duration0, dateTime0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Period period0 = Period.days(10125000);
      Period period1 = period0.plusDays(10125000);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Period period0 = new Period(4776, (-1496));
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Period period0 = Period.weeks((-1279));
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals((-1279), weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Period period0 = new Period(8, 8, 8, 2);
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(29288, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Period period0 = new Period(10L, 0L, (Chronology) null);
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Period period0 = Period.hours((-1402));
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals((-84120), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Period period0 = Period.weeks((-1279));
      Hours hours0 = period0.toStandardHours();
      assertEquals((-214872), hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Period period0 = Period.seconds(0);
      Duration duration0 = period0.toStandardDuration();
      assertEquals(0L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Period period0 = Period.hours(4776);
      Duration duration0 = period0.toStandardDuration();
      assertEquals(17193600000L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Period period0 = new Period(623191204, 623191204, 623191204, 623191204);
      Days days0 = period0.toStandardDays();
      assertEquals(26406291, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Period period0 = Period.weeks((-3194));
      Days days0 = period0.toStandardDays();
      assertEquals((-22358), days0.getDays());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      Period period0 = Period.parse("", periodFormatter0);
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Period period0 = Period.days(10125000);
      Period period1 = period0.minusSeconds(369);
      Duration duration0 = period1.toStandardDuration();
      assertEquals(874799999631000L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      Period period0 = mutablePeriod0.toPeriod();
      Period period1 = period0.plusYears((-2476));
      int int0 = period1.getYears();
      assertEquals((-2476), int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Period period0 = Period.weeks(2);
      int int0 = period0.getWeeks();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes((-2666));
      Duration duration1 = duration0.multipliedBy((-2666));
      Duration duration2 = duration1.withDurationAdded((ReadableDuration) duration0, 690562340);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 690562340);
      Period period0 = duration2.toPeriodFrom((ReadableInstant) mutableDateTime0);
      int int0 = period0.getWeeks();
      assertEquals((-3), int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Period period0 = new Period(623191204, 623191204, 623191204, 623191204);
      int int0 = period0.getSeconds();
      assertEquals(623191204, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      Period period0 = new Period(0L, (-3620), periodType0, buddhistChronology0);
      int int0 = period0.getSeconds();
      assertEquals((-3), int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Period period0 = new Period(10L, 0L, (Chronology) null);
      int int0 = period0.ZERO.getMonths();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Period period0 = Period.months(1);
      int int0 = period0.getMonths();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      Period period0 = new Period(localDate0, localDate0);
      int int0 = period0.getMinutes();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Period period0 = new Period(8, 8, 8, 2);
      int int0 = period0.getMinutes();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Period period0 = Period.ZERO;
      int int0 = period0.ZERO.getMillis();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      Period period0 = new Period((-13L), periodType0);
      int int0 = period0.getMillis();
      assertEquals((-13), int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Period period0 = Period.hours(0);
      int int0 = period0.getHours();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Period period0 = Period.hours((-1289));
      int int0 = period0.getHours();
      assertEquals((-1289), int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Period period0 = Period.weeks((-3194));
      int int0 = period0.getDays();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Period period0 = Period.days(2429);
      int int0 = period0.getDays();
      assertEquals(2429, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Duration duration0 = new Duration(727L);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      PeriodType periodType0 = new PeriodType("org.joda.time.DateTimeZone.NameProvider", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(duration0, (ReadableInstant) null, periodType0);
      // Undeclared exception!
      try { 
        period0.withYears((-3537));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.YEAR_INDEX = 500;
      // Undeclared exception!
      try { 
        period0.withYears(12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 500
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      // Undeclared exception!
      try { 
        period0.withWeeks((-13));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      Period period0 = new Period(0L, periodType0);
      // Undeclared exception!
      try { 
        period0.withSeconds(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.SECOND_INDEX = 1044;
      // Undeclared exception!
      try { 
        period0.withSeconds((-1674));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1044
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PeriodType periodType0 = PeriodType.time();
      Period period0 = new Period(4030L, periodType0);
      // Undeclared exception!
      try { 
        period0.withMonths(166);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period(74L, periodType0);
      PeriodType.MONTH_INDEX = 8;
      // Undeclared exception!
      try { 
        period0.withMonths(8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      Interval interval0 = new Interval(9, 9, julianChronology0);
      PeriodType periodType0 = PeriodType.hours();
      Period period0 = interval0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period0.withMinutes(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[8];
      PeriodType periodType0 = new PeriodType("rTJ", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(0L, 0L, periodType0);
      // Undeclared exception!
      try { 
        period0.withMinutes(2918);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MINUTE_INDEX = 678;
      // Undeclared exception!
      try { 
        period0.withMinutes(678);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 678
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      Period period0 = new Period(0L, 18, periodType0);
      // Undeclared exception!
      try { 
        period0.withMillis(4198);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) fixedDateTimeZone0);
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
      try { 
        period0.withHours((-1496));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTime dateTime0 = DateTime.now((DateTimeZone) fixedDateTimeZone0);
      Instant instant0 = dateTime0.toInstant();
      Days days0 = Days.FOUR;
      PeriodType periodType0 = days0.getPeriodType();
      Period period0 = new Period(dateTime0, instant0, periodType0);
      PeriodType.HOUR_INDEX = (-2577);
      // Undeclared exception!
      try { 
        period0.withHours((-2577));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2577
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Period period0 = Period.minutes(10125002);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) fixedDateTimeZone0);
      Period period1 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
      try { 
        period1.withFields(period0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'minutes'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PeriodType periodType0 = PeriodType.seconds();
      Period period0 = new Period((Object) null, periodType0);
      // Undeclared exception!
      try { 
        period0.withDays(1355);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      PeriodType periodType0 = new PeriodType("+?!uMKbIcF", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((Object) null, periodType0);
      // Undeclared exception!
      try { 
        period0.withDays(805);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null);
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      PeriodType.DAY_INDEX = 320;
      // Undeclared exception!
      try { 
        period0.withDays((-2048));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 320
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Period period0 = Period.seconds(0);
      PeriodType.YEAR_INDEX = 5059;
      // Undeclared exception!
      try { 
        period0.toStandardWeeks();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Period period0 = new Period((-229L));
      PeriodType.HOUR_INDEX = 1531;
      // Undeclared exception!
      try { 
        period0.toStandardSeconds();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Period period0 = Period.days(10125000);
      // Undeclared exception!
      try { 
        period0.toStandardSeconds();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 874800000000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Period period0 = new Period(26607895200000L, 0L, (Chronology) null);
      // Undeclared exception!
      try { 
        period0.toStandardMinutes();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Minutes as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(3047L);
      PeriodType periodType0 = PeriodType.standard();
      PeriodType.HOUR_INDEX = (-74);
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      Period period0 = duration0.toPeriod(periodType0, (Chronology) iSOChronology0);
      // Undeclared exception!
      try { 
        period0.toStandardMinutes();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Period period0 = Period.days(10125000);
      // Undeclared exception!
      try { 
        period0.toStandardMinutes();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 14580000000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Period period0 = Period.days(10125000);
      Period period1 = period0.withMonths(4148);
      // Undeclared exception!
      try { 
        period1.toStandardHours();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Hours as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Period period0 = Period.ZERO;
      PeriodType.YEAR_INDEX = 99;
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Period period0 = new Period();
      Weeks weeks0 = Weeks.MAX_VALUE;
      Period period1 = period0.plus(weeks0);
      // Undeclared exception!
      try { 
        period1.toStandardHours();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 360777252696
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Period period0 = Period.weeks((-1279));
      Period period1 = period0.ZERO.withMonths((-777));
      // Undeclared exception!
      try { 
        period1.toStandardDuration();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Duration as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Period period0 = Period.hours(5);
      PeriodType.DAY_INDEX = 2031;
      // Undeclared exception!
      try { 
        period0.ZERO.toStandardDuration();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Period period0 = Period.months(236548278);
      // Undeclared exception!
      try { 
        period0.toStandardDays();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Days as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Period period0 = new Period(26607895200000L, 0L, (Chronology) null);
      PeriodType.MINUTE_INDEX = 8;
      Period period1 = period0.ZERO.withMonths(0);
      // Undeclared exception!
      try { 
        period1.toStandardDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      Period period0 = new Period(0L, 60L, gregorianChronology0);
      Period period1 = period0.minusWeeks(1073741824);
      // Undeclared exception!
      try { 
        period1.toStandardDays();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -7516192768
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Period period0 = new Period(2771, 2771, (-2067), 1534);
      PeriodType.YEAR_INDEX = 707;
      // Undeclared exception!
      try { 
        period0.plusYears((-4147));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 707
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Period period0 = new Period(0L, 604800L);
      Years years0 = Years.MIN_VALUE;
      Period period1 = period0.plus(years0);
      // Undeclared exception!
      try { 
        period1.plusYears((-31));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -31
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      Period period0 = new Period(43200000L, (-1952L), periodType0);
      // Undeclared exception!
      try { 
        period0.plusWeeks(961);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      PeriodType periodType0 = new PeriodType("+?!uMKbIcF", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((Object) null, periodType0);
      // Undeclared exception!
      try { 
        period0.plusWeeks(32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Period period0 = Period.hours(10000);
      PeriodType.WEEK_INDEX = 10000;
      // Undeclared exception!
      try { 
        period0.plusWeeks(10000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10000
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      PeriodType periodType0 = new PeriodType("+?!uMKbIcF", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((Object) null, periodType0);
      // Undeclared exception!
      try { 
        period0.plusSeconds(40);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null);
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      PeriodType.SECOND_INDEX = 60000;
      // Undeclared exception!
      try { 
        period0.plusSeconds((-1908));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 60000
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Period period0 = new Period((-1671L));
      // Undeclared exception!
      try { 
        period0.plusSeconds(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -1 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      PeriodType periodType1 = periodType0.withMonthsRemoved();
      Period period0 = new Period(604800L, periodType1, (Chronology) null);
      // Undeclared exception!
      try { 
        period0.plusMonths(1278);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      PeriodType periodType0 = new PeriodType("+?!uMKbIcF", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((Object) null, periodType0);
      // Undeclared exception!
      try { 
        period0.plusMonths(40);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Period period0 = Period.days(4);
      PeriodType.MONTH_INDEX = (-1810);
      // Undeclared exception!
      try { 
        period0.plusMonths(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1810
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      Period period0 = new Period(13L, periodType0);
      // Undeclared exception!
      try { 
        period0.plusMinutes((-2048));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MINUTE_INDEX = (-293);
      // Undeclared exception!
      try { 
        period0.plusMinutes(3112);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -293
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Period period0 = Period.minutes(10125002);
      PeriodType periodType0 = PeriodType.yearMonthDay();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.plusMillis(1324);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MILLI_INDEX = (-3167);
      // Undeclared exception!
      try { 
        period0.plusMillis(918);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3167
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null);
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
      try { 
        period0.plusHours(2052);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      PeriodType periodType0 = new PeriodType("+?!uMKbIcF", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((Object) null, periodType0);
      // Undeclared exception!
      try { 
        period0.plusHours(40);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.HOUR_INDEX = 501;
      // Undeclared exception!
      try { 
        period0.ZERO.plusHours(3177);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 501
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      PeriodType periodType0 = new PeriodType("M", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((-1142L), (-1142L), periodType0);
      // Undeclared exception!
      try { 
        period0.plusDays((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.DAY_INDEX = (-1);
      // Undeclared exception!
      try { 
        period0.plusDays(7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      Period period0 = days0.toPeriod();
      // Undeclared exception!
      try { 
        period0.plusDays(1512);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 1512
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      Period period1 = Period.years(4861);
      // Undeclared exception!
      try { 
        period0.plus(period1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Period period0 = Period.minutes((-475));
      PeriodType.MINUTE_INDEX = 8;
      // Undeclared exception!
      try { 
        period0.plus(period0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null);
      // Undeclared exception!
      try { 
        Period.parse(" as this period contains months and months vary in length", periodFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      // Undeclared exception!
      try { 
        Period.parse(":saa4[SX+\nCluefl", periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \":saa4[SX+
         // Cluefl\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Literal", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse("|,VX`s?$cd!P44F");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"|,VX`s?$cd!P44F\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      Period period0 = new Period(1000L, 15778476000L);
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Period period0 = new Period();
      int[] intArray0 = new int[2];
      PeriodType periodType0 = new PeriodType("", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        period0.ZERO.normalizedStandard(periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Period period0 = Period.hours(10000);
      PeriodType periodType0 = PeriodType.yearDay();
      PeriodType.DAY_INDEX = 10000;
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Period period0 = Period.weeks((-599));
      PeriodType periodType0 = PeriodType.millis();
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -362275200000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Days days0 = Days.daysBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      Hours hours0 = days0.toStandardHours();
      Duration duration0 = hours0.toStandardDuration();
      LocalDate localDate0 = LocalDate.now();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 1);
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime(dateTimeZone0);
      MutableDateTime mutableDateTime0 = dateTime0.toMutableDateTime();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      PeriodType periodType0 = new PeriodType("[yOH^t#@>", durationFieldTypeArray0, (int[]) null);
      Period period0 = duration0.toPeriodTo((ReadableInstant) mutableDateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.normalizedStandard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null);
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      PeriodType.YEAR_INDEX = 40;
      // Undeclared exception!
      try { 
        period0.normalizedStandard();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      Period period0 = days0.toPeriod();
      // Undeclared exception!
      try { 
        period0.negated();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -2147483648 * -1
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Period period0 = Period.days(10125000);
      // Undeclared exception!
      try { 
        period0.multipliedBy(515);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: 10125000 * 515
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Period period0 = Period.weeks((-1279));
      Duration duration0 = period0.toStandardDuration();
      PeriodType periodType0 = PeriodType.time();
      Period period1 = duration0.toPeriodTo((ReadableInstant) null, periodType0);
      // Undeclared exception!
      try { 
        period1.minusYears((-3670));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      PeriodType periodType0 = new PeriodType("+?!uMKbIcF", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((Object) null, periodType0);
      // Undeclared exception!
      try { 
        period0.minusYears(40);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Period period0 = Period.days(3064);
      PeriodType.YEAR_INDEX = 3064;
      // Undeclared exception!
      try { 
        period0.minusYears(3064);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3064
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.withYears((-999));
      // Undeclared exception!
      try { 
        period1.minusYears(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -999 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[8];
      PeriodType periodType0 = new PeriodType("rTJ", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(0L, 0L, periodType0);
      // Undeclared exception!
      try { 
        period0.minusWeeks(2918);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Period period0 = Period.millis(1204);
      PeriodType.WEEK_INDEX = 1908;
      // Undeclared exception!
      try { 
        period0.minusWeeks(1204);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1908
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      DurationFieldType durationFieldType0 = DurationFieldType.HALFDAYS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[2] = durationFieldType0;
      durationFieldTypeArray0[3] = durationFieldType0;
      durationFieldTypeArray0[4] = durationFieldTypeArray0[0];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((-3983L), periodType0);
      // Undeclared exception!
      try { 
        period0.minusSeconds(1843);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null);
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      PeriodType.SECOND_INDEX = 320;
      // Undeclared exception!
      try { 
        period0.minusSeconds(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 320
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      Duration duration0 = Duration.ZERO;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime((Chronology) buddhistChronology0);
      Period period0 = duration0.toPeriodTo((ReadableInstant) dateTime0);
      Period period1 = period0.minus(seconds0);
      // Undeclared exception!
      try { 
        period1.minusSeconds(1092);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -1092
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Duration duration0 = new Duration(727L);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      PeriodType periodType0 = new PeriodType("org.joda.time.DateTimeZone.NameProvider", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(duration0, (ReadableInstant) null, periodType0);
      // Undeclared exception!
      try { 
        period0.minusMonths(3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MONTH_INDEX = 2946;
      // Undeclared exception!
      try { 
        period0.minusMonths((-452));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2946
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      Period period0 = new Period(0L, periodType0, (Chronology) iSOChronology0);
      // Undeclared exception!
      try { 
        period0.minusMinutes((-25));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      PeriodType.MINUTE_INDEX = 67;
      Period period0 = new Period(5L, periodType0, (Chronology) julianChronology0);
      // Undeclared exception!
      try { 
        period0.minusMinutes((-25));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 67
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      Period period0 = new Period((long) 1614, periodType0);
      // Undeclared exception!
      try { 
        period0.minusMillis((-3926));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Period period0 = new Period(12, 12, 12, 1);
      PeriodType.MILLI_INDEX = 2109;
      // Undeclared exception!
      try { 
        period0.minusMillis((-2745));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2109
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null);
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
      try { 
        period0.minusHours(5);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null);
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      PeriodType.HOUR_INDEX = 1548;
      // Undeclared exception!
      try { 
        period0.ZERO.minusHours((-2835));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1548
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Period period0 = new Period(Integer.MIN_VALUE, Integer.MIN_VALUE, Integer.MIN_VALUE, 851);
      // Undeclared exception!
      try { 
        period0.minusHours(851);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -851
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Days days0 = Days.daysBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      Hours hours0 = days0.toStandardHours();
      Duration duration0 = hours0.toStandardDuration();
      LocalDate localDate0 = LocalDate.now();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 1);
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime(dateTimeZone0);
      MutableDateTime mutableDateTime0 = dateTime0.toMutableDateTime();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      PeriodType periodType0 = new PeriodType("[yOH^t#@>", durationFieldTypeArray0, (int[]) null);
      Period period0 = duration0.toPeriodTo((ReadableInstant) mutableDateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.minusDays((-3292));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Period period0 = Period.hours((-253));
      PeriodType.DAY_INDEX = 824;
      // Undeclared exception!
      try { 
        period0.minusDays(2250);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 824
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      Period period0 = days0.toPeriod();
      // Undeclared exception!
      try { 
        period0.minusDays((-5577));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 5577
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      DateTime dateTime0 = DateTime.now();
      Weeks weeks0 = Weeks.ONE;
      Interval interval0 = new Interval(dateTime0, weeks0);
      Period period0 = interval0.toPeriod();
      Duration duration0 = new Duration(0L, 1496);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
      Period period1 = duration0.toPeriod(periodType0, (Chronology) lenientChronology0);
      // Undeclared exception!
      try { 
        period1.minus(period0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      Duration duration0 = seconds0.toStandardDuration();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime((Chronology) buddhistChronology0);
      Period period0 = duration0.toPeriodTo((ReadableInstant) dateTime0);
      // Undeclared exception!
      try { 
        period0.minus(seconds0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -8 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Period period0 = Period.hours((-1402));
      PeriodType.YEAR_INDEX = 817;
      // Undeclared exception!
      try { 
        period0.getYears();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Period period0 = Period.hours((-1089));
      PeriodType.WEEK_INDEX = (-1089);
      // Undeclared exception!
      try { 
        period0.ZERO.getWeeks();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      Period period0 = new Period(localDate0, localDate0);
      PeriodType.SECOND_INDEX = (-2579);
      // Undeclared exception!
      try { 
        period0.getSeconds();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Period period0 = Period.seconds(0);
      PeriodType.MONTH_INDEX = 153692453;
      // Undeclared exception!
      try { 
        period0.getMonths();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null);
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      PeriodType.MILLI_INDEX = (-3005);
      // Undeclared exception!
      try { 
        period0.getMillis();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null);
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      PeriodType.DAY_INDEX = 320;
      // Undeclared exception!
      try { 
        period0.ZERO.getDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      int[] intArray0 = new int[9];
      Partial partial0 = new Partial(iSOChronology0, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(partial0, partial0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[7];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekyearOfCentury();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      dateTimeFieldTypeArray0[2] = dateTimeFieldTypeArray0[0];
      int[] intArray0 = new int[2];
      Partial partial0 = new Partial(gJChronology0, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(partial0, partial0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      int[] intArray0 = new int[1];
      MonthDay monthDay1 = new MonthDay(monthDay0, intArray0);
      PeriodType periodType0 = PeriodType.seconds();
      Period period0 = null;
      try {
        period0 = new Period(monthDay1, monthDay0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      int[] intArray0 = new int[5];
      PeriodType periodType0 = new PeriodType("America/Anchorage", durationFieldTypeArray0, intArray0);
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) null, (ReadablePartial) null, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      int[] intArray0 = new int[0];
      MonthDay monthDay1 = new MonthDay(monthDay0, intArray0);
      PeriodType periodType0 = PeriodType.seconds();
      Period period0 = null;
      try {
        period0 = new Period(monthDay1, monthDay0, periodType0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Period period0 = new Period(2747, 1, 1, 2747);
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      Duration duration0 = period0.toDurationTo(mutableDateTime0);
      PeriodType periodType0 = PeriodType.millis();
      Period period1 = null;
      try {
        period1 = new Period(duration0, mutableDateTime0, periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 9889263747
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Period period0 = null;
      try {
        period0 = new Period(fixedDateTimeZone0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: org.joda.time.tz.FixedDateTimeZone
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Period period0 = null;
      try {
        period0 = new Period("a0?BKjkJh~ssQ1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"a0?BKjkJh~ssQ1\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[8];
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldType0;
      durationFieldTypeArray0[3] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[4] = durationFieldTypeArray0[2];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      DurationFieldType durationFieldType1 = dateTimeFieldType0.getRangeDurationType();
      durationFieldTypeArray0[5] = durationFieldType1;
      int[] intArray0 = new int[6];
      PeriodType periodType0 = new PeriodType("Asia/Dhaka", durationFieldTypeArray0, intArray0);
      Period period0 = null;
      try {
        period0 = new Period((-2176L), periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[8];
      int[] intArray0 = new int[6];
      PeriodType periodType0 = new PeriodType("Asia/Dhaka", durationFieldTypeArray0, intArray0);
      Period period0 = null;
      try {
        period0 = new Period((-2176L), periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      PeriodType periodType0 = seconds0.getPeriodType();
      Period period0 = null;
      try {
        period0 = new Period(100000000000020L, periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 100000000000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      Period period0 = null;
      try {
        period0 = new Period((-9223372036854775808L), (Chronology) julianChronology0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -15250284452
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      PeriodType periodType0 = seconds0.getPeriodType();
      Period period0 = null;
      try {
        period0 = new Period(100000000000000L, 1172L, periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -99999999998
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.withYears(837);
      PeriodType periodType0 = PeriodType.years();
      Period period2 = period1.normalizedStandard(periodType0);
      assertFalse(period2.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Period period0 = Period.millis(1598);
      Period period1 = period0.multipliedBy(2);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Period period0 = Period.hours(817);
      Period period1 = period0.plusMillis(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusMillis(918);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null);
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
      try { 
        period0.plusSeconds((-512));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.ZERO.plusHours(3177);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Period period0 = new Period(26607895200000L, 0L, (Chronology) null);
      Period period1 = period0.plusDays(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalTime localTime0 = new LocalTime((DateTimeZone) fixedDateTimeZone0);
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      // Undeclared exception!
      try { 
        period0.plusDays(4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Period period0 = new Period(8, 8, 8, 2);
      Period period1 = period0.ZERO.plusWeeks(8);
      Seconds seconds0 = period1.toStandardSeconds();
      assertEquals(4838400, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period(604800L, periodType0, (Chronology) null);
      Period period1 = period0.plusMonths(1278);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.plusMonths(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      // Undeclared exception!
      try { 
        period0.plusYears(2591);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Period period0 = new Period(1000L, 15778476000L);
      Period period1 = period0.plusYears(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Period period0 = new Period(931, 931, (-1069), 0);
      int int0 = period0.getHours();
      assertEquals(931, int0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      PeriodType periodType0 = PeriodType.seconds();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      Period period0 = new Period((Object) null, periodType0, gregorianChronology0);
      // Undeclared exception!
      try { 
        period0.minusWeeks((-1663));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Period period0 = new Period(1000L, 15778476000L);
      int int0 = period0.getWeeks();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Period period0 = Period.seconds(918);
      int int0 = period0.getYears();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Period period0 = new Period((-42521587200000L), (Chronology) null);
      int int0 = period0.getDays();
      assertEquals((-6), int0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Period period0 = new Period((-2652), (-2652), (-2652), (-2652));
      int int0 = period0.getMinutes();
      assertEquals((-2652), int0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse("BCE", (PeriodFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Period period0 = Period.months((-9));
      int int0 = period0.getMonths();
      assertEquals((-9), int0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Period period0 = Period.seconds(918);
      Period period1 = new Period(period0, (Chronology) null);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      Period period0 = new Period(0L, periodType0, (Chronology) julianChronology0);
      Period period1 = period0.plusMinutes((-2137));
      Seconds seconds0 = period1.toStandardSeconds();
      assertEquals((-128220), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Period period0 = Period.millis(1598);
      int int0 = period0.getMillis();
      assertEquals(1598, int0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      Period period0 = new Period(0, 0, 0, 919, 0, 919, 0, (-166), periodType0);
      Duration duration0 = period0.toStandardDuration();
      assertEquals(79456739834L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      Period period0 = new Period(localDate0, localDate0);
      int int0 = period0.getSeconds();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Period period0 = Period.months(3215);
      Period period1 = period0.normalizedStandard();
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.withYears(837);
      Period period2 = period1.normalizedStandard();
      PeriodType periodType0 = PeriodType.weeks();
      // Undeclared exception!
      try { 
        period2.withPeriodType(periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'years'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Period period0 = Period.hours(1591);
      Period period1 = period0.multipliedBy(1);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.ZERO.multipliedBy((-1085));
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Period period0 = new Period(2, 2, 292272984, 2);
      Period period1 = period0.minus((ReadablePeriod) null);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Period period0 = Period.seconds(0);
      Period period1 = period0.minusMillis(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Period period0 = Period.days(10125000);
      Period period1 = period0.plusSeconds(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Period period0 = Period.hours((-1402));
      Period period1 = period0.plusMinutes(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusHours(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      Period period0 = mutablePeriod0.toPeriod();
      Period period1 = period0.ZERO.minusDays(0);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusWeeks(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null);
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      Period period1 = period0.minusYears(1023);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plus((ReadablePeriod) null);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Period period0 = Period.weeks((-3194));
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKYEARS_TYPE;
      Period period1 = period0.withFieldAdded(durationFieldType0, 0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Period period0 = Period.seconds((-4510));
      // Undeclared exception!
      try { 
        period0.withFieldAdded((DurationFieldType) null, 935);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Period period0 = Period.minutes((-475));
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      Period period1 = period0.ZERO.withFieldAdded(durationFieldType0, (-475));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Period period0 = new Period(12, 12, 12, 1);
      // Undeclared exception!
      try { 
        period0.ZERO.withField((DurationFieldType) null, 758);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      durationFieldTypeArray0[0] = durationFieldType0;
      int[] intArray0 = new int[0];
      PeriodType periodType0 = new PeriodType("Hxq@", durationFieldTypeArray0, intArray0);
      Period period0 = new Period(0L, periodType0);
      Period period1 = period0.withField(durationFieldTypeArray0[0], (-365));
      // Undeclared exception!
      try { 
        period0.minus(period1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Period period0 = Period.hours(4776);
      Period period1 = period0.withFields((ReadablePeriod) null);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Period period0 = Period.weeks((-1279));
      Period period1 = period0.withPeriodType((PeriodType) null);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Period period0 = new Period();
      int[] intArray0 = new int[0];
      PeriodType periodType0 = new PeriodType((String) null, (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        period0.withPeriodType(periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[1] = dateTimeFieldTypeArray0[0];
      int[] intArray0 = new int[9];
      Partial partial0 = new Partial(iSOChronology0, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(partial0, partial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not have overlapping fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) julianChronology0);
      LocalTime localTime0 = LocalTime.now();
      // Undeclared exception!
      try { 
        Period.fieldDifference(localTime0, localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-1));
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(localDate0, localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(localDate0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.fieldDifference((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      DateTime dateTime0 = new DateTime();
      PeriodType periodType0 = PeriodType.seconds();
      Period period0 = new Period(mutableDateTime0, dateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.withYears((-887));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.withYears(837);
      // Undeclared exception!
      try { 
        period1.toStandardSeconds();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Seconds as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null);
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
      try { 
        period0.minusSeconds(5);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Period period0 = new Period((-229L));
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalTime localTime0 = new LocalTime((DateTimeZone) fixedDateTimeZone0);
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      // Undeclared exception!
      try { 
        period0.minusDays((-677));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(7);
      DateTime dateTime0 = new DateTime((Object) null, dateTimeZone0);
      Duration duration0 = new Duration(dateTime0, dateTime0);
      Period period0 = new Period(dateTime0, duration0, (PeriodType) null);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      int[] intArray0 = new int[9];
      PeriodType periodType0 = new PeriodType("-boN7gZm2%--lKlGF>a", durationFieldTypeArray0, intArray0);
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      Period period0 = new Period((-2545L), (-2545L), periodType0, julianChronology0);
      // Undeclared exception!
      try { 
        period0.withWeeks((-25));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Months months0 = Months.MAX_VALUE;
      PeriodType periodType0 = months0.getPeriodType();
      Period period0 = new Period((-156L), 100000000000000000L, periodType0);
      // Undeclared exception!
      try { 
        period0.plus(months0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 38026486 + 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Days days0 = Days.daysBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      Hours hours0 = days0.toStandardHours();
      Duration duration0 = hours0.toStandardDuration();
      LocalDate localDate0 = LocalDate.now();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 1);
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime(dateTimeZone0);
      MutableDateTime mutableDateTime0 = dateTime0.toMutableDateTime();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      PeriodType periodType0 = new PeriodType("[yOH^t#@>", durationFieldTypeArray0, (int[]) null);
      Period period0 = duration0.toPeriodTo((ReadableInstant) mutableDateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.getYears();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      Period period0 = new Period(2000L, (Chronology) islamicChronology0);
      Period period1 = period0.plusYears(7);
      int int0 = period1.getYears();
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null);
      Period period0 = null;
      try {
        period0 = new Period(localDateTime0, periodType0, (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: org.joda.time.LocalDateTime
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(6, 6, 6);
      PeriodType periodType0 = PeriodType.yearDay();
      Period period0 = new Period(localDate0, localDate0, periodType0);
      PeriodType.MILLI_INDEX = 5486;
      // Undeclared exception!
      try { 
        period0.withMillis(6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5486
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-1));
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 2, dateTimeZone0);
      Period period0 = new Period(mutableDateTime0, mutableDateTime0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Period period0 = Period.months(8);
      // Undeclared exception!
      try { 
        period0.toStandardWeeks();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Weeks as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.ZERO.minusMinutes(1044);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Period period0 = Period.seconds((-794));
      PeriodType.MINUTE_INDEX = (-794);
      // Undeclared exception!
      try { 
        period0.ZERO.getMinutes();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Instant instant0 = new Instant(1343L);
      Weeks weeks0 = Weeks.THREE;
      Duration duration0 = weeks0.toStandardDuration();
      Period period0 = duration0.toPeriodTo((ReadableInstant) instant0);
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(30240, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null);
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      Period period1 = period0.ZERO.minusHours((-2835));
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Period period0 = new Period(0, (-1866), 0, 937, 0, 0, 0, (-3234));
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null);
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      Period period1 = period0.toPeriod();
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      Period period1 = period0.withMillis((-588));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      // Undeclared exception!
      try { 
        period0.minusMonths((-1444));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      Period period0 = new Period(0L, 60L, gregorianChronology0);
      Days days0 = period0.toStandardDays();
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDay();
      Period period0 = null;
      try {
        period0 = new Period((-4464), 192, 0, 121, 918, 0, (-2048), (-2017), periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'hours'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      Period period0 = null;
      try {
        period0 = new Period(fixedDateTimeZone0, iSOChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: org.joda.time.tz.FixedDateTimeZone
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Period period0 = Period.parse("P");
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Period period0 = Period.hours(12);
      Period period1 = period0.negated();
      Period period2 = period1.withMillis((-3237));
      // Undeclared exception!
      try { 
        period2.plusHours(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -12 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.withSeconds((-1674));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.withWeeks(10125010);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.withHours(10125010);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      PeriodType periodType0 = new PeriodType("+?!uMKbIcF", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((Object) null, periodType0);
      // Undeclared exception!
      try { 
        period0.minusMillis(32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.withMinutes(837);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null);
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      Period period1 = period0.withDays(1191);
      assertNotSame(period0, period1);
  }
}
