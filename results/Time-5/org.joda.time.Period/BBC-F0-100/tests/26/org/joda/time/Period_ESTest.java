/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 12:55:24 GMT 2021
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.format.ISOPeriodFormat;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Period_ESTest extends Period_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Days days0 = duration0.toStandardDays();
      Period period0 = days0.toPeriod();
      Period period1 = period0.minusYears(19);
      // Undeclared exception!
      try { 
        period1.toStandardHours();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Hours as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Period period0 = Period.minutes((-1238));
      Period period1 = period0.ZERO.plusDays((-1238));
      Duration duration0 = period1.toStandardDuration();
      assertEquals((-106963200L), duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Period period0 = new Period(3, 3, 3, 3);
      Duration duration0 = period0.toStandardDuration();
      assertEquals(10983003L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PeriodType periodType0 = PeriodType.dayTime();
      Duration duration0 = Duration.standardHours(960);
      Period period0 = duration0.toPeriod(periodType0);
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(3456000, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Period period0 = Period.weeks(3);
      Period period1 = period0.plusHours(3);
      Seconds seconds0 = period1.toStandardSeconds();
      assertEquals(1825200, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Period period0 = Period.millis(482);
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period(2355L, periodType0);
      Period period1 = period0.plusHours(1835);
      Minutes minutes0 = period1.toStandardMinutes();
      assertEquals(110100, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Period period0 = Period.minutes(3);
      Hours hours0 = period0.toStandardHours();
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Period period0 = new Period(0, 0, 1217, 1, (-1), (-1), 0, (-1), (PeriodType) null);
      Days days0 = period0.toStandardDays();
      assertEquals(8520, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period(2355L, periodType0);
      Days days0 = period0.toStandardDays();
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Period period0 = Period.millis(623158436);
      Period period1 = period0.normalizedStandard();
      assertFalse(period1.equals((Object)period0));
      
      Weeks weeks0 = period1.toStandardWeeks();
      assertEquals(1, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      Period period1 = period0.withFieldAdded(durationFieldType0, (-312));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      LocalDate localDate0 = new LocalDate((Chronology) iSOChronology0);
      LocalTime localTime0 = new LocalTime(0L);
      // Undeclared exception!
      try { 
        Period.fieldDifference(localDate0, localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Period period0 = new Period((Object) null);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Duration duration0 = new Duration((long) (-772));
      Instant instant0 = new Instant(1745L);
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      DateTime dateTime0 = instant0.toDateTime((Chronology) iSOChronology0);
      Period period0 = new Period(duration0, dateTime0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Period period0 = new Period(394, 394, 5097, 1633, 960, 394, 5097, 5097);
      Period period1 = period0.withMinutes(394);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.withHours(6);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Period period0 = Period.weeks((-752));
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals((-752), weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period(2355L, periodType0);
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Period period0 = Period.weeks(3);
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(30240, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Period period0 = Period.minutes((-314));
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals((-314), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Period period0 = Period.weeks(3);
      Hours hours0 = period0.toStandardHours();
      assertEquals(504, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Period period0 = new Period(0L);
      Hours hours0 = Hours.MIN_VALUE;
      Period period1 = period0.minus(hours0);
      Hours hours1 = period1.toStandardHours();
      assertEquals(Integer.MIN_VALUE, hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Period period0 = Period.weeks((-2488));
      Duration duration0 = period0.toStandardDuration();
      assertEquals((-1504742400000L), duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      Duration duration0 = period0.toStandardDuration();
      assertEquals(0L, duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Period period0 = Period.hours(87);
      Period period1 = period0.negated();
      Days days0 = period1.toStandardDays();
      assertEquals((-3), days0.getDays());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      Period period0 = Period.parse("", periodFormatter0);
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Period period0 = Period.parse("PT0S");
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Period period0 = new Period((-1731L));
      Period period1 = period0.minusYears(2666);
      Period period2 = period1.negated();
      Period period3 = period2.normalizedStandard();
      assertTrue(period3.equals((Object)period2));
      assertNotSame(period1, period0);
      assertFalse(period3.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Period period0 = new Period(394, 394, 5097, 1633, 960, 394, 5097, 5097);
      int int0 = period0.getYears();
      assertEquals(394, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Period period0 = Period.months((-1769));
      Period period1 = period0.normalizedStandard();
      int int0 = period1.getYears();
      assertEquals((-147), int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period(2355L, periodType0);
      int int0 = period0.getWeeks();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period(mutableDateTime0, mutableDateTime0, periodType0);
      Period period1 = period0.plusWeeks(3);
      int int0 = period1.getWeeks();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period(2355L, periodType0);
      int int0 = period0.getSeconds();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Period period0 = new Period(394, 394, 5097, 1633, 960, 394, 5097, 5097);
      Period period1 = period0.negated();
      int int0 = period1.getSeconds();
      assertEquals((-5097), int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Period period0 = new Period(394, 394, 5097, 1633, 960, 394, 5097, 5097);
      int int0 = period0.getMonths();
      assertEquals(394, int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.withMonths((byte) (-43));
      int int0 = period1.getMonths();
      assertEquals((-43), int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Period period0 = new Period(394, 394, 5097, 1633, 960, 394, 5097, 5097);
      int int0 = period0.getMinutes();
      assertEquals(394, int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Period period0 = Period.minutes((-314));
      int int0 = period0.getMinutes();
      assertEquals((-314), int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Period period0 = new Period((-1731L));
      Period period1 = period0.withMillis(871);
      int int0 = period1.getMillis();
      assertEquals(871, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Duration duration0 = new Duration(0L);
      Period period0 = duration0.toPeriod((PeriodType) null);
      Period period1 = period0.withMillis((-191));
      int int0 = period1.getMillis();
      assertEquals((-191), int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Period period0 = Period.months(19);
      int int0 = period0.ZERO.getHours();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Period period0 = new Period((-103), (-103), (-1585), (-103), 3850, (-103), (-1585), 3850);
      int int0 = period0.getHours();
      assertEquals(3850, int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Period period0 = Period.days(60);
      int int0 = period0.getDays();
      assertEquals(60, int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Period period0 = Period.minutes((-2781));
      Period period1 = period0.normalizedStandard();
      int int0 = period1.getDays();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Period period0 = Period.hours(1);
      PeriodType periodType0 = PeriodType.dayTime();
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      Period period1 = new Period(period0, periodType0, julianChronology0);
      // Undeclared exception!
      try { 
        period1.withYears(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Period period0 = Period.seconds((-618));
      PeriodType.YEAR_INDEX = (-618);
      // Undeclared exception!
      try { 
        period0.withYears((-478));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -618
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      Period period0 = new Period(2355L, periodType0);
      // Undeclared exception!
      try { 
        period0.withWeeks(5);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Period period0 = Period.hours(1);
      PeriodType.WEEK_INDEX = 1060;
      // Undeclared exception!
      try { 
        period0.withWeeks(143);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1060
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      Period period0 = new Period(10080L, periodType0, (Chronology) ethiopicChronology0);
      // Undeclared exception!
      try { 
        period0.withSeconds(3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.SECOND_INDEX = 3419;
      // Undeclared exception!
      try { 
        period0.withSeconds(7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3419
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Period period0 = new Period();
      int[] intArray0 = new int[8];
      PeriodType periodType0 = new PeriodType("fI", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        period0.withPeriodType(periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Period period0 = Period.weeks(3);
      PeriodType periodType0 = PeriodType.millis();
      // Undeclared exception!
      try { 
        period0.withPeriodType(periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'weeks'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MONTH_INDEX = (-1024);
      // Undeclared exception!
      try { 
        period0.withMonths(26);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1024
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("org.joda.time.convert.ReadablePartialConverter", durationFieldTypeArray0, (int[]) null);
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period0.withMinutes((-43));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Period period0 = duration0.toPeriod((PeriodType) null);
      PeriodType.MINUTE_INDEX = 2672;
      // Undeclared exception!
      try { 
        period0.withMinutes(2672);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2672
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Period period0 = Period.years(2133);
      PeriodType periodType0 = PeriodType.yearDay();
      Period period1 = period0.withPeriodType(periodType0);
      // Undeclared exception!
      try { 
        period1.withMillis((-312));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MILLI_INDEX = (-149);
      // Undeclared exception!
      try { 
        period0.withMillis(12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -149
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      PeriodType.HOUR_INDEX = (-1449);
      Period period0 = new Period(1800000L, periodType0);
      // Undeclared exception!
      try { 
        period0.withHours(543);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1449
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      Period period0 = new Period((-935L), 873L, periodType0);
      Days days0 = Days.ONE;
      // Undeclared exception!
      try { 
        period0.withFields(days0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'days'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      Duration duration0 = minutes0.toStandardDuration();
      PeriodType periodType0 = PeriodType.months();
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period0.withDays((-1897));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      int[] intArray0 = new int[9];
      intArray0[3] = 4215;
      PeriodType periodType0 = new PeriodType(">8.t[@>z<-z;!", durationFieldTypeArray0, intArray0);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      Period period0 = duration0.toPeriod(periodType0, (Chronology) gregorianChronology0);
      // Undeclared exception!
      try { 
        period0.withDays(25734375);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4215
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Period period0 = new Period(394, 394, 5097, 1633, 960, 394, 5097, 5097);
      // Undeclared exception!
      try { 
        period0.toStandardWeeks();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Weeks as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Period period0 = new Period(105, 105, 2, 105, 160, 105, 1000, 1000, (PeriodType) null);
      PeriodType.YEAR_INDEX = 2587;
      // Undeclared exception!
      try { 
        period0.ZERO.toStandardWeeks();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Period period0 = new Period((-2964), 3, 512, 119, (-2964), 1204, 2265, 2265);
      // Undeclared exception!
      try { 
        period0.toStandardSeconds();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Seconds as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Period period0 = Period.weeks(3);
      PeriodType.HOUR_INDEX = 2425;
      // Undeclared exception!
      try { 
        period0.toStandardSeconds();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Period period0 = Period.weeks((-456));
      Period period1 = period0.minusWeeks(3482);
      // Undeclared exception!
      try { 
        period1.toStandardSeconds();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -2381702400
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Days days0 = Days.FOUR;
      Period period0 = days0.toPeriod();
      PeriodType.yearWeekDayTime();
      Period period1 = period0.plusMonths(12);
      PeriodType.millis();
      period0.ZERO.toStandardWeeks();
      period1.toDurationTo((ReadableInstant) null);
      Period period2 = period0.plusYears(12);
      Period period3 = period2.negated();
      Period period4 = period3.minusMonths(2674);
      period4.plusMillis(12);
      DurationFieldType durationFieldType0 = DurationFieldType.ERAS_TYPE;
      DurationFieldType durationFieldType1 = DurationFieldType.MONTHS_TYPE;
      period0.withField(durationFieldType1, 857);
      // Undeclared exception!
      try { 
        period2.toStandardMinutes();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Minutes as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      PeriodType.MONTH_INDEX = 8;
      // Undeclared exception!
      try { 
        period0.toStandardMinutes();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Period period0 = Period.weeks(3);
      PeriodType.YEAR_INDEX = 989;
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = 1217;
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      Duration duration0 = Duration.ZERO;
      Days days0 = Days.MAX_VALUE;
      Period period0 = days0.toPeriod();
      Period period1 = period0.minusSeconds(1217);
      period0.minus(days0);
      period1.plusMonths(1);
      period0.toStandardDays();
      duration0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period1.toStandardHours();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 51539607528
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MILLI_INDEX = (-5425);
      // Undeclared exception!
      try { 
        period0.toStandardDuration();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Period period0 = Period.hours(1);
      Period period1 = period0.plusMonths(12);
      // Undeclared exception!
      try { 
        period1.toStandardDays();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Days as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      PeriodType.MINUTE_INDEX = 4435;
      // Undeclared exception!
      try { 
        period0.toStandardDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Period period0 = Period.weeks(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        period0.toStandardDays();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -15032385536
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PeriodType periodType0 = PeriodType.dayTime();
      Period period0 = new Period(2355L, periodType0);
      // Undeclared exception!
      try { 
        period0.plusYears(8);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.YEAR_INDEX = (-954);
      // Undeclared exception!
      try { 
        period0.plusYears(1563);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -954
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
      try { 
        period0.plusWeeks((-2681));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Period period0 = Period.minutes((-1238));
      PeriodType.WEEK_INDEX = (-1238);
      // Undeclared exception!
      try { 
        period0.plusWeeks((-5));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1238
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDay();
      Period period0 = new Period((-2452L), periodType0);
      // Undeclared exception!
      try { 
        period0.plusSeconds((-1816));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.SECOND_INDEX = 66;
      // Undeclared exception!
      try { 
        period0.plusSeconds(7593750);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 66
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      Interval interval0 = localDate0.toInterval();
      PeriodType periodType0 = PeriodType.days();
      Period period0 = interval0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period0.plusMonths(585);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Period period0 = new Period((ReadableInstant) null, (ReadableInstant) null);
      PeriodType.MONTH_INDEX = (-1244);
      // Undeclared exception!
      try { 
        period0.plusMonths((-1244));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1244
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.withMonths(319);
      // Undeclared exception!
      try { 
        period1.plusMonths(Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 319 + 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
      try { 
        period0.plusMinutes((-2435));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Period period0 = Period.seconds(Integer.MIN_VALUE);
      Period period1 = period0.minusMinutes(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        period1.plusMinutes(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      Period period0 = new Period((-1731L), periodType0);
      // Undeclared exception!
      try { 
        period0.plusMillis(2666);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Period period0 = new Period((-2716L));
      PeriodType.MILLI_INDEX = (-393);
      // Undeclared exception!
      try { 
        period0.plusMillis((-697));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -393
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
      try { 
        period0.plusHours((-1));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      PeriodType periodType0 = new PeriodType("Kc;}`l-4KDBgVD>i2", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(0L, 0L, periodType0, (Chronology) null);
      // Undeclared exception!
      try { 
        period0.plusHours((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Period period0 = new Period((-1731L));
      PeriodType.HOUR_INDEX = (-265);
      // Undeclared exception!
      try { 
        period0.plusHours(1534);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -265
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Period period0 = new Period(0L);
      Hours hours0 = Hours.MIN_VALUE;
      Period period1 = period0.minus(hours0);
      // Undeclared exception!
      try { 
        period1.plusHours((-601));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -601
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.DAY_INDEX = 3383;
      // Undeclared exception!
      try { 
        period0.plusDays(2356);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3383
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Period period0 = new Period(0, 1217, (-3444), (-441), 3552, (-1718), (-3444), (-3444), (PeriodType) null);
      PeriodType periodType0 = PeriodType.hours();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      Period period1 = new Period((long) (-3444), periodType0, (Chronology) gregorianChronology0);
      // Undeclared exception!
      try { 
        period1.plus(period0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Period period0 = new Period((-1035), (-1035), (-1035), (-1035));
      PeriodType.MINUTE_INDEX = (-1035);
      Minutes minutes0 = Minutes.MIN_VALUE;
      // Undeclared exception!
      try { 
        period0.plus(minutes0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1035
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Period period0 = new Period(938, 198, (-2498), 478, 3918, 9, 921, (-865));
      Weeks weeks0 = Weeks.MIN_VALUE;
      // Undeclared exception!
      try { 
        period0.plus(weeks0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2498 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null);
      // Undeclared exception!
      try { 
        Period.parse("t,QCI2s*;,Jv4D8*:bO", periodFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse("", (PeriodFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Period period0 = Period.days((-1963));
      int[] intArray0 = new int[9];
      PeriodType periodType0 = new PeriodType("iNHt|pSS3oUAr]XA*Q", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      Period period0 = new Period(0L, (Chronology) gregorianChronology0);
      PeriodType periodType0 = PeriodType.millis();
      PeriodType.WEEK_INDEX = (-1622);
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Period period0 = Period.hours(2598);
      PeriodType periodType0 = PeriodType.millis();
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 9352800000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Period period0 = Period.weeks((-1045));
      PeriodType.MONTH_INDEX = (-1045);
      // Undeclared exception!
      try { 
        period0.normalizedStandard();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      MutablePeriod mutablePeriod0 = days0.toMutablePeriod();
      Period period0 = mutablePeriod0.toPeriod();
      // Undeclared exception!
      try { 
        period0.negated();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -2147483648 * -1
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      Period period0 = new Period(100L, 0L, periodType0, copticChronology0);
      // Undeclared exception!
      try { 
        period0.minusYears(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Interval interval0 = new Interval(60L, 60L);
      PeriodType periodType0 = PeriodType.days();
      Period period0 = interval0.toPeriod(periodType0);
      PeriodType.YEAR_INDEX = 2623;
      // Undeclared exception!
      try { 
        period0.minusYears(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2623
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
      try { 
        period0.minusWeeks(2300);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[7];
      int[] intArray0 = new int[7];
      intArray0[2] = 87;
      PeriodType periodType0 = new PeriodType("c]R8", durationFieldTypeArray0, intArray0);
      Period period0 = new Period(1180L, 1180L, periodType0);
      // Undeclared exception!
      try { 
        period0.minusWeeks(512);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 87
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
      try { 
        period0.minusSeconds(268);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.SECOND_INDEX = 1110;
      // Undeclared exception!
      try { 
        period0.minusSeconds(12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1110
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      Period period0 = new Period((-1L), periodType0);
      // Undeclared exception!
      try { 
        period0.minusMonths((-2928));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      Period period0 = new Period(dateTime0, dateTime0, (PeriodType) null);
      PeriodType.MONTH_INDEX = (-2489);
      // Undeclared exception!
      try { 
        period0.minusMonths(3918);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2489
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
      try { 
        period0.minusMinutes((-2488));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MINUTE_INDEX = 1576;
      // Undeclared exception!
      try { 
        period0.minusMinutes(1795);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1576
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      PeriodType periodType0 = PeriodType.seconds();
      MutablePeriod mutablePeriod0 = new MutablePeriod(1613L, periodType0);
      Period period0 = mutablePeriod0.toPeriod();
      // Undeclared exception!
      try { 
        period0.minusMillis(1217);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PeriodType periodType0 = PeriodType.seconds();
      MutablePeriod mutablePeriod0 = new MutablePeriod(1613L, periodType0);
      Period period0 = mutablePeriod0.toPeriod();
      PeriodType.MILLI_INDEX = 1217;
      // Undeclared exception!
      try { 
        period0.minusMillis(1217);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1217
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.HOUR_INDEX = (-241);
      // Undeclared exception!
      try { 
        period0.minusHours((-241));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -241
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.DAY_INDEX = 12;
      // Undeclared exception!
      try { 
        period0.minusDays((-1024));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      Days days0 = Days.MIN_VALUE;
      Duration duration0 = days0.toStandardDuration();
      PeriodType periodType0 = PeriodType.yearMonthDay();
      Period period0 = duration0.toPeriod(periodType0, (Chronology) iSOChronology0);
      // Undeclared exception!
      try { 
        period0.minusDays(9);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -9
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      Period period1 = new Period(3600000L, (Chronology) copticChronology0);
      // Undeclared exception!
      try { 
        period0.minus(period1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Duration duration0 = Duration.parse((String) null);
      DateTime dateTime0 = new DateTime((Object) null);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      Weeks weeks0 = Weeks.weeks((-899));
      int[] intArray0 = new int[6];
      intArray0[2] = (-899);
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, intArray0);
      Period period0 = duration0.toPeriodFrom((ReadableInstant) dateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.minus(weeks0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -899
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      Period period0 = days0.toPeriod();
      // Undeclared exception!
      try { 
        period0.minus(period0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Period period0 = Period.months(3);
      PeriodType.YEAR_INDEX = 11;
      // Undeclared exception!
      try { 
        period0.getYears();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Period period0 = Period.minutes(3329);
      PeriodType.WEEK_INDEX = 11;
      // Undeclared exception!
      try { 
        period0.ZERO.getWeeks();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Period period0 = Period.millis((-341));
      PeriodType.SECOND_INDEX = (-739);
      // Undeclared exception!
      try { 
        period0.ZERO.getSeconds();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MONTH_INDEX = (-2172);
      // Undeclared exception!
      try { 
        period0.getMonths();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MINUTE_INDEX = 1576;
      // Undeclared exception!
      try { 
        period0.ZERO.getMinutes();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Period period0 = new Period((-2716L));
      PeriodType.MILLI_INDEX = (-393);
      // Undeclared exception!
      try { 
        period0.ZERO.getMillis();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Period period0 = Period.weeks((-6));
      PeriodType.HOUR_INDEX = 24;
      // Undeclared exception!
      try { 
        period0.ZERO.getHours();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Period period0 = Period.hours(1);
      PeriodType.DAY_INDEX = 366;
      // Undeclared exception!
      try { 
        period0.getDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      int[] intArray0 = new int[6];
      Partial partial0 = new Partial(buddhistChronology0, (DateTimeFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(partial0, partial0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      int[] intArray0 = new int[1];
      YearMonth yearMonth1 = new YearMonth(yearMonth0, intArray0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(yearMonth1, yearMonth0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(0L, (Chronology) null);
      int[] intArray0 = new int[6];
      MonthDay monthDay1 = new MonthDay(monthDay0, intArray0);
      PeriodType periodType0 = PeriodType.weeks();
      Period period0 = null;
      try {
        period0 = new Period(monthDay1, monthDay1, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      PeriodType periodType0 = PeriodType.dayTime();
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) null, localDateTime0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) null, localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Period period0 = new Period(1000, 1000, 1000, 1675, 1000, (-1551), 1675, 1675);
      DateTime dateTime1 = dateTime0.minus((ReadablePeriod) period0);
      PeriodType periodType0 = PeriodType.millis();
      Period period1 = null;
      try {
        period1 = new Period(dateTime1, dateTime0, periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 34939867016675
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Duration duration0 = Duration.parse((String) null);
      Period period0 = new Period((ReadableInstant) null, duration0);
      Period period1 = period0.plusYears(583);
      Duration duration1 = period1.toDurationTo((ReadableInstant) null);
      PeriodType periodType0 = PeriodType.seconds();
      Period period2 = null;
      try {
        period2 = new Period((ReadableInstant) null, duration1, periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 18397756800
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      Object object0 = new Object();
      Period period0 = null;
      try {
        period0 = new Period(object0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Object object0 = new Object();
      Period period0 = null;
      try {
        period0 = new Period(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      PeriodType periodType0 = new PeriodType("", (DurationFieldType[]) null, (int[]) null);
      Period period0 = null;
      try {
        period0 = new Period(0L, periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int[] intArray0 = new int[7];
      PeriodType periodType0 = new PeriodType((String) null, (DurationFieldType[]) null, intArray0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Period period0 = null;
      try {
        period0 = new Period(3393L, (-1185L), periodType0, buddhistChronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Period period0 = null;
      try {
        period0 = new Period(100000000000000000L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 27777777777
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      PeriodType periodType0 = PeriodType.seconds();
      Period period0 = null;
      try {
        period0 = new Period((-502), 358, 3, 1000, 1000, 8, 328, 1000, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'years'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Period period0 = Period.weeks((-2488));
      PeriodType periodType0 = PeriodType.days();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.withMonths(1159);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Period period0 = new Period(394, 394, 5097, 1633, 960, 394, 5097, 5097);
      Period period1 = period0.multipliedBy((-772));
      // Undeclared exception!
      try { 
        period1.toStandardHours();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Hours as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period(2355L, periodType0);
      Period period1 = period0.ZERO.multipliedBy((-2524));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Period period0 = new Period(0, 1000, 8, 2615625, 990, (-2460), 3945, 1972);
      // Undeclared exception!
      try { 
        period0.multipliedBy(1830);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: 2615625 * 1830
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period(2355L, periodType0);
      Period period1 = period0.plusSeconds(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.plusMinutes(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Period period0 = new Period((-1731L));
      Period period1 = period0.ZERO.plusHours(0);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.plusWeeks(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Period period0 = Period.hours(1);
      Period period1 = period0.plusMonths(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Period period0 = new Period((-2964), 3, 512, 119, (-2964), 1204, 2265, 2265);
      int int0 = period0.getHours();
      assertEquals((-2964), int0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0, 6);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(julianChronology0, dateTimeZone0);
      Period period0 = new Period(3600L, 3600L, zonedChronology0);
      PeriodType periodType0 = PeriodType.dayTime();
      Period period1 = new Period(period0, periodType0, zonedChronology0);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Period period0 = Period.weeks((-2694));
      int int0 = period0.getWeeks();
      assertEquals((-2694), int0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      int int0 = period0.getYears();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Hours hours0 = Hours.hours((-1252));
      Days days0 = hours0.toStandardDays();
      Period period0 = days0.toPeriod();
      int int0 = period0.getSeconds();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Duration duration0 = Duration.standardDays(0L);
      DateTime dateTime0 = new DateTime();
      PeriodType periodType0 = PeriodType.hours();
      Period period0 = new Period(duration0, dateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.plusDays((-1260));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Period period0 = Period.weeks(3);
      int int0 = period0.getDays();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Period period0 = new Period();
      int int0 = period0.ZERO.getMinutes();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Instant instant0 = new Instant();
      Duration duration0 = Duration.ZERO;
      Period period0 = new Period(instant0, duration0);
      Period period1 = period0.withYears(3672);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Period period0 = new Period();
      int int0 = period0.getMonths();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) fixedDateTimeZone0, 5);
      Period period0 = new Period((Object) null, julianChronology0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Duration duration0 = new Duration(0L);
      Period period0 = duration0.toPeriod((PeriodType) null);
      int int0 = period0.getMillis();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Period period0 = Period.weeks(41);
      Duration duration0 = period0.toStandardDuration();
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      DateTime dateTime0 = DateTime.now((Chronology) julianChronology0);
      Period period1 = duration0.toPeriodTo((ReadableInstant) dateTime0);
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      // Undeclared exception!
      try { 
        period1.normalizedStandard(periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTime dateTime0 = DateTime.now((Chronology) copticChronology0);
      DateTime dateTime1 = dateTime0.minusYears(3);
      Duration duration0 = new Duration(dateTime0, dateTime1);
      Period period0 = duration0.toPeriodTo((ReadableInstant) dateTime0);
      PeriodType periodType0 = PeriodType.years();
      Period period1 = period0.normalizedStandard(periodType0);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Period period0 = Period.weeks(3);
      Period period1 = period0.plusYears(3);
      // Undeclared exception!
      try { 
        period1.toStandardDuration();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Duration as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      Period period1 = period0.multipliedBy(1);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Period period0 = Period.weeks(3);
      Period period1 = period0.minus((ReadablePeriod) null);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Period period0 = Period.weeks(3);
      Period period1 = period0.plusMillis(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Duration duration0 = new Duration(0L);
      Period period0 = duration0.toPeriod((PeriodType) null);
      Period period1 = period0.minusHours(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      Period period0 = new Period(100000000L, 100000000L, iSOChronology0);
      Period period1 = period0.plusDays(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Period period0 = new Period(2, 0, 1930, 1, 1930, 1930, 1, (-1), (PeriodType) null);
      Period period1 = period0.plusYears(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.ZERO.plus((ReadablePeriod) null);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plus(period0);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds(5595);
      PeriodType periodType0 = seconds0.getPeriodType();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      Period period0 = new Period((-2378L), (-2378L), periodType0, gregorianChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      Period period1 = period0.withFieldAdded(durationFieldType0, 0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
      try { 
        period0.withFieldAdded((DurationFieldType) null, 1000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Period period0 = Period.minutes((-1238));
      DurationFieldType durationFieldType0 = DurationFieldType.SECONDS_TYPE;
      Period period1 = period0.withFieldAdded(durationFieldType0, 6);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Period period0 = Period.weeks(3);
      // Undeclared exception!
      try { 
        period0.withField((DurationFieldType) null, 583);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0, 6);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(julianChronology0, dateTimeZone0);
      Period period0 = new Period(3600L, 3600L, zonedChronology0);
      Period period1 = period0.withFields((ReadablePeriod) null);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period(mutableDateTime0, mutableDateTime0, periodType0);
      Period period1 = period0.withPeriodType(periodType0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Period period0 = new Period();
      PeriodType periodType0 = PeriodType.years();
      Period period1 = period0.withPeriodType(periodType0);
      // Undeclared exception!
      try { 
        period1.minusDays((-5));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[7];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[1] = dateTimeFieldTypeArray0[0];
      int[] intArray0 = new int[9];
      Partial partial0 = new Partial(iSOChronology0, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(partial0, partial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not have overlapping fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      DateTime dateTime0 = DateTime.now();
      GregorianCalendar gregorianCalendar0 = dateTime0.toGregorianCalendar();
      LocalTime localTime0 = LocalTime.fromCalendarFields(gregorianCalendar0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(localDateTime0, localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      java.time.Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      LocalDate localDate0 = LocalDate.fromDateFields(date0);
      LocalTime localTime0 = new LocalTime(18, 18);
      // Undeclared exception!
      try { 
        Period.fieldDifference(localTime0, localDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      // Undeclared exception!
      try { 
        Period.fieldDifference(localDateTime0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.fieldDifference((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Period period0 = Period.weeks((-263));
      // Undeclared exception!
      try { 
        period0.minusWeeks(Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -263 + -2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Period period0 = Period.minutes((-1238));
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals((-74280), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Period period0 = Period.weeks((-6));
      Period period1 = period0.minusDays((-388));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Period period0 = new Period(Integer.MIN_VALUE, Integer.MIN_VALUE, Integer.MIN_VALUE, Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        period0.minusMinutes(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Duration duration0 = Duration.parse((String) null);
      PeriodType periodType0 = PeriodType.seconds();
      Period period0 = new Period((ReadableInstant) null, duration0, periodType0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      Period period0 = null;
      try {
        period0 = new Period(2147483647L, (-347L), periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -2147483994
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Duration duration0 = Duration.standardDays(723L);
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      int[] intArray0 = new int[1];
      PeriodType periodType0 = new PeriodType("Y0B^6(udFC4{&2V+l6V", durationFieldTypeArray0, intArray0);
      Period period0 = null;
      try {
        period0 = new Period(duration0, mutableDateTime0, periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Period period0 = Period.days((-292269054));
      // Undeclared exception!
      try { 
        period0.toStandardMinutes();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -420867437760
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      Period period0 = null;
      try {
        period0 = new Period(" as this period contains months and months vary in length", periodType0, (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \" as this period contains months ...\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Period period0 = Period.days(8);
      PeriodType.MINUTE_INDEX = 8;
      // Undeclared exception!
      try { 
        period0.ZERO.plusMinutes((-1392));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(0L, (Chronology) null);
      PeriodType periodType0 = PeriodType.weeks();
      Period period0 = new Period(monthDay0, monthDay0, periodType0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[8];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, (int[]) null);
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, (ReadableInstant) null, periodType0);
      Period period0 = mutablePeriod0.toPeriod();
      // Undeclared exception!
      try { 
        period0.withSeconds(10125000);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Period period0 = new Period(2350, 60000L);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Literal", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
      try { 
        period0.minusHours(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Period period0 = new Period(3918, (-319), Integer.MAX_VALUE, 3918, (-436), 9, 422, 538);
      // Undeclared exception!
      try { 
        period0.normalizedStandard();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 2147484204
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Period period0 = Period.months(3);
      Period period1 = period0.toPeriod();
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("org.joda.time.convert.ReadablePartialConverter", durationFieldTypeArray0, (int[]) null);
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period0.plusSeconds(47);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Interval interval0 = new Interval(60L, 60L);
      PeriodType periodType0 = PeriodType.days();
      Period period0 = interval0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period0.minusYears(3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      Period period0 = null;
      try {
        period0 = new Period(periodType0, (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: org.joda.time.PeriodType
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Period period0 = new Period(localDateTime0, localDateTime0);
      Period period1 = period0.minusDays((-540));
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) (-540));
      Duration duration0 = period1.toDurationFrom(mutableDateTime0);
      PeriodType periodType0 = PeriodType.millis();
      Period period2 = null;
      try {
        period2 = new Period(duration0, mutableDateTime0, periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 46656000000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      PeriodFormatter periodFormatter0 = ISOPeriodFormat.standard();
      // Undeclared exception!
      try { 
        Period.parse("Duration", periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Duration\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Weeks weeks0 = Weeks.MIN_VALUE;
      PeriodType periodType0 = weeks0.getPeriodType();
      Period period0 = new Period((Object) null, periodType0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Duration duration0 = Duration.parse((String) null);
      Period period0 = new Period((ReadableInstant) null, duration0);
      Period period1 = period0.withSeconds(10080);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Period period0 = Period.hours(1);
      Period period1 = period0.withWeeks(143);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
      try { 
        period0.withHours((-2498));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Period period0 = Period.seconds((-618));
      Period period1 = period0.minusMillis((-618));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
      try { 
        period0.withMinutes(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Period period0 = Period.weeks(Integer.MIN_VALUE);
      Period period1 = period0.withDays(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        period1.toStandardWeeks();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -2454267026
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
}
