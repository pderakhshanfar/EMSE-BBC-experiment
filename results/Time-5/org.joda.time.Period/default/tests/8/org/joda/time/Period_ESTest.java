/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 16:06:55 GMT 2021
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.MutableDateTime;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.format.ISOPeriodFormat;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Period_ESTest extends Period_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);
      Period period0 = new Period((-4677L), 165L, julianChronology0);
      Period period1 = period0.plusYears((-2019));
      // Undeclared exception!
      try { 
        period1.toStandardDuration();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Duration as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Period period0 = new Period((-1447), (-277), 1000, (-277), (-2736), 0, (-277), (-2571));
      // Undeclared exception!
      try { 
        period0.toStandardDays();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Days as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Period period0 = Period.weeks(1687);
      Duration duration0 = period0.toStandardDuration();
      assertEquals(1020297600000L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Period period0 = new Period((-1L), (Chronology) null);
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Hours hours0 = Hours.THREE;
      Duration duration0 = hours0.toStandardDuration();
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      Period period0 = duration0.toPeriod((Chronology) copticChronology0);
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(180, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);
      Period period0 = new Period((-4677L), 165L, julianChronology0);
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Period period0 = Period.weeks(1687);
      Period period1 = period0.ZERO.plusDays(1687);
      Hours hours0 = period1.toStandardHours();
      assertEquals(40488, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Period period0 = new Period(45, 45, 1687, 1687);
      Hours hours0 = period0.toStandardHours();
      assertEquals(46, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Period period0 = Period.minutes((-206));
      Period period1 = period0.plusHours((-206));
      Days days0 = period1.toStandardDays();
      assertEquals((-8), days0.getDays());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);
      Period period0 = new Period((-4677L), 165L, julianChronology0);
      Days days0 = period0.toStandardDays();
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Period period0 = Period.hours(3510);
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(20, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Period period0 = Period.minutes((-206));
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      Partial partial0 = new Partial();
      // Undeclared exception!
      try { 
        Period.fieldDifference(monthDay0, partial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      Period period0 = new Period(0L, periodType0, (Chronology) julianChronology0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);
      Duration duration0 = Duration.standardSeconds(3);
      Days days0 = Days.days(3);
      PeriodType periodType0 = days0.getPeriodType();
      Period period0 = new Period(mutableDateTime0, duration0, periodType0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Duration duration0 = new Duration(0L, 30962844000000L);
      Period period0 = new Period((ReadableInstant) null, duration0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes((-2672L));
      PeriodType periodType0 = PeriodType.months();
      Period period0 = new Period(duration0, (ReadableInstant) null, periodType0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.minusYears(627);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Period period0 = Period.hours(80);
      Period period1 = period0.plusSeconds((-1990));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.plus(period0);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Period period0 = new Period();
      Days days0 = Days.MAX_VALUE;
      Period period1 = period0.minus(days0);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Period period0 = Period.minutes(0);
      Period period1 = period0.withYears(0);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Period period0 = Period.minutes(3);
      Period period1 = period0.withSeconds(0);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Period period0 = new Period((-3173L), (PeriodType) null);
      Period period1 = period0.ZERO.withMonths((-1149));
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Period period0 = Period.days(22);
      Period period1 = period0.withMinutes(22);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Period period0 = new Period(25734375, 25734375, 25734375, 25734375);
      Period period1 = period0.withHours(25734375);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Period period0 = new Period();
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      Period period1 = period0.withField(durationFieldType0, 16);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Period period0 = Period.seconds(25734375);
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(42, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      Period period0 = days0.toPeriod();
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals((-306783378), weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      Period period0 = new Period(1000000000L, (Chronology) julianChronology0);
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(1000000, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Period period0 = Period.minutes((-206));
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals((-12360), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DateTime dateTime0 = new DateTime(0L);
      PeriodType periodType0 = PeriodType.dayTime();
      Period period0 = new Period(dateTime0, dateTime0, periodType0);
      Period period1 = period0.ZERO.withDays(2);
      Minutes minutes0 = period1.toStandardMinutes();
      assertEquals(2880, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);
      Period period0 = new Period(0L, (-685L), julianChronology0);
      Period period1 = period0.minusWeeks(2);
      Minutes minutes0 = period1.toStandardMinutes();
      assertEquals((-20160), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Period period0 = new Period((-1841L));
      Hours hours0 = period0.toStandardHours();
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Period period0 = Period.weeks((-829));
      Hours hours0 = period0.toStandardHours();
      assertEquals((-139272), hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Period period0 = Period.minutes((-1212));
      Period period1 = period0.ZERO.withDays((-1212));
      Duration duration0 = period1.toStandardDuration();
      assertEquals((-104716800L), duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Period period0 = Period.minutes((-206));
      Duration duration0 = period0.toStandardDuration();
      assertEquals((-12360000L), duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Period period0 = Period.minutes((-206));
      Period period1 = period0.withMillis(623158436);
      Days days0 = period1.toStandardDays();
      assertEquals(7, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);
      Period period0 = new Period(0L, (-685L), julianChronology0);
      Period period1 = period0.minusWeeks(2);
      Days days0 = period1.toStandardDays();
      assertEquals((-14), days0.getDays());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Period period0 = Period.years(25734375);
      Period period1 = period0.minusWeeks(25734375);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Period period0 = Period.months(941);
      Period period1 = period0.minusMonths(941);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Period period0 = Period.months((-1480));
      Period period1 = period0.minusMillis((-1480));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Period period0 = new Period(3510, (-1410), 1360, (-1410), 3510, 1000, 1360, 1360);
      int int0 = period0.getYears();
      assertEquals(3510, int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Period period0 = new Period((-1447), 722, (-2736), 6905, (-2571), (-2571), (-1204), 722);
      int int0 = period0.getYears();
      assertEquals((-1447), int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Period period0 = Period.weeks(1687);
      int int0 = period0.getWeeks();
      assertEquals(1687, int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Period period0 = Period.minutes((-1212));
      Period period1 = period0.withWeeks((-1259));
      int int0 = period1.getWeeks();
      assertEquals((-1259), int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Period period0 = new Period((-3173L), (PeriodType) null);
      int int0 = period0.ZERO.getSeconds();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Period period0 = new Period(0, 3007, 9, 0);
      int int0 = period0.getSeconds();
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Period period0 = Period.days(0);
      int int0 = period0.getMonths();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Period period0 = Period.months(25734375);
      int int0 = period0.getMonths();
      assertEquals(25734375, int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Period period0 = Period.years(4);
      int int0 = period0.getMinutes();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Period period0 = new Period(0, 3007, 9, 0);
      int int0 = period0.getMinutes();
      assertEquals(3007, int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Period period0 = Period.minutes(3);
      int int0 = period0.ZERO.getMillis();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      Period period0 = new Period(25L, (-685L), julianChronology0);
      Period period1 = period0.negated();
      int int0 = period1.getMillis();
      assertEquals(710, int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Period period0 = new Period(0, 3007, 9, 0);
      int int0 = period0.getHours();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Period period0 = Period.seconds(23);
      Period period1 = period0.plusHours(2235);
      Period period2 = period1.negated();
      int int0 = period2.getHours();
      assertEquals((-2235), int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Period period0 = Period.weeks(1687);
      Period period1 = period0.ZERO.plusDays(1687);
      int int0 = period1.getDays();
      assertEquals(1687, int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.minusDays(330);
      int int0 = period1.getDays();
      assertEquals((-330), int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.YEAR_INDEX = (-86399999);
      // Undeclared exception!
      try { 
        period0.withYears((-86399999));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -86399999
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      Hours hours0 = Hours.hoursBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      Duration duration0 = hours0.toStandardDuration();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      PeriodType periodType0 = new PeriodType(":jfm[[W", durationFieldTypeArray0, (int[]) null);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Period period0 = duration0.toPeriod(periodType0, (Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        period0.withWeeks(3600);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.WEEK_INDEX = 1761;
      // Undeclared exception!
      try { 
        period0.withWeeks((-546));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1761
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Duration duration0 = new Duration(168L);
      Duration duration1 = duration0.minus(168L);
      DateTime dateTime0 = DateTime.now();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      PeriodType periodType0 = new PeriodType("o<lX8irs(-uH!{2", durationFieldTypeArray0, (int[]) null);
      Period period0 = duration1.toPeriodTo((ReadableInstant) dateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.withSeconds(6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Period period0 = Period.ZERO;
      PeriodType.SECOND_INDEX = 12;
      // Undeclared exception!
      try { 
        period0.withSeconds(895);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Period period0 = new Period();
      int[] intArray0 = new int[1];
      PeriodType periodType0 = new PeriodType("#C(G[MBQ5jUOIL%,", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        period0.withPeriodType(periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Period period0 = Period.days(835);
      PeriodType periodType0 = PeriodType.hours();
      // Undeclared exception!
      try { 
        period0.withPeriodType(periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'days'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      DurationFieldType durationFieldType0 = DurationFieldType.HALFDAYS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[2] = durationFieldTypeArray0[1];
      durationFieldTypeArray0[3] = durationFieldTypeArray0[2];
      durationFieldTypeArray0[4] = durationFieldType0;
      durationFieldTypeArray0[5] = durationFieldType0;
      PeriodType periodType0 = new PeriodType(" as this period contains years and years vary in length", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(1223L, periodType0);
      // Undeclared exception!
      try { 
        period0.withMonths(3446);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MONTH_INDEX = 300;
      // Undeclared exception!
      try { 
        period0.withMonths(300);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 300
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Period period0 = Period.hours(6);
      PeriodType.MINUTE_INDEX = (-4475);
      // Undeclared exception!
      try { 
        period0.withMinutes(6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4475
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Period period0 = Period.hours(489);
      PeriodType.MILLI_INDEX = 489;
      // Undeclared exception!
      try { 
        period0.withMillis(64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 489
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.HOUR_INDEX = 2677;
      // Undeclared exception!
      try { 
        period0.withHours((-49));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2677
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.DAY_INDEX = 1000;
      // Undeclared exception!
      try { 
        period0.withDays(1000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1000
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Period period0 = Period.years(25734375);
      // Undeclared exception!
      try { 
        period0.toStandardWeeks();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Weeks as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.SECOND_INDEX = 90;
      // Undeclared exception!
      try { 
        period0.toStandardWeeks();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[7];
      PeriodType periodType0 = new PeriodType("/<X3", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(0L, periodType0);
      // Undeclared exception!
      try { 
        period0.toStandardSeconds();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MINUTE_INDEX = 489;
      // Undeclared exception!
      try { 
        period0.toStandardSeconds();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Period period0 = Period.years(7);
      // Undeclared exception!
      try { 
        period0.toStandardMinutes();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Minutes as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MILLI_INDEX = (-1416);
      // Undeclared exception!
      try { 
        period0.toStandardMinutes();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Period period0 = Period.weeks(25734371);
      // Undeclared exception!
      try { 
        period0.toStandardMinutes();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 259402459680
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Period period0 = Period.months(25734375);
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Hours as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.SECOND_INDEX = 3283;
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, (int[]) null);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      Period period0 = new Period(2237L, 2237L, periodType0, julianChronology0);
      // Undeclared exception!
      try { 
        period0.toStandardDuration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.HOUR_INDEX = (-551);
      // Undeclared exception!
      try { 
        period0.toStandardDuration();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.HOUR_INDEX = 27;
      // Undeclared exception!
      try { 
        period0.toStandardDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.YEAR_INDEX = (-115);
      // Undeclared exception!
      try { 
        period0.plusYears((-115));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -115
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.WEEK_INDEX = (-807);
      // Undeclared exception!
      try { 
        period0.plusWeeks((-807));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -807
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Period period0 = Period.millis(668);
      Weeks weeks0 = Weeks.MAX_VALUE;
      Period period1 = period0.withFields(weeks0);
      // Undeclared exception!
      try { 
        period1.plusWeeks(668);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 668
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      DurationFieldType durationFieldType0 = DurationFieldType.HALFDAYS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldTypeArray0[1];
      durationFieldTypeArray0[3] = durationFieldType0;
      durationFieldTypeArray0[4] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[5] = durationFieldTypeArray0[2];
      PeriodType periodType0 = new PeriodType(" as this period contains years and years vary in length", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(1223L, periodType0);
      // Undeclared exception!
      try { 
        period0.plusSeconds(6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.SECOND_INDEX = 2514;
      // Undeclared exception!
      try { 
        period0.plusSeconds(2514);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2514
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MONTH_INDEX = 1968;
      // Undeclared exception!
      try { 
        period0.plusMonths(1968);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1968
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      // Undeclared exception!
      try { 
        period0.plusMinutes(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MINUTE_INDEX = 1293;
      // Undeclared exception!
      try { 
        period0.plusMinutes(2204);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1293
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.minusMinutes(87);
      // Undeclared exception!
      try { 
        period1.plusMinutes(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -87 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MILLI_INDEX = (-1361);
      // Undeclared exception!
      try { 
        period0.plusMillis(80);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1361
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      LocalTime localTime1 = localTime0.plusMillis((-879));
      LocalTime localTime2 = localTime1.minusSeconds(207);
      Period period0 = Period.fieldDifference(localTime2, localTime0);
      // Undeclared exception!
      try { 
        period0.plusMillis((-2147483647));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -121 + -2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      // Undeclared exception!
      try { 
        period0.plusHours(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.HOUR_INDEX = (-551);
      // Undeclared exception!
      try { 
        period0.plusHours((-551));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -551
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Period period0 = Period.hours((-415));
      // Undeclared exception!
      try { 
        period0.plusHours(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -415 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.DAY_INDEX = 818;
      // Undeclared exception!
      try { 
        period0.plusDays(2218);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 818
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      Period period0 = days0.toPeriod();
      // Undeclared exception!
      try { 
        period0.plusDays(1386);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 1386
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.SECOND_INDEX = 2000;
      Days days0 = Days.TWO;
      Seconds seconds0 = days0.toStandardSeconds();
      // Undeclared exception!
      try { 
        period0.plus(seconds0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2000
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      Period period0 = days0.toPeriod();
      // Undeclared exception!
      try { 
        period0.plus(days0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse("G;5.E", (PeriodFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PeriodFormatter periodFormatter0 = ISOPeriodFormat.standard();
      // Undeclared exception!
      try { 
        Period.parse("", periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Literal", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse("}v*G8Z9[tyk3e}4,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"}v*G8Z9[tyk3e}4,\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Period period0 = new Period();
      int[] intArray0 = new int[0];
      PeriodType periodType0 = new PeriodType((String) null, (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.WEEK_INDEX = (-1568);
      PeriodType periodType0 = PeriodType.seconds();
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.minusHours((-1895));
      PeriodType periodType0 = PeriodType.millis();
      // Undeclared exception!
      try { 
        period1.normalizedStandard(periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 6822000000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.YEAR_INDEX = (-3876);
      // Undeclared exception!
      try { 
        period0.normalizedStandard();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      Period period0 = days0.toPeriod();
      // Undeclared exception!
      try { 
        period0.negated();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -2147483648 * -1
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[18];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, (int[]) null);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      Period period0 = new Period(2237L, 2237L, periodType0, julianChronology0);
      // Undeclared exception!
      try { 
        period0.minusYears(1000);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.YEAR_INDEX = 2335;
      // Undeclared exception!
      try { 
        period0.minusYears(679);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2335
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.WEEK_INDEX = 683;
      // Undeclared exception!
      try { 
        period0.minusWeeks(61);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 683
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      DurationFieldType durationFieldType0 = DurationFieldType.HALFDAYS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[3] = durationFieldTypeArray0[1];
      durationFieldTypeArray0[4] = durationFieldTypeArray0[1];
      durationFieldTypeArray0[5] = durationFieldType0;
      PeriodType periodType0 = new PeriodType(" as this period contains years and years vary in length", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(1223L, periodType0);
      // Undeclared exception!
      try { 
        period0.minusSeconds(3446);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.SECOND_INDEX = 2251;
      // Undeclared exception!
      try { 
        period0.minusSeconds(2251);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2251
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MONTH_INDEX = 32;
      // Undeclared exception!
      try { 
        period0.minusMonths(32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      Years years0 = Years.MIN_VALUE;
      DurationFieldType durationFieldType0 = years0.getFieldType();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[2] = durationFieldTypeArray0[1];
      durationFieldTypeArray0[3] = durationFieldTypeArray0[2];
      durationFieldTypeArray0[4] = durationFieldTypeArray0[3];
      durationFieldTypeArray0[5] = durationFieldTypeArray0[1];
      PeriodType periodType0 = new PeriodType("'c8J4Fvx", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((-2066L), periodType0);
      // Undeclared exception!
      try { 
        period0.minusMinutes(3600000);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MINUTE_INDEX = (-1634);
      // Undeclared exception!
      try { 
        period0.minusMinutes(1000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1634
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Instant instant0 = new Instant();
      Duration duration0 = new Duration(instant0, instant0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[9];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      Period period0 = duration0.toPeriodFrom((ReadableInstant) instant0, periodType0);
      // Undeclared exception!
      try { 
        period0.minusMillis(9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.HOUR_INDEX = 867;
      // Undeclared exception!
      try { 
        period0.minusHours(867);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 867
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[18];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, (int[]) null);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      Period period0 = new Period(2237L, 2237L, periodType0, julianChronology0);
      // Undeclared exception!
      try { 
        period0.minusDays(27);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.DAY_INDEX = 2057;
      // Undeclared exception!
      try { 
        period0.minusDays(2057);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2057
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      Period period0 = days0.toPeriod();
      // Undeclared exception!
      try { 
        period0.minusDays(4);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -4
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.SECOND_INDEX = 8;
      Seconds seconds0 = Seconds.ONE;
      // Undeclared exception!
      try { 
        period0.minus(seconds0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      Period period0 = days0.toPeriod();
      // Undeclared exception!
      try { 
        period0.minus(days0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      Period period0 = Period.parse("", periodFormatter0);
      PeriodType.YEAR_INDEX = (-5099);
      // Undeclared exception!
      try { 
        period0.ZERO.getYears();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Period period0 = Period.minutes(1635);
      PeriodType.WEEK_INDEX = 2690;
      // Undeclared exception!
      try { 
        period0.getWeeks();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      PeriodType.SECOND_INDEX = 13421772;
      Period period0 = Period.hours(13421772);
      // Undeclared exception!
      try { 
        period0.getSeconds();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Period period0 = new Period((-1), (-1), 2046, 97);
      PeriodType.MINUTE_INDEX = (-1);
      // Undeclared exception!
      try { 
        period0.ZERO.getMinutes();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.HOUR_INDEX = 8;
      // Undeclared exception!
      try { 
        period0.getHours();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Period period0 = Period.seconds(419);
      PeriodType.DAY_INDEX = (-1954);
      // Undeclared exception!
      try { 
        period0.getDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      MonthDay monthDay1 = new MonthDay(monthDay0, (int[]) null);
      // Undeclared exception!
      try { 
        Period.fieldDifference(monthDay1, monthDay0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((long) (-21));
      int[] intArray0 = new int[1];
      MonthDay monthDay1 = new MonthDay(monthDay0, intArray0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(monthDay1, monthDay0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      int[] intArray0 = new int[1];
      MonthDay monthDay1 = new MonthDay(monthDay0, intArray0);
      Period period0 = null;
      try {
        period0 = new Period(monthDay1, monthDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      MonthDay monthDay1 = new MonthDay(monthDay0, intArray0);
      Period period0 = null;
      try {
        period0 = new Period(monthDay1, monthDay0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Object object0 = new Object();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Period period0 = null;
      try {
        period0 = new Period(object0, (PeriodType) null, buddhistChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      Period period0 = null;
      try {
        period0 = new Period("", copticChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Object object0 = new Object();
      Period period0 = null;
      try {
        period0 = new Period(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      DurationFieldType durationFieldType0 = DurationFieldType.ERAS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      int[] intArray0 = new int[4];
      PeriodType periodType0 = new PeriodType("v0LGEvt~N:/\"", durationFieldTypeArray0, intArray0);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      Period period0 = null;
      try {
        period0 = new Period((-4631L), periodType0, (Chronology) julianChronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      int[] intArray0 = new int[5];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, intArray0);
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      Period period0 = null;
      try {
        period0 = new Period((long) (-4816), periodType0, (Chronology) julianChronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int[] intArray0 = new int[2];
      PeriodType periodType0 = new PeriodType("Qs", (DurationFieldType[]) null, intArray0);
      Period period0 = null;
      try {
        period0 = new Period((-1936L), periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      Period period0 = null;
      try {
        period0 = new Period(15778476000L, periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 15778476000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Period period0 = Period.months(972);
      Period period1 = period0.normalizedStandard((PeriodType) null);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Period period0 = Period.months((-11));
      Period period1 = period0.normalizedStandard((PeriodType) null);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Period period0 = Period.hours(1474);
      PeriodType periodType0 = PeriodType.days();
      Period period1 = period0.normalizedStandard(periodType0);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Period period0 = new Period(9, 9, 9, 9, 9, 9, 9, 9);
      PeriodType periodType0 = PeriodType.yearMonthDay();
      Period period1 = period0.normalizedStandard(periodType0);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.multipliedBy(2016);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      Period period0 = days0.toPeriod();
      // Undeclared exception!
      try { 
        period0.multipliedBy((-4));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -2147483648 * -4
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      // Undeclared exception!
      try { 
        period0.plusMillis(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Period period0 = Period.years(4);
      Period period1 = period0.plusSeconds(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      // Undeclared exception!
      try { 
        period0.plusSeconds(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusMinutes(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Period period0 = Period.minutes(0);
      Period period1 = period0.plusHours(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      // Undeclared exception!
      try { 
        period0.plusDays(3707);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      // Undeclared exception!
      try { 
        period0.plusWeeks(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      // Undeclared exception!
      try { 
        period0.plusMonths(2226);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      // Undeclared exception!
      try { 
        period0.plusYears(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Period period0 = new Period(0, 3007, 9, 0);
      Period period1 = period0.plusYears(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Period period0 = Period.hours(80);
      int int0 = period0.getHours();
      assertEquals(80, int0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = new Period(period0);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Period period0 = Period.years(4);
      int int0 = period0.getWeeks();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Period period0 = new Period((-685L), 25L);
      int int0 = period0.ZERO.getYears();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Period period0 = new Period((-1308), 1331, (-1308), 354);
      int int0 = period0.getSeconds();
      assertEquals((-1308), int0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      Period period0 = new Period((Object) null, periodType0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Period period0 = new Period();
      int int0 = period0.getDays();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period(monthDay0, monthDay0, periodType0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Period period0 = new Period(1668, (-583), (-583), (-583));
      int int0 = period0.getMinutes();
      assertEquals((-583), int0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Period period0 = Period.months((-236));
      int int0 = period0.getMonths();
      assertEquals((-236), int0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      Period period0 = new Period(25L, (-685L), julianChronology0);
      int int0 = period0.getMillis();
      assertEquals((-710), int0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Period period0 = new Period(0, 0, 0, 0, 1, 1, 1, 0, (PeriodType) null);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Period period0 = Period.years((-3173));
      Period period1 = period0.normalizedStandard();
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Period period0 = Period.months(1);
      // Undeclared exception!
      try { 
        period0.toStandardSeconds();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Seconds as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      Period period1 = period0.multipliedBy(1);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.minus((ReadablePeriod) null);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      Weeks weeks0 = Weeks.weeks(1);
      // Undeclared exception!
      try { 
        period0.minus(weeks0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.minusSeconds(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      Period period1 = period0.plusDays(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Period period0 = Period.months(0);
      Period period1 = period0.plusWeeks(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      Period period1 = period0.plusMonths(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plus((ReadablePeriod) null);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      Years years0 = Years.MIN_VALUE;
      // Undeclared exception!
      try { 
        period0.plus(years0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Period period0 = new Period();
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      Period period1 = period0.withFieldAdded(durationFieldType0, 0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Period period0 = new Period();
      // Undeclared exception!
      try { 
        period0.withFieldAdded((DurationFieldType) null, (-2614));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Period period0 = new Period();
      DurationFieldType durationFieldType0 = DurationFieldType.CENTURIES_TYPE;
      // Undeclared exception!
      try { 
        period0.withFieldAdded(durationFieldType0, 23034375);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'centuries'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      // Undeclared exception!
      try { 
        period0.withField((DurationFieldType) null, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.withFields((ReadablePeriod) null);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      Years years0 = Years.MIN_VALUE;
      // Undeclared exception!
      try { 
        period0.withFields(years0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'years'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.withPeriodType((PeriodType) null);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      int[] intArray0 = new int[3];
      Partial partial0 = new Partial(ethiopicChronology0, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(partial0, partial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not have overlapping fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      YearMonth yearMonth0 = new YearMonth();
      // Undeclared exception!
      try { 
        Period.fieldDifference(monthDay0, yearMonth0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((long) 1000);
      LocalTime localTime0 = LocalTime.now();
      // Undeclared exception!
      try { 
        Period.fieldDifference(monthDay0, localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      // Undeclared exception!
      try { 
        Period.fieldDifference(monthDay0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.fieldDifference((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateTime dateTime0 = new DateTime((Chronology) ethiopicChronology0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("@@s_mn|}.`~J~H-{e", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(dateTime0, dateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.withYears((-2070));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      // Undeclared exception!
      try { 
        period0.withYears(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      // Undeclared exception!
      try { 
        period0.minusSeconds(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      // Undeclared exception!
      try { 
        period0.minusWeeks(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Period period0 = Period.hours(28265625);
      // Undeclared exception!
      try { 
        period0.toStandardSeconds();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 101756250000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
      try { 
        period0.minusDays(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      Period period0 = new Period(0, 0, periodType0, (Chronology) null);
      Period period1 = period0.multipliedBy(0);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      PeriodType periodType0 = new PeriodType("QJYJ", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(60, 60, periodType0);
      // Undeclared exception!
      try { 
        period0.plusMillis(512);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Period period0 = Period.months((-1978));
      PeriodType periodType0 = PeriodType.hours();
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Weeks weeks0 = Weeks.MAX_VALUE;
      Duration duration0 = weeks0.toStandardDuration();
      Period period0 = duration0.toPeriod((Chronology) null);
      // Undeclared exception!
      try { 
        period0.minusWeeks((-2958));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 2958
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      // Undeclared exception!
      try { 
        period0.withMonths(6);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      PeriodType periodType0 = PeriodType.dayTime();
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) null, (ReadablePartial) null, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      DateTime dateTime0 = new DateTime((long) 0);
      Period period0 = new Period(dateTime0, dateTime0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      PeriodType periodType0 = new PeriodType("m7r?/b-~/.gFZiTL", durationFieldTypeArray0, (int[]) null);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      Period period0 = new Period((Object) null, periodType0, julianChronology0);
      // Undeclared exception!
      try { 
        period0.toStandardWeeks();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      // Undeclared exception!
      try { 
        period0.minusMinutes(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Period period0 = Period.seconds(419);
      Period period1 = period0.plusMillis(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds((-118L));
      Period period0 = new Period(duration0, (ReadableInstant) null);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Period period0 = Period.parse("P");
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      // Undeclared exception!
      try { 
        period0.minusHours(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Period period0 = Period.millis(12);
      PeriodType.MILLI_INDEX = 12;
      // Undeclared exception!
      try { 
        period0.minusMillis(12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Period period0 = new Period((-1), (-1), 2046, 97);
      Period period1 = period0.toPeriod();
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Period period0 = Period.weeks(23118750);
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 3883950000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      // Undeclared exception!
      try { 
        period0.withMillis(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      // Undeclared exception!
      try { 
        period0.minusMonths((-954));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      Hours hours0 = Hours.hoursBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      Duration duration0 = hours0.toStandardDuration();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      PeriodType periodType0 = new PeriodType(":jfm[[W", durationFieldTypeArray0, (int[]) null);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Period period0 = duration0.toPeriod(periodType0, (Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        period0.plusMonths((-1546));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDay();
      Period period0 = null;
      try {
        period0 = new Period(3879, 3879, 3879, 3879, 3879, 3879, 3879, 3879, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'weeks'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      // Undeclared exception!
      try { 
        period0.minusYears(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Period period0 = new Period((Object) null, (Chronology) null);
      Duration duration0 = period0.toStandardDuration();
      assertEquals(0L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      Period period0 = new Period(monthDay0, monthDay0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null);
      // Undeclared exception!
      try { 
        Period.parse("", periodFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Object object0 = new Object();
      PeriodType periodType0 = PeriodType.yearWeekDay();
      Period period0 = null;
      try {
        period0 = new Period(object0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      // Undeclared exception!
      try { 
        period0.withSeconds(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      // Undeclared exception!
      try { 
        period0.withWeeks(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      // Undeclared exception!
      try { 
        period0.withHours(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      // Undeclared exception!
      try { 
        period0.minusMillis(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      // Undeclared exception!
      try { 
        period0.withMinutes(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
      try { 
        period0.withDays(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
}
