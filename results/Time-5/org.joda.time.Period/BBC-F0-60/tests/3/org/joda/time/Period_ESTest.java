/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 10:37:55 GMT 2021
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDateTime;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.LimitChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.format.ISOPeriodFormat;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Period_ESTest extends Period_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Period period0 = Period.months((-940));
      Period period1 = period0.normalizedStandard();
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Period period0 = new Period(9, 9, (-980), (-980));
      Period period1 = period0.normalizedStandard();
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Period period0 = Period.millis((-1496));
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      Period period1 = period0.withField(durationFieldType0, (-1496));
      Duration duration0 = period1.toStandardDuration();
      assertEquals((-129254401496L), duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Period period0 = Period.days(47);
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(67680, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Period period0 = new Period((-61), (-61), (-61), 1000);
      Days days0 = period0.toStandardDays();
      assertEquals((-2), days0.getDays());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Period period0 = new Period(504, 504, 504, 504);
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(3, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Period period0 = Period.millis(51);
      Period period1 = period0.minusMinutes(51);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Seconds seconds0 = Seconds.MAX_VALUE;
      Duration duration0 = seconds0.toStandardDuration();
      Period period0 = duration0.toPeriodFrom((ReadableInstant) null);
      DurationFieldType durationFieldType0 = DurationFieldType.SECONDS_TYPE;
      Period period1 = period0.withFieldAdded(durationFieldType0, 241);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      YearMonth yearMonth0 = YearMonth.now(dateTimeZone0);
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
      LocalTime localTime0 = new LocalTime(8, 624, 2545, 22, lenientChronology0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(localTime0, yearMonth0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDate localDate0 = new LocalDate((long) 1, dateTimeZone0);
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime();
      Period period0 = new Period((ReadableDuration) null, dateTime0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.withSeconds(0);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Period period0 = new Period((-2234L), (-1005L), (PeriodType) null);
      Period period1 = period0.withHours((-411));
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Period period0 = Period.ZERO;
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Period period0 = Period.weeks((-179));
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals((-179), weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Period period0 = Period.millis(51);
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Period period0 = new Period(16, 16, 16, 16);
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(58576, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Period period0 = Period.millis((-1496));
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals((-1), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Period period0 = Period.weeks(1282);
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(12922560, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Period period0 = new Period((-61), (-61), (-61), 1000);
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals((-3722), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Period period0 = new Period((Object) null);
      Hours hours0 = period0.toStandardHours();
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Period period0 = new Period((-61), (-61), (-61), 1000);
      Hours hours0 = period0.toStandardHours();
      assertEquals((-62), hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Period period0 = Period.weeks(566);
      Duration duration0 = period0.toStandardDuration();
      assertEquals(342316800000L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      Period period0 = new Period((-541L), (-541L), periodType0);
      Duration duration0 = period0.toStandardDuration();
      assertEquals(0L, duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Period period0 = new Period(16, 16, 16, 16);
      Duration duration0 = period0.toStandardDuration();
      assertEquals(58576016L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Period period0 = Period.weeks(1282);
      Days days0 = period0.toStandardDays();
      assertEquals(8974, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Period period0 = Period.days(47);
      Period period1 = period0.multipliedBy(47);
      Hours hours0 = period1.toStandardHours();
      Period period2 = period0.minus(hours0);
      Days days0 = period2.toStandardDays();
      assertEquals((-2162), days0.getDays());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(1968).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      Period period0 = Period.parse("", periodFormatter0);
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Period period0 = Period.years(4);
      int int0 = period0.getYears();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Partial partial0 = new Partial();
      Period period0 = new Period(partial0, partial0);
      Period period1 = period0.withYears((-1868));
      int int0 = period1.getYears();
      assertEquals((-1868), int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Period period0 = Period.days(47);
      Period period1 = period0.withWeeks(2000);
      int int0 = period1.getWeeks();
      assertEquals(2000, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Period period0 = Period.months((-940));
      Period period1 = period0.withWeeks((-940));
      int int0 = period1.getWeeks();
      assertEquals((-940), int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Period period0 = new Period(504, 504, 504, 504);
      int int0 = period0.getSeconds();
      assertEquals(504, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2355), 0, (-2355), (-2355), (-1488));
      YearMonth yearMonth0 = YearMonth.fromCalendarFields(mockGregorianCalendar0);
      Period period0 = new Period(yearMonth0, yearMonth0);
      Period period1 = period0.plusSeconds((-2355));
      int int0 = period1.getSeconds();
      assertEquals((-2355), int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Period period0 = Period.ZERO;
      int int0 = period0.getMonths();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Period period0 = Period.months(48);
      int int0 = period0.getMonths();
      assertEquals(48, int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Period period0 = Period.weeks(0);
      Period period1 = period0.withMonths((-10));
      int int0 = period1.getMonths();
      assertEquals((-10), int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Period period0 = new Period((-612), (-1726), 3385, (-1726), (-1726), (-612), (-1726), (-612));
      int int0 = period0.getMinutes();
      assertEquals((-612), int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Period period0 = new Period(504, 504, 504, 504);
      int int0 = period0.getMillis();
      assertEquals(504, int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Period period0 = Period.millis((-199));
      int int0 = period0.getMillis();
      assertEquals((-199), int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L);
      Period period0 = mutablePeriod0.toPeriod();
      int int0 = period0.getHours();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Period period0 = new Period((-612), (-1726), 3385, (-1726), (-1726), (-612), (-1726), (-612));
      int int0 = period0.getHours();
      assertEquals((-1726), int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Period period0 = Period.ZERO;
      int int0 = period0.getDays();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Period period0 = Period.days(47);
      Period period1 = period0.multipliedBy((-1));
      int int0 = period1.getDays();
      assertEquals((-47), int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Period period0 = Period.days(47);
      PeriodType periodType0 = PeriodType.seconds();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.withYears(21);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.YEAR_INDEX = 105;
      // Undeclared exception!
      try { 
        period0.ZERO.withYears((-1028));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 105
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      Period period0 = new Period((-541L), (-541L), periodType0);
      // Undeclared exception!
      try { 
        period0.withWeeks(12);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Period period0 = Period.days((-1000));
      PeriodType.WEEK_INDEX = (-1000);
      // Undeclared exception!
      try { 
        period0.withWeeks(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1000
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Period period0 = Period.ZERO;
      PeriodType periodType0 = new PeriodType("", (DurationFieldType[]) null, (int[]) null);
      // Undeclared exception!
      try { 
        period0.withPeriodType(periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PeriodType periodType0 = PeriodType.time();
      Period period0 = Period.years(57);
      // Undeclared exception!
      try { 
        period0.withPeriodType(periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'years'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      TimeZone timeZone0 = TimeZone.getTimeZone(")$b1]_6.!n0q@a");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      DateTime dateTime0 = localDateTime0.toDateTime(dateTimeZone0);
      Interval interval0 = new Interval(0L, 0L, dateTimeZone0);
      Duration duration0 = interval0.toDuration();
      PeriodType periodType0 = PeriodType.dayTime();
      Period period0 = duration0.toPeriodFrom((ReadableInstant) dateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.withMonths(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Period period0 = Period.months(1404);
      PeriodType.MONTH_INDEX = 3005;
      // Undeclared exception!
      try { 
        period0.withMonths(3005);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3005
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Period period0 = Period.days(47);
      PeriodType periodType0 = PeriodType.seconds();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.withMinutes((-59));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Period period0 = new Period(0L);
      PeriodType.MINUTE_INDEX = (-2642);
      // Undeclared exception!
      try { 
        period0.withMinutes(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2642
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      YearMonth yearMonth0 = YearMonth.now(dateTimeZone0);
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
      try { 
        period0.withMillis(6);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Period period0 = new Period(0L);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[8];
      PeriodType periodType0 = new PeriodType("#M+\"I<euD6UO~", durationFieldTypeArray0, (int[]) null);
      Period period1 = period0.withPeriodType(periodType0);
      // Undeclared exception!
      try { 
        period1.withMillis(1000);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Period period0 = Period.months(1404);
      PeriodType.MILLI_INDEX = 1768;
      // Undeclared exception!
      try { 
        period0.withMillis(6044);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1768
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Period period0 = Period.weeks(0);
      PeriodType periodType0 = PeriodType.weeks();
      Period period1 = period0.withPeriodType(periodType0);
      // Undeclared exception!
      try { 
        period1.withHours((-665));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Period period0 = Period.days(20503125);
      PeriodType.HOUR_INDEX = 8;
      // Undeclared exception!
      try { 
        period0.withHours((-12));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Seconds seconds0 = Seconds.MAX_VALUE;
      Duration duration0 = seconds0.toStandardDuration();
      Period period0 = duration0.toPeriodFrom((ReadableInstant) null);
      DurationFieldType durationFieldType0 = DurationFieldType.SECONDS_TYPE;
      Period period1 = period0.minus(seconds0);
      // Undeclared exception!
      try { 
        period1.withFieldAdded(durationFieldType0, (-1711));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483640 + -1711
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      YearMonth yearMonth0 = YearMonth.now(dateTimeZone0);
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
      try { 
        period0.withDays(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Period period0 = Period.days(47);
      PeriodType.DAY_INDEX = (-763);
      // Undeclared exception!
      try { 
        period0.withDays(47);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -763
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Period period0 = Period.months(8);
      // Undeclared exception!
      try { 
        period0.toStandardWeeks();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Weeks as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Period period0 = Period.months(1404);
      PeriodType.MONTH_INDEX = 459;
      // Undeclared exception!
      try { 
        period0.toStandardWeeks();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Period period0 = Period.months(282);
      // Undeclared exception!
      try { 
        period0.toStandardSeconds();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Seconds as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Period period0 = Period.days(47);
      Period period1 = period0.plusMonths((-1385));
      // Undeclared exception!
      try { 
        period1.toStandardMinutes();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Minutes as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[8];
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[3] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[4] = durationFieldType0;
      durationFieldTypeArray0[5] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[6] = durationFieldType0;
      durationFieldTypeArray0[7] = durationFieldType0;
      PeriodType periodType0 = new PeriodType("The calendar must not be null", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(3228L, periodType0);
      // Undeclared exception!
      try { 
        period0.toStandardMinutes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Period period0 = new Period(12825000, 12825000, 12825000, 1000);
      PeriodType.MILLI_INDEX = 9;
      // Undeclared exception!
      try { 
        period0.toStandardMinutes();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Period period0 = Period.months(775);
      PeriodType.HOUR_INDEX = 52;
      // Undeclared exception!
      try { 
        period0.ZERO.toStandardHours();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      PeriodType.YEAR_INDEX = (-369);
      Period period0 = new Period((-541L), 0L, periodType0);
      // Undeclared exception!
      try { 
        period0.toStandardDuration();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Period period0 = new Period();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      int[] intArray0 = new int[5];
      PeriodType periodType0 = new PeriodType("ReadablePartial objects must not have overlapping fields", durationFieldTypeArray0, intArray0);
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.toStandardDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Period period0 = Period.days(47);
      PeriodType periodType0 = PeriodType.seconds();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.plusYears(47);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.YEAR_INDEX = 105;
      // Undeclared exception!
      try { 
        period0.plusYears(1849);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 105
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      YearMonth yearMonth0 = YearMonth.now(dateTimeZone0);
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
      try { 
        period0.plusWeeks(20);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[8];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(0L, periodType0);
      // Undeclared exception!
      try { 
        period0.plusWeeks((-505));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.WEEK_INDEX = 2904;
      // Undeclared exception!
      try { 
        period0.plusWeeks((-1251));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2904
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Period period0 = Period.days(1);
      Weeks weeks0 = Weeks.MIN_VALUE;
      Period period1 = period0.withFields(weeks0);
      Period period2 = period1.withDays(1);
      // Undeclared exception!
      try { 
        period2.plusWeeks((-2655));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -2655
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      Period period0 = new Period(0L, periodType0);
      // Undeclared exception!
      try { 
        period0.plusSeconds((-1146));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(0L, 0L, periodType0);
      // Undeclared exception!
      try { 
        period0.plusSeconds(4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.SECOND_INDEX = 1840;
      // Undeclared exception!
      try { 
        period0.plusSeconds((-421));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1840
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      PeriodType periodType0 = new PeriodType("Seconds", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((-1274L), (-1274L), periodType0);
      // Undeclared exception!
      try { 
        period0.plusMonths(1612);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Period period0 = Period.days(47);
      PeriodType.MONTH_INDEX = 9;
      // Undeclared exception!
      try { 
        period0.plusMonths(47);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Period period0 = Period.days(47);
      PeriodType periodType0 = PeriodType.seconds();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.plusMinutes(6);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Period period0 = new Period((Object) null, (PeriodType) null);
      PeriodType.MINUTE_INDEX = 1989;
      // Undeclared exception!
      try { 
        period0.plusMinutes(13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1989
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
      try { 
        period0.plusMillis((-743));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MILLI_INDEX = (-972);
      // Undeclared exception!
      try { 
        period0.plusMillis((-9));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -972
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      Period period0 = new Period((-291L), periodType0);
      // Undeclared exception!
      try { 
        period0.plusHours((-2374));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Period period0 = Period.ZERO;
      PeriodType.HOUR_INDEX = (-669);
      // Undeclared exception!
      try { 
        period0.plusHours(99);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -669
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Period period0 = new Period(Integer.MAX_VALUE, 397, Integer.MAX_VALUE, 659);
      // Undeclared exception!
      try { 
        period0.plusHours(292272708);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 292272708
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      Period period0 = new Period((-541L), (-541L), periodType0);
      // Undeclared exception!
      try { 
        period0.plusDays((-1191));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Period period0 = Period.ZERO;
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[7];
      PeriodType periodType0 = new PeriodType("Pp.c", durationFieldTypeArray0, (int[]) null);
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.plusDays(9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.DAY_INDEX = 1969;
      // Undeclared exception!
      try { 
        period0.plusDays(12740625);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1969
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      Period period0 = new Period(43200000L, 736L, periodType0);
      Months months0 = Months.ELEVEN;
      // Undeclared exception!
      try { 
        period0.plus(months0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Period period0 = Period.weeks((-3661));
      PeriodType.WEEK_INDEX = (-3661);
      // Undeclared exception!
      try { 
        period0.plus(period0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3661
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      MutablePeriod mutablePeriod0 = days0.toMutablePeriod();
      Period period0 = mutablePeriod0.toPeriod();
      // Undeclared exception!
      try { 
        period0.plus(mutablePeriod0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse("BuddhistChronology", (PeriodFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PeriodFormatter periodFormatter0 = ISOPeriodFormat.standard();
      // Undeclared exception!
      try { 
        Period.parse("", periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Literal", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse("$=*u @(eBHc_Rm~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"$=*u @(eBHc_Rm~\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Period period0 = Period.years(47);
      PeriodType periodType0 = PeriodType.seconds();
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Period period0 = new Period();
      int[] intArray0 = new int[8];
      PeriodType periodType0 = new PeriodType("", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Period period0 = new Period();
      Minutes minutes0 = Minutes.TWO;
      Seconds seconds0 = minutes0.toStandardSeconds();
      PeriodType periodType0 = seconds0.getPeriodType();
      PeriodType.MONTH_INDEX = (-3137);
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Period period0 = Period.days(Integer.MIN_VALUE);
      Minutes minutes0 = Minutes.MIN_VALUE;
      PeriodType periodType0 = minutes0.getPeriodType();
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -3092376453120
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Days days0 = Days.days(0);
      Period period0 = days0.toPeriod();
      PeriodType.MINUTE_INDEX = (-855);
      // Undeclared exception!
      try { 
        period0.normalizedStandard();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Period period0 = Period.days(1404);
      PeriodType periodType0 = PeriodType.seconds();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.multipliedBy(1404);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: 121305600 * 1404
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      Period period0 = new Period((-541L), (-541L), periodType0);
      // Undeclared exception!
      try { 
        period0.minusYears((-3150));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Period period0 = Period.years(76);
      PeriodType.YEAR_INDEX = 76;
      // Undeclared exception!
      try { 
        period0.minusYears((-123));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 76
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Period period0 = new Period();
      Years years0 = Years.MIN_VALUE;
      Period period1 = period0.withFields(years0);
      // Undeclared exception!
      try { 
        period1.minusYears(1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -1
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      Period period0 = Period.weeks(5);
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.minusWeeks(1191);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      PeriodType periodType0 = new PeriodType("6--D:mS0bDb", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((Object) null, periodType0);
      // Undeclared exception!
      try { 
        period0.minusWeeks(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Period period0 = Period.minutes(12);
      PeriodType.WEEK_INDEX = 12;
      // Undeclared exception!
      try { 
        period0.minusWeeks((-1043));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
      try { 
        period0.minusSeconds(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Period period0 = new Period((-2234L), (-1005L), (PeriodType) null);
      PeriodType.SECOND_INDEX = 2057;
      // Undeclared exception!
      try { 
        period0.minusSeconds(1277);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2057
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      Period period0 = new Period((-541L), (-541L), periodType0);
      // Undeclared exception!
      try { 
        period0.minusMonths((-806));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Period period0 = Period.months(1404);
      PeriodType.MONTH_INDEX = 459;
      // Undeclared exception!
      try { 
        period0.minusMonths(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 459
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Period period0 = new Period((-3939), (-3939), (-3939), Integer.MAX_VALUE, (-3939), (-3939), Integer.MAX_VALUE, (-3569));
      // Undeclared exception!
      try { 
        period0.minusMonths(Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -3939 + -2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      YearMonth yearMonth0 = YearMonth.now(dateTimeZone0);
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
      try { 
        period0.minusMinutes((-1));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((Object) null);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(localDate0, localDate0, periodType0);
      // Undeclared exception!
      try { 
        period0.minusMinutes((-1131));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDay();
      Period period0 = new Period(0L, periodType0);
      PeriodType.MINUTE_INDEX = (-3149);
      // Undeclared exception!
      try { 
        period0.minusMinutes((-3149));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3149
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Period period0 = new Period(1, 0, 3600000, 3600000, (-860), Integer.MAX_VALUE, 3600000, 47);
      // Undeclared exception!
      try { 
        period0.minusMinutes((-3291));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 3291
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      YearMonth yearMonth0 = new YearMonth((Object) null, iSOChronology0);
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
      try { 
        period0.minusMillis(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MILLI_INDEX = (-3307);
      // Undeclared exception!
      try { 
        period0.minusMillis((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3307
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusMillis((-292275054));
      // Undeclared exception!
      try { 
        period1.minusMillis(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -292275054 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      Period period0 = new Period((-541L), (-541L), periodType0);
      // Undeclared exception!
      try { 
        period0.minusHours(533);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Period period0 = Period.minutes(1701);
      PeriodType.HOUR_INDEX = (-2571);
      // Undeclared exception!
      try { 
        period0.minusHours(1701);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2571
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Period period0 = Period.millis(660);
      Hours hours0 = Hours.hours(660);
      Period period1 = period0.minus(hours0);
      // Undeclared exception!
      try { 
        period1.minusHours(Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -660 + -2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      Period period0 = new Period((-12L), periodType0);
      // Undeclared exception!
      try { 
        period0.minusDays(21);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Duration duration0 = new Duration(7L);
      Period period0 = new Period((ReadableInstant) null, duration0);
      PeriodType.DAY_INDEX = (-1191);
      // Undeclared exception!
      try { 
        period0.minusDays((-1191));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1191
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Period period0 = new Period();
      Days days0 = Days.MIN_VALUE;
      Period period1 = period0.withFields(days0);
      Period period2 = period1.minusSeconds(1);
      // Undeclared exception!
      try { 
        period2.minusDays(443);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -443
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      DateTime dateTime0 = new DateTime();
      Period period0 = new Period(dateTime0, dateTime0, periodType0);
      Period period1 = new Period((long) 1335);
      // Undeclared exception!
      try { 
        period0.minus(period1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Period period0 = new Period();
      Minutes minutes0 = Minutes.TWO;
      PeriodType.SECOND_INDEX = 5073;
      Seconds seconds0 = minutes0.toStandardSeconds();
      // Undeclared exception!
      try { 
        period0.minus(seconds0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5073
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Period period0 = duration0.toPeriod();
      Minutes minutes0 = Minutes.MIN_VALUE;
      Period period1 = period0.plus(minutes0);
      // Undeclared exception!
      try { 
        period1.minus(minutes0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.YEAR_INDEX = 105;
      // Undeclared exception!
      try { 
        period0.ZERO.getYears();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Period period0 = Period.weeks(6);
      PeriodType.WEEK_INDEX = (int) (byte) (-28);
      // Undeclared exception!
      try { 
        period0.getWeeks();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Period period0 = new Period(9, 9, (-980), (-980));
      PeriodType.MINUTE_INDEX = (-980);
      // Undeclared exception!
      try { 
        period0.getMinutes();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MILLI_INDEX = 1411;
      // Undeclared exception!
      try { 
        period0.getMillis();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Period period0 = Period.ZERO;
      PeriodType.HOUR_INDEX = 2905;
      // Undeclared exception!
      try { 
        period0.ZERO.getHours();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);
      MonthDay monthDay0 = new MonthDay((Chronology) julianChronology0);
      MonthDay monthDay1 = new MonthDay(monthDay0, (int[]) null);
      // Undeclared exception!
      try { 
        Period.fieldDifference(monthDay1, monthDay1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      int[] intArray0 = new int[0];
      YearMonth yearMonth1 = new YearMonth(yearMonth0, intArray0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(yearMonth1, yearMonth1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      PeriodType periodType0 = PeriodType.dayTime();
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) null, (ReadablePartial) null, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      MockDate mockDate0 = new MockDate(4, (-2594), 8, 443, 1000, (-90));
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      Partial partial0 = new Partial(localTime0);
      Partial partial1 = new Partial(partial0, (int[]) null);
      Period period0 = null;
      try {
        period0 = new Period(partial1, localTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldTypeArray0[1];
      durationFieldTypeArray0[3] = durationFieldType0;
      DurationFieldType durationFieldType1 = dateTimeFieldType0.getRangeDurationType();
      durationFieldTypeArray0[4] = durationFieldType1;
      int[] intArray0 = new int[9];
      PeriodType periodType0 = new PeriodType("-", durationFieldTypeArray0, intArray0);
      DateTime dateTime1 = dateTime0.withField(dateTimeFieldType0, 971);
      Period period0 = null;
      try {
        period0 = new Period(dateTime1, dateTime0, periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.withMonths((-1));
      Duration duration0 = period1.toDurationTo((ReadableInstant) null);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      durationFieldTypeArray0[0] = durationFieldType0;
      int[] intArray0 = new int[7];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      Period period2 = null;
      try {
        period2 = new Period((ReadableInstant) null, duration0, periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-3802L));
      Seconds seconds0 = Seconds.MIN_VALUE;
      Duration duration0 = seconds0.toStandardDuration();
      PeriodType periodType0 = PeriodType.millis();
      Period period0 = null;
      try {
        period0 = new Period(dateTime0, duration0, periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -2147483648000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 47, (Chronology) islamicChronology0);
      DateTime dateTime0 = new DateTime(1, 5, 4, 5, 0);
      Duration duration0 = new Duration(mutableDateTime0, dateTime0);
      Period period0 = null;
      try {
        period0 = new Period(mutableDateTime0, duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The minuend instant is below the supported minimum of 0001-01-01T00:00:00.000Z (IslamicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(63072000000L);
      PeriodType periodType0 = PeriodType.seconds();
      Period period0 = null;
      try {
        period0 = new Period(duration0, (ReadableInstant) null, periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 63072000000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Object object0 = new Object();
      PeriodType periodType0 = PeriodType.months();
      Period period0 = null;
      try {
        period0 = new Period(object0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Integer integer0 = new Integer(282);
      Period period0 = null;
      try {
        period0 = new Period((Object) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Integer
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      DurationFieldType durationFieldType0 = DurationFieldType.MILLIS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      DurationFieldType durationFieldType1 = DurationFieldType.eras();
      durationFieldTypeArray0[1] = durationFieldType1;
      int[] intArray0 = new int[7];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) null);
      Period period0 = null;
      try {
        period0 = new Period(60000L, periodType0, (Chronology) iSOChronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[8];
      int[] intArray0 = new int[7];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      Period period0 = null;
      try {
        period0 = new Period((-600L), periodType0, (Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      DurationFieldType durationFieldType0 = DurationFieldType.MILLIS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      DurationFieldType durationFieldType1 = DurationFieldType.eras();
      durationFieldTypeArray0[1] = durationFieldType1;
      int[] intArray0 = new int[7];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      Period period0 = null;
      try {
        period0 = new Period((long) (-2582), periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[8];
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[2] = durationFieldType0;
      durationFieldTypeArray0[3] = durationFieldTypeArray0[1];
      durationFieldTypeArray0[4] = durationFieldTypeArray0[3];
      durationFieldTypeArray0[5] = durationFieldTypeArray0[2];
      durationFieldTypeArray0[6] = durationFieldTypeArray0[5];
      DurationFieldType durationFieldType1 = DurationFieldType.eras();
      durationFieldTypeArray0[7] = durationFieldType1;
      int[] intArray0 = new int[7];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      Period period0 = null;
      try {
        period0 = new Period(60L, 2308L, periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[8];
      int[] intArray0 = new int[7];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      Period period0 = null;
      try {
        period0 = new Period(60L, 2308L, periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      PeriodType periodType1 = periodType0.withMillisRemoved();
      Period period0 = null;
      try {
        period0 = new Period(3307, 1, 3307, 3307, 3307, 3307, 0, 3307, periodType1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'millis'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.multipliedBy(4);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Period period0 = Period.millis(660);
      Period period1 = period0.plusMinutes(65535);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L);
      Period period0 = mutablePeriod0.toPeriod();
      Period period1 = period0.plusHours((-603));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusDays(12740625);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      Period period0 = new Period(604800L, 604800L, periodType0);
      Period period1 = period0.plusWeeks(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusWeeks((-1251));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Period period0 = Period.hours((-746));
      Period period1 = period0.plusMonths(1194);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Period period0 = Period.months((-940));
      Period period1 = period0.plusMonths(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusYears(1849);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Period period0 = Period.millis(51);
      Period period1 = period0.plusYears(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Period period0 = new Period(1, 1, 1, 0, 1, 0, 1, 0);
      int int0 = period0.getHours();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Period period0 = Period.days((-3430));
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
      Period period1 = new Period(period0, periodType0, lenientChronology0);
      // Undeclared exception!
      try { 
        period1.plusMonths((-3430));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Period period0 = Period.days(47);
      int int0 = period0.getWeeks();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Period period0 = Period.months(1061);
      int int0 = period0.getYears();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Period period0 = Period.days(47);
      int int0 = period0.getDays();
      assertEquals(47, int0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Period period0 = new Period(9, 9, (-980), (-980));
      int int0 = period0.getMinutes();
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null);
      // Undeclared exception!
      try { 
        Period.parse("", periodFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Days days0 = Days.FIVE;
      Period period0 = days0.toPeriod();
      PeriodType.MONTH_INDEX = 86400000;
      // Undeclared exception!
      try { 
        period0.getMonths();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Period period0 = Period.minutes(504);
      Period period1 = new Period(period0, (Chronology) null);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Period period0 = new Period();
      int int0 = period0.getMillis();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Period period0 = Period.months(1);
      Period period1 = period0.normalizedStandard((PeriodType) null);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Period period0 = Period.weeks(1900);
      Period period1 = period0.withYears((-269));
      // Undeclared exception!
      try { 
        period1.toStandardHours();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Hours as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      Period period1 = period0.multipliedBy(1);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.minus((ReadablePeriod) null);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Period period0 = Period.months(0);
      Period period1 = period0.plusMillis(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Period period0 = Period.weeks(0);
      Period period1 = period0.plusSeconds(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Period period0 = Period.weeks(0);
      Period period1 = period0.plusMinutes(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Period period0 = Period.minutes(504);
      Period period1 = period0.plusHours(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      Period period0 = new Period(1L, (PeriodType) null, (Chronology) gJChronology0);
      Period period1 = period0.plusDays(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Days days0 = Days.days(0);
      Period period0 = days0.toPeriod();
      Period period1 = period0.minusWeeks(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Period period0 = new Period(9, 9, (-980), (-980));
      Period period1 = period0.minusMonths(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      Period period1 = period0.minusYears(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      Period period1 = period0.plus((ReadablePeriod) null);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      Years years0 = Years.MAX_VALUE;
      Period period1 = period0.plus(years0);
      // Undeclared exception!
      try { 
        period1.plusYears(1457);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 1457
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKS_TYPE;
      Period period1 = period0.withFieldAdded(durationFieldType0, 0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      Period period0 = new Period((-541L), (-541L), periodType0);
      // Undeclared exception!
      try { 
        period0.withFieldAdded((DurationFieldType) null, (-940));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Days days0 = Days.SEVEN;
      Period period0 = days0.toPeriod();
      period0.getSeconds();
      // Undeclared exception!
      try { 
        period0.withField((DurationFieldType) null, (-457));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      Hours hours0 = Hours.THREE;
      // Undeclared exception!
      try { 
        period0.withFields(hours0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'hours'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Period period0 = Period.years(76);
      Period period1 = period0.withPeriodType((PeriodType) null);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      int[] intArray0 = new int[2];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      Period period1 = period0.withPeriodType(periodType0);
      // Undeclared exception!
      try { 
        period1.withSeconds(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      LimitChronology limitChronology0 = LimitChronology.getInstance(gJChronology0, (ReadableDateTime) null, (ReadableDateTime) null);
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[1] = dateTimeFieldTypeArray0[0];
      int[] intArray0 = new int[6];
      Partial partial0 = new Partial(limitChronology0, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(partial0, partial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not have overlapping fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalTime localTime0 = LocalTime.now(dateTimeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime();
      // Undeclared exception!
      try { 
        Period.fieldDifference(localTime0, localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      MockDate mockDate0 = new MockDate(0, 2163, 12);
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(yearMonth0, localDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      YearMonth yearMonth0 = YearMonth.now(dateTimeZone0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(yearMonth0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.fieldDifference((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Period period0 = Period.days(6);
      Period period1 = period0.withYears((-1332));
      Period period2 = period1.normalizedStandard((PeriodType) null);
      assertTrue(period2.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Period period0 = Period.years(1);
      // Undeclared exception!
      try { 
        period0.toStandardDays();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Days as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(26607895200000L);
      Period period0 = duration0.toPeriod((PeriodType) null);
      // Undeclared exception!
      try { 
        period0.toStandardSeconds();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 26607895200000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.minusDays(443);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Period period0 = new Period(Integer.MAX_VALUE, 397, Integer.MAX_VALUE, 659);
      // Undeclared exception!
      try { 
        period0.minusSeconds((byte) (-84));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 84
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      Period period0 = new Period(2997L, 0L, periodType0, buddhistChronology0);
      int int0 = period0.getMinutes();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Period period0 = Period.months(1061);
      Period period1 = period0.withFields((ReadablePeriod) null);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      PeriodType periodType0 = new PeriodType("J(p`y~}", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((ReadableDuration) null, (ReadableInstant) null, periodType0);
      // Undeclared exception!
      try { 
        period0.plusMinutes(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      Period period0 = new Period(100000000000000000L, (Chronology) ethiopicChronology0);
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 27777777777
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Period period0 = Period.millis((-2582));
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Object object0 = new Object();
      PeriodType periodType0 = PeriodType.yearDay();
      Period period0 = null;
      try {
        period0 = new Period(object0, periodType0, (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      int[] intArray0 = new int[6];
      Partial partial0 = new Partial(gregorianChronology0, (DateTimeFieldType[]) null, intArray0);
      PeriodType periodType0 = PeriodType.days();
      Period period0 = null;
      try {
        period0 = new Period(yearMonth0, partial0, periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Period period0 = new Period((-357L), (-357L));
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Period period0 = new Period((ReadableInstant) null, (ReadableInstant) null);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Period period0 = Period.days(47);
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(6, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Period period0 = Period.seconds(605);
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Period period0 = Period.days(6);
      Period period1 = period0.minusHours((-3477));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Period period0 = new Period(157, 157, (-888), (-888), 157, (-888), (-5), 60);
      PeriodType.SECOND_INDEX = (-888);
      // Undeclared exception!
      try { 
        period0.ZERO.getSeconds();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Period period0 = new Period();
      Duration duration0 = period0.toDurationTo((ReadableInstant) null);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      int[] intArray0 = new int[7];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      Period period1 = new Period((ReadableInstant) null, duration0, periodType0);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Period period0 = Period.days(6);
      Period period1 = period0.toPeriod();
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Period period0 = new Period(1193L, 1, (Chronology) null);
      Period period1 = period0.withMonths(920);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Period period0 = Period.days(6);
      Period period1 = period0.withMillis(6);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      int[] intArray0 = new int[7];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      Period period0 = null;
      try {
        period0 = new Period((long) (-2582), periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      YearMonth yearMonth0 = YearMonth.now(dateTimeZone0);
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      Days days0 = period0.toStandardDays();
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period(0, 3307, 0, (-612), 664, 0, 5348, 664, periodType0);
      // Undeclared exception!
      try { 
        period0.toStandardDuration();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Duration as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, dateTimeZone0);
      Period period0 = null;
      try {
        period0 = new Period("||vu{D(ul?a", zonedChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"||vu{D(ul?a\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Period period0 = Period.parse("PT6H");
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.negated();
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
      try { 
        period0.withSeconds(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      PeriodType periodType0 = new PeriodType("6--D:mS0bDb", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((Object) null, periodType0);
      // Undeclared exception!
      try { 
        period0.withWeeks((-1175));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      PeriodType periodType0 = new PeriodType("Seconds", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((-1274L), (-1274L), periodType0);
      // Undeclared exception!
      try { 
        period0.withHours(63);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Period period0 = Period.days(6);
      Period period1 = period0.minusMillis(1710);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Period period0 = new Period(0L);
      Period period1 = period0.withMinutes(2);
      assertNotSame(period0, period1);
  }
}
