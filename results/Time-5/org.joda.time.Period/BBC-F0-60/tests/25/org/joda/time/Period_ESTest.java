/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 10:46:14 GMT 2021
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.format.ISOPeriodFormat;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Period_ESTest extends Period_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Period period0 = Period.months(1);
      Period period1 = period0.normalizedStandard();
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-492L));
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0);
      Period period0 = new Period((-492L), (-492L), gJChronology0);
      Period period1 = period0.ZERO.minusYears(512);
      Period period2 = period1.normalizedStandard();
      assertTrue(period2.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Period period0 = Period.seconds(0);
      Period period1 = period0.minusWeeks(63);
      PeriodType periodType0 = PeriodType.dayTime();
      period1.normalizedStandard(periodType0);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Period period0 = Period.months(116);
      // Undeclared exception!
      try { 
        period0.toStandardWeeks();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Weeks as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      Period period0 = new Period(0, 0, 0, 7, 1886, 7, 1886, 19, periodType0);
      Duration duration0 = period0.toStandardDuration();
      assertEquals(7396706019L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2300));
      LocalTime localTime0 = new LocalTime(dateTimeZone0);
      LocalTime localTime1 = localTime0.minusMinutes((-2300));
      Period period0 = Period.fieldDifference(localTime1, localTime0);
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(34800, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Period period0 = new Period(1209L);
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(1, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Period period0 = Period.seconds(0);
      Period period1 = period0.minusDays(398);
      Minutes minutes0 = period1.toStandardMinutes();
      assertEquals((-573120), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Period period0 = Period.weeks(902);
      Hours hours0 = period0.toStandardHours();
      assertEquals(151536, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Period period0 = new Period(2629746000L);
      Days days0 = period0.toStandardDays();
      assertEquals(30, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-492L));
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0);
      Period period0 = new Period((-492L), (-492L), gJChronology0);
      Period period1 = period0.minusMinutes((-1877));
      Period period2 = period1.normalizedStandard();
      Weeks weeks0 = period2.toStandardWeeks();
      assertFalse(period2.equals((Object)period0));
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Period period0 = new Period(1209L);
      Period period1 = period0.plusMinutes(1490);
      Weeks weeks0 = period1.toStandardWeeks();
      assertNotSame(period1, period0);
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0, 0);
      LocalDate localDate0 = new LocalDate((long) 0);
      LocalDateTime localDateTime0 = localDate0.toLocalDateTime(localTime0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(localDate0, localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1687);
      DateTime dateTime0 = DateTime.now(dateTimeZone0);
      Period period0 = new Period(dateTime0, (ReadableDuration) null);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds(1);
      Duration duration0 = seconds0.toStandardDuration();
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTime dateTime0 = dateTimeFormatter0.parseDateTime("");
      Period period0 = new Period(duration0, dateTime0, (PeriodType) null);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds(0);
      Duration duration0 = seconds0.toStandardDuration();
      Instant instant0 = new Instant((long) 0);
      Period period0 = new Period(duration0, instant0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Period period0 = new Period(0L, 0L, buddhistChronology0);
      Period period1 = period0.withHours(1947);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Period period0 = Period.hours(964);
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(5, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Period period0 = Period.hours((-63));
      Period period1 = period0.multipliedBy((-1490));
      Period period2 = period1.negated();
      Weeks weeks0 = period2.toStandardWeeks();
      assertEquals((-558), weeks0.getWeeks());
      assertFalse(period2.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Period period0 = Period.hours((-58));
      Period period1 = period0.withDays(9);
      Seconds seconds0 = period1.toStandardSeconds();
      assertEquals(568800, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Period period0 = Period.weeks((-58));
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals((-35078400), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Period period0 = Period.ZERO;
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Period period0 = Period.seconds(1491);
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(24, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Period period0 = Period.hours((-63));
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals((-3780), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Period period0 = new Period(1490L);
      Period period1 = period0.plusMinutes(1490);
      Hours hours0 = period1.toStandardHours();
      assertEquals(24, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Period period0 = Period.hours((-63));
      Hours hours0 = period0.toStandardHours();
      assertEquals((-63), hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Period period0 = new Period(1490L);
      Period period1 = period0.plusWeeks(400);
      Duration duration0 = period1.toStandardDuration();
      assertEquals(241920001490L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Period period0 = new Period(1490L);
      Duration duration0 = period0.toStandardDuration();
      assertEquals(1490L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Period period0 = new Period(0L, 0L, buddhistChronology0);
      Period period1 = period0.minusDays(1003);
      Duration duration0 = period1.toStandardDuration();
      assertEquals((-86659200L), duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Period period0 = new Period(1490L);
      Period period1 = period0.plusWeeks(1490);
      Days days0 = period1.toStandardDays();
      assertEquals(10430, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Period period0 = Period.hours((-63));
      Days days0 = period0.toStandardDays();
      assertEquals((-2), days0.getDays());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      Period period0 = Period.parse("", periodFormatter0);
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.minusMillis(133);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Period period0 = new Period(24L);
      Period period1 = period0.minusYears((-73));
      int int0 = period1.getYears();
      assertEquals(73, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Period period0 = new Period(24L);
      Period period1 = period0.plusYears((-1179));
      int int0 = period1.getYears();
      assertEquals((-1179), int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Period period0 = Period.seconds((-348));
      Period period1 = period0.withWeeks(5);
      int int0 = period1.getWeeks();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Period period0 = Period.seconds(0);
      Period period1 = period0.minusWeeks(63);
      int int0 = period1.getWeeks();
      assertEquals((-63), int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((long) 0);
      Period period0 = new Period(monthDay0, monthDay0);
      int int0 = period0.getSeconds();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Period period0 = Period.seconds(1726);
      int int0 = period0.getSeconds();
      assertEquals(1726, int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Period period0 = Period.hours((-63));
      Period period1 = period0.withMonths(450);
      int int0 = period1.getMonths();
      assertEquals(450, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Period period0 = new Period(1490L);
      Period period1 = period0.withMonths((-439));
      int int0 = period1.getMonths();
      assertEquals((-439), int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Period period0 = new Period((-492L));
      Period period1 = period0.minusMinutes((-1877));
      Period period2 = period1.normalizedStandard();
      int int0 = period2.getMinutes();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Period period0 = Period.millis((-1003));
      Period period1 = period0.plusMinutes((-1003));
      int int0 = period1.getMinutes();
      assertEquals((-1003), int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Period period0 = new Period(156, 156, 1792, 0, (-3325), (-3325), (-3325), 1347);
      int int0 = period0.getMillis();
      assertEquals(1347, int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Period period0 = new Period((-926L), (-1189L));
      int int0 = period0.getMillis();
      assertEquals((-263), int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Period period0 = Period.hours((-63));
      Period period1 = period0.multipliedBy((-1490));
      int int0 = period1.getHours();
      assertEquals(93870, int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.plusHours((-794));
      int int0 = period1.getHours();
      assertEquals((-794), int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Period period0 = new Period(24L);
      Period period1 = period0.minusDays((-835));
      int int0 = period1.getDays();
      assertEquals(835, int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Period period0 = Period.seconds(0);
      Period period1 = period0.minusDays(835);
      int int0 = period1.getDays();
      assertEquals((-835), int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      Period period0 = new Period(24L, (-73), periodType0);
      // Undeclared exception!
      try { 
        period0.withYears(1503);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Period period0 = Period.ZERO;
      PeriodType.YEAR_INDEX = 1440;
      // Undeclared exception!
      try { 
        period0.withYears(32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1440
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      Period period0 = new Period(4562L, 4562L, periodType0);
      // Undeclared exception!
      try { 
        period0.withWeeks(3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Period period0 = Period.ZERO;
      PeriodType.WEEK_INDEX = 354;
      // Undeclared exception!
      try { 
        period0.withWeeks(354);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 354
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Period period0 = new Period((-1395L), (-1395L));
      PeriodType periodType0 = PeriodType.minutes();
      Period period1 = period0.ZERO.withPeriodType(periodType0);
      // Undeclared exception!
      try { 
        period1.withSeconds(2242);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.SECOND_INDEX = 525;
      // Undeclared exception!
      try { 
        period0.withSeconds(8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 525
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      int[] intArray0 = new int[8];
      PeriodType periodType0 = new PeriodType("O2G?C*kZk+uQt(8", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        period0.withPeriodType(periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      Period period0 = new Period((-2020L), periodType0);
      PeriodType periodType1 = PeriodType.yearDay();
      // Undeclared exception!
      try { 
        period0.withPeriodType(periodType1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'seconds'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      Period period0 = new Period(0L, periodType0, (Chronology) iSOChronology0);
      // Undeclared exception!
      try { 
        period0.withMonths(1000);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MONTH_INDEX = 1626;
      // Undeclared exception!
      try { 
        period0.withMonths(2270);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1626
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MINUTE_INDEX = 520;
      // Undeclared exception!
      try { 
        period0.withMinutes((-1464));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 520
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      // Undeclared exception!
      try { 
        period0.withMillis(198);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Period period0 = Period.millis(2056);
      PeriodType.MILLI_INDEX = 3532;
      // Undeclared exception!
      try { 
        period0.ZERO.withMillis(3532);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3532
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Period period0 = Period.seconds(180);
      PeriodType.HOUR_INDEX = 7678125;
      // Undeclared exception!
      try { 
        period0.withHours(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7678125
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      Hours hours0 = Hours.MAX_VALUE;
      // Undeclared exception!
      try { 
        period0.withFields(hours0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'hours'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Period period0 = new Period(Integer.MAX_VALUE, (-715), Integer.MAX_VALUE, (-1117), 5, 63, 63, 4919, (PeriodType) null);
      Period period1 = period0.negated();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) ethiopicChronology0);
      Weeks weeks0 = Weeks.weeksBetween((ReadableInstant) mutableDateTime0, (ReadableInstant) mutableDateTime0);
      DurationFieldType durationFieldType0 = weeks0.getFieldType();
      // Undeclared exception!
      try { 
        period1.withFieldAdded(durationFieldType0, (-3020));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483647 + -3020
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(1, 0);
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      // Undeclared exception!
      try { 
        period0.withDays(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Period period0 = Period.minutes(783);
      PeriodType.DAY_INDEX = 834;
      // Undeclared exception!
      try { 
        period0.withDays(783);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 834
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Period period0 = Period.hours((-58));
      PeriodType.MILLI_INDEX = 1148;
      // Undeclared exception!
      try { 
        period0.toStandardWeeks();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Period period0 = new Period((ReadableInstant) null, (ReadableInstant) null);
      Period period1 = period0.minusYears(5062500);
      // Undeclared exception!
      try { 
        period1.toStandardSeconds();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Seconds as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-492L));
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0);
      Period period0 = new Period((-492L), (-492L), gJChronology0);
      PeriodType.SECOND_INDEX = 623158436;
      // Undeclared exception!
      try { 
        period0.toStandardSeconds();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Period period0 = Period.weeks(3690);
      // Undeclared exception!
      try { 
        period0.toStandardSeconds();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 2231712000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Period period0 = new Period(1490L);
      Period period1 = period0.withMonths((-439));
      // Undeclared exception!
      try { 
        period1.toStandardMinutes();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Minutes as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((-2020L));
      Period period0 = new Period(monthDay0, monthDay0);
      PeriodType.HOUR_INDEX = 8;
      // Undeclared exception!
      try { 
        period0.toStandardMinutes();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      Period period0 = new Period(localTime0, localTime0);
      Minutes minutes0 = Minutes.MAX_VALUE;
      Period period1 = period0.plus(minutes0);
      Period period2 = period1.negated();
      Period period3 = period2.minusWeeks(5170);
      // Undeclared exception!
      try { 
        period3.toStandardMinutes();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -2199597247
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Period period0 = Period.months((-1877));
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Hours as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((-2020L));
      Period period0 = new Period(monthDay0, monthDay0);
      PeriodType.HOUR_INDEX = 8;
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      Period period0 = days0.toPeriod();
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 51539607528
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Period period0 = new Period(24L);
      Period period1 = period0.minusYears((-73));
      // Undeclared exception!
      try { 
        period1.toStandardDuration();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Duration as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((-2020L));
      Period period0 = new Period(monthDay0, monthDay0);
      PeriodType.HOUR_INDEX = 8;
      // Undeclared exception!
      try { 
        period0.toStandardDuration();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Period period0 = Period.days((-2789));
      PeriodType.WEEK_INDEX = (-1076);
      // Undeclared exception!
      try { 
        period0.toStandardDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(1, 0);
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      // Undeclared exception!
      try { 
        period0.plusYears((-2821));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Instant instant0 = Instant.now();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[9];
      PeriodType periodType0 = new PeriodType("@61z06", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(instant0, instant0, periodType0);
      // Undeclared exception!
      try { 
        period0.plusYears(1235);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Period period0 = Period.ZERO;
      PeriodType.YEAR_INDEX = (-1937);
      // Undeclared exception!
      try { 
        period0.plusYears((-1415));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Period period0 = new Period((-1084L));
      PeriodType.WEEK_INDEX = 7678125;
      // Undeclared exception!
      try { 
        period0.plusWeeks(1336);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(547L, (Chronology) null);
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
      try { 
        period0.plusSeconds(20);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.SECOND_INDEX = (-1339);
      // Undeclared exception!
      try { 
        period0.plusSeconds(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      Period period0 = new Period(0L, 3600L, periodType0);
      // Undeclared exception!
      try { 
        period0.plusMonths((-1508));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Period period0 = Period.days((-4700));
      PeriodType.MONTH_INDEX = (-4700);
      // Undeclared exception!
      try { 
        period0.plusMonths((-4700));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Period period0 = Period.months(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        period0.plusMonths(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Interval interval0 = new Interval((-1627L), (-1627L), fixedDateTimeZone0);
      PeriodType periodType0 = PeriodType.months();
      Period period0 = interval0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period0.plusMinutes((-1898));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Period period0 = Period.ZERO;
      Days days0 = Days.MAX_VALUE;
      PeriodType periodType0 = days0.getPeriodType();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.plusMillis(222);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.MILLIS_TYPE;
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      int[] intArray0 = new int[6];
      PeriodType periodType0 = new PeriodType("ReadablePartial objects must not be null", durationFieldTypeArray0, intArray0);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      Period period0 = new Period((long) 28265582, periodType0, (Chronology) ethiopicChronology0);
      // Undeclared exception!
      try { 
        period0.plusMillis((-2998));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PeriodType periodType0 = PeriodType.dayTime();
      Period period0 = new Period(1696L, 1235L, periodType0);
      // Undeclared exception!
      try { 
        period0.plusMillis(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -461 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Period period0 = Period.hours((-58));
      PeriodType periodType0 = PeriodType.yearDayTime();
      Period period1 = period0.normalizedStandard(periodType0);
      PeriodType.HOUR_INDEX = 2;
      // Undeclared exception!
      try { 
        period1.plusHours(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((-2020L));
      Period period0 = new Period(monthDay0, monthDay0);
      PeriodType.HOUR_INDEX = 8;
      // Undeclared exception!
      try { 
        period0.plusHours(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Period period0 = new Period(1282, 1282, 0, 1282, Integer.MIN_VALUE, 1282, 2214, 1282);
      // Undeclared exception!
      try { 
        period0.plusHours((-3399));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -3399
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Period period0 = new Period(3600, 8, 8, 697);
      PeriodType periodType0 = PeriodType.time();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.plusDays(509);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      int[] intArray0 = new int[5];
      intArray0[3] = 23;
      PeriodType periodType0 = new PeriodType(" )o3NUv %6X", durationFieldTypeArray0, intArray0);
      Period period0 = new Period((-2131L), (-2131L), periodType0);
      // Undeclared exception!
      try { 
        period0.plusDays(1577);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      Period period0 = days0.toPeriod();
      // Undeclared exception!
      try { 
        period0.plusDays((-419));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -419
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      Period period0 = new Period((-1L), 31557600000L, julianChronology0);
      PeriodType.YEAR_INDEX = (-849);
      // Undeclared exception!
      try { 
        period0.plus(period0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      Weeks weeks0 = seconds0.toStandardWeeks();
      Duration duration0 = weeks0.toStandardDuration();
      Duration duration1 = duration0.minus((-3617L));
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) null);
      Period period0 = duration1.toPeriod((Chronology) copticChronology0);
      // Undeclared exception!
      try { 
        period0.plus(seconds0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -56 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse("", (PeriodFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PeriodFormatter periodFormatter0 = ISOPeriodFormat.standard();
      // Undeclared exception!
      try { 
        Period.parse("", periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Literal", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse("kz{)sK8'6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"kz{)sK8'6\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Period period0 = new Period();
      int[] intArray0 = new int[5];
      PeriodType periodType0 = new PeriodType(" n}B3", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Period period0 = new Period(1490L);
      PeriodType.MILLI_INDEX = (-20);
      PeriodType periodType0 = PeriodType.minutes();
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      Period period0 = days0.toPeriod();
      Hours hours0 = Hours.MAX_VALUE;
      PeriodType periodType0 = hours0.getPeriodType();
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 51539607528
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Period period0 = Period.seconds((-348));
      PeriodType.MONTH_INDEX = 15271875;
      // Undeclared exception!
      try { 
        period0.normalizedStandard();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      Period period0 = days0.toPeriod();
      // Undeclared exception!
      try { 
        period0.negated();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -2147483648 * -1
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Period period0 = Period.hours((-3038));
      Period period1 = period0.multipliedBy((-1490));
      // Undeclared exception!
      try { 
        period1.multipliedBy(510);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: 4526620 * 510
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-70L));
      PeriodType periodType0 = PeriodType.months();
      Period period0 = duration0.toPeriodFrom((ReadableInstant) null, periodType0);
      // Undeclared exception!
      try { 
        period0.minusYears((-2156));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Period period0 = new Period((Object) null);
      PeriodType.YEAR_INDEX = 1441;
      // Undeclared exception!
      try { 
        period0.minusYears((-878));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-70L));
      PeriodType periodType0 = PeriodType.months();
      Period period0 = duration0.toPeriodFrom((ReadableInstant) null, periodType0);
      // Undeclared exception!
      try { 
        period0.minusWeeks((-2156));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(6);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      Instant instant0 = gJChronology0.getGregorianCutover();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[7];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(instant0, instant0, periodType0);
      // Undeclared exception!
      try { 
        period0.minusSeconds(6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Period period0 = new Period(60000L);
      PeriodType.SECOND_INDEX = 481;
      // Undeclared exception!
      try { 
        period0.minusSeconds((-461));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Period period0 = Period.seconds(0);
      PeriodType periodType0 = PeriodType.dayTime();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.minusMonths(623158436);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Period period0 = Period.seconds((-348));
      PeriodType.MONTH_INDEX = 15271875;
      // Undeclared exception!
      try { 
        period0.minusMonths((-348));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Period period0 = Period.months(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        period0.minusMonths(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MINUTE_INDEX = (-1810);
      // Undeclared exception!
      try { 
        period0.minusMinutes(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Period period0 = duration0.toPeriod();
      Period period1 = period0.plusMinutes(Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        period1.minusMinutes((-2327));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 2327
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      DurationFieldType durationFieldType0 = DurationFieldType.MILLIS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      PeriodType periodType0 = new PeriodType("NoMillis", durationFieldTypeArray0, (int[]) null);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      Period period0 = new Period((-2147483648L), (-5357L), periodType0, ethiopicChronology0);
      // Undeclared exception!
      try { 
        period0.minusMillis(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Period period0 = Period.years(1777);
      PeriodType.MILLI_INDEX = 1777;
      // Undeclared exception!
      try { 
        period0.minusMillis(1777);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(0L, (Chronology) null);
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
      try { 
        period0.minusHours(2150);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Period period0 = Period.hours(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        period0.minusHours(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Period period0 = new Period(0L, 0L, buddhistChronology0);
      Months months0 = Months.SIX;
      PeriodType periodType0 = months0.getPeriodType();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.minusDays(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Instant instant0 = Instant.now();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[9];
      PeriodType periodType0 = new PeriodType("@61z06", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(instant0, instant0, periodType0);
      // Undeclared exception!
      try { 
        period0.minusDays(227);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      PeriodType.DAY_INDEX = 91;
      Period period0 = new Period(0, (-18), (-18), (-18), 91, 2, 91, 1912, periodType0);
      // Undeclared exception!
      try { 
        period0.minusDays(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      Period period0 = days0.toPeriod();
      // Undeclared exception!
      try { 
        period0.minusDays(4009);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -4009
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Period period0 = new Period(86400L, 0L, (PeriodType) null);
      PeriodType periodType0 = PeriodType.yearMonthDay();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.minus(period0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2300));
      LocalTime localTime0 = new LocalTime(dateTimeZone0);
      LocalTime localTime1 = localTime0.minusMinutes((-2300));
      Period period0 = Period.fieldDifference(localTime1, localTime0);
      Minutes minutes0 = Minutes.MAX_VALUE;
      // Undeclared exception!
      try { 
        period0.minus(minutes0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -20 + -2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DateTime dateTime0 = new DateTime((-492L));
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0);
      Period period0 = new Period((-492L), (-492L), gJChronology0);
      PeriodType.WEEK_INDEX = 12;
      // Undeclared exception!
      try { 
        period0.ZERO.getWeeks();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.SECOND_INDEX = 460;
      // Undeclared exception!
      try { 
        period0.ZERO.getSeconds();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MONTH_INDEX = (-4369);
      // Undeclared exception!
      try { 
        period0.ZERO.getMonths();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Period period0 = Period.ZERO;
      PeriodType.MINUTE_INDEX = 1235;
      // Undeclared exception!
      try { 
        period0.getMinutes();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) julianChronology0);
      Duration duration0 = Duration.standardSeconds(4);
      Interval interval0 = new Interval(mutableDateTime0, duration0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[2] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[3] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[4] = durationFieldType0;
      int[] intArray0 = new int[4];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, intArray0);
      Period period0 = interval0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period0.getMillis();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Period period0 = Period.seconds(1491);
      PeriodType.HOUR_INDEX = 1855;
      // Undeclared exception!
      try { 
        period0.ZERO.getHours();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Period period0 = Period.seconds((-348));
      PeriodType.DAY_INDEX = 5;
      PeriodType.DAY_INDEX = 15271875;
      // Undeclared exception!
      try { 
        period0.getDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1035));
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      Partial partial0 = new Partial(gregorianChronology0, dateTimeFieldTypeArray0, (int[]) null);
      // Undeclared exception!
      try { 
        Period.fieldDifference(partial0, partial0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      int[] intArray0 = new int[0];
      Partial partial0 = new Partial(gregorianChronology0, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(partial0, partial0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      Period period0 = null;
      try {
        period0 = new Period("", periodType0, julianChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Object object0 = new Object();
      PeriodType periodType0 = PeriodType.months();
      Period period0 = null;
      try {
        period0 = new Period(object0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Period period0 = null;
      try {
        period0 = new Period("q3p2@DUp[y<O`N", (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"q3p2@DUp[y<O`N\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Period period0 = null;
      try {
        period0 = new Period("Field must not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Field must not be null\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int[] intArray0 = new int[2];
      PeriodType periodType0 = new PeriodType("", (DurationFieldType[]) null, intArray0);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      Period period0 = null;
      try {
        period0 = new Period(3600000L, periodType0, (Chronology) lenientChronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Minutes minutes0 = Minutes.parseMinutes((String) null);
      PeriodType periodType0 = minutes0.getPeriodType();
      Period period0 = null;
      try {
        period0 = new Period(0, 9, 0, 7, 1886, 7, 1886, 19, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'months'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Period period0 = Period.hours((-58));
      Period period1 = period0.plusYears(1);
      PeriodType periodType0 = PeriodType.yearDayTime();
      period1.normalizedStandard(periodType0);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Period period0 = Period.seconds(0);
      Period period1 = period0.ZERO.multipliedBy(0);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Period period0 = Period.seconds(0);
      Period period1 = period0.plusMillis(706);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Period period0 = Period.seconds(0);
      Period period1 = period0.plusSeconds(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusSeconds(3);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Period period0 = Period.seconds(0);
      Period period1 = period0.plusHours(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Period period0 = new Period((-492L));
      Period period1 = period0.plusDays(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusMonths(1502);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Period period0 = Period.seconds(0);
      Period period1 = period0.plusMonths(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Period period0 = new Period(4, 0, 0, 15356250);
      int int0 = period0.getWeeks();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((long) 0);
      Period period0 = new Period(monthDay0, monthDay0);
      int int0 = period0.getYears();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Period period0 = new Period(1137, (-655), (-292269337), 1137, 0, (-655), (-655), (-292269337));
      int int0 = period0.getSeconds();
      assertEquals((-655), int0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      Period period0 = new Period((Object) null, periodType0);
      int int0 = period0.getHours();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Period period0 = Period.seconds(0);
      int int0 = period0.getDays();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Period period0 = new Period(4, 0, 0, 15356250);
      int int0 = period0.getMinutes();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null);
      // Undeclared exception!
      try { 
        Period.parse("", periodFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Period period0 = new Period();
      int int0 = period0.ZERO.getMonths();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Duration duration0 = new Duration(0L);
      PeriodType periodType0 = PeriodType.yearDay();
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Period period0 = duration0.toPeriod(periodType0, (Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        period0.withMinutes((-1289));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0, 0, 0, 0);
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      int int0 = period0.getMillis();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0, 0);
      Period period0 = new Period(localTime0, localTime0);
      Period period1 = period0.minusMonths(1);
      PeriodType periodType0 = PeriodType.yearDayTime();
      // Undeclared exception!
      try { 
        period1.normalizedStandard(periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Period period0 = Period.seconds((-783));
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      Period period1 = period0.withFieldAdded(durationFieldType0, 693);
      // Undeclared exception!
      try { 
        period1.toStandardDays();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Days as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(73);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      Period period0 = new Period((-2317L), (Chronology) islamicChronology0);
      Period period1 = period0.multipliedBy(1);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Period period0 = new Period((Object) null);
      Period period1 = period0.minus((ReadablePeriod) null);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2300));
      LocalTime localTime0 = new LocalTime(dateTimeZone0);
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      Minutes minutes0 = Minutes.MAX_VALUE;
      Period period1 = period0.minus(minutes0);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Period period0 = Period.seconds(0);
      Period period1 = period0.plusMillis(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Period period0 = new Period(4, 0, 0, 15356250);
      Period period1 = period0.minusSeconds(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Period period0 = new Period(1L);
      Period period1 = period0.plusMinutes(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((-2020L));
      Period period0 = new Period(monthDay0, monthDay0);
      Period period1 = period0.minusHours(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Period period0 = Period.seconds(0);
      Period period1 = period0.plusWeeks(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Period period0 = Period.seconds(0);
      Period period1 = period0.plusYears(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Period period0 = Period.hours(964);
      Period period1 = period0.plus((ReadablePeriod) null);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      Days days0 = Days.FOUR;
      // Undeclared exception!
      try { 
        period0.plus(days0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Period period0 = new Period(1209L);
      DurationFieldType durationFieldType0 = DurationFieldType.MILLIS_TYPE;
      Period period1 = period0.withFieldAdded(durationFieldType0, 0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Period period0 = Period.minutes(2000);
      // Undeclared exception!
      try { 
        period0.withFieldAdded((DurationFieldType) null, (-203));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Period period0 = Period.seconds((-10));
      // Undeclared exception!
      try { 
        period0.withField((DurationFieldType) null, 1770);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0, 0, 0, 0);
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      durationFieldTypeArray0[0] = durationFieldType0;
      Period period1 = period0.withField(durationFieldTypeArray0[0], 0);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0, 0);
      Period period0 = new Period(localTime0, localTime0);
      Period period1 = period0.withFields((ReadablePeriod) null);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      PeriodType periodType0 = PeriodType.yearMonthDay();
      Period period0 = new Period(localDateTime0, localDateTime0, periodType0);
      Period period1 = period0.withPeriodType(periodType0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[1] = dateTimeFieldTypeArray0[0];
      int[] intArray0 = new int[3];
      Partial partial0 = new Partial((Chronology) null, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(partial0, partial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not have overlapping fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) iSOChronology0);
      LocalTime localTime0 = new LocalTime(0L);
      // Undeclared exception!
      try { 
        Period.fieldDifference(localDateTime0, localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((-2553L));
      Locale locale0 = Locale.KOREA;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      MonthDay monthDay0 = MonthDay.fromCalendarFields(mockGregorianCalendar0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(localTime0, monthDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1158);
      LocalTime localTime0 = new LocalTime(dateTimeZone0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(localTime0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.fieldDifference((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      Period period1 = period0.withYears((-292269337));
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
      try { 
        period0.minusSeconds(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Period period0 = new Period((-3909L));
      PeriodType.WEEK_INDEX = (-1675);
      // Undeclared exception!
      try { 
        period0.ZERO.minusWeeks((-1675));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Period period0 = new Period(2450, (-2958), 352, (-2958));
      PeriodType.YEAR_INDEX = (-23);
      // Undeclared exception!
      try { 
        period0.getYears();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(233L, (DateTimeZone) null);
      DateTime dateTime0 = mutableDateTime0.toDateTimeISO();
      Weeks weeks0 = Weeks.MAX_VALUE;
      Duration duration0 = weeks0.toStandardDuration();
      PeriodType periodType0 = weeks0.getPeriodType();
      Period period0 = new Period(dateTime0, duration0, periodType0);
      // Undeclared exception!
      try { 
        period0.toStandardDays();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 15032385529
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Period period0 = Period.ZERO;
      Duration duration0 = period0.ZERO.toStandardDuration();
      assertEquals(0L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("GV_2E=1`~Ou'F", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(949L, 949L, periodType0);
      // Undeclared exception!
      try { 
        period0.toStandardMinutes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(copticChronology0, dateTimeZone0);
      Period period0 = new Period((Object) null, periodType0, zonedChronology0);
      // Undeclared exception!
      try { 
        period0.withHours(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Period period0 = Period.days(879);
      PeriodType.HOUR_INDEX = 879;
      // Undeclared exception!
      try { 
        period0.minusHours((-1891));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      PeriodType periodType0 = PeriodType.time();
      Period period0 = null;
      try {
        period0 = new Period(localTime0, (ReadablePartial) null, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
      try { 
        period0.minusMinutes(2094);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      Hours hours0 = period0.toStandardHours();
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      Period period1 = period0.toPeriod();
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      Period period0 = new Period((-1L), 31557600000L, julianChronology0);
      PeriodType.YEAR_INDEX = (-849);
      // Undeclared exception!
      try { 
        period0.ZERO.minus(period0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Period period0 = Period.millis(2056);
      Period period1 = period0.ZERO.withMillis(3532);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      PeriodType periodType0 = PeriodType.time();
      Period period0 = new Period((-656L), periodType0);
      // Undeclared exception!
      try { 
        period0.plusWeeks(5170);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Period period0 = Period.ZERO;
      Days days0 = period0.toStandardDays();
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Period period0 = new Period();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      int[] intArray0 = new int[4];
      PeriodType periodType0 = new PeriodType("=!4i", durationFieldTypeArray0, intArray0);
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.plusMinutes((-3886));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2300));
      LocalTime localTime0 = new LocalTime(dateTimeZone0);
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(6);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      Instant instant0 = gJChronology0.getGregorianCutover();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[7];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(instant0, instant0, periodType0);
      // Undeclared exception!
      try { 
        period0.minusYears(20503125);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      Period period0 = new Period((Object) null, gregorianChronology0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Period period0 = Period.parse("p");
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.withSeconds(8);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("GV_2E=1`~Ou'F", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(949L, 949L, periodType0);
      // Undeclared exception!
      try { 
        period0.withHours(4526);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
      try { 
        period0.minusMillis(31);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Period period0 = Period.minutes(783);
      Period period1 = period0.ZERO.withMinutes((-749));
      assertNotSame(period0, period1);
  }
}
