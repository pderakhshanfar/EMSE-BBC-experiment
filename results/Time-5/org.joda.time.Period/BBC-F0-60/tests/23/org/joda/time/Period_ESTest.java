/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 10:45:42 GMT 2021
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LimitChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Period_ESTest extends Period_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Period period0 = Period.days((-1049));
      Duration duration0 = period0.toStandardDuration();
      assertEquals((-90633600000L), duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Period period0 = Period.hours(3637);
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(13093200, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Period period0 = new Period(3579, 3600, 3600, 3600);
      Period period1 = period0.normalizedStandard();
      Minutes minutes0 = period1.toStandardMinutes();
      assertEquals(218400, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Period period0 = Period.years(1);
      PeriodType.YEAR_INDEX = 6;
      PeriodType.MINUTE_INDEX = 0;
      Hours hours0 = period0.toStandardHours();
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Period period0 = Period.hours(3637);
      Days days0 = period0.toStandardDays();
      assertEquals(151, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      Period period0 = new Period(1000000L, (Chronology) gregorianChronology0);
      Days days0 = period0.toStandardDays();
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Period period0 = Period.hours(3637);
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(21, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      Period period0 = new Period(1000000L, (Chronology) gregorianChronology0);
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Period period0 = new Period((-6), (-6), (-6), (-6));
      Period period1 = period0.minusMinutes((-6));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Period period0 = Period.hours(1);
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      Period period1 = period0.withFieldAdded(durationFieldType0, (-1673));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) iSOChronology0);
      YearMonth yearMonth0 = new YearMonth((long) 579);
      // Undeclared exception!
      try { 
        Period.fieldDifference(localDateTime0, yearMonth0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Period period0 = new Period(duration0, (ReadableInstant) null, (PeriodType) null);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Period period0 = Period.days(1794);
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(256, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Period period0 = Period.days(0);
      Period period1 = period0.withWeeks((-1573));
      Weeks weeks0 = period1.toStandardWeeks();
      assertEquals((-1573), weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Period period0 = Period.days(1395);
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(120528000, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Period period0 = Period.hours(0);
      Period period1 = period0.withMinutes((-6));
      Seconds seconds0 = period1.toStandardSeconds();
      assertEquals((-360), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Period period0 = Period.seconds((-374));
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals((-6), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Days days0 = Days.THREE;
      Period period0 = days0.toPeriod();
      Hours hours0 = period0.toStandardHours();
      assertEquals(72, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Period period0 = new Period(2663L, (-3432L), gJChronology0);
      Period period1 = period0.withWeeks((-1266));
      Hours hours0 = period1.toStandardHours();
      assertEquals((-212688), hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Interval interval0 = new Interval((-2888L), 3940L);
      Duration duration0 = interval0.toDuration();
      Duration duration1 = duration0.withDurationAdded(3940L, 1685);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTime dateTime0 = DateTime.now((Chronology) buddhistChronology0);
      Period period0 = new Period(duration1, dateTime0);
      Period period1 = period0.multipliedBy((-586));
      Duration duration2 = period1.toStandardDuration();
      assertEquals((-3894396608L), duration2.getMillis());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) ethiopicChronology0);
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      Days days0 = period0.toStandardDays();
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Period period0 = Period.weeks(3);
      Days days0 = period0.toStandardDays();
      assertEquals(21, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Period period0 = Period.days((-1540));
      Days days0 = period0.toStandardDays();
      assertEquals((-1540), days0.getDays());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      Period period0 = Period.parse("", periodFormatter0);
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Period period0 = new Period(8, (-7), (-7), (-1), 2088, (-1000), (-1000), 4749);
      int int0 = period0.getYears();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      Period period0 = new Period(1000000L, (Chronology) gregorianChronology0);
      int int0 = period0.getWeeks();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Period period0 = Period.weeks(3);
      int int0 = period0.getWeeks();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(604800000L);
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTime dateTime0 = DateTime.parse("", dateTimeFormatter0);
      Period period0 = new Period(duration0, dateTime0);
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      MutablePeriod mutablePeriod0 = new MutablePeriod(1712L, periodType0, (Chronology) copticChronology0);
      Period period1 = period0.plus(mutablePeriod0);
      int int0 = period1.getSeconds();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Period period0 = new Period(2663L, (-3432L), gJChronology0);
      int int0 = period0.getSeconds();
      assertEquals((-6), int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Period period0 = Period.months(1);
      int int0 = period0.getMonths();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Duration duration0 = new Duration((-752L), 0L);
      Period period0 = duration0.toPeriod((Chronology) null);
      Period period1 = period0.plusMonths((-2319));
      int int0 = period1.getMonths();
      assertEquals((-2319), int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Period period0 = Period.hours(3637);
      Period period1 = period0.withMinutes(50);
      int int0 = period1.getMinutes();
      assertEquals(50, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Period period0 = Period.hours(0);
      Period period1 = period0.withMinutes((-6));
      int int0 = period1.getMinutes();
      assertEquals((-6), int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Period period0 = Period.days(1395);
      int int0 = period0.ZERO.getMillis();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Duration duration0 = new Duration((-752L), 0L);
      Period period0 = duration0.toPeriod((Chronology) null);
      Period period1 = period0.withMillis((-2319));
      int int0 = period1.getMillis();
      assertEquals((-2319), int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Period period0 = new Period(73L, 0L, (PeriodType) null);
      int int0 = period0.getHours();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      Period period0 = new Period(1000000L, (Chronology) gregorianChronology0);
      Period period1 = period0.minusHours((-629));
      int int0 = period1.getHours();
      assertEquals(629, int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) ethiopicChronology0);
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      int int0 = period0.getDays();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      Period period0 = new Period(86400000L, periodType0, (Chronology) gregorianChronology0);
      int int0 = period0.getDays();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((Object) null);
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period(mutableDateTime0, mutableDateTime0, periodType0);
      Duration duration0 = period0.toStandardDuration();
      PeriodType periodType1 = PeriodType.dayTime();
      Period period1 = duration0.toPeriodTo((ReadableInstant) mutableDateTime0, periodType1);
      // Undeclared exception!
      try { 
        period1.withYears(30);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((Object) null);
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period(mutableDateTime0, mutableDateTime0, periodType0);
      PeriodType.YEAR_INDEX = (-1);
      // Undeclared exception!
      try { 
        period0.withYears(2578);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((Object) null);
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period(mutableDateTime0, mutableDateTime0, periodType0);
      Duration duration0 = period0.toStandardDuration();
      PeriodType periodType1 = PeriodType.dayTime();
      Period period1 = duration0.toPeriodTo((ReadableInstant) mutableDateTime0, periodType1);
      // Undeclared exception!
      try { 
        period1.withWeeks(2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      Period period0 = new Period(1, 0, islamicChronology0);
      PeriodType.WEEK_INDEX = 65533;
      // Undeclared exception!
      try { 
        period0.withWeeks(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 65533
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Instant instant0 = Instant.now();
      Chronology chronology0 = instant0.getChronology();
      Years years0 = Years.yearsIn((ReadableInterval) null);
      Period period0 = new Period(years0, (PeriodType) null, chronology0);
      // Undeclared exception!
      try { 
        period0.withSeconds(4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      int[] intArray0 = new int[3];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      Period period0 = new Period(dateTime0, dateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.withSeconds((-4314));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Period period0 = Period.weeks(3);
      PeriodType periodType0 = PeriodType.seconds();
      // Undeclared exception!
      try { 
        period0.withPeriodType(periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'weeks'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      Period period0 = new Period(0L, periodType0);
      // Undeclared exception!
      try { 
        period0.withMonths((-5103));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Duration duration0 = new Duration(0L, 0L);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      int[] intArray0 = new int[2];
      intArray0[1] = (-6081);
      PeriodType periodType0 = new PeriodType("p6=,,t#4@ros0U", durationFieldTypeArray0, intArray0);
      Period period0 = duration0.toPeriod(periodType0, (Chronology) julianChronology0);
      // Undeclared exception!
      try { 
        period0.withMonths((-224));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -6081
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(1, 1, 1, 1, 1, 1, 1);
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
      try { 
        period0.withMinutes(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Period period0 = Period.hours(13);
      PeriodType.MINUTE_INDEX = 13;
      // Undeclared exception!
      try { 
        period0.withMinutes(13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
      try { 
        period0.withMillis(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      int[] intArray0 = new int[9];
      intArray0[4] = 9;
      PeriodType periodType0 = new PeriodType("Pacific/Guadalcanal", durationFieldTypeArray0, intArray0);
      Period period0 = new Period(0L, periodType0);
      // Undeclared exception!
      try { 
        period0.withHours(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.weeks();
      Period period1 = period0.plusHours(8);
      period1.plus(period0);
      Period period2 = Period.years(8);
      period0.getYears();
      Period period3 = Period.weeks(4);
      Period period4 = period3.ZERO.withFields(period1);
      PeriodType.standard();
      period4.toStandardDuration();
      period2.getMinutes();
      period3.negated();
      int int0 = 1506;
      Period.weeks(int0);
      YearMonth yearMonth0 = YearMonth.now();
      Period.fieldDifference(yearMonth0, yearMonth0);
      Chronology chronology0 = null;
      LocalDateTime localDateTime0 = new LocalDateTime(chronology0);
      int int1 = (-1501);
      // Undeclared exception!
      try { 
        localDateTime0.withMillisOfDay(int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1501 for millisOfDay must be in the range [0,86399999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Hours hours0 = Hours.MAX_VALUE;
      Duration duration0 = hours0.toStandardDuration();
      Period period0 = duration0.toPeriod();
      DurationFieldType durationFieldType0 = DurationFieldType.HOURS_TYPE;
      // Undeclared exception!
      try { 
        period0.withFieldAdded(durationFieldType0, 2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 2
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
      try { 
        period0.withDays(2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.DAY_INDEX = 1073741824;
      // Undeclared exception!
      try { 
        period0.withDays(8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1073741824
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Period period0 = Period.hours(0);
      Period period1 = period0.withYears(998);
      // Undeclared exception!
      try { 
        period1.toStandardWeeks();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Weeks as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((Object) null);
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period(mutableDateTime0, mutableDateTime0, periodType0);
      PeriodType.MONTH_INDEX = 2615625;
      // Undeclared exception!
      try { 
        period0.toStandardWeeks();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((Object) null);
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period(mutableDateTime0, mutableDateTime0, periodType0);
      Period period1 = period0.minusMonths(5);
      // Undeclared exception!
      try { 
        period1.toStandardSeconds();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Seconds as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Period period0 = Period.hours(410);
      PeriodType.MILLI_INDEX = 410;
      // Undeclared exception!
      try { 
        period0.toStandardSeconds();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Period period0 = Period.minutes((-2728));
      Period period1 = period0.ZERO.minusWeeks(4832);
      // Undeclared exception!
      try { 
        period1.toStandardSeconds();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -2922393600
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Period period0 = Period.months(579);
      // Undeclared exception!
      try { 
        period0.toStandardMinutes();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Minutes as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MONTH_INDEX = 852;
      // Undeclared exception!
      try { 
        period0.toStandardMinutes();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Period period0 = new Period((-292275054), 42, (-689), 1456);
      // Undeclared exception!
      try { 
        period0.toStandardMinutes();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -17536503209
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Period period0 = Period.weeks((-662));
      Period period1 = period0.minusMonths((-662));
      // Undeclared exception!
      try { 
        period1.toStandardHours();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Hours as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Period period0 = Period.seconds(963);
      PeriodType.MONTH_INDEX = (-1);
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      Period period0 = days0.toPeriod();
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 51539607528
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((Object) null);
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period(mutableDateTime0, mutableDateTime0, periodType0);
      PeriodType.MINUTE_INDEX = (-4187);
      // Undeclared exception!
      try { 
        period0.toStandardDuration();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Years years0 = Years.ONE;
      Period period0 = years0.toPeriod();
      // Undeclared exception!
      try { 
        period0.toStandardDays();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Days as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Period period0 = Period.hours(0);
      PeriodType.HOUR_INDEX = (-6);
      // Undeclared exception!
      try { 
        period0.toStandardDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Days days0 = Days.FOUR;
      PeriodType periodType0 = days0.getPeriodType();
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1629L), periodType0, (Chronology) null);
      Period period0 = mutablePeriod0.toPeriod();
      // Undeclared exception!
      try { 
        period0.plusYears(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.YEAR_INDEX = 1509;
      // Undeclared exception!
      try { 
        period0.plusYears(26);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      Period period0 = years0.toPeriod();
      // Undeclared exception!
      try { 
        period0.plusYears((-81));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -81
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((Object) null);
      Period period0 = Period.weeks(3);
      Duration duration0 = period0.toStandardDuration();
      PeriodType periodType0 = PeriodType.dayTime();
      Period period1 = duration0.toPeriodTo((ReadableInstant) mutableDateTime0, periodType0);
      // Undeclared exception!
      try { 
        period1.plusWeeks((-1));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Period period0 = new Period(1000000L, 1000000L, gJChronology0);
      PeriodType.WEEK_INDEX = (-1012);
      // Undeclared exception!
      try { 
        period0.plusWeeks(2034);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(0L);
      PeriodType periodType0 = PeriodType.months();
      Period period0 = duration0.toPeriod(periodType0, (Chronology) null);
      // Undeclared exception!
      try { 
        period0.plusSeconds(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Period period0 = Period.minutes(1966);
      PeriodType.SECOND_INDEX = 1966;
      // Undeclared exception!
      try { 
        period0.plusSeconds(1966);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Seconds seconds0 = Seconds.MAX_VALUE;
      PeriodType periodType0 = seconds0.getPeriodType();
      Period period0 = new Period(1075L, periodType0, (Chronology) null);
      // Undeclared exception!
      try { 
        period0.plusMonths(8);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((Object) null);
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period(mutableDateTime0, mutableDateTime0, periodType0);
      PeriodType.MONTH_INDEX = 2615625;
      // Undeclared exception!
      try { 
        period0.ZERO.plusMonths(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
      try { 
        period0.plusMinutes((-2095));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Period period0 = Period.days((-1718));
      PeriodType.MINUTE_INDEX = (-1718);
      // Undeclared exception!
      try { 
        period0.plusMinutes((-1718));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Days days0 = Days.FOUR;
      PeriodType periodType0 = days0.getPeriodType();
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1629L), periodType0, (Chronology) null);
      Period period0 = mutablePeriod0.toPeriod();
      // Undeclared exception!
      try { 
        period0.plusMillis(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Period period0 = Period.millis(12);
      PeriodType.MILLI_INDEX = (-714);
      // Undeclared exception!
      try { 
        period0.plusMillis((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) ethiopicChronology0);
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
      try { 
        period0.plusHours(3756);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.HOUR_INDEX = (-91);
      // Undeclared exception!
      try { 
        period0.plusHours(3398);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.DAY_INDEX = 22;
      // Undeclared exception!
      try { 
        period0.plusDays(22);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      Period period0 = new Period(1000000L, (Chronology) gregorianChronology0);
      Years years0 = Years.MIN_VALUE;
      PeriodType periodType0 = years0.getPeriodType();
      Period period1 = new Period(1000000L, 1000000L, periodType0, gregorianChronology0);
      // Undeclared exception!
      try { 
        period1.plus(period0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      Period period0 = years0.toPeriod();
      // Undeclared exception!
      try { 
        period0.plus(period0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null);
      // Undeclared exception!
      try { 
        Period.parse(" as this period contains months and months vary in length", periodFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      // Undeclared exception!
      try { 
        Period.parse("org.joda.time.chrono.BasicChronology$HalfdayField", periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org.joda.time.chrono.BasicChrono...\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Literal", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse("BC/SQF3;p0^e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"BC/SQF3;p0^e\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Days days0 = Days.THREE;
      PeriodType periodType0 = days0.getPeriodType();
      Period period0 = Period.millis(1);
      Period period1 = period0.plusMonths(1);
      // Undeclared exception!
      try { 
        period1.normalizedStandard(periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Period period0 = new Period();
      int[] intArray0 = new int[2];
      PeriodType periodType0 = new PeriodType((String) null, (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Days days0 = Days.THREE;
      PeriodType periodType0 = days0.getPeriodType();
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1629L), periodType0, (Chronology) null);
      PeriodType.MILLI_INDEX = (-2683);
      Period period0 = mutablePeriod0.toPeriod();
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Period period0 = new Period(0L);
      Period period1 = period0.plusWeeks((-2617));
      Period period2 = period1.multipliedBy(1288);
      PeriodType periodType0 = PeriodType.seconds();
      // Undeclared exception!
      try { 
        period2.normalizedStandard(periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -2038596940800
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Period period0 = Period.years(2680);
      PeriodType.MILLI_INDEX = 2680;
      // Undeclared exception!
      try { 
        period0.normalizedStandard();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      Interval interval0 = new Interval(0L, 1, dateTimeZone0);
      Duration duration0 = interval0.toDuration();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      DurationFieldType durationFieldType0 = DurationFieldType.CENTURIES_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      Days days0 = Days.MIN_VALUE;
      durationFieldTypeArray0[2] = durationFieldType0;
      durationFieldTypeArray0[3] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[4] = durationFieldTypeArray0[0];
      int[] intArray0 = new int[4];
      PeriodType periodType0 = new PeriodType("org.joda.time.format.ISODateTimeFormat", durationFieldTypeArray0, intArray0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      Period period0 = duration0.toPeriod(periodType0, (Chronology) strictChronology0);
      Period period1 = period0.plus(days0);
      // Undeclared exception!
      try { 
        period1.negated();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -2147483648 * -1
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      Period period0 = years0.toPeriod();
      // Undeclared exception!
      try { 
        period0.multipliedBy((-345));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -2147483648 * -345
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Days days0 = Days.THREE;
      PeriodType periodType0 = days0.getPeriodType();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) ethiopicChronology0);
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.minusYears(621);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.YEAR_INDEX = 9;
      // Undeclared exception!
      try { 
        period0.minusYears(65);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      Period period0 = years0.toPeriod();
      // Undeclared exception!
      try { 
        period0.minusYears(20503125);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -20503125
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(1, 1, 1, 1, 1, 1);
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
      try { 
        period0.minusWeeks(1525);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.WEEK_INDEX = 1023;
      // Undeclared exception!
      try { 
        period0.minusWeeks((-1800));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
      try { 
        period0.minusSeconds((-1851));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((Object) null);
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period(mutableDateTime0, mutableDateTime0, periodType0);
      PeriodType.SECOND_INDEX = 4214;
      // Undeclared exception!
      try { 
        period0.minusSeconds(5013);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Period period0 = Period.hours((-3882));
      PeriodType periodType0 = PeriodType.hours();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.minusMonths((-3882));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Period period0 = Period.hours((-5));
      PeriodType.MONTH_INDEX = (-5);
      // Undeclared exception!
      try { 
        period0.minusMonths((-5));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) ethiopicChronology0);
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      // Undeclared exception!
      try { 
        period0.minusMinutes(1491);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PeriodType.MINUTE_INDEX = 1163;
      Period period0 = new Period(1163, 1163, 1163, 1163);
      // Undeclared exception!
      try { 
        period0.minusMinutes(1163);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Duration duration0 = new Duration(0L, 0L);
      PeriodType periodType0 = PeriodType.months();
      Period period0 = duration0.toPeriod(periodType0, (Chronology) null);
      // Undeclared exception!
      try { 
        period0.minusMillis((-2115));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Period period0 = new Period(288, 1687, (-2232), 6, 6, (-2232), (-2232), 1687);
      PeriodType.MILLI_INDEX = 2024;
      // Undeclared exception!
      try { 
        period0.minusMillis(2024);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Period period0 = new Period((Object) null);
      PeriodType periodType0 = PeriodType.seconds();
      Period period1 = period0.withPeriodType(periodType0);
      // Undeclared exception!
      try { 
        period1.minusHours(1641);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      PeriodType periodType0 = PeriodType.seconds();
      Duration duration0 = Duration.standardHours(0);
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period0.minusDays(719);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.DAY_INDEX = 22;
      // Undeclared exception!
      try { 
        period0.minusDays((-2491));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      Period period0 = new Period(1000000L, (Chronology) gregorianChronology0);
      Years years0 = Years.MIN_VALUE;
      PeriodType periodType0 = years0.getPeriodType();
      Period period1 = new Period(1000000L, 1000000L, periodType0, gregorianChronology0);
      // Undeclared exception!
      try { 
        period1.minus(period0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      Period period0 = new Period(1317L, (Chronology) islamicChronology0);
      Period period1 = period0.plusDays(1099);
      PeriodType.DAY_INDEX = (-212);
      // Undeclared exception!
      try { 
        period0.ZERO.minus(period1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.YEAR_INDEX = (-1181);
      // Undeclared exception!
      try { 
        period0.ZERO.getYears();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.WEEK_INDEX = (-1413);
      // Undeclared exception!
      try { 
        period0.getWeeks();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Period period0 = Period.days(873);
      PeriodType.SECOND_INDEX = (-2316);
      // Undeclared exception!
      try { 
        period0.getSeconds();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MONTH_INDEX = 852;
      // Undeclared exception!
      try { 
        period0.getMonths();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Period period0 = Period.days(632);
      PeriodType.MINUTE_INDEX = 37;
      // Undeclared exception!
      try { 
        period0.ZERO.getMinutes();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Period period0 = Period.years(2680);
      PeriodType.MILLI_INDEX = 2680;
      // Undeclared exception!
      try { 
        period0.ZERO.getMillis();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Period period0 = Period.months(1525);
      PeriodType.HOUR_INDEX = 9;
      // Undeclared exception!
      try { 
        period0.getHours();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.DAY_INDEX = (-528);
      // Undeclared exception!
      try { 
        period0.getDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[6];
      Partial partial0 = new Partial(copticChronology0, dateTimeFieldTypeArray0, (int[]) null);
      // Undeclared exception!
      try { 
        Period.fieldDifference(partial0, partial0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds(0, 0, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      int[] intArray0 = new int[0];
      Partial partial0 = new Partial(copticChronology0, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(partial0, partial0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) ethiopicChronology0);
      PeriodType periodType0 = PeriodType.yearDay();
      Period period0 = null;
      try {
        period0 = new Period(yearMonth0, localDateTime0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      Minutes minutes0 = seconds0.toStandardMinutes();
      Duration duration0 = minutes0.toStandardDuration();
      Duration duration1 = duration0.multipliedBy(287L);
      PeriodType periodType0 = seconds0.getPeriodType();
      Period period0 = null;
      try {
        period0 = new Period((ReadableInstant) null, duration1, periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -616327804680
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Period period0 = new Period(1663, 1663, 1663, 1663, 1663, (-4456), 1663, (-1124));
      Instant instant0 = new Instant();
      Duration duration0 = period0.toDurationTo(instant0);
      PeriodType periodType0 = PeriodType.seconds();
      Period period1 = null;
      try {
        period1 = new Period(duration0, instant0, periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 58007855501
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Period period0 = new Period();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      int[] intArray0 = new int[0];
      PeriodType periodType0 = new PeriodType(" Cw*/\"k>$95%vU{Hf", (DurationFieldType[]) null, intArray0);
      Period period1 = null;
      try {
        period1 = new Period(period0, periodType0, islamicChronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      Years years0 = Years.MIN_VALUE;
      PeriodType periodType0 = years0.getPeriodType();
      Integer integer0 = new Integer(276);
      Period period0 = null;
      try {
        period0 = new Period((Object) integer0, periodType0, (Chronology) gregorianChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Integer
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      PeriodType periodType0 = new PeriodType("", (DurationFieldType[]) null, (int[]) null);
      Period period0 = null;
      try {
        period0 = new Period((Object) null, periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Object object0 = new Object();
      Period period0 = null;
      try {
        period0 = new Period(object0, (PeriodType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Days days0 = Days.THREE;
      PeriodType periodType0 = days0.getPeriodType();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      StrictChronology strictChronology0 = StrictChronology.getInstance(copticChronology0);
      Period period0 = null;
      try {
        period0 = new Period(periodType0, strictChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: org.joda.time.PeriodType
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Period period0 = null;
      try {
        period0 = new Period(gJChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: org.joda.time.chrono.GJChronology
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      Period period0 = null;
      try {
        period0 = new Period(1, 1, 1, 1, 0, 27, 27, 1, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'months'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Days days0 = Days.THREE;
      PeriodType periodType0 = days0.getPeriodType();
      Period period0 = days0.toPeriod();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.withHours(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Period period0 = Period.months(579);
      Period period1 = period0.ZERO.plusSeconds(0);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Period period0 = Period.days((-1540));
      Period period1 = period0.plusSeconds(1114);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Period period0 = Period.days((-1718));
      Period period1 = period0.plusMinutes((-1718));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Period period0 = new Period((-4127L), (-4127L));
      Period period1 = period0.plusDays(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Period period0 = Period.days(0);
      Period period1 = period0.plusMonths(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusYears(26);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Period period0 = new Period((-6), (-6), (-6), (-6));
      int int0 = period0.getHours();
      assertEquals((-6), int0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Period period0 = new Period(20503125, 1372, (-4134), (-4134), (-4134), 20503125, 20503125, (-1549));
      int int0 = period0.getWeeks();
      assertEquals((-4134), int0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Period period0 = new Period((-3455), 623158436, (-3455), 623158436, 9, 3785, 343, 3785, (PeriodType) null);
      int int0 = period0.getYears();
      assertEquals((-3455), int0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Duration duration0 = new Duration(0L, 0L);
      PeriodType periodType0 = PeriodType.months();
      Period period0 = duration0.toPeriod(periodType0, (Chronology) null);
      int int0 = period0.getSeconds();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      Years years0 = Years.MIN_VALUE;
      PeriodType periodType0 = years0.getPeriodType();
      Period period0 = new Period(21260793600000L, 21260793600000L, periodType0, gregorianChronology0);
      // Undeclared exception!
      try { 
        period0.plusDays((-3624));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Period period0 = Period.days((-6));
      int int0 = period0.getDays();
      assertEquals((-6), int0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse("cZ44-d\";w", (PeriodFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Period period0 = new Period(579, 579, 579, 579);
      int int0 = period0.getMillis();
      assertEquals(579, int0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Period period0 = new Period(localDateTime0, localDateTime0);
      PeriodType.HOUR_INDEX = 1727;
      // Undeclared exception!
      try { 
        period0.minusHours((-2342));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Period period0 = new Period(63L, 0L);
      PeriodType periodType0 = PeriodType.years();
      Period period1 = period0.minusYears(12);
      Period period2 = period1.normalizedStandard(periodType0);
      assertFalse(period2.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((Object) null);
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period(mutableDateTime0, mutableDateTime0, periodType0);
      Period period1 = period0.minusMonths(5);
      Period period2 = period1.minus(period0);
      Period period3 = period2.normalizedStandard(periodType0);
      assertTrue(period3.equals((Object)period2));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Period period0 = new Period(288, 1687, (-2232), 6, 6, (-2232), (-2232), 1687);
      Period period1 = period0.normalizedStandard();
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period(3, 3, 1, 4, 4, 3, 4, 0, periodType0);
      // Undeclared exception!
      try { 
        period0.toStandardDuration();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Duration as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((Object) null);
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period(mutableDateTime0, mutableDateTime0, periodType0);
      Period period1 = period0.multipliedBy(1);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.multipliedBy(1075);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Period period0 = Period.hours(1);
      Period period1 = period0.minus((ReadablePeriod) null);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Period period0 = Period.days(0);
      Period period1 = period0.ZERO.plusMillis(0);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Period period0 = new Period(579, 579, 579, 579);
      Period period1 = period0.minusSeconds(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      Period period0 = new Period(1000000L, (Chronology) gregorianChronology0);
      Period period1 = period0.plusMinutes(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.plusHours(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Period period0 = Period.days(0);
      Period period1 = period0.minusDays(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Period period0 = new Period(1000000L, 1000000L, gJChronology0);
      Period period1 = period0.plusWeeks(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Period period0 = Period.weeks(3);
      Period period1 = period0.plusYears(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Days days0 = Days.THREE;
      PeriodType periodType0 = days0.getPeriodType();
      periodType0.withYearsRemoved();
      Period period0 = days0.toPeriod();
      DateTimeZone.getDefault();
      Period period1 = period0.plus((ReadablePeriod) null);
      period0.getMonths();
      Period period2 = period0.plusMillis(1);
      assertNotSame(period2, period1);
      assertFalse(period2.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Period period0 = new Period(1000000L, 1000000L, gJChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      Period period1 = period0.withFieldAdded(durationFieldType0, 0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Period period0 = Period.millis(292272708);
      // Undeclared exception!
      try { 
        period0.ZERO.withFieldAdded((DurationFieldType) null, (-3557));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Duration duration0 = new Duration(0L, 0L);
      PeriodType periodType0 = PeriodType.months();
      Period period0 = duration0.toPeriod(periodType0, (Chronology) null);
      // Undeclared exception!
      try { 
        period0.withField((DurationFieldType) null, (-589));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Period period0 = new Period();
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      Period period1 = period0.withField(durationFieldType0, (-1639));
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) ethiopicChronology0);
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      Period period1 = period0.withFields((ReadablePeriod) null);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      Period period0 = days0.toPeriod();
      // Undeclared exception!
      try { 
        period0.minus(days0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Duration duration0 = new Duration(0L, 0L);
      PeriodType periodType0 = PeriodType.months();
      Period period0 = duration0.toPeriod(periodType0, (Chronology) null);
      Period period1 = period0.withPeriodType(periodType0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Period period0 = new Period();
      int[] intArray0 = new int[5];
      PeriodType periodType0 = new PeriodType("NoMillis", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        period0.withPeriodType(periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      int[] intArray0 = new int[1];
      Partial partial0 = new Partial(gJChronology0, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(partial0, partial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not have overlapping fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) ethiopicChronology0);
      LocalTime localTime0 = new LocalTime(4, 0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(localTime0, localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) ethiopicChronology0);
      LocalDate localDate0 = localDateTime0.toLocalDate();
      // Undeclared exception!
      try { 
        Period.fieldDifference(localDate0, localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) ethiopicChronology0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(localDateTime0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      DateTime dateTime0 = new DateTime((-88L));
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      LimitChronology limitChronology0 = LimitChronology.getInstance(gJChronology0, dateTime0, mutableDateTime0);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(limitChronology0, fixedDateTimeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) zonedChronology0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(localDateTime0, localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant is above the supported maximum of 2014-02-14T20:21:21.320Z (GJChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.fieldDifference((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Period period0 = Period.years((byte) (-14));
      Days days0 = Days.MIN_VALUE;
      Period period1 = period0.plus(days0);
      // Undeclared exception!
      try { 
        period1.minusDays(1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -1
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.minusDays(16);
      // Undeclared exception!
      try { 
        period1.plusDays(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -16 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Period period0 = new Period(727, 568, (-2066), (-2066));
      // Undeclared exception!
      try { 
        period0.minusSeconds(Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2066 + -2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      Minutes minutes0 = seconds0.toStandardMinutes();
      Duration duration0 = minutes0.toStandardDuration();
      PeriodType periodType0 = seconds0.getPeriodType();
      Period period0 = new Period((ReadableInstant) null, duration0, periodType0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      int[] intArray0 = new int[8];
      PeriodType periodType0 = new PeriodType("Seconds", (DurationFieldType[]) null, intArray0);
      GJChronology gJChronology0 = GJChronology.getInstance();
      Period period0 = null;
      try {
        period0 = new Period(9223372036854775807L, (-946L), periodType0, gJChronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      Period period0 = new Period(21260793600000L, (-4463), periodType0);
      // Undeclared exception!
      try { 
        period0.toStandardDuration();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Duration as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Period period0 = Period.months((-28));
      Period period1 = period0.minusMinutes(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        period1.plusMinutes((-1654));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -1654
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Period period0 = new Period();
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Duration duration0 = new Duration((-2068L));
      Period period0 = new Period((ReadableInstant) null, duration0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Period period0 = Period.days(Integer.MIN_VALUE);
      Period period1 = period0.withMonths(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        period1.minusMonths(5);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -5
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      int[] intArray0 = new int[7];
      PeriodType periodType0 = new PeriodType("IB>/+Ur", durationFieldTypeArray0, intArray0);
      Period period0 = new Period(yearMonth0, yearMonth0, periodType0);
      // Undeclared exception!
      try { 
        period0.withMillis(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateTime dateTime0 = DateTime.now((Chronology) ethiopicChronology0);
      Period period0 = new Period(dateTime0, dateTime0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Period period0 = Period.millis(12);
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Period period0 = Period.minutes((-4763));
      Period period1 = period0.minusYears((-2812));
      PeriodType.YEAR_INDEX = (-2983);
      // Undeclared exception!
      try { 
        period0.plus(period1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Period period0 = new Period(63L, 0L);
      Period period1 = period0.toPeriod();
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Weeks weeks0 = Weeks.MAX_VALUE;
      Duration duration0 = weeks0.toStandardDuration();
      PeriodType periodType0 = PeriodType.standard();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      Period period0 = duration0.toPeriod(periodType0, (Chronology) buddhistChronology0);
      // Undeclared exception!
      try { 
        period0.toStandardDays();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 15032385529
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Period period0 = new Period((Object) null, (Chronology) null);
      Period period1 = period0.plusMonths((-4536));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Period period0 = Period.parse("P");
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((Object) null);
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period(mutableDateTime0, mutableDateTime0, periodType0);
      Duration duration0 = period0.toStandardDuration();
      Interval interval0 = duration0.toIntervalFrom(mutableDateTime0);
      Period period1 = new Period(interval0, periodType0);
      assertEquals(0L, duration0.getStandardSeconds());
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.withSeconds(4);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Period period0 = Period.hours(1756);
      Period period1 = period0.withHours(8);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.minusMillis(Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        period1.minusMillis(Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483647 + -2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.withDays((-1080));
      assertNotSame(period0, period1);
  }
}
