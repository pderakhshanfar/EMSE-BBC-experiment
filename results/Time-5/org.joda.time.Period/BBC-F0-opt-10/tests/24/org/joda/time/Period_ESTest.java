/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 03:39:52 GMT 2021
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.format.ISOPeriodFormat;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Period_ESTest extends Period_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Period period0 = new Period(1339, (-951), (-951), 1339, (-2854), 32, (-951), (-2854));
      Period period1 = period0.normalizedStandard((PeriodType) null);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Period period0 = new Period((Object) null, (PeriodType) null, (Chronology) null);
      Period period1 = period0.withMonths((-3108));
      PeriodType periodType0 = PeriodType.yearWeekDay();
      Period period2 = period1.normalizedStandard(periodType0);
      assertNotSame(period2, period0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Period period0 = Period.years((-954));
      Period period1 = period0.normalizedStandard();
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.minusHours(50);
      Period period2 = period1.normalizedStandard();
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Period period0 = Period.seconds((-954));
      Period period1 = period0.withMonths((-3108));
      // Undeclared exception!
      try { 
        period1.toStandardWeeks();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Weeks as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Period period0 = Period.weeks((-950));
      Duration duration0 = period0.toStandardDuration();
      assertEquals((-574560000000L), duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      Period period0 = new Period((long) 48, periodType0);
      Period period1 = period0.plusDays((-1506));
      Duration duration0 = period1.toStandardDuration();
      assertEquals((-130118400L), duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Period period0 = Period.days(1327);
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(114652800, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusHours(1993);
      Seconds seconds0 = period1.toStandardSeconds();
      assertEquals(7174800, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Period period0 = Period.minutes(3210);
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(192600, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Duration duration0 = Duration.standardDays(7L);
      Period period0 = duration0.toPeriod((Chronology) null);
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(10080, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Hours hours0 = Hours.TWO;
      Duration duration0 = hours0.toStandardDuration();
      Period period0 = duration0.toPeriod();
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(120, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.minusWeeks(3814);
      Hours hours0 = period1.toStandardHours();
      assertEquals((-640752), hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Period period0 = Period.millis(2);
      Period period1 = period0.withMinutes(1864);
      Days days0 = period1.toStandardDays();
      assertEquals(1, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Period period0 = new Period((-480), 0, (-480), 2703);
      Days days0 = period0.toStandardDays();
      assertEquals((-20), days0.getDays());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Period period0 = Period.days(1);
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Period period0 = Period.minutes((-730));
      Period period1 = period0.normalizedStandard();
      assertFalse(period1.equals((Object)period0));
      
      Weeks weeks0 = period1.toStandardWeeks();
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
      Period period0 = Period.fieldDifference(localDateTime0, localDateTime0);
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      YearMonth yearMonth0 = new YearMonth((long) 1, (Chronology) ethiopicChronology0);
      LocalDate localDate0 = LocalDate.now((Chronology) ethiopicChronology0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(yearMonth0, localDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Duration duration0 = Duration.millis((-670L));
      Period period0 = new Period((ReadableInstant) null, duration0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.withDays(57);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Period period0 = Period.seconds(13421772);
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(22, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Period period0 = new Period((Object) null, (PeriodType) null, (Chronology) null);
      Period period1 = period0.withWeeks((-380));
      Weeks weeks0 = period1.toStandardWeeks();
      assertEquals((-380), weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Period period0 = Period.millis(525);
      Period period1 = period0.withWeeks(1327);
      Seconds seconds0 = period1.toStandardSeconds();
      assertEquals(802569600, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Period period0 = Period.seconds((-1045));
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals((-1045), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Period period0 = Period.days(8);
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(11520, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Period period0 = Period.seconds((-954));
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals((-15), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Period period0 = new Period(30617280288L);
      Hours hours0 = period0.toStandardHours();
      assertEquals(8504, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Period period0 = new Period(100000000L, (-2759));
      Hours hours0 = period0.toStandardHours();
      assertEquals((-27), hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Period period0 = Period.seconds((-1135));
      Period period1 = period0.multipliedBy((-1135));
      Duration duration0 = period1.toStandardDuration();
      assertEquals(1288225000L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Period period0 = Period.millis(1343);
      Duration duration0 = period0.toStandardDuration();
      assertEquals(1343L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Period period0 = new Period((-3258), 10080, 168, (-3258));
      Duration duration0 = period0.toStandardDuration();
      assertEquals((-11123835258L), duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      Period period0 = new Period((-3178L), (Chronology) gregorianChronology0);
      Days days0 = period0.ZERO.toStandardDays();
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Period period0 = Period.millis(525);
      Period period1 = period0.withWeeks(1327);
      Days days0 = period1.toStandardDays();
      assertEquals(9289, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      Period period0 = Period.parse("", periodFormatter0);
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Period period0 = Period.years(8);
      Period period1 = period0.minusSeconds(8);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Period period0 = new Period((-2528L), (Chronology) ethiopicChronology0);
      Period period1 = period0.minusMinutes(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Period period0 = Period.weeks(205);
      int int0 = period0.getYears();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period((-9223372036854775808L), 0L, periodType0);
      Period period1 = period0.withYears((-4336));
      int int0 = period1.getYears();
      assertEquals((-4336), int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Period period0 = new Period((-480), 0, (-480), 2703);
      Period period1 = period0.minusWeeks((-480));
      int int0 = period1.getWeeks();
      assertEquals(480, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Period period0 = Period.weeks((-3164));
      int int0 = period0.getWeeks();
      assertEquals((-3164), int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Duration duration0 = new Duration(1242L);
      Period period0 = duration0.toPeriod();
      int int0 = period0.getSeconds();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Period period0 = new Period((-480), 0, (-480), 2703);
      int int0 = period0.getSeconds();
      assertEquals((-480), int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Period period0 = new Period();
      int int0 = period0.getMonths();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Period period0 = Period.weeks(205);
      Period period1 = period0.plusMonths(205);
      int int0 = period1.getMonths();
      assertEquals(205, int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Period period0 = new Period(30617280288L);
      int int0 = period0.getMinutes();
      assertEquals(48, int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Instant instant0 = new Instant((long) 525);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay(dateTimeZone0);
      Period period0 = new Period(dateTime0, instant0);
      int int0 = period0.getMinutes();
      assertEquals((-59), int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Period period0 = Period.days(1);
      int int0 = period0.getMillis();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Instant instant0 = new Instant((long) 525);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay(dateTimeZone0);
      Period period0 = new Period(dateTime0, instant0);
      int int0 = period0.getMillis();
      assertEquals((-475), int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Period period0 = new Period(30617280288L, 30617280288L);
      int int0 = period0.getHours();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period((-9223372036854775808L), 0L, periodType0);
      Period period1 = period0.withHours((-4336));
      int int0 = period1.getHours();
      assertEquals((-4336), int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      int int0 = period0.getDays();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Period period0 = Period.days((-1));
      Period period1 = period0.negated();
      int int0 = period1.getDays();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      DurationFieldType durationFieldType0 = DurationFieldType.MILLIS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      PeriodType periodType0 = new PeriodType("=J7X86b.!}KgnK=HV", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((-83L), periodType0);
      // Undeclared exception!
      try { 
        period0.withYears((-446));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Period period0 = Period.seconds(1312);
      PeriodType.YEAR_INDEX = 1312;
      // Undeclared exception!
      try { 
        period0.withYears(1312);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1312
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      YearMonth yearMonth0 = new YearMonth((long) 1, (Chronology) ethiopicChronology0);
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
      try { 
        period0.withWeeks(112);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      DurationFieldType durationFieldType0 = DurationFieldType.MILLIS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      PeriodType periodType0 = new PeriodType("=J7X86b.!}KgnK=HV", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((-83L), periodType0);
      // Undeclared exception!
      try { 
        period0.withWeeks(9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldType0;
      durationFieldTypeArray0[3] = durationFieldType0;
      durationFieldTypeArray0[4] = durationFieldTypeArray0[2];
      durationFieldTypeArray0[5] = durationFieldTypeArray0[0];
      int[] intArray0 = new int[7];
      intArray0[2] = (-2322);
      PeriodType periodType0 = new PeriodType("u}_f}DzmbJY", durationFieldTypeArray0, intArray0);
      Period period0 = new Period((-3340L), 3600000L, periodType0);
      // Undeclared exception!
      try { 
        period0.withWeeks(8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2322
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      // Undeclared exception!
      try { 
        period0.withSeconds(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      PeriodType periodType0 = new PeriodType("M\"1?eT7kX", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(dateTime0, dateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.withSeconds(1547);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.SECOND_INDEX = 1001;
      // Undeclared exception!
      try { 
        period0.withSeconds(1001);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1001
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Period period0 = new Period(117, 3191, 0, (-1968), 0, 117, 0, 1366);
      PeriodType periodType0 = PeriodType.time();
      // Undeclared exception!
      try { 
        period0.withPeriodType(periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'years'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      Period period0 = new Period(mutableDateTime0, mutableDateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.withMonths(5);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Period period0 = Period.days(2005);
      PeriodType.MONTH_INDEX = (-834);
      // Undeclared exception!
      try { 
        period0.withMonths((-1906));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -834
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      YearMonth yearMonth0 = new YearMonth((-1106L), (Chronology) copticChronology0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("TSGY*Y", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(yearMonth0, yearMonth0, periodType0);
      // Undeclared exception!
      try { 
        period0.withMinutes(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Duration duration0 = new Duration(1242L);
      Period period0 = duration0.toPeriod();
      PeriodType.MINUTE_INDEX = 12;
      // Undeclared exception!
      try { 
        period0.withMinutes(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      Period period0 = new Period((-326L), (-326L), periodType0);
      // Undeclared exception!
      try { 
        period0.withMillis(76);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((-783L), periodType0);
      // Undeclared exception!
      try { 
        period0.withMillis(13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MILLI_INDEX = 1319;
      // Undeclared exception!
      try { 
        period0.withMillis(1319);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1319
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      // Undeclared exception!
      try { 
        period0.withHours((-17971875));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldType0;
      durationFieldTypeArray0[3] = durationFieldTypeArray0[2];
      durationFieldTypeArray0[4] = durationFieldTypeArray0[0];
      int[] intArray0 = new int[8];
      intArray0[4] = 1383;
      PeriodType periodType0 = new PeriodType("=Z5lf,]F5tu~", durationFieldTypeArray0, intArray0);
      Period period0 = new Period(3600000L, periodType0);
      // Undeclared exception!
      try { 
        period0.withHours(6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1383
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      Minutes minutes0 = Minutes.ONE;
      // Undeclared exception!
      try { 
        period0.withFields(minutes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'minutes'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Period period0 = Period.years(Integer.MIN_VALUE);
      Years years0 = Years.MAX_VALUE;
      DurationFieldType durationFieldType0 = years0.getFieldType();
      // Undeclared exception!
      try { 
        period0.withFieldAdded(durationFieldType0, (-2809));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -2809
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Period period0 = Period.years(8);
      PeriodType.DAY_INDEX = (-372);
      // Undeclared exception!
      try { 
        period0.withDays(91);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -372
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Period period0 = Period.years((-954));
      // Undeclared exception!
      try { 
        period0.toStandardWeeks();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Weeks as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Period period0 = new Period(30617280288L, 30617280288L);
      PeriodType.MONTH_INDEX = 85;
      // Undeclared exception!
      try { 
        period0.toStandardWeeks();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Period period0 = Period.seconds(500);
      Period period1 = period0.plusMonths(3);
      // Undeclared exception!
      try { 
        period1.toStandardSeconds();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Seconds as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Period period0 = new Period(30617280288L, 30617280288L);
      PeriodType.MONTH_INDEX = 85;
      // Undeclared exception!
      try { 
        period0.toStandardSeconds();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Instant instant0 = Instant.now();
      Period period0 = new Period(instant0, instant0);
      Period period1 = period0.withWeeks(4059);
      // Undeclared exception!
      try { 
        period1.toStandardSeconds();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 2454883200
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      DurationFieldType durationFieldType0 = DurationFieldType.MILLIS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      PeriodType periodType0 = new PeriodType("=J7X86b.!}KgnK=HV", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((-83L), periodType0);
      // Undeclared exception!
      try { 
        period0.toStandardMinutes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Period period0 = Period.minutes(939);
      PeriodType.HOUR_INDEX = 122;
      // Undeclared exception!
      try { 
        period0.toStandardMinutes();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Period period0 = Period.days(7678125);
      // Undeclared exception!
      try { 
        period0.toStandardMinutes();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 11056500000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType(":AhYLiy", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((-783L), periodType0);
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.YEAR_INDEX = (-783);
      // Undeclared exception!
      try { 
        period0.toStandardHours();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.minusDays((-292275054));
      // Undeclared exception!
      try { 
        period1.toStandardHours();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 7014601296
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Period period0 = Period.years((-64));
      // Undeclared exception!
      try { 
        period0.toStandardDuration();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Duration as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("B*t\"C(u<=aw", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(monthDay0, monthDay0, periodType0);
      // Undeclared exception!
      try { 
        period0.toStandardDuration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.WEEK_INDEX = 12;
      // Undeclared exception!
      try { 
        period0.toStandardDuration();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Period period0 = Period.millis(525);
      Period period1 = period0.withMonths(25);
      // Undeclared exception!
      try { 
        period1.toStandardDays();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Days as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Period period0 = Period.millis(2925);
      PeriodType.MILLI_INDEX = (-4699);
      // Undeclared exception!
      try { 
        period0.toStandardDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((-783L), periodType0);
      // Undeclared exception!
      try { 
        period0.plusYears((-550));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((-12219292800000L));
      Period period0 = new Period(localTime0, localTime0);
      PeriodType.YEAR_INDEX = 2832;
      // Undeclared exception!
      try { 
        period0.plusYears(2832);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2832
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      // Undeclared exception!
      try { 
        period0.plusWeeks((-3885));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.WEEK_INDEX = 59;
      // Undeclared exception!
      try { 
        period0.plusWeeks((-1475));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 59
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      Period period0 = new Period((long) 48, periodType0);
      // Undeclared exception!
      try { 
        period0.plusSeconds(58);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      Period period0 = new Period((ReadableInstant) null, (ReadableInstant) null, periodType0);
      // Undeclared exception!
      try { 
        period0.plusMonths((-2863));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      PeriodType periodType0 = new PeriodType("=J7X86b.!}KgnK=HV", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((-83L), periodType0);
      // Undeclared exception!
      try { 
        period0.plusMonths(14);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MONTH_INDEX = (-928);
      // Undeclared exception!
      try { 
        period0.plusMonths(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -928
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      YearMonth yearMonth0 = new YearMonth(2069L, (Chronology) ethiopicChronology0);
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
      try { 
        period0.plusMinutes((-3492));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MINUTE_INDEX = (-1347);
      // Undeclared exception!
      try { 
        period0.plusMinutes((-391));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1347
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      DurationFieldType durationFieldType0 = DurationFieldType.MILLIS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      PeriodType periodType0 = new PeriodType("=J7X86b.!}KgnK=HV", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((-83L), periodType0);
      // Undeclared exception!
      try { 
        period0.plusMillis((-141));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MILLI_INDEX = (-752);
      // Undeclared exception!
      try { 
        period0.plusMillis(6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -752
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      Period period0 = new Period((-3020L), (-477L), periodType0, iSOChronology0);
      // Undeclared exception!
      try { 
        period0.plusHours((-844));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      DurationFieldType durationFieldType0 = DurationFieldType.MILLIS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      PeriodType periodType0 = new PeriodType("=J7X86b.!}KgnK=HV", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((-83L), periodType0);
      // Undeclared exception!
      try { 
        period0.plusHours((-141));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Period period0 = Period.weeks((-2900));
      PeriodType.HOUR_INDEX = 4945;
      // Undeclared exception!
      try { 
        period0.plusHours(12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4945
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Period period0 = new Period();
      Hours hours0 = Hours.MAX_VALUE;
      Period period1 = period0.withFields(hours0);
      // Undeclared exception!
      try { 
        period1.plusHours(40);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 40
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Period period0 = Period.millis((-1135));
      PeriodType.DAY_INDEX = (-1);
      // Undeclared exception!
      try { 
        period0.plusDays((-4545));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      MutableDateTime mutableDateTime0 = dateTime0.toMutableDateTime();
      Days days0 = Days.MAX_VALUE;
      Duration duration0 = days0.toStandardDuration();
      Interval interval0 = new Interval(mutableDateTime0, duration0);
      PeriodType periodType0 = PeriodType.days();
      Period period0 = interval0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period0.plusDays(4);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 4
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Duration duration0 = Duration.standardHours(0L);
      PeriodType periodType0 = PeriodType.days();
      Period period0 = duration0.toPeriod(periodType0);
      Months months0 = Months.ONE;
      // Undeclared exception!
      try { 
        period0.plus(months0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.SECOND_INDEX = 1001;
      Seconds seconds0 = Seconds.TWO;
      // Undeclared exception!
      try { 
        period0.plus(seconds0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1001
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Weeks weeks0 = Weeks.MIN_VALUE;
      Duration duration0 = weeks0.toStandardDuration();
      Instant instant0 = Instant.now();
      Period period0 = new Period(duration0, instant0);
      // Undeclared exception!
      try { 
        period0.plus(weeks0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -1 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null);
      // Undeclared exception!
      try { 
        Period.parse("", periodFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PeriodFormatter periodFormatter0 = ISOPeriodFormat.standard();
      // Undeclared exception!
      try { 
        Period.parse("k\"9>~", periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"k\"9>~\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Literal", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Period period0 = Period.days(306);
      int[] intArray0 = new int[3];
      PeriodType periodType0 = new PeriodType("F4&)?", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Period period0 = new Period((-480), 0, (-480), 2703);
      PeriodType periodType0 = PeriodType.millis();
      PeriodType.HOUR_INDEX = 1830;
      // Undeclared exception!
      try { 
        period0.ZERO.normalizedStandard(periodType0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Period period0 = new Period((Object) null, (PeriodType) null, (Chronology) null);
      Seconds seconds0 = Seconds.standardSecondsIn(period0);
      Period period1 = Period.days(895);
      Period period2 = period1.multipliedBy(168);
      PeriodType periodType0 = seconds0.getPeriodType();
      // Undeclared exception!
      try { 
        period2.normalizedStandard(periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 12991104000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      PeriodType periodType0 = new PeriodType("TSGY*Y", durationFieldTypeArray0, (int[]) null);
      Duration duration0 = Duration.millis((-606L));
      Period period0 = duration0.toPeriod(periodType0, (Chronology) copticChronology0);
      // Undeclared exception!
      try { 
        period0.normalizedStandard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.MONTH_INDEX = 178;
      // Undeclared exception!
      try { 
        period0.normalizedStandard();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      Period period0 = days0.toPeriod();
      // Undeclared exception!
      try { 
        period0.negated();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -2147483648 * -1
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.plusDays((-17971875));
      // Undeclared exception!
      try { 
        period1.multipliedBy(153692453);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -17971875 * 153692453
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      // Undeclared exception!
      try { 
        period0.minusYears(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Period period0 = Period.months(755);
      PeriodType.YEAR_INDEX = 3319;
      // Undeclared exception!
      try { 
        period0.minusYears(446);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3319
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Period period0 = new Period();
      Years years0 = Years.MIN_VALUE;
      Period period1 = period0.plus(years0);
      // Undeclared exception!
      try { 
        period1.minusYears(46);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -46
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      Period period0 = new Period((Object) null, periodType0);
      // Undeclared exception!
      try { 
        period0.minusWeeks(1035);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.WEEK_INDEX = (-996);
      // Undeclared exception!
      try { 
        period0.minusWeeks(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -996
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Duration duration0 = new Duration(0L);
      Period period0 = duration0.toPeriod();
      Weeks weeks0 = Weeks.MAX_VALUE;
      Period period1 = period0.minus(weeks0);
      // Undeclared exception!
      try { 
        period1.minusWeeks(813);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483647 + -813
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period((-2690), (-2570), (-2570), (-2690), (-831), (-831), (-2690), (-831), periodType0);
      PeriodType.SECOND_INDEX = 13;
      // Undeclared exception!
      try { 
        period0.ZERO.minusSeconds(40);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      PeriodType periodType0 = PeriodType.minutes();
      Period period0 = duration0.toPeriod(periodType0);
      // Undeclared exception!
      try { 
        period0.minusMonths(1081);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Period period0 = new Period((-2528L), (Chronology) ethiopicChronology0);
      PeriodType.MONTH_INDEX = (-4373);
      // Undeclared exception!
      try { 
        period0.minusMonths((-2022));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4373
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) iSOChronology0);
      Duration duration0 = new Duration(mutableDateTime0, mutableDateTime0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      PeriodType periodType0 = new PeriodType("h3Pw\"E,F;@", durationFieldTypeArray0, (int[]) null);
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      Period period0 = duration0.toPeriod(periodType0, (Chronology) julianChronology0);
      // Undeclared exception!
      try { 
        period0.minusMinutes(89);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Period period0 = new Period();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      int[] intArray0 = new int[0];
      PeriodType periodType0 = new PeriodType("Xfr*c~P", durationFieldTypeArray0, intArray0);
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.minusMinutes((-1256));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      // Undeclared exception!
      try { 
        period0.minusMillis(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) iSOChronology0);
      Duration duration0 = new Duration(mutableDateTime0, mutableDateTime0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      PeriodType periodType0 = new PeriodType("h3Pw\"E,F;@", durationFieldTypeArray0, (int[]) null);
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      Period period0 = duration0.toPeriod(periodType0, (Chronology) julianChronology0);
      // Undeclared exception!
      try { 
        period0.minusMillis(1313);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Period period0 = Period.ZERO;
      PeriodType.MILLI_INDEX = 7678125;
      // Undeclared exception!
      try { 
        period0.minusMillis(1802);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7678125
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Period period0 = new Period(324L, 1);
      // Undeclared exception!
      try { 
        period0.minusMillis(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -323 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDay();
      Period period0 = new Period(7L, periodType0);
      // Undeclared exception!
      try { 
        period0.minusHours((-1));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      DurationFieldType durationFieldType0 = DurationFieldType.MILLIS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      PeriodType periodType0 = new PeriodType("=J7X86b.!}KgnK=HV", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((-83L), periodType0);
      // Undeclared exception!
      try { 
        period0.minusHours(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Period period0 = Period.weeks((-3164));
      PeriodType.HOUR_INDEX = (-3164);
      // Undeclared exception!
      try { 
        period0.minusHours(5174);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3164
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Period period0 = new Period((-885), (-885), 2879, (-885), Integer.MAX_VALUE, Integer.MAX_VALUE, 841, (-847));
      // Undeclared exception!
      try { 
        period0.minusHours((-847));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 847
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      PeriodType.DAY_INDEX = 0;
      PeriodType.DAY_INDEX = 1316;
      Period period0 = new Period((-2690), (-2570), (-2570), (-2690), (-831), (-831), (-2690), (-831), periodType0);
      // Undeclared exception!
      try { 
        period0.minusDays((-3465));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1316
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      Period period0 = new Period((long) (-954), periodType0, (Chronology) ethiopicChronology0);
      Months months0 = Months.SEVEN;
      // Undeclared exception!
      try { 
        period0.minus(months0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      Period period0 = new Period(86399999L, (-501L), islamicChronology0);
      PeriodType.SECOND_INDEX = (-754);
      MutablePeriod mutablePeriod0 = new MutablePeriod((-217), (-217), (-217), 1);
      // Undeclared exception!
      try { 
        period0.minus(mutablePeriod0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -754
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Days days0 = Days.SEVEN;
      Period period0 = days0.toPeriod();
      PeriodType.YEAR_INDEX = 3600;
      // Undeclared exception!
      try { 
        period0.ZERO.getYears();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Period period0 = Period.millis((-1135));
      PeriodType.WEEK_INDEX = 1000;
      // Undeclared exception!
      try { 
        period0.ZERO.getWeeks();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Period period0 = new Period();
      PeriodType.SECOND_INDEX = (-1581);
      // Undeclared exception!
      try { 
        period0.getSeconds();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Period period0 = Period.months(4);
      PeriodType.MONTH_INDEX = 2181;
      // Undeclared exception!
      try { 
        period0.getMonths();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Period period0 = Period.weeks((-721));
      PeriodType.MINUTE_INDEX = (-293);
      // Undeclared exception!
      try { 
        period0.ZERO.getMinutes();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Period period0 = Period.years((-152));
      PeriodType.MILLI_INDEX = (-3024);
      // Undeclared exception!
      try { 
        period0.getMillis();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Period period0 = Period.millis((-1135));
      PeriodType.HOUR_INDEX = (-1135);
      // Undeclared exception!
      try { 
        period0.ZERO.getHours();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) iSOChronology0);
      Duration duration0 = new Duration(mutableDateTime0, mutableDateTime0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      PeriodType periodType0 = new PeriodType("h3Pw\"E,F;@", durationFieldTypeArray0, (int[]) null);
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      Period period0 = duration0.toPeriod(periodType0, (Chronology) julianChronology0);
      // Undeclared exception!
      try { 
        period0.getDays();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      PeriodType.DAY_INDEX = 0;
      PeriodType.DAY_INDEX = 1316;
      Period period0 = new Period((-2690), (-2570), (-2570), (-2690), (-831), (-831), (-2690), (-831), periodType0);
      // Undeclared exception!
      try { 
        period0.ZERO.getDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-655));
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      int[] intArray0 = new int[6];
      Partial partial0 = new Partial(iSOChronology0, (DateTimeFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(partial0, partial0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.parse("");
      int[] intArray0 = new int[1];
      MonthDay monthDay1 = new MonthDay(monthDay0, intArray0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(monthDay1, monthDay0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      LocalTime localTime0 = LocalTime.now();
      PeriodType periodType0 = PeriodType.time();
      Period period0 = null;
      try {
        period0 = new Period(localDate0, localTime0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      Period period0 = new Period();
      Period period1 = period0.minusWeeks(242);
      Duration duration0 = period1.toDurationFrom(dateTime0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[8];
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      DurationFieldType durationFieldType1 = DurationFieldType.ERAS_TYPE;
      durationFieldTypeArray0[2] = durationFieldType1;
      int[] intArray0 = new int[5];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      Period period2 = null;
      try {
        period2 = new Period(dateTime0, duration0, periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Weeks weeks0 = Weeks.MIN_VALUE;
      Duration duration0 = weeks0.toStandardDuration();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      DurationFieldType durationFieldType0 = DurationFieldType.MILLIS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      int[] intArray0 = new int[4];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      Period period0 = null;
      try {
        period0 = new Period((ReadableInstant) null, duration0, periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -1298798110310400000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Duration duration0 = new Duration((-165L));
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      Instant instant0 = gJChronology0.getGregorianCutover();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      durationFieldTypeArray0[0] = durationFieldType0;
      DurationFieldType durationFieldType1 = DurationFieldType.ERAS_TYPE;
      durationFieldTypeArray0[1] = durationFieldType1;
      int[] intArray0 = new int[2];
      PeriodType periodType0 = new PeriodType("kqV@%)6EM`@:.[", durationFieldTypeArray0, intArray0);
      Period period0 = null;
      try {
        period0 = new Period(duration0, instant0, periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Object object0 = new Object();
      PeriodType periodType0 = PeriodType.months();
      Period period0 = null;
      try {
        period0 = new Period(object0, periodType0, (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      PeriodType periodType0 = PeriodType.time();
      Period period0 = null;
      try {
        period0 = new Period(durationFieldType0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: org.joda.time.DurationFieldType$StandardDurationFieldType
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Object object0 = new Object();
      Period period0 = null;
      try {
        period0 = new Period(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Period period0 = null;
      try {
        period0 = new Period(9223372036854775807L, (PeriodType) null, (Chronology) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 15250284452
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[7];
      Hours hours0 = Hours.FOUR;
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[3] = durationFieldType0;
      DurationFieldType durationFieldType1 = DurationFieldType.ERAS_TYPE;
      durationFieldTypeArray0[4] = durationFieldType1;
      int[] intArray0 = new int[9];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      Period period0 = null;
      try {
        period0 = new Period((long) 3765, periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds(2939);
      PeriodType periodType0 = seconds0.getPeriodType();
      Period period0 = null;
      try {
        period0 = new Period(30962844000000L, periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 30962844000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      int[] intArray0 = new int[9];
      PeriodType periodType0 = new PeriodType("Gtr:L6$ZR0KE`z9]o`x", (DurationFieldType[]) null, intArray0);
      Period period0 = null;
      try {
        period0 = new Period(100000000L, (-842L), periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Period period0 = null;
      try {
        period0 = new Period(9223372036854775807L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 2562047788015
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      Period period0 = null;
      try {
        period0 = new Period(1, (-4), 1640, 1640, 1, 1327, 525, 1327, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'months'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Period period0 = new Period(0L, 0L);
      PeriodType periodType0 = PeriodType.days();
      Period period1 = period0.normalizedStandard(periodType0);
      // Undeclared exception!
      try { 
        period1.plusMillis((-2547));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Instant instant0 = Instant.now();
      Duration duration0 = Duration.standardHours(7L);
      PeriodType periodType0 = PeriodType.weeks();
      Period period0 = new Period(instant0, duration0, periodType0);
      Period period1 = period0.plusMillis(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.plusMillis(6);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Period period0 = new Period((Object) null, (PeriodType) null, (Chronology) null);
      Period period1 = period0.plusSeconds((-131));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Period period0 = Period.millis((-1135));
      Period period1 = period0.plusMinutes((-3492));
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Period period0 = Period.minutes(939);
      Period period1 = period0.plusHours(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      YearMonth yearMonth0 = new YearMonth((long) 1, (Chronology) ethiopicChronology0);
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
      try { 
        period0.plusDays((-283));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Hours hours0 = Hours.EIGHT;
      Duration duration0 = hours0.toStandardDuration();
      Seconds seconds0 = Seconds.standardSecondsIn(hours0);
      PeriodType periodType0 = seconds0.getPeriodType();
      Period period0 = duration0.toPeriodFrom((ReadableInstant) null, periodType0);
      Period period1 = period0.plusWeeks(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      // Undeclared exception!
      try { 
        period0.plusYears(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Period period0 = Period.years(0);
      Period period1 = period0.plusYears(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Period period0 = new Period(2587, 1596, 1596, 1596, 1596, 1596, 2587, (-467));
      int int0 = period0.getHours();
      assertEquals(1596, int0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Period period0 = Period.millis(7);
      Period period1 = new Period(period0);
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Period period0 = new Period((-480), 0, (-480), 2703);
      int int0 = period0.getWeeks();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period((-9223372036854775808L), 0L, periodType0);
      int int0 = period0.getYears();
      assertEquals(292277024, int0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Period period0 = new Period();
      int int0 = period0.getSeconds();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      Duration duration0 = Duration.standardSeconds(3210);
      Period period0 = new Period(duration0, (ReadableInstant) null, periodType0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      int[] intArray0 = new int[0];
      PeriodType periodType0 = new PeriodType(";fs1+", durationFieldTypeArray0, intArray0);
      Period period0 = new Period((-1026L), (-1026L), periodType0);
      // Undeclared exception!
      try { 
        period0.plusSeconds(12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Period period0 = Period.days((-1));
      int int0 = period0.getDays();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Period period0 = new Period();
      int int0 = period0.getMinutes();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.parse("Field type must not be null", (PeriodFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Period period0 = Period.months((-3505));
      int int0 = period0.getMonths();
      assertEquals((-3505), int0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Period period0 = new Period("PT0S", (Chronology) null);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Period period0 = Period.millis(1000);
      int int0 = period0.getMillis();
      assertEquals(1000, int0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Period period0 = Period.weeks((-950));
      Period period1 = period0.withMonths(3);
      PeriodType periodType0 = PeriodType.yearWeekDay();
      // Undeclared exception!
      try { 
        period1.normalizedStandard(periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Period period0 = new Period(1994L, (Chronology) ethiopicChronology0);
      Period period1 = period0.withYears(1);
      // Undeclared exception!
      try { 
        period1.toStandardHours();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Hours as this period contains years and years vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Period period0 = Period.millis(2);
      Period period1 = period0.plusMonths(1864);
      // Undeclared exception!
      try { 
        period1.toStandardMinutes();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Minutes as this period contains months and months vary in length
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.multipliedBy(1);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Period period0 = Period.ZERO;
      Period period1 = period0.multipliedBy(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.minus((ReadablePeriod) null);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((-12219292800000L));
      Period period0 = new Period(localTime0, localTime0);
      Period period1 = period0.minusMillis(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Period period0 = new Period(117, 3, 0, (-1968), 0, 117, 0, 1339);
      Period period1 = period0.plusSeconds(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Instant instant0 = Instant.now();
      Period period0 = new Period(instant0, instant0);
      Period period1 = period0.plusMinutes(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Period period0 = Period.millis((-954));
      Period period1 = period0.plus((ReadablePeriod) null);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Period period0 = new Period(0L, (Chronology) null);
      DurationFieldType durationFieldType0 = DurationFieldType.MINUTES_TYPE;
      Period period1 = period0.withFieldAdded(durationFieldType0, 0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Period period0 = new Period((Object) null, (PeriodType) null, (Chronology) null);
      // Undeclared exception!
      try { 
        period0.withFieldAdded((DurationFieldType) null, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Period period0 = Period.weeks((-1016));
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      Period period1 = period0.withFieldAdded(durationFieldType0, 3);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Period period0 = Period.millis(2);
      // Undeclared exception!
      try { 
        period0.withField((DurationFieldType) null, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Period period0 = Period.weeks((-1016));
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      Period period1 = period0.ZERO.withField(durationFieldType0, 3);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.withFields((ReadablePeriod) null);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Period period0 = Period.seconds(500);
      Period period1 = period0.withPeriodType((PeriodType) null);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Period period0 = Period.millis((-1135));
      int[] intArray0 = new int[1];
      PeriodType periodType0 = new PeriodType(" partial,", (DurationFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        period0.ZERO.withPeriodType(periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      int[] intArray0 = new int[7];
      Partial partial0 = new Partial(buddhistChronology0, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(partial0, partial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not have overlapping fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      YearMonth yearMonth0 = new YearMonth(0L, (Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        Period.fieldDifference(yearMonth0, monthDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      YearMonth yearMonth0 = new YearMonth((long) 1, (Chronology) ethiopicChronology0);
      Partial partial0 = new Partial();
      // Undeclared exception!
      try { 
        Period.fieldDifference(yearMonth0, partial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      // Undeclared exception!
      try { 
        Period.fieldDifference(monthDay0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      // Undeclared exception!
      try { 
        Period.fieldDifference((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Instant instant0 = gJChronology0.getGregorianCutover();
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      PeriodType periodType0 = new PeriodType("|HT40", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period(mutableDateTime0, mutableDateTime0, periodType0);
      // Undeclared exception!
      try { 
        period0.minusMonths((-2385));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      // Undeclared exception!
      try { 
        period0.withYears(9);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      // Undeclared exception!
      try { 
        period0.minusSeconds((-511));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      DurationFieldType durationFieldType0 = DurationFieldType.MILLIS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      PeriodType periodType0 = new PeriodType("=J7X86b.!}KgnK=HV", durationFieldTypeArray0, (int[]) null);
      Period period0 = new Period((-83L), periodType0);
      // Undeclared exception!
      try { 
        period0.minusWeeks(86400);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Duration duration0 = new Duration(1242L);
      Period period0 = duration0.toPeriod();
      Seconds seconds0 = period0.ZERO.toStandardSeconds();
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      YearMonth yearMonth0 = new YearMonth((long) 1, (Chronology) ethiopicChronology0);
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
      try { 
        period0.minusDays(275);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Period period0 = new Period(0L);
      Weeks weeks0 = Weeks.MAX_VALUE;
      Period period1 = period0.withFields(weeks0);
      // Undeclared exception!
      try { 
        period1.plusWeeks(1559);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 1559
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Period period0 = new Period(1, 1, 0, 0);
      Hours hours0 = Hours.MAX_VALUE;
      Period period1 = period0.minus(hours0);
      // Undeclared exception!
      try { 
        period1.minus(hours0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483646 + -2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Weeks weeks0 = Weeks.MIN_VALUE;
      Duration duration0 = weeks0.toStandardDuration();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      int[] intArray0 = new int[4];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      Period period0 = null;
      try {
        period0 = new Period((ReadableInstant) null, duration0, periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      int[] intArray0 = new int[3];
      PeriodType periodType0 = new PeriodType("2h*(2rc[", durationFieldTypeArray0, intArray0);
      Period period0 = null;
      try {
        period0 = new Period(86400000L, 1, periodType0, ethiopicChronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      YearMonth yearMonth0 = new YearMonth((long) 1, (Chronology) ethiopicChronology0);
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      Duration duration0 = period0.toStandardDuration();
      assertEquals(0L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      Period period0 = null;
      try {
        period0 = new Period((-9223372036854775808L), 0L, periodType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 0 - -9223372036854775808
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Period period0 = Period.days(7678125);
      Period period1 = period0.plusDays(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) iSOChronology0);
      Duration duration0 = new Duration(mutableDateTime0, mutableDateTime0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      PeriodType periodType0 = new PeriodType("h3Pw\"E,F;@", durationFieldTypeArray0, (int[]) null);
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      Period period0 = duration0.toPeriod(periodType0, (Chronology) julianChronology0);
      // Undeclared exception!
      try { 
        period0.withMonths((-1170));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Instant instant0 = Instant.now();
      Period period0 = new Period(instant0, instant0);
      Period period1 = period0.minusYears(0);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      YearMonth yearMonth0 = new YearMonth((long) 1, (Chronology) ethiopicChronology0);
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
      try { 
        period0.minusMinutes((-1556));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Period period0 = Period.hours(3907);
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      Period period0 = new Period(1994L, (Chronology) ethiopicChronology0);
      Hours hours0 = period0.toStandardHours();
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Period period0 = new Period(12, (-2004), (-2648), (-2648), Integer.MAX_VALUE, 12, (-2648), 1706);
      // Undeclared exception!
      try { 
        period0.minusDays(Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2648 + -2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Period period0 = Period.minutes((-1496));
      // Undeclared exception!
      try { 
        period0.plusMinutes(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -1496 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Period period0 = Period.months((-894));
      Period period1 = period0.toPeriod();
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.withMillis(1319);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Days days0 = Days.SEVEN;
      Period period0 = days0.toPeriod();
      Period period1 = period0.ZERO.minusMonths(1000);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[7];
      int[] intArray0 = new int[9];
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      Period period0 = null;
      try {
        period0 = new Period((long) 3765, periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      Period period0 = new Period(1000000000000000000L, periodType0, (Chronology) null);
      // Undeclared exception!
      try { 
        period0.toStandardDays();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 11574074071
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Period period0 = Period.millis((-1135));
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period((-2690), (-2570), (-2570), (-2690), (-831), (-831), (-2690), (-831), periodType0);
      Period period1 = period0.ZERO.plusMonths(0);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Period period0 = Period.millis((-1135));
      Period period1 = period0.minusYears(1);
      assertNotSame(period1, period0);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Object object0 = new Object();
      Period period0 = null;
      try {
        period0 = new Period(object0, (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Period period0 = Period.parse("P-1016W");
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      int[] intArray0 = new int[9];
      PeriodType periodType0 = new PeriodType("", (DurationFieldType[]) null, intArray0);
      Period period0 = null;
      try {
        period0 = new Period((Object) null, periodType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Period period0 = new Period();
      Period period1 = period0.withSeconds(1001);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      YearMonth yearMonth0 = new YearMonth((long) 1, (Chronology) ethiopicChronology0);
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
      try { 
        period0.withMinutes(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      YearMonth yearMonth0 = new YearMonth((long) 1, (Chronology) ethiopicChronology0);
      Period period0 = Period.fieldDifference(yearMonth0, yearMonth0);
      // Undeclared exception!
      try { 
        period0.withDays(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
}
