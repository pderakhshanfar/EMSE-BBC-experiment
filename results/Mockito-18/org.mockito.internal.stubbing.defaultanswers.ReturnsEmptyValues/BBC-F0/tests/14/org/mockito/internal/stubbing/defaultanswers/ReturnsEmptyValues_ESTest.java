/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 10:59:06 GMT 2020
 */

package org.mockito.internal.stubbing.defaultanswers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues;
import org.mockito.invocation.InvocationOnMock;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ReturnsEmptyValues_ESTest extends ReturnsEmptyValues_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ReturnsEmptyValues returnsEmptyValues0 = new ReturnsEmptyValues();
      InvocationOnMock invocationOnMock0 = mock(InvocationOnMock.class, new ViolatedAssumptionAnswer());
      doReturn((Method) null).when(invocationOnMock0).getMethod();
      // Undeclared exception!
      try { 
        returnsEmptyValues0.answer(invocationOnMock0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.internal.creation.DelegatingMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ReturnsEmptyValues returnsEmptyValues0 = new ReturnsEmptyValues();
      Class<Integer> class0 = Integer.class;
      Object object0 = returnsEmptyValues0.returnValueFor(class0);
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ReturnsEmptyValues returnsEmptyValues0 = new ReturnsEmptyValues();
      Class<Object> class0 = Object.class;
      Object object0 = returnsEmptyValues0.returnValueFor(class0);
      assertNull(object0);
  }
}
