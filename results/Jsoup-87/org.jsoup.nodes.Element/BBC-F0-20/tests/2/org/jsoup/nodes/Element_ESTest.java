/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 21:33:35 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = "$]";
      Document document0 = Parser.parseBodyFragment("$]", "$]");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("$]", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("$]", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      Elements elements0 = document0.children();
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("$]", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("$]", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      
      // Undeclared exception!
      try { 
        document0.insertChildren((-1), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = "nfwbPWzo";
      Document document0 = Parser.parseBodyFragmentRelaxed("nfwbPWzo", "nfwbPWzo");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("nfwbPWzo", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("nfwbPWzo", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      char[] charArray0 = new char[9];
      charArray0[0] = '_';
      charArray0[1] = 'i';
      charArray0[2] = '%';
      charArray0[3] = '@';
      charArray0[4] = 'a';
      charArray0[5] = ',';
      charArray0[6] = 'E';
      charArray0[7] = 'x';
      charArray0[8] = '|';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(9, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(9, charBuffer0.limit());
      assertEquals("_i%@a,Ex|", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(9, charBuffer0.capacity());
      assertEquals(9, charBuffer0.length());
      assertArrayEquals(new char[] {'_', 'i', '%', '@', 'a', ',', 'E', 'x', '|'}, charArray0);
      assertEquals(9, charArray0.length);
      
      // Undeclared exception!
      try { 
        document0.html((Appendable) charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.cangstri'g@000000085", "java.cangstri'g@000000085");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      
      Document document1 = (Document)document0.addClass("))~|");
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = document1.head();
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      element0.parentNode = (Node) document1;
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.parentNode.siblingIndex());
      assertFalse(element0.parentNode.hasParent());
      
      List<Node> list0 = document0.ensureChildNodes();
      assertNotNull(list0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertSame(document0, document1);
      
      Elements elements0 = element0.getElementsByAttributeStarting("))~|");
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.addClass("))~|");
      assertNotNull(document2);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      boolean boolean0 = document1.hasClass("java.cangstri'g@000000085");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("))~|", "))~|");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parse("/8V]/`Jq]I/", "/8V]/`Jq]I/");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      
      document0.childNodes = null;
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      
      // Undeclared exception!
      try { 
        document0.hasText();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("br", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("br", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      TextNode textNode0 = new TextNode("java.lang.string@0000000038", "AttributeValue_doubleQuoted");
      assertNotNull(textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(textNode0.hasParent());
      
      document0.parentNode = (Node) textNode0;
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("br", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("br", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(textNode0.hasParent());
      assertEquals(0, document0.parentNode.siblingIndex());
      assertFalse(document0.parentNode.hasParent());
      
      boolean boolean0 = document0.hasText();
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("br", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("br", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(boolean0);
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("br", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("br", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("br", element0.baseUri());
      
      // Undeclared exception!
      try { 
        document0.appendTo(element0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("nf(bd;PWzo", "nf(bd;PWzo");
      assertNotNull(document0);
      assertEquals("nf(bd;PWzo", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("nf(bd;PWzo", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      List<DataNode> list0 = new LinkedList<DataNode>();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      document0.setSiblingIndex((-2952));
      assertEquals("nf(bd;PWzo", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals((-2952), document0.siblingIndex());
      assertEquals("nf(bd;PWzo", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      ParseSettings parseSettings0 = new ParseSettings(true, false);
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("org.jsoup.select.combiningevaluator", parseSettings0);
      assertNotNull(tag0);
      assertEquals("org.jsoup.select.combiningevaluator", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertEquals("org.jsoup.select.combiningevaluator", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      
      CDataNode cDataNode0 = new CDataNode("org.jsoup.select.combiningevaluator");
      assertNotNull(cDataNode0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      
      Attributes attributes1 = attributes0.put("Z6'|rcRgY&6#o", true);
      assertNotNull(attributes1);
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Element element0 = new Element(tag0, "|g#qn,.", attributes1);
      assertNotNull(element0);
      assertEquals("org.jsoup.select.combiningevaluator", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertEquals("org.jsoup.select.combiningevaluator", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertFalse(element0.isBlock());
      assertEquals("org.jsoup.select.combiningevaluator", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("org.jsoup.select.combiningevaluator", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("|g#qn,.", element0.baseUri());
      
      Document document1 = (Document)document0.prependChild(element0);
      assertNotNull(document1);
      assertEquals("nf(bd;PWzo", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals((-2952), document0.siblingIndex());
      assertEquals("nf(bd;PWzo", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.select.combiningevaluator", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertEquals("org.jsoup.select.combiningevaluator", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertFalse(element0.isBlock());
      assertEquals("org.jsoup.select.combiningevaluator", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("org.jsoup.select.combiningevaluator", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("|g#qn,.", element0.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("nf(bd;PWzo", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("nf(bd;PWzo", document1.location());
      assertEquals((-2952), document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(document1, document0);
      
      Element element1 = element0.doClone(document1);
      assertNotNull(element1);
      assertEquals("nf(bd;PWzo", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals((-2952), document0.siblingIndex());
      assertEquals("nf(bd;PWzo", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.select.combiningevaluator", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertEquals("org.jsoup.select.combiningevaluator", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertFalse(element0.isBlock());
      assertEquals("org.jsoup.select.combiningevaluator", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("org.jsoup.select.combiningevaluator", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("|g#qn,.", element0.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("nf(bd;PWzo", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("nf(bd;PWzo", document1.location());
      assertEquals((-2952), document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("org.jsoup.select.combiningevaluator", element1.nodeName());
      assertEquals("org.jsoup.select.combiningevaluator", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("|g#qn,.", element1.baseUri());
      assertFalse(element1.isBlock());
      assertFalse(element1.equals((Object)element0));
      assertSame(document0, document1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotSame(element0, element1);
      assertSame(document1, document0);
      assertNotSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Bo", "Bo");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Bo", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Bo", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      document0.setSiblingIndex((-155254699));
      assertEquals("#document", document0.nodeName());
      assertEquals("Bo", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Bo", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals((-155254699), document0.siblingIndex());
      
      Document document1 = (Document)document0.toggleClass("Bo");
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertEquals("Bo", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Bo", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals((-155254699), document0.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Bo", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals((-155254699), document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Bo", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parse("Bo", "Bo");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Bo", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("Bo", document0.location());
      
      String string0 = document0.data();
      assertNotNull(string0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Bo", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("Bo", document0.location());
      assertEquals("", string0);
      
      Comment comment0 = new Comment("&~KGg$", "5FtY!W");
      assertNotNull(comment0);
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      
      document0.setParentNode(comment0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Bo", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("Bo", document0.location());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      
      // Undeclared exception!
      try { 
        document0.prepend("java.lang.string@0000000085 ))~|");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = "org.jsoup.select.Evaluator$Matches";
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Evaluator$Matches", "org.jsoup.select.Evaluator$Matches");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.select.Evaluator$Matches", document0.baseUri());
      assertEquals("org.jsoup.select.Evaluator$Matches", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Elements elements0 = document0.getElementsByAttribute("org.jsoup.select.Evaluator$Matches");
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.select.Evaluator$Matches", document0.baseUri());
      assertEquals("org.jsoup.select.Evaluator$Matches", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document document1 = (Document)document0.text("nfwb%pwsz");
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.select.Evaluator$Matches", document0.baseUri());
      assertEquals("org.jsoup.select.Evaluator$Matches", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$Matches", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("org.jsoup.select.Evaluator$Matches", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.select.Evaluator$Matches", document0.baseUri());
      assertEquals("org.jsoup.select.Evaluator$Matches", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertSame(document0, document1);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      List<Node> list0 = parser0.parseFragmentInput("nfwb%pwsz", document0, "org.jsoup.select.Evaluator$Matches");
      assertNotNull(list0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.select.Evaluator$Matches", document0.baseUri());
      assertEquals("org.jsoup.select.Evaluator$Matches", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertSame(document0, document1);
      
      document0.childNodes = list0;
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.select.Evaluator$Matches", document0.baseUri());
      assertEquals("org.jsoup.select.Evaluator$Matches", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(document0.childNodes.isEmpty());
      assertEquals(1, document0.childNodes.size());
      
      String string1 = "w";
      Elements elements1 = document1.getElementsMatchingText("w");
      assertNotNull(elements1);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.select.Evaluator$Matches", document0.baseUri());
      assertEquals("org.jsoup.select.Evaluator$Matches", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$Matches", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("org.jsoup.select.Evaluator$Matches", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertFalse(elements1.isEmpty());
      assertEquals(1, elements1.size());
      assertFalse(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(elements1, elements0);
      
      int int0 = document0.elementSiblingIndex();
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.select.Evaluator$Matches", document0.baseUri());
      assertEquals("org.jsoup.select.Evaluator$Matches", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertSame(document0, document1);
      assertEquals(0, int0);
      
      String string2 = "ybwQY1N7ZX.ic\\\"";
      Elements elements2 = document1.getElementsByAttributeValueContaining("ybwQY1N7ZX.ic\"", "ybwQY1N7ZX.ic\"");
      assertNotNull(elements2);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.select.Evaluator$Matches", document0.baseUri());
      assertEquals("org.jsoup.select.Evaluator$Matches", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$Matches", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("org.jsoup.select.Evaluator$Matches", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertFalse(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      
      Document document2 = (Document)document0.doClone(document1);
      assertNotNull(document2);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.select.Evaluator$Matches", document0.baseUri());
      assertEquals("org.jsoup.select.Evaluator$Matches", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$Matches", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("org.jsoup.select.Evaluator$Matches", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("org.jsoup.select.Evaluator$Matches", document2.baseUri());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("org.jsoup.select.Evaluator$Matches", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      String string3 = document1.baseUri();
      assertNotNull(string3);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.select.Evaluator$Matches", document0.baseUri());
      assertEquals("org.jsoup.select.Evaluator$Matches", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$Matches", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("org.jsoup.select.Evaluator$Matches", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertEquals("org.jsoup.select.Evaluator$Matches", string3);
      
      // Undeclared exception!
      try { 
        document1.appendText("org.jsoup.select.Evaluator$Matches");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Document.createShell(": ");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(": ", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(": ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(": ", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(": ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(": ", element0.baseUri());
      
      element0.siblingIndex = 58;
      assertEquals(1, document0.childNodeSize());
      assertEquals(": ", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(": ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(58, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(": ", element0.baseUri());
      
      Document document1 = Parser.parseBodyFragmentRelaxed(": ", "acii");
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("acii", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("acii", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      
      // Undeclared exception!
      try { 
        element0.appendTo(document1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 58, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("nfwbPWzo", "nfwbPWzo");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("nfwbPWzo", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("nfwbPWzo", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      Element element0 = document0.appendElement("nfwbPWzo");
      assertNotNull(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("nfwbPWzo", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("nfwbPWzo", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("nfwbpwzo", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("nfwbpwzo", element0.nodeName());
      assertEquals("nfwbPWzo", element0.baseUri());
      
      Element element1 = element0.prependChild(document0);
      assertNotNull(element1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("nfwbPWzo", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("nfwbPWzo", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("nfwbpwzo", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("nfwbpwzo", element0.nodeName());
      assertEquals("nfwbPWzo", element0.baseUri());
      assertEquals("nfwbpwzo", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("nfwbpwzo", element1.tagName());
      assertEquals("nfwbPWzo", element1.baseUri());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      document0.setParentNode(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("nfwbPWzo", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("nfwbPWzo", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("nfwbpwzo", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("nfwbpwzo", element0.nodeName());
      assertEquals("nfwbPWzo", element0.baseUri());
      assertSame(element0, element1);
      
      Element element2 = element0.previousElementSibling();
      assertNotNull(element2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("nfwbPWzo", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("nfwbPWzo", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("nfwbpwzo", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("nfwbpwzo", element0.nodeName());
      assertEquals("nfwbPWzo", element0.baseUri());
      assertEquals(2, element2.childNodeSize());
      assertEquals("html", element2.tagName());
      assertEquals(0, element2.siblingIndex());
      assertEquals("nfwbPWzo", element2.baseUri());
      assertTrue(element2.hasParent());
      assertTrue(element2.isBlock());
      assertEquals("html", element2.nodeName());
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertNotSame(element0, element2);
      assertSame(element0, element1);
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      
      Element element3 = element2.nextElementSibling();
      assertNotNull(element3);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("nfwbPWzo", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("nfwbPWzo", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("nfwbpwzo", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("nfwbpwzo", element0.nodeName());
      assertEquals("nfwbPWzo", element0.baseUri());
      assertEquals(2, element2.childNodeSize());
      assertEquals("html", element2.tagName());
      assertEquals(0, element2.siblingIndex());
      assertEquals("nfwbPWzo", element2.baseUri());
      assertTrue(element2.hasParent());
      assertTrue(element2.isBlock());
      assertEquals("html", element2.nodeName());
      assertEquals("nfwbPWzo", element3.baseUri());
      assertEquals("nfwbpwzo", element3.nodeName());
      assertFalse(element3.isBlock());
      assertEquals("nfwbpwzo", element3.tagName());
      assertEquals(1, element3.siblingIndex());
      assertEquals(0, element3.childNodeSize());
      assertTrue(element3.hasParent());
      assertFalse(element0.equals((Object)element2));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element3.equals((Object)element2));
      assertSame(element0, element3);
      assertNotSame(element0, element2);
      assertSame(element0, element1);
      assertNotSame(element2, element3);
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      assertNotSame(element3, element2);
      assertSame(element3, element0);
      assertSame(element3, element1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#", "#");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#", document0.location());
      assertEquals("#", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "#");
      assertNotNull(charBuffer0);
      assertEquals("#", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.limit());
      assertTrue(charBuffer0.isReadOnly());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, (-1853), document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Document document0 = Parser.parseBodyFragment("br", "br");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("br", document0.baseUri());
      assertEquals("br", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.appendElement("br");
      assertNotNull(element0);
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("br", document0.baseUri());
      assertEquals("br", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("br", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("br", element0.baseUri());
      
      element0.siblingIndex = (-1042);
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("br", document0.baseUri());
      assertEquals("br", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("br", element0.nodeName());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.tagName());
      assertEquals((-1042), element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("br", element0.baseUri());
      
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parse("$x", "$x");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("$x", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("$x", document0.location());
      assertFalse(document0.hasParent());
      
      document0.childNodes = null;
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("$x", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("$x", document0.location());
      assertFalse(document0.hasParent());
      
      List<Node> list0 = document0.ensureChildNodes();
      assertNull(list0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("$x", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("$x", document0.location());
      assertFalse(document0.hasParent());
      
      document0.setParentNode(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("$x", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("$x", document0.location());
      
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("$x");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Document document0 = Parser.parse("4PPNe", "4PPNe");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("4PPNe", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("4PPNe", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      TextNode textNode0 = TextNode.createFromEncoded("caption", "[M{");
      assertNotNull(textNode0);
      assertFalse(textNode0.hasParent());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      Document document1 = (Document)document0.toggleClass("caption");
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("4PPNe", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("4PPNe", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("4PPNe", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("4PPNe", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      document0.setParentNode(textNode0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("4PPNe", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("4PPNe", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(textNode0.hasParent());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertSame(document0, document1);
      
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Tag tag0 = Tag.valueOf("6h#%i*");
      assertNotNull(tag0);
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("6h#%i*", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("6h#%i*", tag0.toString());
      assertFalse(tag0.isBlock());
      
      CDataNode cDataNode0 = new CDataNode("9}k@[0a7.bpkata");
      assertNotNull(cDataNode0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      
      Attributes attributes1 = attributes0.put("M-oM}\"fbFm**", true);
      assertNotNull(attributes1);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Attributes attributes2 = attributes1.put("H?jrI", ".*C]+\"DZ2oJFV`5N~");
      assertNotNull(attributes2);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(3, attributes0.size());
      assertEquals(3, attributes1.size());
      assertEquals(3, attributes2.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      
      FormElement formElement0 = new FormElement(tag0, "java.lang.string@0000000095 xer", attributes2);
      assertNotNull(formElement0);
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("6h#%i*", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("6h#%i*", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(3, attributes0.size());
      assertEquals(3, attributes1.size());
      assertEquals(3, attributes2.size());
      assertFalse(formElement0.hasParent());
      assertEquals("6h#%i*", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("6h#%i*", formElement0.tagName());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      
      Node[] nodeArray0 = new Node[0];
      Element element0 = formElement0.insertChildren((-1), nodeArray0);
      assertNotNull(element0);
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("6h#%i*", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("6h#%i*", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(3, attributes0.size());
      assertEquals(3, attributes1.size());
      assertEquals(3, attributes2.size());
      assertFalse(formElement0.hasParent());
      assertEquals("6h#%i*", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("6h#%i*", formElement0.tagName());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("6h#%i*", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("6h#%i*", element0.nodeName());
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(formElement0, element0);
      assertSame(element0, formElement0);
      assertEquals(0, nodeArray0.length);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("k@XFthMtL%J(x}9cb", "k@XFthMtL%J(x}9cb");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("k@XFthMtL%J(x}9cb", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("k@XFthMtL%J(x}9cb", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">");
      assertFalse(boolean0);
      
      Elements elements0 = document0.getElementsByAttributeValueStarting("k@XFthMtL%J(x}9cb", "E}J&R5Y");
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals("k@XFthMtL%J(x}9cb", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("k@XFthMtL%J(x}9cb", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "k@XFthMtL%J(x}9cb");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      assertNotNull(document_OutputSettings1);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      assertNotNull(document_OutputSettings2);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings1.clone();
      assertNotNull(document_OutputSettings3);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings3.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      
      try { 
        document0.outerHtmlHead(pipedWriter0, (-2118), document_OutputSettings3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Document document0 = Parser.parse("t\"{4SKDU$i~CR", "t\"{4SKDU$i~CR");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("t\"{4SKDU$i~CR", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("t\"{4SKDU$i~CR", document0.location());
      
      List<Node> list0 = document0.childNodesCopy();
      assertNotNull(list0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("t\"{4SKDU$i~CR", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("t\"{4SKDU$i~CR", document0.location());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      document0.childNodes = list0;
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("t\"{4SKDU$i~CR", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("t\"{4SKDU$i~CR", document0.location());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(document0.childNodes.isEmpty());
      assertEquals(1, document0.childNodes.size());
      
      String string0 = document0.id();
      assertNotNull(string0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("t\"{4SKDU$i~CR", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("t\"{4SKDU$i~CR", document0.location());
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        document0.getAllElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("title", "title");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("title", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("title", document0.location());
      
      Document document1 = (Document)document0.prepend("title");
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("title", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("title", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("title", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("title", document1.location());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document1.getElementsByAttribute("title");
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("title", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("title", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("title", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("title", document1.location());
      assertFalse(document1.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Evaluator.AttributeWithValue evaluator_AttributeWithValue0 = new Evaluator.AttributeWithValue("title", "id");
      assertNotNull(evaluator_AttributeWithValue0);
      
      boolean boolean2 = evaluator_AttributeWithValue0.matches(document0, document1);
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("title", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("title", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("title", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("title", document1.location());
      assertFalse(document1.isBlock());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(boolean2);
      
      boolean boolean3 = document1.is((Evaluator) evaluator_AttributeWithValue0);
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("title", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("title", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("title", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("title", document1.location());
      assertFalse(document1.isBlock());
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(boolean3);
      
      boolean boolean4 = document0.hasAttr("title");
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("title", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("title", document0.location());
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertSame(document0, document1);
      assertFalse(boolean4);
      
      String string0 = document0.nodeName();
      assertNotNull(string0);
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("title", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("title", document0.location());
      assertSame(document0, document1);
      assertEquals("#document", string0);
      
      document0.nodelistChanged();
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("title", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("title", document0.location());
      assertSame(document0, document1);
      
      Document document2 = (Document)document0.html("jl4yp7.wfo3vwa");
      assertNotNull(document2);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("title", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("title", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("title", document2.location());
      assertEquals("title", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      document2.setSiblingIndex((-170244489));
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("title", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("title", document0.location());
      assertEquals((-170244489), document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals((-170244489), document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("title", document2.location());
      assertEquals("title", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Document document3 = (Document)document2.prependText("5D9]qu#8'B");
      assertNotNull(document3);
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("title", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("title", document0.location());
      assertEquals((-170244489), document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals((-170244489), document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("title", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals("title", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("title", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals((-170244489), document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("title", document3.location());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      
      Elements elements1 = document3.getElementsByIndexGreaterThan(4);
      assertNotNull(elements1);
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("title", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("title", document0.location());
      assertEquals((-170244489), document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals((-170244489), document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("title", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals("title", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("title", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals((-170244489), document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("title", document3.location());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertTrue(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertNotSame(elements1, elements0);
      
      List<Node> list0 = document3.siblingNodes();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("title", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("title", document0.location());
      assertEquals((-170244489), document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals((-170244489), document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("title", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals("title", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("title", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals((-170244489), document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("title", document3.location());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      
      Elements elements2 = document0.children();
      assertNotNull(elements2);
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("title", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("title", document0.location());
      assertEquals((-170244489), document0.siblingIndex());
      assertTrue(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      
      Pattern pattern0 = Pattern.compile("hph@o=", (-3368));
      assertNotNull(pattern0);
      assertEquals("hph@o=", pattern0.pattern());
      assertEquals((-3368), pattern0.flags());
      assertEquals("hph@o=", pattern0.toString());
      
      Elements elements3 = document1.getElementsMatchingText(pattern0);
      assertNotNull(elements3);
      assertEquals("hph@o=", pattern0.pattern());
      assertEquals((-3368), pattern0.flags());
      assertEquals("hph@o=", pattern0.toString());
      assertEquals(0, elements3.size());
      assertTrue(elements3.isEmpty());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("title", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("title", document0.location());
      assertEquals((-170244489), document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals((-170244489), document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertEquals("title", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("title", document1.location());
      assertFalse(document1.isBlock());
      assertTrue(elements3.equals((Object)elements2));
      assertTrue(elements3.equals((Object)elements0));
      assertTrue(elements3.equals((Object)elements1));
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      
      Elements elements4 = document0.getElementsMatchingText(".jkcJ8?");
      assertNotNull(elements4);
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("title", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("title", document0.location());
      assertEquals((-170244489), document0.siblingIndex());
      assertEquals(0, elements4.size());
      assertTrue(elements4.isEmpty());
      assertTrue(elements4.equals((Object)elements1));
      assertTrue(elements4.equals((Object)elements2));
      assertTrue(elements4.equals((Object)elements0));
      assertTrue(elements4.equals((Object)elements3));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(elements4, elements3);
      assertNotSame(elements4, elements0);
      assertNotSame(elements4, elements1);
      assertNotSame(elements4, elements2);
      
      Elements elements5 = document1.getElementsByAttributeValueNot("hph@o=", ":containsData(text) query must not be empty");
      assertNotNull(elements5);
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("title", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("title", document0.location());
      assertEquals((-170244489), document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals((-170244489), document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertEquals("title", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("title", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(elements5.isEmpty());
      assertEquals(1, elements5.size());
      assertFalse(elements5.equals((Object)elements3));
      assertFalse(elements5.equals((Object)elements4));
      assertFalse(elements5.equals((Object)elements1));
      assertFalse(elements5.equals((Object)elements2));
      assertFalse(elements5.equals((Object)elements0));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(elements5, elements3);
      assertNotSame(elements5, elements4);
      assertNotSame(elements5, elements1);
      assertNotSame(elements5, elements2);
      assertNotSame(elements5, elements0);
      
      String string1 = document2.html();
      assertNotNull(string1);
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("title", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("title", document0.location());
      assertEquals((-170244489), document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals((-170244489), document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("title", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals("title", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertFalse(string1.equals((Object)string0));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertEquals("5D9]qu#8'Bjl4yp7.wfo3vwa", string1);
      
      Element element0 = document1.prependElement("5D9]qu#8'Bjl4yp7.wfo3vwa");
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("title", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("title", document0.location());
      assertEquals((-170244489), document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals((-170244489), document1.siblingIndex());
      assertEquals("title", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("title", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("5d9]qu#8'bjl4yp7.wfo3vwa", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("5d9]qu#8'bjl4yp7.wfo3vwa", element0.tagName());
      assertEquals("title", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      
      Tag tag0 = document0.tag();
      assertNotNull(tag0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("title", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("title", document0.location());
      assertEquals((-170244489), document0.siblingIndex());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertEquals("#root", tag0.getName());
      assertFalse(tag0.isData());
      assertEquals("#root", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("o%+g7&!X*Ry~pX#:H", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("o%+g7&!X*Ry~pX#:H", tag0.toString());
      assertEquals("o%+g7&!X*Ry~pX#:H", tag0.getName());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attribute attribute0 = Attribute.createFromEncoded("Insert position out of bounds.", "o%+g7&!X*Ry~pX#:H");
      assertNotNull(attribute0);
      assertEquals("Insert position out of bounds.", attribute0.getKey());
      assertEquals("o%+g7&!X*Ry~pX#:H", attribute0.getValue());
      
      Attributes attributes1 = attributes0.put(attribute0);
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals("Insert position out of bounds.", attribute0.getKey());
      assertEquals("o%+g7&!X*Ry~pX#:H", attribute0.getValue());
      assertEquals(1, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Attributes attributes2 = attributes1.clone();
      assertNotNull(attributes2);
      assertEquals(1, attributes0.size());
      assertEquals("Insert position out of bounds.", attribute0.getKey());
      assertEquals("o%+g7&!X*Ry~pX#:H", attribute0.getValue());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      
      Attributes attributes3 = attributes2.put("o%+g7&!X*Ry~pX#:H", true);
      assertNotNull(attributes3);
      assertEquals(1, attributes0.size());
      assertEquals("Insert position out of bounds.", attribute0.getKey());
      assertEquals("o%+g7&!X*Ry~pX#:H", attribute0.getValue());
      assertEquals(1, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      assertNotSame(attributes3, attributes1);
      assertSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
      
      FormElement formElement0 = new FormElement(tag0, "o%+g7&!X*Ry~pX#:H", attributes3);
      assertNotNull(formElement0);
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("o%+g7&!X*Ry~pX#:H", tag0.toString());
      assertEquals("o%+g7&!X*Ry~pX#:H", tag0.getName());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertEquals(1, attributes0.size());
      assertEquals("Insert position out of bounds.", attribute0.getKey());
      assertEquals("o%+g7&!X*Ry~pX#:H", attribute0.getValue());
      assertEquals(1, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      assertEquals("o%+g7&!X*Ry~pX#:H", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals("o%+g7&!X*Ry~pX#:H", formElement0.nodeName());
      assertEquals("o%+g7&!X*Ry~pX#:H", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      
      Elements elements0 = formElement0.getElementsByAttributeStarting("Insert position out of bounds.");
      assertNotNull(elements0);
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("o%+g7&!X*Ry~pX#:H", tag0.toString());
      assertEquals("o%+g7&!X*Ry~pX#:H", tag0.getName());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertEquals(1, attributes0.size());
      assertEquals("Insert position out of bounds.", attribute0.getKey());
      assertEquals("o%+g7&!X*Ry~pX#:H", attribute0.getValue());
      assertEquals(1, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      assertEquals("o%+g7&!X*Ry~pX#:H", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals("o%+g7&!X*Ry~pX#:H", formElement0.nodeName());
      assertEquals("o%+g7&!X*Ry~pX#:H", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertNotSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      assertNotSame(attributes3, attributes1);
      assertSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000097", "java.lang.string@0000000097");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      CDataNode cDataNode0 = new CDataNode("java.lang.string@0000000097");
      assertNotNull(cDataNode0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      
      Node node0 = cDataNode0.shallowClone();
      assertNotNull(node0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertFalse(node0.hasParent());
      assertEquals("#cdata", node0.nodeName());
      assertEquals(0, node0.siblingIndex());
      assertFalse(node0.equals((Object)cDataNode0));
      assertNotSame(cDataNode0, node0);
      assertNotSame(node0, cDataNode0);
      
      document0.setParentNode(node0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertFalse(node0.hasParent());
      assertEquals("#cdata", node0.nodeName());
      assertEquals(0, node0.siblingIndex());
      assertFalse(cDataNode0.equals((Object)node0));
      assertFalse(node0.equals((Object)cDataNode0));
      assertNotSame(cDataNode0, node0);
      assertNotSame(node0, cDataNode0);
      
      Document document1 = (Document)document0.addClass("java.lang.string@0000000097");
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = document1.hasClass("java.lang.string@0000000097");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        document1.parent();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = new Document("nfwbsWzo");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("nfwbsWzo", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("nfwbsWzo", document0.location());
      
      Element element0 = document0.appendElement("nfwbsWzo");
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("nfwbsWzo", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("nfwbsWzo", document0.location());
      assertEquals("nfwbswzo", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("nfwbswzo", element0.tagName());
      assertEquals("nfwbsWzo", element0.baseUri());
      assertTrue(element0.hasParent());
      
      document0.childNodes = null;
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("nfwbsWzo", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("nfwbsWzo", document0.location());
      
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Document document0 = Parser.parse("t\"{4SKDU$i~CR", "t\"{4SKDU$i~CR");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("t\"{4SKDU$i~CR", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("t\"{4SKDU$i~CR", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      
      List<Node> list0 = document0.childNodesCopy();
      assertNotNull(list0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("t\"{4SKDU$i~CR", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("t\"{4SKDU$i~CR", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      List<Node> list1 = Parser.parseFragment("t\"{4SKDU$i~CR", (Element) document0, "t\"{4SKDU$i~CR");
      assertNotNull(list1);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("t\"{4SKDU$i~CR", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("t\"{4SKDU$i~CR", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertFalse(list1.equals((Object)list0));
      
      document0.childNodes = list1;
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("t\"{4SKDU$i~CR", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("t\"{4SKDU$i~CR", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertFalse(document0.childNodes.isEmpty());
      assertEquals(1, document0.childNodes.size());
      
      String string0 = document0.id();
      assertNotNull(string0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("t\"{4SKDU$i~CR", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("t\"{4SKDU$i~CR", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", string0);
      
      Elements elements0 = document0.getAllElements();
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("t\"{4SKDU$i~CR", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("t\"{4SKDU$i~CR", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      Set<String> set0 = document0.classNames();
      assertNotNull(set0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("t\"{4SKDU$i~CR", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("t\"{4SKDU$i~CR", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains(string0));
      
      // Undeclared exception!
      try { 
        document0.empty();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("jvva.lang.w4rig@0004000085", "jvva.lang.w4rig@0004000085");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      Elements elements0 = document0.getElementsContainingOwnText("org.jsoup.nodes.element$nodelist");
      assertNotNull(elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      List<DataNode> list0 = document0.dataNodes();
      assertNotNull(list0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "jvva.lang.w4rig@0004000085");
      assertNotNull(charBuffer0);
      assertEquals(26, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(26, charBuffer0.remaining());
      assertEquals(26, charBuffer0.capacity());
      assertEquals(26, charBuffer0.length());
      
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = "org.jsoup.select.CombiningEvaluator$Or";
      Tag tag0 = Tag.valueOf("org.jsoup.select.CombiningEvaluator$Or");
      assertNotNull(tag0);
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("org.jsoup.select.CombiningEvaluator$Or", tag0.toString());
      assertFalse(tag0.isData());
      assertEquals("org.jsoup.select.CombiningEvaluator$Or", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      
      String string1 = "fkRS_o{N\"-aADgzrzV";
      CDataNode cDataNode0 = new CDataNode("org.jsoup.select.CombiningEvaluator$Or");
      assertNotNull(cDataNode0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "fkRS_o{N\"-aADgzrzV", attributes0);
      assertNotNull(pseudoTextElement0);
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("org.jsoup.select.CombiningEvaluator$Or", tag0.toString());
      assertFalse(tag0.isData());
      assertEquals("org.jsoup.select.CombiningEvaluator$Or", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("org.jsoup.select.CombiningEvaluator$Or", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("org.jsoup.select.CombiningEvaluator$Or", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("fkRS_o{N\"-aADgzrzV", pseudoTextElement0.baseUri());
      
      cDataNode0.reparentChild(pseudoTextElement0);
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("org.jsoup.select.CombiningEvaluator$Or", tag0.toString());
      assertFalse(tag0.isData());
      assertEquals("org.jsoup.select.CombiningEvaluator$Or", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertTrue(pseudoTextElement0.hasParent());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("org.jsoup.select.CombiningEvaluator$Or", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("org.jsoup.select.CombiningEvaluator$Or", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("fkRS_o{N\"-aADgzrzV", pseudoTextElement0.baseUri());
      
      int int0 = 124;
      // Undeclared exception!
      try { 
        pseudoTextElement0.firstElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parse("vV", "vV");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("vV", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("vV", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      document0.childNodes = null;
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("vV", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("vV", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      
      document0.setParentNode(document0);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("vV", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("vV", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      
      // Undeclared exception!
      try { 
        document0.previousElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Document.createShell("jvva.lang.w4r:ng@000400u085");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      
      List<Node> list0 = document0.childNodesCopy();
      assertNotNull(list0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      document0.childNodes = list0;
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(1, document0.childNodes.size());
      assertFalse(document0.childNodes.isEmpty());
      
      // Undeclared exception!
      try { 
        document0.getElementsByIndexLessThan(6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("br", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("br", document0.location());
      assertEquals(0, document0.siblingIndex());
      
      Element element0 = document0.appendElement("br");
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("br", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("br", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("br", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("br", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.tagName());
      
      Element element1 = document0.shallowClone();
      assertNotNull(element1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("br", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("br", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("#root", element1.tagName());
      assertEquals("br", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("#root", element1.nodeName());
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element1, element0);
      
      Element element2 = document0.appendElement("br");
      assertNotNull(element2);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("br", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("br", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("br", element2.tagName());
      assertFalse(element2.isBlock());
      assertEquals("br", element2.baseUri());
      assertEquals("br", element2.nodeName());
      assertEquals(2, element2.siblingIndex());
      assertEquals(0, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      
      Elements elements0 = document0.getElementsContainingOwnText("{/ fpy*8O=]");
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("br", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("br", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      String string0 = element0.baseUri();
      assertNotNull(string0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("br", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("br", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("br", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("br", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.tagName());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element0.equals((Object)element2));
      assertNotSame(element0, element1);
      assertNotSame(element0, element2);
      assertEquals("br", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = new Document("xW");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xW", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("xW", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      
      DocumentType documentType0 = new DocumentType("q1F8'}/@V</E", "xW", "q1F8'}/@V</E", "Pattern syntax error:");
      assertNotNull(documentType0);
      assertFalse(documentType0.hasParent());
      assertEquals("#doctype", documentType0.nodeName());
      assertEquals(0, documentType0.siblingIndex());
      
      document0.nodelistChanged();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xW", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("xW", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      
      document0.setParentNode(documentType0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xW", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("xW", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(documentType0.hasParent());
      assertEquals("#doctype", documentType0.nodeName());
      assertEquals(0, documentType0.siblingIndex());
      
      boolean boolean0 = document0.hasClass("OlL[`;\"]<Xx9q6_*pdM");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xW", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("xW", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        document0.nextElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("label", "java.lang.string@0000000085");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.addClass("0");
      assertNotNull(document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = document0.prependElement("xW");
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(element0.isBlock());
      assertEquals("xw", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("xw", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertSame(document0, document1);
      
      Document document2 = (Document)document0.addClass("java.lang.string@0000000085 _{:k .p)g(ugx5d;k");
      assertNotNull(document2);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      boolean boolean0 = document2.hasClass("_{:k");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = new Document("XM] )$W");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("XM] )$W", document0.location());
      assertEquals("XM] )$W", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      Comment comment0 = new Comment(" > ");
      assertNotNull(comment0);
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      
      document0.setParentNode(comment0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("XM] )$W", document0.location());
      assertEquals("XM] )$W", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("br", document0.baseUri());
      assertEquals("br", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.appendElement("br");
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals("br", document0.baseUri());
      assertEquals("br", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.tagName());
      assertEquals("br", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("br", element0.nodeName());
      
      String string0 = document0.html();
      assertNotNull(string0);
      assertFalse(document0.hasParent());
      assertEquals("br", document0.baseUri());
      assertEquals("br", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("<html>\n <head></head>\n <body>\n  br\n </body>\n</html>\n<br>", string0);
      
      boolean boolean0 = document0.hasText();
      assertFalse(document0.hasParent());
      assertEquals("br", document0.baseUri());
      assertEquals("br", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(boolean0);
      
      Tag tag0 = element0.tag();
      assertNotNull(tag0);
      assertFalse(document0.hasParent());
      assertEquals("br", document0.baseUri());
      assertEquals("br", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.tagName());
      assertEquals("br", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("br", element0.nodeName());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertEquals("br", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("br", tag0.toString());
      assertTrue(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ascii", "ascii");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.location());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      
      Element element0 = document0.createElement("ascii");
      assertNotNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.location());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("ascii", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("ascii", element0.nodeName());
      assertEquals("ascii", element0.baseUri());
      
      element0.childNodes = null;
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.location());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("ascii", element0.tagName());
      assertEquals("ascii", element0.nodeName());
      assertEquals("ascii", element0.baseUri());
      
      Node node0 = document0.previousSibling();
      assertNull(node0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.location());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      
      document0.setParentNode(element0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.location());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("ascii", element0.tagName());
      assertEquals("ascii", element0.nodeName());
      assertEquals("ascii", element0.baseUri());
      
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText(" T`T");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parse(" Ap", " Ap");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(" Ap", document0.baseUri());
      assertEquals(" Ap", document0.location());
      assertEquals(0, document0.siblingIndex());
      
      DataNode dataNode0 = new DataNode(" Ap");
      assertNotNull(dataNode0);
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      assertFalse(dataNode0.hasParent());
      
      document0.setParentNode(dataNode0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(" Ap", document0.baseUri());
      assertEquals(" Ap", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      assertFalse(dataNode0.hasParent());
      
      Document document1 = new Document(" Ap");
      assertNotNull(document1);
      assertEquals(" Ap", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(" Ap", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.equals((Object)document0));
      
      // Undeclared exception!
      try { 
        document0.html(" Ap");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/8V]/`Jq]I/", "/8V]/`Jq]I/");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Comment comment0 = new Comment("U&k~m#^RM3", "textarea");
      assertNotNull(comment0);
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      
      document0.setParentNode(comment0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      
      int int0 = 0;
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) comment0;
      // Undeclared exception!
      try { 
        document0.getElementsContainingText("sup");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000085", "java.lang.string@0000000085");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      
      Document document1 = (Document)document0.addClass(" Ap");
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = document0.prependElement("java.lang.string@0000000085");
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertSame(document0, document1);
      
      Document document2 = (Document)document0.addClass("_{:K .p)g(ugx5D;K");
      assertNotNull(document2);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      boolean boolean0 = document2.hasClass("Data");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parse(" Ap", " Ap");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" Ap", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(" Ap", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      
      Elements elements0 = document0.getElementsByIndexEquals(4462);
      assertNotNull(elements0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" Ap", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(" Ap", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      Elements elements1 = document0.nextElementSiblings();
      assertNotNull(elements1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" Ap", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(" Ap", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      
      Element element0 = document0.selectFirst("head");
      assertNotNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" Ap", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(" Ap", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(" Ap", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("inheadnoscript", "P0)Rn");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("P0)Rn", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("P0)Rn", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      assertNotNull(document_OutputSettings1);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      CharsetEncoder charsetEncoder0 = document_OutputSettings1.encoder();
      assertNotNull(charsetEncoder0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.clone();
      assertNotNull(document_OutputSettings2);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      assertNotNull(document_OutputSettings3);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings3.outline());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      
      Document document1 = document0.outputSettings(document_OutputSettings3);
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("P0)Rn", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("P0)Rn", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings3.outline());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("P0)Rn", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("P0)Rn", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document1, document0);
      
      Document document2 = document1.ownerDocument();
      assertNotNull(document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("P0)Rn", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("P0)Rn", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings3.outline());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("P0)Rn", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("P0)Rn", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("P0)Rn", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("P0)Rn", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      List<Node> list0 = document2.ensureChildNodes();
      assertNotNull(list0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("P0)Rn", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("P0)Rn", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings3.outline());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("P0)Rn", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("P0)Rn", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("P0)Rn", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("P0)Rn", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      List<DataNode> list1 = document2.dataNodes();
      assertNotNull(list1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("P0)Rn", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("P0)Rn", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings3.outline());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("P0)Rn", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("P0)Rn", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("P0)Rn", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("P0)Rn", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      String string0 = document2.html();
      assertNotNull(string0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("P0)Rn", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("P0)Rn", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings3.outline());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("P0)Rn", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("P0)Rn", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("P0)Rn", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("P0)Rn", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("<html><head></head><body>inheadnoscript</body></html>", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = parser0.parseInput("h&;34}LT", "tM8~");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertEquals("tM8~", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tM8~", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.createElement("h&;34}LT");
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertEquals("tM8~", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tM8~", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("h&;34}LT", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("tM8~", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("h&;34}LT", element0.nodeName());
      
      document0.setParentNode(element0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertEquals("tM8~", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tM8~", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(element0.isBlock());
      assertEquals("h&;34}LT", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("tM8~", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("h&;34}LT", element0.nodeName());
      
      String string0 = "jav.langstring@0000000085";
      Document document1 = (Document)document0.append("jav.langstring@0000000085");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertEquals("tM8~", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals("tM8~", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tM8~", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("tM8~", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      // Undeclared exception!
      try { 
        document1.before((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("C", "C");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("C", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("C", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      document0.childNodes = null;
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("C", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("C", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("</", "iemcltvl>a<mbou)s");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("BfwbsWro", parseSettings0);
      assertNotNull(tag0);
      assertEquals("BfwbsWro", tag0.toString());
      assertEquals("BfwbsWro", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      
      Element element0 = new Element(tag0, "BfwbsWro");
      assertNotNull(element0);
      assertEquals("BfwbsWro", tag0.toString());
      assertEquals("BfwbsWro", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertEquals("BfwbsWro", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("BfwbsWro", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("BfwbsWro", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      
      Element element1 = element0.attr("BfwbsWro", true);
      assertNotNull(element1);
      assertEquals("BfwbsWro", tag0.toString());
      assertEquals("BfwbsWro", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertEquals("BfwbsWro", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("BfwbsWro", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("BfwbsWro", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("BfwbsWro", element1.baseUri());
      assertEquals("BfwbsWro", element1.nodeName());
      assertEquals("BfwbsWro", element1.tagName());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      List<TextNode> list0 = element0.textNodes();
      assertNotNull(list0);
      assertEquals("BfwbsWro", tag0.toString());
      assertEquals("BfwbsWro", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertEquals("BfwbsWro", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("BfwbsWro", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("BfwbsWro", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertSame(element0, element1);
      
      Elements elements0 = element1.getElementsByTag("BfwbsWro");
      assertNotNull(elements0);
      assertEquals("BfwbsWro", tag0.toString());
      assertEquals("BfwbsWro", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertEquals("BfwbsWro", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("BfwbsWro", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("BfwbsWro", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("BfwbsWro", element1.baseUri());
      assertEquals("BfwbsWro", element1.nodeName());
      assertEquals("BfwbsWro", element1.tagName());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Elements elements1 = element1.getElementsByAttribute("BfwbsWro");
      assertNotNull(elements1);
      assertEquals("BfwbsWro", tag0.toString());
      assertEquals("BfwbsWro", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertEquals("BfwbsWro", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("BfwbsWro", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("BfwbsWro", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("BfwbsWro", element1.baseUri());
      assertEquals("BfwbsWro", element1.nodeName());
      assertEquals("BfwbsWro", element1.tagName());
      assertFalse(elements1.isEmpty());
      assertEquals(1, elements1.size());
      assertTrue(elements1.equals((Object)elements0));
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(elements1, elements0);
      
      // Undeclared exception!
      try { 
        element0.getElementsByTag((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("wbW", "wbW");
      assertNotNull(document0);
      assertEquals("wbW", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("wbW", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.appendElement("org.jsoup.parser.Token$TokenType");
      assertNotNull(element0);
      assertEquals("wbW", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("wbW", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("org.jsoup.parser.token$tokentype", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("wbW", element0.baseUri());
      assertEquals("org.jsoup.parser.token$tokentype", element0.tagName());
      
      element0.siblingIndex = (-1591);
      assertEquals("wbW", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("wbW", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("org.jsoup.parser.token$tokentype", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("wbW", element0.baseUri());
      assertEquals("org.jsoup.parser.token$tokentype", element0.tagName());
      assertEquals((-1591), element0.siblingIndex());
      
      // Undeclared exception!
      try { 
        element0.getElementsMatchingOwnText("dI%mp%1|UC@K|G1.;m5");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ascii", "ascii");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.createElement("ascii");
      assertNotNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("ascii", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("ascii", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      
      document0.setParentNode(element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("ascii", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("ascii", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      
      Document document1 = (Document)document0.append("ascii");
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.before("ascii");
      assertNotNull(document2);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("ascii", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("ascii", document2.location());
      assertEquals("#root", document2.tagName());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{5\"cs*-", "{5\"cs*-");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("{5\"cs*-", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("{5\"cs*-", document0.baseUri());
      assertEquals("#root", document0.tagName());
      
      Document document1 = (Document)document0.addClass("{5\"cs*-");
      assertNotNull(document1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("{5\"cs*-", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("{5\"cs*-", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("{5\"cs*-", document1.location());
      assertEquals("{5\"cs*-", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = document0.prependElement("{5\"cs*-");
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("{5\"cs*-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("{5\"cs*-", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("{5\"cs*-", element0.nodeName());
      assertEquals("{5\"cs*-", element0.baseUri());
      assertEquals("{5\"cs*-", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertSame(document0, document1);
      
      Element element1 = element0.firstElementSibling();
      assertNotNull(element1);
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("{5\"cs*-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("{5\"cs*-", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("{5\"cs*-", element0.nodeName());
      assertEquals("{5\"cs*-", element0.baseUri());
      assertEquals("{5\"cs*-", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("{5\"cs*-", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("{5\"cs*-", element1.baseUri());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("{5\"cs*-", element1.tagName());
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Document document2 = (Document)document0.addClass("{5\"cs*-");
      assertNotNull(document2);
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("{5\"cs*-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("{5\"cs*-", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("{5\"cs*-", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("{5\"cs*-", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      boolean boolean0 = document0.hasClass("AttributeVapuL_doubleQuoted");
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("{5\"cs*-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("{5\"cs*-", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertFalse(boolean0);
      
      Elements elements0 = document1.getElementsMatchingText("async");
      assertNotNull(elements0);
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("{5\"cs*-", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("{5\"cs*-", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("{5\"cs*-", document1.location());
      assertEquals("{5\"cs*-", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("(@hubycZdnZ", "(@hubycZdnZ");
      assertNotNull(document0);
      assertEquals("(@hubycZdnZ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("(@hubycZdnZ", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      DocumentType documentType0 = new DocumentType("n4q%p-th][$u5ke", "(@hubycZdnZ", "zrK", "(@hubycZdnZ", "n4q%p-th][$u5ke");
      assertNotNull(documentType0);
      assertFalse(documentType0.hasParent());
      assertEquals(0, documentType0.siblingIndex());
      assertEquals("#doctype", documentType0.nodeName());
      
      Elements elements0 = document0.getElementsContainingOwnText("(@hubycZdnZ");
      assertNotNull(elements0);
      assertEquals("(@hubycZdnZ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("(@hubycZdnZ", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      char[] charArray0 = new char[6];
      charArray0[0] = '@';
      charArray0[1] = '3';
      charArray0[2] = '#';
      charArray0[3] = '<';
      charArray0[4] = '>';
      charArray0[5] = '9';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertEquals("@3#<>9", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(6, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(6, charBuffer0.limit());
      assertEquals(6, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(6, charBuffer0.capacity());
      assertArrayEquals(new char[] {'@', '3', '#', '<', '>', '9'}, charArray0);
      assertEquals(6, charArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte)42;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)15, (byte)25, (byte)92, (byte) (-83), (byte)58, (byte)42}, byteArray0);
      assertFalse(boolean0);
      assertEquals(6, byteArray0.length);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      assertNotNull(document_OutputSettings1);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      assertNotNull(document_OutputSettings2);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.indentAmount(64);
      assertNotNull(document_OutputSettings3);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(64, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(64, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.syntax(document_OutputSettings_Syntax0);
      assertNotNull(document_OutputSettings4);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(64, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(64, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(64, document_OutputSettings4.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertFalse(document_OutputSettings4.outline());
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 64, document_OutputSettings4);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = "{5\"cs\\*-";
      Document document0 = Document.createShell("<r");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("<r", document0.location());
      assertEquals("<r", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.settings((ParseSettings) null);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Parser parser2 = parser1.setTrackErrors(46);
      assertNotNull(parser2);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertTrue(parser2.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      
      Document document1 = document0.parser(parser2);
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("<r", document0.location());
      assertEquals("<r", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertTrue(parser2.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("<r", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("<r", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      assertSame(document1, document0);
      
      Document document2 = document1.normalise();
      assertNotNull(document2);
      assertEquals(1, document0.childNodeSize());
      assertEquals("<r", document0.location());
      assertEquals("<r", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertTrue(parser2.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("<r", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("<r", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("<r", document2.location());
      assertEquals("<r", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      // Undeclared exception!
      try { 
        document2.prependElement("<r");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = "rscii";
      Document document0 = Parser.parseBodyFragmentRelaxed("nohref", "rscii");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("rscii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("rscii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ltQtV;f2", true);
      assertNotNull(mockFileOutputStream0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      assertNotNull(filterOutputStream0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      
      CharsetEncoder charsetEncoder0 = document_OutputSettings0.prepareEncoder();
      assertNotNull(charsetEncoder0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(filterOutputStream0, charsetEncoder0);
      assertNotNull(outputStreamWriter0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStreamWriter0, false);
      assertNotNull(mockPrintWriter0);
      
      document0.outerHtml((Appendable) mockPrintWriter0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("rscii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("rscii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      Document.OutputSettings document_OutputSettings1 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings1);
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      assertNotNull(document_OutputSettings2);
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings1.prettyPrint(true);
      assertNotNull(document_OutputSettings3);
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.outline());
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.outline(false);
      assertNotNull(document_OutputSettings4);
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.outline());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertFalse(document_OutputSettings4.outline());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      
      try { 
        document0.outerHtmlTail(pipedWriter0, (-910), document_OutputSettings4);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("BfwbsWLro", "BfwbsWLro");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("BfwbsWLro", document0.baseUri());
      assertEquals("BfwbsWLro", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("BfwbsWLro", document0.baseUri());
      assertEquals("BfwbsWLro", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("BfwbsWLro", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      
      Element element1 = element0.wrap("BfwbsWLro");
      assertNotNull(element1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("BfwbsWLro", document0.baseUri());
      assertEquals("BfwbsWLro", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertEquals("BfwbsWLro", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("BfwbsWLro", element1.baseUri());
      assertEquals("body", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      String string0 = element0.cssSelector();
      assertNotNull(string0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("BfwbsWLro", document0.baseUri());
      assertEquals("BfwbsWLro", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertEquals("BfwbsWLro", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertSame(element0, element1);
      assertEquals("html > head:nth-child(2) > body:nth-child(1)", string0);
      
      Document document1 = (Document)document0.doClone(element0);
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("BfwbsWLro", document0.baseUri());
      assertEquals("BfwbsWLro", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertEquals("BfwbsWLro", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("BfwbsWLro", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("BfwbsWLro", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertSame(element0, element1);
      assertNotSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag cannot be self closing; not a void tag", "{5\"cs*-");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("{5\"cs*-", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("{5\"cs*-", document0.baseUri());
      assertEquals("#root", document0.tagName());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains("Tag cannot be self closing; not a void tag"));
      
      boolean boolean0 = linkedHashSet0.add((String) null);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains("Tag cannot be self closing; not a void tag"));
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parse("MGn' r*RJILNT|9", "B^`ZZq-p9L&M5\n7T");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("B^`ZZq-p9L&M5\n7T", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("B^`ZZq-p9L&M5\n7T", document0.location());
      assertEquals(0, document0.siblingIndex());
      
      String string0 = document0.toString();
      assertNotNull(string0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("B^`ZZq-p9L&M5\n7T", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("B^`ZZq-p9L&M5\n7T", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("<html>\n <head></head>\n <body>\n  MGn' r*RJILNT|9\n </body>\n</html>", string0);
      
      List<Node> list0 = document0.ensureChildNodes();
      assertNotNull(list0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("B^`ZZq-p9L&M5\n7T", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("B^`ZZq-p9L&M5\n7T", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      String string1 = document0.className();
      assertNotNull(string1);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("B^`ZZq-p9L&M5\n7T", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("B^`ZZq-p9L&M5\n7T", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Document document1 = Parser.parseBodyFragment("CA1 F{9(C", "<html>\n <head></head>\n <body>\n  MGn' r*RJILNT|9\n </body>\n</html>");
      assertNotNull(document1);
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("<html>\n <head></head>\n <body>\n  MGn' r*RJILNT|9\n </body>\n</html>", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("<html>\n <head></head>\n <body>\n  MGn' r*RJILNT|9\n </body>\n</html>", document1.location());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      assertNotNull(document2);
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("<html>\n <head></head>\n <body>\n  MGn' r*RJILNT|9\n </body>\n</html>", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("<html>\n <head></head>\n <body>\n  MGn' r*RJILNT|9\n </body>\n</html>", document1.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("<html>\n <head></head>\n <body>\n  MGn' r*RJILNT|9\n </body>\n</html>", document2.location());
      assertEquals("<html>\n <head></head>\n <body>\n  MGn' r*RJILNT|9\n </body>\n</html>", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document1;
      document0.addChildren(nodeArray0);
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("B^`ZZq-p9L&M5\n7T", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("B^`ZZq-p9L&M5\n7T", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertEquals(1, nodeArray0.length);
      
      Document document3 = (Document)document0.appendTo(document2);
      assertNotNull(document3);
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("B^`ZZq-p9L&M5\n7T", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("B^`ZZq-p9L&M5\n7T", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.siblingIndex());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("<html>\n <head></head>\n <body>\n  MGn' r*RJILNT|9\n </body>\n</html>", document1.baseUri());
      assertEquals("<html>\n <head></head>\n <body>\n  MGn' r*RJILNT|9\n </body>\n</html>", document1.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("<html>\n <head></head>\n <body>\n  MGn' r*RJILNT|9\n </body>\n</html>", document2.location());
      assertEquals("<html>\n <head></head>\n <body>\n  MGn' r*RJILNT|9\n </body>\n</html>", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertEquals("B^`ZZq-p9L&M5\n7T", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(2, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("B^`ZZq-p9L&M5\n7T", document3.baseUri());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document3, document1);
      assertSame(document3, document0);
      assertNotSame(document3, document2);
      
      Document document4 = (Document)document3.parent();
      assertNotNull(document4);
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("B^`ZZq-p9L&M5\n7T", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("B^`ZZq-p9L&M5\n7T", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.siblingIndex());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("<html>\n <head></head>\n <body>\n  MGn' r*RJILNT|9\n </body>\n</html>", document1.baseUri());
      assertEquals("<html>\n <head></head>\n <body>\n  MGn' r*RJILNT|9\n </body>\n</html>", document1.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("<html>\n <head></head>\n <body>\n  MGn' r*RJILNT|9\n </body>\n</html>", document2.location());
      assertEquals("<html>\n <head></head>\n <body>\n  MGn' r*RJILNT|9\n </body>\n</html>", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertEquals("B^`ZZq-p9L&M5\n7T", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(2, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("B^`ZZq-p9L&M5\n7T", document3.baseUri());
      assertEquals("<html>\n <head></head>\n <body>\n  MGn' r*RJILNT|9\n </body>\n</html>", document4.location());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.isBlock());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.quirks, document4.quirksMode());
      assertEquals(1, document4.siblingIndex());
      assertEquals("<html>\n <head></head>\n <body>\n  MGn' r*RJILNT|9\n </body>\n</html>", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(document2, document3);
      assertNotSame(document3, document4);
      assertNotSame(document3, document1);
      assertSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document4, document3);
      assertSame(document4, document2);
      assertNotSame(document4, document0);
      assertSame(document4, document1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag cannot be self closing; not a void tag", "{5\"cs*-");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("{5\"cs*-", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("{5\"cs*-", document0.location());
      
      Document document1 = (Document)document0.addClass("A");
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("{5\"cs*-", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("{5\"cs*-", document0.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("{5\"cs*-", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("{5\"cs*-", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = new Document("A");
      assertNotNull(document2);
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("A", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertEquals("A", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = document0.hasClass("AttributeVapuL_doubleQuoted");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("{5\"cs*-", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("{5\"cs*-", document0.location());
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" Ap", " Ap");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" Ap", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(" Ap", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = (Document)document0.addClass(" Ap");
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" Ap", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(" Ap", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(" Ap", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(" Ap", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      List<Node> list0 = document1.childNodes();
      assertNotNull(list0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" Ap", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(" Ap", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(" Ap", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(" Ap", document1.location());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.addClass(" Ap");
      assertNotNull(document2);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" Ap", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(" Ap", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(" Ap", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(" Ap", document2.baseUri());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      boolean boolean0 = document1.hasClass(" Ap");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" Ap", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(" Ap", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(" Ap", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(" Ap", document1.location());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Document document0 = Document.createShell("|g#qN,.");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("|g#qN,.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("|g#qN,.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.appendElement("textarea");
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("|g#qN,.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("|g#qN,.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("textarea", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("textarea", element0.tagName());
      assertEquals("|g#qN,.", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      
      Element element1 = element0.val("2sa+g{$r<@iiyoodq");
      assertNotNull(element1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("|g#qN,.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("|g#qN,.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("textarea", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("textarea", element0.tagName());
      assertEquals("|g#qN,.", element0.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("textarea", element1.nodeName());
      assertEquals("textarea", element1.tagName());
      assertEquals("|g#qN,.", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      String string0 = element0.val();
      assertNotNull(string0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("|g#qN,.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("|g#qN,.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("textarea", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("textarea", element0.tagName());
      assertEquals("|g#qN,.", element0.baseUri());
      assertSame(element0, element1);
      assertEquals("2sa+g{$r<@iiyoodq", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":jd<!tojonjA:$< T", "3{,TuT?");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("3{,TuT?", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("3{,TuT?", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Element element0 = document0.appendElement("ascii");
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("3{,TuT?", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("3{,TuT?", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", element0.tagName());
      assertEquals("ascii", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("3{,TuT?", element0.baseUri());
      
      Elements elements0 = document0.getElementsContainingOwnText(":jd<!tojonjA:$< T");
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("3{,TuT?", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("3{,TuT?", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      Element element1 = element0.previousElementSibling();
      assertNotNull(element1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("3{,TuT?", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("3{,TuT?", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", element0.tagName());
      assertEquals("ascii", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("3{,TuT?", element0.baseUri());
      assertEquals(2, element1.childNodeSize());
      assertEquals("3{,TuT?", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals("html", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("html", element1.tagName());
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      Element element2 = element0.empty();
      assertNotNull(element2);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("3{,TuT?", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("3{,TuT?", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", element0.tagName());
      assertEquals("ascii", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("3{,TuT?", element0.baseUri());
      assertEquals("ascii", element2.tagName());
      assertEquals("ascii", element2.nodeName());
      assertEquals(1, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.childNodeSize());
      assertFalse(element2.isBlock());
      assertEquals("3{,TuT?", element2.baseUri());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertSame(element2, element0);
      assertNotSame(element2, element1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Document.createShell("BXwbWro");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("BXwbWro", document0.location());
      assertEquals("BXwbWro", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      
      CDataNode cDataNode0 = new CDataNode("BXwbWro");
      assertNotNull(cDataNode0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      
      Node node0 = cDataNode0.clone();
      assertNotNull(node0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", node0.nodeName());
      assertEquals(0, node0.siblingIndex());
      assertFalse(node0.hasParent());
      assertFalse(node0.equals((Object)cDataNode0));
      assertNotSame(cDataNode0, node0);
      assertNotSame(node0, cDataNode0);
      
      document0.setParentNode(node0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("BXwbWro", document0.location());
      assertEquals("BXwbWro", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", node0.nodeName());
      assertEquals(0, node0.siblingIndex());
      assertFalse(node0.hasParent());
      assertFalse(cDataNode0.equals((Object)node0));
      assertFalse(node0.equals((Object)cDataNode0));
      assertNotSame(cDataNode0, node0);
      assertNotSame(node0, cDataNode0);
      
      Elements elements0 = document0.getElementsContainingOwnText("BXwbWro");
      assertNotNull(elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("BXwbWro", document0.location());
      assertEquals("BXwbWro", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      // Undeclared exception!
      try { 
        document0.wrap("BXwbWro");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Document document0 = Parser.parse("t=WRS/lZZ", "t=WRS/lZZ");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("t=WRS/lZZ", document0.location());
      assertEquals("t=WRS/lZZ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.appendElement("br");
      assertNotNull(element0);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("t=WRS/lZZ", document0.location());
      assertEquals("t=WRS/lZZ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("t=WRS/lZZ", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.nodeName());
      assertEquals("br", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      
      MockFile mockFile0 = new MockFile("bxwbswro");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      assertNotNull(document_OutputSettings1);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      int int0 = document0.elementSiblingIndex();
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("t=WRS/lZZ", document0.location());
      assertEquals("t=WRS/lZZ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, int0);
      
      String string0 = document0.html();
      assertNotNull(string0);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("t=WRS/lZZ", document0.location());
      assertEquals("t=WRS/lZZ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("<html>\n <head></head>\n <body>\n  t=WRS/lZZ\n </body>\n</html>\n<br>", string0);
      
      boolean boolean1 = document0.hasText();
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("t=WRS/lZZ", document0.location());
      assertEquals("t=WRS/lZZ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Document document1 = (Document)document0.val("br");
      assertNotNull(document1);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("t=WRS/lZZ", document0.location());
      assertEquals("t=WRS/lZZ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("t=WRS/lZZ", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("t=WRS/lZZ", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element1 = document1.child(0);
      assertNotNull(element1);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("t=WRS/lZZ", document0.location());
      assertEquals("t=WRS/lZZ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("t=WRS/lZZ", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("t=WRS/lZZ", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("t=WRS/lZZ", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("html", element1.tagName());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("html", element1.nodeName());
      assertFalse(element1.equals((Object)element0));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("An", "An");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("An", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("An", document0.location());
      
      Element element0 = document0.appendElement("BfwbsWro");
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("An", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("An", document0.location());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("bfwbswro", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("An", element0.baseUri());
      assertEquals("bfwbswro", element0.tagName());
      
      Element element1 = element0.val("BfwbsWro");
      assertNotNull(element1);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("An", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("An", document0.location());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("bfwbswro", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("An", element0.baseUri());
      assertEquals("bfwbswro", element0.tagName());
      assertEquals("bfwbswro", element1.tagName());
      assertEquals("An", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("bfwbswro", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      String string0 = element0.val();
      assertNotNull(string0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("An", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("An", document0.location());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("bfwbswro", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("An", element0.baseUri());
      assertEquals("bfwbswro", element0.tagName());
      assertSame(element0, element1);
      assertEquals("BfwbsWro", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Parser.parse("=s)$o", "=s)$o");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("=s)$o", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("=s)$o", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      assertNotNull(document_OutputSettings1);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      assertNotNull(document_OutputSettings2);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings3 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings3);
      assertTrue(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.escapeMode(entities_EscapeMode0);
      assertNotNull(document_OutputSettings4);
      assertTrue(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertFalse(document_OutputSettings4.outline());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("=s)$o", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("=s)$o", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("=s)$o", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("=s)$o", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Charset charset0 = document1.charset();
      assertNotNull(charset0);
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("=s)$o", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("=s)$o", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("=s)$o", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("=s)$o", document1.baseUri());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document.OutputSettings document_OutputSettings5 = document_OutputSettings0.charset(charset0);
      assertNotNull(document_OutputSettings5);
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("=s)$o", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("=s)$o", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("=s)$o", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("=s)$o", document1.baseUri());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings5.escapeMode());
      assertFalse(document_OutputSettings5.outline());
      assertFalse(document_OutputSettings5.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings5.syntax());
      assertEquals(1, document_OutputSettings5.indentAmount());
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings3));
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings5);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document1, document0);
      assertSame(document_OutputSettings5, document_OutputSettings0);
      assertSame(document_OutputSettings5, document_OutputSettings1);
      assertSame(document_OutputSettings5, document_OutputSettings2);
      assertNotSame(document_OutputSettings5, document_OutputSettings4);
      assertNotSame(document_OutputSettings5, document_OutputSettings3);
      
      Document.OutputSettings document_OutputSettings6 = document_OutputSettings0.clone();
      assertNotNull(document_OutputSettings6);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings6.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings6.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings6.escapeMode());
      assertEquals(1, document_OutputSettings6.indentAmount());
      assertFalse(document_OutputSettings6.prettyPrint());
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings6.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings6.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings6.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings6.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings6.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings6.equals((Object)document_OutputSettings5));
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings5);
      assertNotSame(document_OutputSettings0, document_OutputSettings6);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertNotSame(document_OutputSettings6, document_OutputSettings1);
      assertNotSame(document_OutputSettings6, document_OutputSettings0);
      assertNotSame(document_OutputSettings6, document_OutputSettings2);
      assertNotSame(document_OutputSettings6, document_OutputSettings3);
      assertNotSame(document_OutputSettings6, document_OutputSettings4);
      assertNotSame(document_OutputSettings6, document_OutputSettings5);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);
      assertNotNull(mockPrintWriter0);
      
      document1.outerHtmlHead(mockPrintWriter0, (-1840955353), document_OutputSettings5);
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("=s)$o", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("=s)$o", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("=s)$o", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("=s)$o", document1.baseUri());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings5.escapeMode());
      assertFalse(document_OutputSettings5.outline());
      assertFalse(document_OutputSettings5.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings5.syntax());
      assertEquals(1, document_OutputSettings5.indentAmount());
      assertEquals(7, charArrayWriter0.size());
      assertEquals("<#root>", charArrayWriter0.toString());
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings6));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings6));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings3));
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings5);
      assertNotSame(document_OutputSettings0, document_OutputSettings6);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document1, document0);
      assertSame(document_OutputSettings5, document_OutputSettings0);
      assertNotSame(document_OutputSettings5, document_OutputSettings6);
      assertSame(document_OutputSettings5, document_OutputSettings1);
      assertSame(document_OutputSettings5, document_OutputSettings2);
      assertNotSame(document_OutputSettings5, document_OutputSettings4);
      assertNotSame(document_OutputSettings5, document_OutputSettings3);
      
      String string0 = Node.EmptyString;
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-77);
      byteArray0[6] = (byte)70;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)32, (byte) (-103), (byte)84, (byte)0, (byte) (-77), (byte)70}, byteArray0);
      assertFalse(boolean0);
      assertEquals(7, byteArray0.length);
      
      Document document0 = Parser.parse("D_3^_zvem", "D_3^_zvem");
      assertNotNull(document0);
      assertEquals("D_3^_zvem", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("D_3^_zvem", document0.location());
      
      Element element0 = document0.shallowClone();
      assertNotNull(element0);
      assertEquals("D_3^_zvem", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("D_3^_zvem", document0.location());
      assertEquals("#root", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("D_3^_zvem", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("#root", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      
      document0.title(">7bl|=!u-j1@eq");
      assertEquals("D_3^_zvem", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("D_3^_zvem", document0.location());
      
      int int0 = document0.elementSiblingIndex();
      assertEquals("D_3^_zvem", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("D_3^_zvem", document0.location());
      assertEquals(0, int0);
      
      String string0 = document0.html();
      assertNotNull(string0);
      assertEquals("D_3^_zvem", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("D_3^_zvem", document0.location());
      
      Elements elements0 = document0.getElementsByAttributeValueNot("D_3^_zvem", "D_3^_zvem");
      assertNotNull(elements0);
      assertEquals("D_3^_zvem", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("D_3^_zvem", document0.location());
      assertEquals(5, elements0.size());
      assertFalse(elements0.isEmpty());
      
      String string1 = element0.html();
      assertNotNull(string1);
      assertEquals("D_3^_zvem", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("D_3^_zvem", document0.location());
      assertEquals("#root", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("D_3^_zvem", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("#root", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean1 = element0.hasClass("value");
      assertEquals("D_3^_zvem", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("D_3^_zvem", document0.location());
      assertEquals("#root", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("D_3^_zvem", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("#root", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("attributevalue_doublequoted ", "attributevalue_doublequoted ");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("attributevalue_doublequoted ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("attributevalue_doublequoted ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.append("ascii");
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("attributevalue_doublequoted ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("attributevalue_doublequoted ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("attributevalue_doublequoted ", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("attributevalue_doublequoted ", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document0.text();
      assertNotNull(string0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("attributevalue_doublequoted ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("attributevalue_doublequoted ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertSame(document0, document1);
      assertEquals("attributevalue_doublequoted ascii", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("7hHa", "Tag cannot be self closing; not a void tag");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Tag cannot be self closing; not a void tag", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag cannot be self closing; not a void tag", document0.location());
      
      Document document1 = (Document)document0.addClass("");
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Tag cannot be self closing; not a void tag", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag cannot be self closing; not a void tag", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Tag cannot be self closing; not a void tag", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("Tag cannot be self closing; not a void tag", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.addClass("");
      assertNotNull(document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Tag cannot be self closing; not a void tag", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag cannot be self closing; not a void tag", document0.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("Tag cannot be self closing; not a void tag", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Tag cannot be self closing; not a void tag", document2.baseUri());
      assertFalse(document2.hasParent());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      boolean boolean0 = document0.hasClass("AttributeValue_doubleQuoted");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Tag cannot be self closing; not a void tag", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag cannot be self closing; not a void tag", document0.location());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("7hHa", "Tag cannot be self closing; not a void tag");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Tag cannot be self closing; not a void tag", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Tag cannot be self closing; not a void tag", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = (Document)document0.addClass("l;YYSZW?~HUTW>?gHJ");
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Tag cannot be self closing; not a void tag", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Tag cannot be self closing; not a void tag", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Tag cannot be self closing; not a void tag", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("Tag cannot be self closing; not a void tag", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.addClass("l;YYSZW?~HUTW>?gHJ");
      assertNotNull(document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Tag cannot be self closing; not a void tag", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Tag cannot be self closing; not a void tag", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("Tag cannot be self closing; not a void tag", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Tag cannot be self closing; not a void tag", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      boolean boolean0 = document0.hasClass("AttributeValue_doubleQuoted");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Tag cannot be self closing; not a void tag", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Tag cannot be self closing; not a void tag", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("+q&", "+q&");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("+q&", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("+q&", document0.location());
      
      StringBuilder stringBuilder0 = new StringBuilder(124);
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.append((double) 124);
      assertNotNull(stringBuilder1);
      assertEquals("124.0", stringBuilder0.toString());
      assertEquals("124.0", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      assertNotNull(document_OutputSettings1);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(124);
      assertNotNull(document_OutputSettings2);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(124, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(124, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(124, document_OutputSettings2.indentAmount());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      
      // Undeclared exception!
      document0.outerHtmlTail(stringBuilder1, 124, document_OutputSettings2);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Document document0 = Parser.parse("t=WRS/lZZ", "t=WRS/lZZ");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("t=WRS/lZZ", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("t=WRS/lZZ", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.appendElement("br");
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("t=WRS/lZZ", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("t=WRS/lZZ", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("br", element0.nodeName());
      assertEquals("t=WRS/lZZ", element0.baseUri());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("br", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      
      MockFile mockFile0 = new MockFile("bxwbswro");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      assertNotNull(document_OutputSettings1);
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      assertNotNull(document_OutputSettings2);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      
      Charset charset0 = document0.charset();
      assertNotNull(charset0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("t=WRS/lZZ", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("t=WRS/lZZ", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.charset(charset0);
      assertNotNull(document_OutputSettings3);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("t=WRS/lZZ", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("t=WRS/lZZ", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.clone();
      assertNotNull(document_OutputSettings4);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("t=WRS/lZZ", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("t=WRS/lZZ", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertFalse(document_OutputSettings4.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.escapeMode());
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      
      element0.outerHtmlHead(mockPrintStream0, 58, document_OutputSettings4);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("t=WRS/lZZ", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("t=WRS/lZZ", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("br", element0.nodeName());
      assertEquals("t=WRS/lZZ", element0.baseUri());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("br", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("bxwbswro", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("bxwbswro", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertFalse(document_OutputSettings4.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.escapeMode());
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      
      document0.setParentNode(element0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("t=WRS/lZZ", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("t=WRS/lZZ", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("br", element0.nodeName());
      assertEquals("t=WRS/lZZ", element0.baseUri());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("br", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      
      Elements elements0 = document0.getElementsContainingOwnText("t=WRS/lZZ");
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("t=WRS/lZZ", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("t=WRS/lZZ", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("C", "C");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("C", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("C", document0.location());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.appendElement("An");
      assertNotNull(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("C", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("C", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("C", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("an", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("an", element0.nodeName());
      assertTrue(element0.hasParent());
      
      String string0 = document0.text();
      assertNotNull(string0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("C", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("C", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("C", string0);
      
      String string1 = Node.EmptyString;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      Set<String> set0 = document0.classNames();
      assertNotNull(set0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("C", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("C", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains(string1));
      
      Pattern pattern0 = Pattern.compile("b3`L@u21~r", 8217);
      assertNotNull(pattern0);
      assertEquals("b3`L@u21~r", pattern0.pattern());
      assertEquals(8217, pattern0.flags());
      assertEquals("b3`L@u21~r", pattern0.toString());
      
      Elements elements0 = element0.getElementsMatchingOwnText(pattern0);
      assertNotNull(elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("C", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("C", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("C", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("an", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("an", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("b3`L@u21~r", pattern0.pattern());
      assertEquals(8217, pattern0.flags());
      assertEquals("b3`L@u21~r", pattern0.toString());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      Element element1 = element0.before("]^PG=");
      assertNotNull(element1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("C", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("C", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("C", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("an", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("an", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("C", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(2, element1.siblingIndex());
      assertEquals("an", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals("an", element1.nodeName());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("C", "C");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("C", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("C", document0.location());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.appendElement("An");
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("C", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("C", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("an", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("an", element0.nodeName());
      assertEquals("C", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      
      Elements elements0 = document0.getElementsContainingOwnText("An");
      assertNotNull(elements0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("C", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("C", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      Element element1 = element0.selectFirst("An");
      assertNotNull(element1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("C", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("C", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("an", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("an", element0.nodeName());
      assertEquals("C", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element1.childNodeSize());
      assertEquals("C", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals("an", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertEquals("an", element1.tagName());
      assertFalse(element1.isBlock());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("BXwbsWro", "BXwbsWro");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("BXwbsWro", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("BXwbsWro", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      
      document0.setSiblingIndex((-363));
      assertFalse(document0.isBlock());
      assertEquals("BXwbsWro", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("BXwbsWro", document0.baseUri());
      assertEquals((-363), document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      
      document0.setParentNode(document0);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("BXwbsWro", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("BXwbsWro", document0.baseUri());
      assertEquals((-363), document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("BXwbsWro");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("C", "C");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("C", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("C", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      
      Element element0 = document0.appendElement("An");
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("C", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("C", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("an", element0.tagName());
      assertEquals("an", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("C", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      
      Elements elements0 = document0.getElementsContainingOwnText("An");
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("C", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("C", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      Elements elements1 = document0.siblingElements();
      assertNotNull(elements1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("C", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("C", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      
      Element element1 = element0.removeClass("sygwbkjibl%vw_as");
      assertNotNull(element1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("C", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("C", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("an", element0.tagName());
      assertEquals("an", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("C", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertFalse(element1.isBlock());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("C", element1.baseUri());
      assertEquals("an", element1.tagName());
      assertEquals("an", element1.nodeName());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parse("Ad _2 XGGE~e", "Ad _2 XGGE~e");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals("Ad _2 XGGE~e", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Ad _2 XGGE~e", document0.location());
      
      DataNode dataNode0 = DataNode.createFromEncoded("ziY)\";x,Nb!\"", (String) null);
      assertNotNull(dataNode0);
      assertFalse(dataNode0.hasParent());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      
      document0.setParentNode(dataNode0);
      assertEquals("#root", document0.tagName());
      assertEquals("Ad _2 XGGE~e", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Ad _2 XGGE~e", document0.location());
      assertFalse(dataNode0.hasParent());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText(")!%p");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(")!%p", ")!%p");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(")!%p", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(")!%p", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration(")!%p", ")!%p", true);
      assertNotNull(xmlDeclaration0);
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertFalse(xmlDeclaration0.hasParent());
      
      Document document1 = (Document)document0.doClone(xmlDeclaration0);
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(")!%p", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(")!%p", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals(")!%p", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals(")!%p", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document0.append(")!%p");
      assertNotNull(document2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(")!%p", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(")!%p", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(")!%p", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals(")!%p", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      
      String string0 = document2.text();
      assertNotNull(string0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(")!%p", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(")!%p", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(")!%p", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals(")!%p", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertEquals(")!%p )!%p", string0);
      
      // Undeclared exception!
      try { 
        document1.elementSiblingIndex();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "C");
      assertFalse(boolean0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "C");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals("C", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("C", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      Document document1 = (Document)document0.addClass("C");
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals("C", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("C", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("C", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("C", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      document1.reparentChild(document0);
      assertEquals("#root", document0.tagName());
      assertEquals("C", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("C", document0.location());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("C", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("C", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertEquals("C", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("C", document0.location());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("C", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertSame(document0, document1);
      
      boolean boolean1 = element0.hasClass("org.jsoup.nodes.Element$NodeList");
      assertEquals("#root", document0.tagName());
      assertEquals("C", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("C", document0.location());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("C", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(boolean1 == boolean0);
      assertSame(document0, document1);
      assertFalse(boolean1);
      
      // Undeclared exception!
      element0.is("C");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("SYGWBkjIBl%vw_AS", "SYGWBkjIBl%vw_AS");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("SYGWBkjIBl%vw_AS", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("SYGWBkjIBl%vw_AS", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      
      Element element0 = document0.appendElement("br");
      assertNotNull(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("SYGWBkjIBl%vw_AS", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("SYGWBkjIBl%vw_AS", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("SYGWBkjIBl%vw_AS", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.tagName());
      assertEquals("br", element0.nodeName());
      
      String string0 = Node.EmptyString;
      assertNotNull(string0);
      assertEquals("", string0);
      
      Elements elements0 = document0.getElementsContainingOwnText("c<L[!Bxbz");
      assertNotNull(elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("SYGWBkjIBl%vw_AS", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("SYGWBkjIBl%vw_AS", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("C", "C");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals("C", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("C", document0.location());
      
      List<Node> list0 = Parser.parseXmlFragment("[%s=%s]", "org.jsoup.nodes.Node$OuterHtmlVisitor");
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      document0.childNodes = list0;
      assertEquals("#root", document0.tagName());
      assertEquals("C", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("C", document0.location());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(document0.childNodes.isEmpty());
      assertEquals(1, document0.childNodes.size());
      
      // Undeclared exception!
      try { 
        document0.appendElement("An");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("C", "C");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("C", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("C", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      
      document0.childNodes = null;
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("C", document0.location());
      assertEquals("C", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.appendElement("An");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parse("%", "%");
      assertNotNull(document0);
      assertEquals("%", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("%", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals("%", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("%", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("%", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      
      Element element1 = element0.lastElementSibling();
      assertNotNull(element1);
      assertEquals("%", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("%", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("%", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("%", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Element element2 = element0.toggleClass(" ");
      assertNotNull(element2);
      assertEquals("%", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("%", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("%", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element2.nodeName());
      assertEquals(1, element2.siblingIndex());
      assertEquals(1, element2.childNodeSize());
      assertTrue(element2.isBlock());
      assertEquals("%", element2.baseUri());
      assertTrue(element2.hasParent());
      assertEquals("body", element2.tagName());
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element2, element1);
      assertSame(element2, element0);
      
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'body.java.lang.String@0000000058': unexpected token at '@0000000058'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/s?$o", "/s?$o");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("/s?$o", document0.baseUri());
      assertEquals("/s?$o", document0.location());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = (Document)document0.append("/s?$o");
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("/s?$o", document0.baseUri());
      assertEquals("/s?$o", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("/s?$o", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("/s?$o", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      document1.updateMetaCharsetElement(false);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("/s?$o", document0.baseUri());
      assertEquals("/s?$o", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("/s?$o", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("/s?$o", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = document1.appendElement("/s?$o");
      assertNotNull(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("/s?$o", document0.baseUri());
      assertEquals("/s?$o", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("/s?$o", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("/s?$o", document1.location());
      assertEquals("/s?$o", element0.baseUri());
      assertEquals(2, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("/s?$o", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("/s?$o", element0.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document0.text();
      assertNotNull(string0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("/s?$o", document0.baseUri());
      assertEquals("/s?$o", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertSame(document0, document1);
      assertEquals("/s?$o /s?$o", string0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("`e6+T1Ju", "TF{");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("TF{", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("TF{", document0.location());
      assertEquals("#document", document0.nodeName());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(true);
      assertNotNull(document_OutputSettings1);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      assertNotNull(document_OutputSettings2);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.outline(false);
      assertNotNull(document_OutputSettings3);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.outline());
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("TF{", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("TF{", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("TF{", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("TF{", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Charset charset0 = document1.charset();
      assertNotNull(charset0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("TF{", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("TF{", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("TF{", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("TF{", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.charset(charset0);
      assertNotNull(document_OutputSettings4);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("TF{", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("TF{", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.outline());
      assertEquals("TF{", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("TF{", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertFalse(document_OutputSettings4.outline());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings4.syntax());
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document1, document0);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      
      // Undeclared exception!
      try { 
        document0.outerHtmlHead((Appendable) null, (-1608), document_OutputSettings4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "C\"e7P]gy");
      assertFalse(boolean0);
      
      String string0 = "noembed";
      Document document0 = Parser.parseBodyFragmentRelaxed("noembed", ";3KVsDr");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(";3KVsDr", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";3KVsDr", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.appendElement("f@s>$O\u0007rHC$-i#M");
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(";3KVsDr", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";3KVsDr", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(";3KVsDr", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("f@s>$o\u0007rhc$-i#m", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("f@s>$o\u0007rhc$-i#m", element0.tagName());
      
      Elements elements0 = document0.getElementsByAttribute("noembed");
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(";3KVsDr", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";3KVsDr", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      // Undeclared exception!
      try { 
        element0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("DoctypeName", parseSettings0);
      assertNotNull(tag0);
      assertEquals("doctypename", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("doctypename", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
      assertNotNull(formElement0);
      assertEquals("doctypename", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("doctypename", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals(0, attributes0.size());
      assertFalse(formElement0.hasParent());
      assertEquals("doctypename", formElement0.nodeName());
      assertEquals("textarea", formElement0.baseUri());
      assertEquals("doctypename", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      
      LinkedHashSet<DataNode> linkedHashSet0 = new LinkedHashSet<DataNode>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Element element0 = formElement0.insertChildren((-1), (Collection<? extends Node>) linkedHashSet0);
      assertNotNull(element0);
      assertEquals("doctypename", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("doctypename", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals(0, attributes0.size());
      assertFalse(formElement0.hasParent());
      assertEquals("doctypename", formElement0.nodeName());
      assertEquals("textarea", formElement0.baseUri());
      assertEquals("doctypename", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("textarea", element0.baseUri());
      assertEquals("doctypename", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("doctypename", element0.tagName());
      assertFalse(element0.isBlock());
      assertSame(formElement0, element0);
      assertSame(element0, formElement0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = new Document("XM] )$W");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("XM] )$W", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("XM] )$W", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      
      Comment comment0 = new Comment(" > ");
      assertNotNull(comment0);
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      
      document0.setParentNode(comment0);
      assertEquals("XM] )$W", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("XM] )$W", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      
      String string0 = document0.text();
      assertNotNull(string0);
      assertEquals("XM] )$W", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("XM] )$W", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        document0.before("body");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ascii", "ascii");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Element element0 = new Element("ascii");
      assertNotNull(element0);
      assertFalse(element0.hasParent());
      assertEquals("ascii", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("ascii", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      
      document0.setParentNode(element0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("ascii", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("ascii", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      
      Document document1 = (Document)document0.append("ascii");
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("ascii", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      List<DataNode> list0 = document0.dataNodes();
      assertNotNull(list0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertSame(document0, document1);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document document2 = (Document)document1.insertChildren((-1), (Collection<? extends Node>) list0);
      assertNotNull(document2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("ascii", document1.location());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("ascii", document2.location());
      assertEquals("ascii", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xaiPyQkIKNOz3Gi", "xaiPyQkIKNOz3Gi");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("xaiPyQkIKNOz3Gi", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xaiPyQkIKNOz3Gi", document0.baseUri());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("xaiPyQkIKNOz3Gi", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xaiPyQkIKNOz3Gi", document0.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("xaiPyQkIKNOz3Gi", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("xaiPyQkIKNOz3Gi", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document0.addClass("xaiPyQkIKNOz3Gi");
      assertNotNull(document2);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("xaiPyQkIKNOz3Gi", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xaiPyQkIKNOz3Gi", document0.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("xaiPyQkIKNOz3Gi", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("xaiPyQkIKNOz3Gi", document2.location());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = (Document)document0.addClass("Y");
      assertNotNull(document3);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("xaiPyQkIKNOz3Gi", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xaiPyQkIKNOz3Gi", document0.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("xaiPyQkIKNOz3Gi", document3.location());
      assertEquals("xaiPyQkIKNOz3Gi", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document1);
      assertSame(document3, document0);
      
      boolean boolean0 = document0.hasClass("xaiPyQkIKNOz3Gi");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("xaiPyQkIKNOz3Gi", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xaiPyQkIKNOz3Gi", document0.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertFalse(boolean0);
      
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document2;
      Document document4 = (Document)document2.insertChildren(1, nodeArray0);
      assertNotNull(document4);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("xaiPyQkIKNOz3Gi", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xaiPyQkIKNOz3Gi", document0.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("xaiPyQkIKNOz3Gi", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("xaiPyQkIKNOz3Gi", document2.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertTrue(document4.hasParent());
      assertEquals("xaiPyQkIKNOz3Gi", document4.location());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.siblingIndex());
      assertEquals("xaiPyQkIKNOz3Gi", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document4.equals((Object)document1));
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document4, document3);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertNotSame(document4, document1);
      assertEquals(1, nodeArray0.length);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parse("/s?$o", "/s?$o");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("/s?$o", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("/s?$o", document0.baseUri());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("/s?$o", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("/s?$o", document0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("/s?$o", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      
      String string0 = element0.cssSelector();
      assertNotNull(string0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("/s?$o", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("/s?$o", document0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("/s?$o", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("html > body", string0);
      
      Element element1 = element0.before("xmlns");
      assertNotNull(element1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("/s?$o", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("/s?$o", document0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(3, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("/s?$o", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("/s?$o", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(3, element1.siblingIndex());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("id", "id");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("id", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("id", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Element element0 = document0.appendElement("iC");
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("id", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("id", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, element0.childNodeSize());
      assertEquals("ic", element0.tagName());
      assertEquals("ic", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("id", element0.baseUri());
      assertFalse(element0.isBlock());
      
      Document document1 = (Document)document0.text("@_e,Vn=");
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("id", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("id", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("id", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("id", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      List<Node> list0 = element0.ensureChildNodes();
      assertNotNull(list0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("id", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("id", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, element0.childNodeSize());
      assertEquals("ic", element0.tagName());
      assertEquals("ic", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("id", element0.baseUri());
      assertFalse(element0.isBlock());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertSame(document0, document1);
      
      document1.childNodes = list0;
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("id", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("id", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, element0.childNodeSize());
      assertEquals("ic", element0.tagName());
      assertEquals("ic", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("id", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("id", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("id", document1.location());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(document1.childNodes.isEmpty());
      assertEquals(0, document1.childNodes.size());
      
      Elements elements0 = element0.getElementsMatchingOwnText("Insert position out of bounds.");
      assertNotNull(elements0);
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("id", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("id", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, element0.childNodeSize());
      assertEquals("ic", element0.tagName());
      assertEquals("ic", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("id", element0.baseUri());
      assertFalse(element0.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(document0, document1);
      
      String string0 = document0.text();
      assertNotNull(string0);
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("id", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("id", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertSame(document0, document1);
      assertEquals("", string0);
      
      Document document2 = (Document)element0.parent();
      assertNotNull(document2);
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("id", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("id", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, element0.childNodeSize());
      assertEquals("ic", element0.tagName());
      assertEquals("ic", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("id", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("id", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("id", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.childNodeSize());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Document.createShell("/s?$o");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("/s?$o", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/s?$o", document0.baseUri());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.appendElement("QR:7i8}K*e%>)ER");
      assertNotNull(element0);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("/s?$o", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/s?$o", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("/s?$o", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("qr:7i8}k*e%>)er", element0.nodeName());
      assertEquals("qr:7i8}k*e%>)er", element0.tagName());
      
      Element element1 = element0.text("QR:7i8}K*e%>)ER");
      assertNotNull(element1);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("/s?$o", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/s?$o", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("/s?$o", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("qr:7i8}k*e%>)er", element0.nodeName());
      assertEquals("qr:7i8}k*e%>)er", element0.tagName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("qr:7i8}k*e%>)er", element1.nodeName());
      assertEquals("qr:7i8}k*e%>)er", element1.tagName());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("/s?$o", element1.baseUri());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Document.createShell("7h*");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("7h*", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("7h*", document0.location());
      assertEquals(1, document0.childNodeSize());
      
      Document document1 = Parser.parse("7h*", "7h*");
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("7h*", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("7h*", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      
      Element element0 = document0.appendElement("7h*");
      assertNotNull(element0);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("7h*", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("7h*", document0.location());
      assertEquals("7h*", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("7h*", element0.baseUri());
      assertEquals("7h*", element0.tagName());
      assertFalse(element0.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      Element element1 = element0.tagName("W@yD2j%#W]N0Tj");
      assertNotNull(element1);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("7h*", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("7h*", document0.location());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("w@yd2j%#w]n0tj", element0.tagName());
      assertEquals("w@yd2j%#w]n0tj", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("7h*", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("7h*", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(1, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("w@yd2j%#w]n0tj", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals("w@yd2j%#w]n0tj", element1.tagName());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      String string0 = document0.text();
      assertNotNull(string0);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("7h*", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("7h*", document0.location());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertEquals("", string0);
      
      String string1 = element0.cssSelector();
      assertNotNull(string1);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("7h*", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("7h*", document0.location());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("w@yd2j%#w]n0tj", element0.tagName());
      assertEquals("w@yd2j%#w]n0tj", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("7h*", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(document0, document1);
      assertSame(element0, element1);
      assertEquals("w@yd2j%#w]n0tj", string1);
      
      Elements elements0 = document0.getElementsMatchingOwnText("s+");
      assertNotNull(elements0);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("7h*", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("7h*", document0.location());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Parser parser1 = parser0.settings(parseSettings0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = Parser.parse("/s83?$o", "/s83?$o");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/s83?$o", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/s83?$o", document0.baseUri());
      assertFalse(document0.hasParent());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/s83?$o", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/s83?$o", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("/s83?$o", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("/s83?$o", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = document1.parser(parser0);
      assertNotNull(document2);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/s83?$o", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/s83?$o", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("/s83?$o", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("/s83?$o", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("/s83?$o", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("/s83?$o", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertSame(parser0, parser1);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      document2.siblingIndex = (-2070);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/s83?$o", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/s83?$o", document0.baseUri());
      assertEquals((-2070), document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("/s83?$o", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals((-2070), document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("/s83?$o", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("/s83?$o", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals((-2070), document2.siblingIndex());
      assertEquals("/s83?$o", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      
      Document document3 = Document.createShell("/s83?$o");
      assertNotNull(document3);
      assertEquals(1, document3.childNodeSize());
      assertEquals("/s83?$o", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals("/s83?$o", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      
      document0.setParentNode(document2);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/s83?$o", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/s83?$o", document0.baseUri());
      assertEquals((-2070), document0.siblingIndex());
      assertEquals("/s83?$o", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals((-2070), document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("/s83?$o", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("/s83?$o", document2.baseUri());
      assertEquals((-2070), document2.siblingIndex());
      assertEquals("/s83?$o", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertSame(parser0, parser1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertSame(document2, document1);
      
      Document document4 = (Document)document2.addClass("/s83?$o");
      assertNotNull(document4);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/s83?$o", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/s83?$o", document0.baseUri());
      assertEquals((-2070), document0.siblingIndex());
      assertEquals("/s83?$o", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals((-2070), document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("/s83?$o", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("/s83?$o", document2.baseUri());
      assertEquals((-2070), document2.siblingIndex());
      assertEquals("/s83?$o", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("/s83?$o", document4.baseUri());
      assertTrue(document4.hasParent());
      assertFalse(document4.isBlock());
      assertEquals("/s83?$o", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.childNodeSize());
      assertEquals((-2070), document4.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document4.equals((Object)document3));
      assertSame(parser0, parser1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document4, document0);
      assertSame(document4, document1);
      assertNotSame(document4, document3);
      assertSame(document4, document2);
      
      // Undeclared exception!
      try { 
        document2.text();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Document.createShell("7h*");
      assertNotNull(document0);
      assertEquals("7h*", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("7h*", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Element element0 = document0.appendElement(".");
      assertNotNull(element0);
      assertEquals(2, document0.childNodeSize());
      assertEquals("7h*", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("7h*", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("7h*", element0.baseUri());
      assertEquals(".", element0.nodeName());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(".", element0.tagName());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertEquals(2, document0.childNodeSize());
      assertEquals("7h*", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("7h*", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("7h*", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("7h*", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document1.append(".");
      assertNotNull(document2);
      assertEquals(2, document0.childNodeSize());
      assertEquals("7h*", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("7h*", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("7h*", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("7h*", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("7h*", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(3, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("7h*", document2.location());
      assertFalse(document2.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      
      String string0 = document0.text();
      assertNotNull(string0);
      assertEquals(2, document0.childNodeSize());
      assertEquals("7h*", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("7h*", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertEquals("", string0);
      
      Element element1 = element0.previousElementSibling();
      assertNotNull(element1);
      assertEquals(2, document0.childNodeSize());
      assertEquals("7h*", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("7h*", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("7h*", element0.baseUri());
      assertEquals(".", element0.nodeName());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(".", element0.tagName());
      assertEquals(2, element1.childNodeSize());
      assertEquals("html", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("7h*", element1.baseUri());
      assertEquals("html", element1.tagName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(element1.equals((Object)element0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("7h*", "7h*");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals("7h*", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("7h*", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      Document document1 = Parser.parse("7h*", "7h*");
      assertNotNull(document1);
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("7h*", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("7h*", document1.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      
      Element element0 = document0.appendElement("7h*");
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertEquals("7h*", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("7h*", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("7h*", element0.tagName());
      assertEquals("7h*", element0.nodeName());
      assertEquals("7h*", element0.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      Element element1 = element0.prepend("d- -VmGrnI~L#rL.S.+");
      assertNotNull(element1);
      assertEquals("#root", document0.tagName());
      assertEquals("7h*", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("7h*", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("7h*", element0.tagName());
      assertEquals("7h*", element0.nodeName());
      assertEquals("7h*", element0.baseUri());
      assertEquals("7h*", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertEquals("7h*", element1.baseUri());
      assertEquals("7h*", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      String string0 = document0.text();
      assertNotNull(string0);
      assertEquals("#root", document0.tagName());
      assertEquals("7h*", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("7h*", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertEquals("7h*d- -VmGrnI~L#rL.S.+", string0);
      
      String string1 = document0.cssSelector();
      assertNotNull(string1);
      assertEquals("#root", document0.tagName());
      assertEquals("7h*", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("7h*", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(document0, document1);
      assertEquals("#root", string1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = "7h*";
      Document document0 = Parser.parseBodyFragmentRelaxed("7h*", "hr");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("hr", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("hr", document0.location());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("hr", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("hr", document0.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("hr", document1.baseUri());
      assertEquals("hr", document1.location());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      List<Node> list0 = Parser.parseXmlFragment(" ", "doctype");
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      document1.childNodes = list0;
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("hr", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("hr", document0.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("hr", document1.baseUri());
      assertEquals("hr", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(1, document1.childNodes.size());
      assertFalse(document1.childNodes.isEmpty());
      
      // Undeclared exception!
      try { 
        document1.append("hr");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      assertNotNull(document0);
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("textarea", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.append("br");
      assertNotNull(document2);
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("textarea", document2.baseUri());
      assertEquals("textarea", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Element element0 = document1.appendElement("br");
      assertNotNull(element0);
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("textarea", document1.baseUri());
      assertEquals("textarea", element0.baseUri());
      assertEquals("br", element0.tagName());
      assertEquals(2, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.nodeName());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      
      String string0 = document1.text();
      assertNotNull(string0);
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("textarea", document1.baseUri());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertEquals("br", string0);
      
      String string1 = document1.cssSelector();
      assertNotNull(string1);
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("textarea", document1.baseUri());
      assertFalse(string1.equals((Object)string0));
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertEquals("#root", string1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ascii", "ascii");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      
      Document document1 = new Document("ascii");
      assertNotNull(document1);
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertFalse(document1.equals((Object)document0));
      
      document0.setParentNode(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      String string0 = document0.html();
      assertNotNull(string0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertEquals("<html>\n <head></head>\n <body>\n  ascii\n </body>\n</html>", string0);
      
      Document document2 = (Document)document0.html("ascii");
      assertNotNull(document2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("ascii", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("ascii", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      
      Element element1 = document0.wrap("ascii");
      assertNull(element1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Document.createShell("7F[6v+P16");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("7F[6v+P16", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("7F[6v+P16", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("7F[6v+P16", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("7F[6v+P16", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7F[6v+P16", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      
      Document document1 = (Document)document0.addClass("7e6T1Ju");
      assertNotNull(document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("7F[6v+P16", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("7F[6v+P16", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7F[6v+P16", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("7F[6v+P16", document1.location());
      assertEquals("#root", document1.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.addClass("7F[6v+P16");
      assertNotNull(document2);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("7F[6v+P16", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("7F[6v+P16", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("7F[6v+P16", document2.baseUri());
      assertEquals("7F[6v+P16", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      boolean boolean0 = document0.hasClass("7F[6v+P16");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("7F[6v+P16", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("7F[6v+P16", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Document.createShell("li");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("li", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("li", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = (Document)document0.addClass("li");
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("li", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("li", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("li", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("li", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = document0.hasClass("org.jsoup.nodes.XmlDeclaration");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("li", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("li", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertSame(document0, document1);
      assertFalse(boolean0);
      
      document0.setSiblingIndex(352);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("li", document0.baseUri());
      assertEquals(352, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("li", document0.location());
      assertEquals("#root", document0.tagName());
      assertSame(document0, document1);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains("org.jsoup.nodes.XmlDeclaration"));
      
      Document document2 = (Document)document0.classNames((Set<String>) linkedHashSet0);
      assertNotNull(document2);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("li", document0.baseUri());
      assertEquals(352, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("li", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("li", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("li", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(352, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(linkedHashSet0.contains("org.jsoup.nodes.XmlDeclaration"));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("7kE!X-b+v1#", "n[6KyV+O2%exa");
      assertNotNull(document0);
      assertEquals("n[6KyV+O2%exa", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("n[6KyV+O2%exa", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Parser parser1 = parser0.settings(parseSettings0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document1 = document0.parser(parser1);
      assertNotNull(document1);
      assertEquals("n[6KyV+O2%exa", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("n[6KyV+O2%exa", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("n[6KyV+O2%exa", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("n[6KyV+O2%exa", document1.baseUri());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertNotNull(document_OutputSettings1);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document document2 = document1.outputSettings(document_OutputSettings1);
      assertNotNull(document2);
      assertEquals("n[6KyV+O2%exa", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("n[6KyV+O2%exa", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("n[6KyV+O2%exa", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("n[6KyV+O2%exa", document1.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("n[6KyV+O2%exa", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("n[6KyV+O2%exa", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      document2.setParentNode(document1);
      assertEquals("n[6KyV+O2%exa", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("n[6KyV+O2%exa", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("n[6KyV+O2%exa", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("n[6KyV+O2%exa", document1.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("n[6KyV+O2%exa", document2.baseUri());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("n[6KyV+O2%exa", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = (Document)document0.addClass("n[6KyV+O2%exa");
      assertNotNull(document3);
      assertEquals("n[6KyV+O2%exa", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("n[6KyV+O2%exa", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("n[6KyV+O2%exa", document3.location());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("n[6KyV+O2%exa", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
      assertEquals("n[6KyV+O2%exa", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("n[6KyV+O2%exa", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      
      // Undeclared exception!
      document2.wrap("7kE!X-b+v1#");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parse("Z>uWD  A\"A", "Z>uWD  A\"A");
      assertNotNull(document0);
      assertEquals("Z>uWD  A\"A", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Z>uWD  A\"A", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Tag tag0 = Tag.valueOf("Z]uWD  A\"A");
      assertNotNull(tag0);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("Z]uWD  A\"A", tag0.toString());
      assertEquals("Z]uWD  A\"A", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      
      Element element0 = new Element(tag0, "Z>uWD  A\"A");
      assertNotNull(element0);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("Z]uWD  A\"A", tag0.toString());
      assertEquals("Z]uWD  A\"A", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Z>uWD  A\"A", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("Z]uWD  A\"A", element0.tagName());
      assertEquals("Z]uWD  A\"A", element0.nodeName());
      
      document0.setParentNode(element0);
      assertEquals("Z>uWD  A\"A", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("Z>uWD  A\"A", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("Z]uWD  A\"A", tag0.toString());
      assertEquals("Z]uWD  A\"A", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Z>uWD  A\"A", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("Z]uWD  A\"A", element0.tagName());
      assertEquals("Z]uWD  A\"A", element0.nodeName());
      
      Document document1 = (Document)document0.append("Z>uWD  A\"A");
      assertNotNull(document1);
      assertEquals("Z>uWD  A\"A", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("Z>uWD  A\"A", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("Z>uWD  A\"A", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals("Z>uWD  A\"A", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document0.data();
      assertNotNull(string0);
      assertEquals("Z>uWD  A\"A", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("Z>uWD  A\"A", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertEquals("", string0);
      
      String string1 = document0.text();
      assertNotNull(string1);
      assertEquals("Z>uWD  A\"A", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("Z>uWD  A\"A", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(string1.equals((Object)string0));
      assertSame(document0, document1);
      assertEquals("Z>uWD A\"A Z>uWD A\"A", string1);
      
      Elements elements0 = document0.previousElementSiblings();
      assertNotNull(elements0);
      assertEquals("Z>uWD  A\"A", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("Z>uWD  A\"A", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(document0, document1);
      
      String string2 = element0.cssSelector();
      assertNotNull(string2);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("Z]uWD  A\"A", tag0.toString());
      assertEquals("Z]uWD  A\"A", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Z>uWD  A\"A", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("Z]uWD  A\"A", element0.tagName());
      assertEquals("Z]uWD  A\"A", element0.nodeName());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Z]uWD  A\"A", string2);
      
      Element element1 = document0.firstElementSibling();
      assertNull(element1);
      assertEquals("Z>uWD  A\"A", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("Z>uWD  A\"A", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertSame(document0, document1);
      
      // Undeclared exception!
      try { 
        element0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Document.createShell("mx");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("mx", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("mx", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      Document document1 = (Document)document0.addClass("_f/Kl~lc{v9})Tl#'");
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("mx", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("mx", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("mx", document1.location());
      assertEquals("mx", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.addClass("_f/Kl~lc{v9})Tl#'");
      assertNotNull(document2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("mx", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("mx", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("mx", document1.location());
      assertEquals("mx", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("mx", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("mx", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Document document3 = (Document)document1.addClass("BeforeAttributeValue");
      assertNotNull(document3);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("mx", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("mx", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("mx", document1.location());
      assertEquals("mx", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("mx", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("mx", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      
      boolean boolean0 = document1.hasClass("org.jsoup.nodes.Element$NodeList");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("mx", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("mx", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("mx", document1.location());
      assertEquals("mx", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertFalse(boolean0);
      
      String string0 = document1.val();
      assertNotNull(string0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("mx", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("mx", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("mx", document1.location());
      assertEquals("mx", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Document.createShell("mx");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("mx", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("mx", document0.location());
      assertFalse(document0.hasParent());
      
      Document document1 = (Document)document0.addClass("_f/Kl~lc{v9})Tl#'");
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("mx", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("mx", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("mx", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("mx", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = document1.hasClass("org.jsoup.nodes.XmlDeclaration");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("mx", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("mx", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("mx", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("mx", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Document.createShell("/s?$o");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("/s?$o", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("/s?$o", document0.baseUri());
      
      document0.setParentNode(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("/s?$o", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("/s?$o", document0.baseUri());
      
      Document document1 = (Document)document0.addClass("/s?$o");
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("/s?$o", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("/s?$o", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("/s?$o", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("/s?$o", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.addClass("/s?$o");
      assertNotNull(document2);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("/s?$o", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("/s?$o", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("/s?$o", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("/s?$o", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("/s?$o", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("/s?$o", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      boolean boolean0 = document1.hasClass("K...8QKEo");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("/s?$o", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("/s?$o", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("/s?$o", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("/s?$o", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/s?$o", "/s?$o");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("/s?$o", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/s?$o", document0.baseUri());
      
      Document document1 = (Document)document0.append("/s?$o");
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("/s?$o", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/s?$o", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("/s?$o", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("/s?$o", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = document1.appendElement("/s?$o");
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("/s?$o", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/s?$o", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("/s?$o", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("/s?$o", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("/s?$o", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("/s?$o", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("/s?$o", element0.tagName());
      assertEquals(2, element0.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document0.text();
      assertNotNull(string0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("/s?$o", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/s?$o", document0.baseUri());
      assertSame(document0, document1);
      assertEquals("/s?$o /s?$o", string0);
      
      Elements elements0 = document1.getElementsByIndexEquals(461);
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("/s?$o", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/s?$o", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("/s?$o", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("/s?$o", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ascii", "ascii");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Tag tag0 = Tag.valueOf("ascii");
      assertNotNull(tag0);
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("ascii", tag0.getName());
      assertEquals("ascii", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      
      Document document1 = (Document)document0.addClass("+[6Fu.]ko");
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = document1.hasClass("lL)JIuzM");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(boolean0);
      
      String string0 = document1.className();
      assertNotNull(string0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Insert poition out of bounds.", "Insert poition out of bounds.");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Insert poition out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert poition out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Document document1 = (Document)document0.val("Insert poition out of bounds.");
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Insert poition out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert poition out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Insert poition out of bounds.", document1.location());
      assertEquals("Insert poition out of bounds.", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document0.cssSelector();
      assertNotNull(string0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Insert poition out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert poition out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertSame(document0, document1);
      assertEquals("#root", string0);
      
      Elements elements0 = document1.siblingElements();
      assertNotNull(elements0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Insert poition out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert poition out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Insert poition out of bounds.", document1.location());
      assertEquals("Insert poition out of bounds.", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      MockFile mockFile0 = new MockFile("#root", "Insert poition out of bounds.");
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      assertNotNull(mockFileWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertNotNull(document_OutputSettings1);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      // Undeclared exception!
      try { 
        document1.outerHtmlHead(mockFileWriter0, (-46), document_OutputSettings1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Document.createShell(" />");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(" />", document0.baseUri());
      assertEquals(" />", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(" />", document0.baseUri());
      assertEquals(" />", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("body", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(" />", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      
      Element element1 = element0.empty();
      assertNotNull(element1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(" />", document0.baseUri());
      assertEquals(" />", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("body", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(" />", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals(" />", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Element element2 = element0.firstElementSibling();
      assertNotNull(element2);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(" />", document0.baseUri());
      assertEquals(" />", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("body", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(" />", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element2.isBlock());
      assertEquals(0, element2.childNodeSize());
      assertEquals("head", element2.tagName());
      assertTrue(element2.hasParent());
      assertEquals("head", element2.nodeName());
      assertEquals(" />", element2.baseUri());
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertNotSame(element0, element2);
      assertSame(element0, element1);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parse("7e6+P16", "7e6+P16");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("7e6+P16", document0.baseUri());
      assertEquals("7e6+P16", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("7e6+P16", document0.baseUri());
      assertEquals("7e6+P16", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, element0.siblingIndex());
      assertEquals("7e6+P16", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      
      element0.parentNode = (Node) document0;
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("7e6+P16", document0.baseUri());
      assertEquals("7e6+P16", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, element0.siblingIndex());
      assertEquals("7e6+P16", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.parentNode.siblingIndex());
      assertFalse(element0.parentNode.hasParent());
      
      String string0 = element0.cssSelector();
      assertNotNull(string0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("7e6+P16", document0.baseUri());
      assertEquals("7e6+P16", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, element0.siblingIndex());
      assertEquals("7e6+P16", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals("head", string0);
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("/8V]/`Jq]I/", "org.jsoup.nodes.Element$1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Element element0 = new Element("oaption");
      assertNotNull(element0);
      assertEquals(0, element0.childNodeSize());
      assertEquals("oaption", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals("oaption", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      
      Element element1 = element0.toggleClass("oaption");
      assertNotNull(element1);
      assertEquals(0, element0.childNodeSize());
      assertEquals("oaption", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals("oaption", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("oaption", element1.tagName());
      assertEquals("", element1.baseUri());
      assertEquals("oaption", element1.nodeName());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      boolean boolean1 = element1.is("oaption");
      assertEquals(0, element0.childNodeSize());
      assertEquals("oaption", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals("oaption", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("oaption", element1.tagName());
      assertEquals("", element1.baseUri());
      assertEquals("oaption", element1.nodeName());
      assertFalse(boolean1 == boolean0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/s?$o", "/s?$o");
      assertNotNull(document0);
      assertEquals("/s?$o", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("/s?$o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      
      document0.setSiblingIndex(3);
      assertEquals("/s?$o", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("/s?$o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      
      document0.setParentNode(document0);
      assertEquals("/s?$o", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("/s?$o", document0.location());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      String string0 = document0.text();
      assertNotNull(string0);
      assertEquals("/s?$o", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("/s?$o", document0.location());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("/s?$o", string0);
      
      DocumentType documentType0 = new DocumentType("/s?$o", "org.jsoup.nodes.Element", "/s?$o", "i>k#]w", "j/O[");
      assertNotNull(documentType0);
      assertFalse(documentType0.hasParent());
      assertEquals(0, documentType0.siblingIndex());
      assertEquals("#doctype", documentType0.nodeName());
      
      Document document1 = (Document)document0.doClone(documentType0);
      assertNotNull(document1);
      assertEquals("/s?$o", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("/s?$o", document0.location());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(documentType0.hasParent());
      assertEquals(0, documentType0.siblingIndex());
      assertEquals("#doctype", documentType0.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("/s?$o", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("/s?$o", document1.location());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Tag tag0 = Tag.valueOf("-Tfi5)M8*m2MM{K^d,O");
      assertNotNull(tag0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("-Tfi5)M8*m2MM{K^d,O", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertEquals("-Tfi5)M8*m2MM{K^d,O", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      
      Element element0 = new Element(tag0, "/s?$o");
      assertNotNull(element0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("-Tfi5)M8*m2MM{K^d,O", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertEquals("-Tfi5)M8*m2MM{K^d,O", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals(0, element0.siblingIndex());
      assertEquals("-Tfi5)M8*m2MM{K^d,O", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("-Tfi5)M8*m2MM{K^d,O", element0.nodeName());
      assertEquals("/s?$o", element0.baseUri());
      assertFalse(element0.isBlock());
      
      Document document0 = Parser.parseBodyFragment("-Tfi5)M8*m2MM{K^d,O", "'.eVZ ))WJ9,+77");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("'.eVZ ))WJ9,+77", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("'.eVZ ))WJ9,+77", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = (Document)document0.append("/s?$o");
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("'.eVZ ))WJ9,+77", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("'.eVZ ))WJ9,+77", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("'.eVZ ))WJ9,+77", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("'.eVZ ))WJ9,+77", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document0.text();
      assertNotNull(string0);
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("'.eVZ ))WJ9,+77", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("'.eVZ ))WJ9,+77", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertEquals("-Tfi5)M8*m2MM{K^d,O /s?$o", string0);
      
      Element element1 = element0.appendTo(document0);
      assertNotNull(element1);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("-Tfi5)M8*m2MM{K^d,O", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertEquals("-Tfi5)M8*m2MM{K^d,O", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertTrue(element0.hasParent());
      assertEquals("-Tfi5)M8*m2MM{K^d,O", element0.tagName());
      assertEquals(2, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("-Tfi5)M8*m2MM{K^d,O", element0.nodeName());
      assertEquals("/s?$o", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("'.eVZ ))WJ9,+77", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("'.eVZ ))WJ9,+77", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("-Tfi5)M8*m2MM{K^d,O", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(2, element1.siblingIndex());
      assertEquals("-Tfi5)M8*m2MM{K^d,O", element1.nodeName());
      assertEquals("/s?$o", element1.baseUri());
      assertSame(element0, element1);
      assertSame(document0, document1);
      assertSame(element1, element0);
      
      Element element2 = element1.lastElementSibling();
      assertNotNull(element2);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("-Tfi5)M8*m2MM{K^d,O", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertEquals("-Tfi5)M8*m2MM{K^d,O", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertTrue(element0.hasParent());
      assertEquals("-Tfi5)M8*m2MM{K^d,O", element0.tagName());
      assertEquals(2, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("-Tfi5)M8*m2MM{K^d,O", element0.nodeName());
      assertEquals("/s?$o", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("'.eVZ ))WJ9,+77", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("'.eVZ ))WJ9,+77", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("-Tfi5)M8*m2MM{K^d,O", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(2, element1.siblingIndex());
      assertEquals("-Tfi5)M8*m2MM{K^d,O", element1.nodeName());
      assertEquals("/s?$o", element1.baseUri());
      assertEquals(0, element2.childNodeSize());
      assertEquals("-Tfi5)M8*m2MM{K^d,O", element2.tagName());
      assertEquals("/s?$o", element2.baseUri());
      assertEquals("-Tfi5)M8*m2MM{K^d,O", element2.nodeName());
      assertFalse(element2.isBlock());
      assertEquals(2, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(document0, document1);
      assertSame(element1, element2);
      assertSame(element1, element0);
      assertSame(element2, element1);
      assertSame(element2, element0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/s?$o", "/s?$o");
      assertNotNull(document0);
      assertEquals("/s?$o", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("/s?$o", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      document0.setParentNode(document0);
      assertEquals("/s?$o", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("/s?$o", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Elements elements0 = document0.getElementsByIndexGreaterThan((-170244488));
      assertNotNull(elements0);
      assertEquals("/s?$o", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("/s?$o", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      
      String string0 = document0.cssSelector();
      assertNotNull(string0);
      assertEquals("/s?$o", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("/s?$o", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", string0);
      
      // Undeclared exception!
      document0.prependElement("S{R$c%',J");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("z>uwd  a\"a", "z>uwd  a\"a");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("z>uwd  a\"a", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("z>uwd  a\"a", document0.baseUri());
      
      DataNode dataNode0 = new DataNode("meta[charset]", "%g[/IT1otk*6oYy4m'");
      assertNotNull(dataNode0);
      assertEquals("#data", dataNode0.nodeName());
      assertFalse(dataNode0.hasParent());
      assertEquals(0, dataNode0.siblingIndex());
      
      DataNode dataNode1 = dataNode0.setWholeData("=?rgPQ");
      assertNotNull(dataNode1);
      assertEquals("#data", dataNode0.nodeName());
      assertFalse(dataNode0.hasParent());
      assertEquals(0, dataNode0.siblingIndex());
      assertFalse(dataNode1.hasParent());
      assertEquals("#data", dataNode1.nodeName());
      assertEquals(0, dataNode1.siblingIndex());
      assertSame(dataNode0, dataNode1);
      assertSame(dataNode1, dataNode0);
      
      Document document1 = (Document)document0.appendChild(dataNode1);
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("z>uwd  a\"a", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("z>uwd  a\"a", document0.baseUri());
      assertEquals("#data", dataNode0.nodeName());
      assertTrue(dataNode0.hasParent());
      assertEquals(1, dataNode0.siblingIndex());
      assertEquals("#data", dataNode1.nodeName());
      assertTrue(dataNode1.hasParent());
      assertEquals(1, dataNode1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("z>uwd  a\"a", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("z>uwd  a\"a", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(dataNode0, dataNode1);
      assertSame(dataNode1, dataNode0);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.prependText("z>uwd  a\"a");
      assertNotNull(document2);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("z>uwd  a\"a", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("z>uwd  a\"a", document0.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(3, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("z>uwd  a\"a", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("z>uwd  a\"a", document2.baseUri());
      assertFalse(document2.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      String string0 = document0.text();
      assertNotNull(string0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("z>uwd  a\"a", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("z>uwd  a\"a", document0.baseUri());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertEquals("z>uwd a\"a z>uwd a\"a", string0);
      
      Elements elements0 = document0.parents();
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("z>uwd  a\"a", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("z>uwd  a\"a", document0.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(document0, document2);
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parse("must be true", "must be true");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("must be true", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("must be true", document0.baseUri());
      assertFalse(document0.hasParent());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("must be true", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("must be true", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("must be true", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("must be true", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Parser parser1 = parser0.settings(parseSettings0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document2 = document1.parser(parser1);
      assertNotNull(document2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("must be true", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("must be true", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("must be true", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("must be true", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("must be true", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("must be true", document2.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Document document3 = document2.normalise();
      assertNotNull(document3);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("must be true", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("must be true", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("must be true", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("must be true", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("must be true", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("must be true", document2.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("must be true", document3.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("must be true", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      
      Element element0 = document3.head();
      assertNotNull(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("must be true", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("must be true", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("must be true", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("must be true", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("must be true", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("must be true", document2.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("must be true", document3.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("must be true", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals("must be true", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      
      Element element1 = element0.prepend("must be true");
      assertNotNull(element1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("must be true", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("must be true", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("must be true", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("must be true", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("must be true", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("must be true", document2.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("must be true", document3.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("must be true", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals("must be true", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("must be true", element1.baseUri());
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("aOscii", "aOscii");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("aOscii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("aOscii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("aOscii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("aOscii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("aOscii", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      
      element0.setSiblingIndex((-324));
      assertFalse(document0.isBlock());
      assertEquals("aOscii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("aOscii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, element0.childNodeSize());
      assertEquals((-324), element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("aOscii", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/s?$o", "/s?$o");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("/s?$o", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("/s?$o", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.prependElement(".~QgF9RMjPzbZe<,GH");
      assertNotNull(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("/s?$o", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("/s?$o", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(".~qgf9rmjpzbze<,gh", element0.nodeName());
      assertEquals("/s?$o", element0.baseUri());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(".~qgf9rmjpzbze<,gh", element0.tagName());
      
      Element element1 = element0.nextElementSibling();
      assertNotNull(element1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("/s?$o", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("/s?$o", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(".~qgf9rmjpzbze<,gh", element0.nodeName());
      assertEquals("/s?$o", element0.baseUri());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(".~qgf9rmjpzbze<,gh", element0.tagName());
      assertEquals("/s?$o", element1.baseUri());
      assertEquals("html", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("html", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(2, element1.childNodeSize());
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      Element element2 = document0.head();
      assertNotNull(element2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("/s?$o", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("/s?$o", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("/s?$o", element2.baseUri());
      assertTrue(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals(0, element2.childNodeSize());
      assertEquals("head", element2.tagName());
      assertTrue(element2.hasParent());
      assertEquals("head", element2.nodeName());
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      
      Element element3 = document0.getElementById("/s?$o");
      assertNull(element3);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("/s?$o", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("/s?$o", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("opsi.J", "opsi.J");
      assertNotNull(document0);
      assertEquals("opsi.J", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("opsi.J", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      String string0 = document0.text();
      assertNotNull(string0);
      assertEquals("opsi.J", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("opsi.J", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("opsi.J", string0);
      
      Comment comment0 = new Comment("opsi.J");
      assertNotNull(comment0);
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      
      document0.setParentNode(comment0);
      assertEquals("opsi.J", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("opsi.J", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.cssSelector();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      String string0 = "n[6KyV+O2%exa";
      Document document0 = Parser.parseBodyFragmentRelaxed("n[6KyV+O2%exa", "n[6KyV+O2%exa");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("n[6KyV+O2%exa", document0.location());
      assertEquals("n[6KyV+O2%exa", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      CharBuffer charBuffer0 = CharBuffer.allocate(6);
      assertNotNull(charBuffer0);
      assertEquals(6, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(6, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(6, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(6, charBuffer0.limit());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      assertNotNull(document_OutputSettings1);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      assertNotNull(document_OutputSettings2);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.indentAmount(6);
      assertNotNull(document_OutputSettings3);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(6, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(6, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(6, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(6, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.outline());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.outline(false);
      assertNotNull(document_OutputSettings4);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(6, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(6, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(6, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(6, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.outline());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertFalse(document_OutputSettings4.outline());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(6, document_OutputSettings4.indentAmount());
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, 6, document_OutputSettings4);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = new Document("}peH(Fy*b");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("}peH(Fy*b", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("}peH(Fy*b", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Document document1 = document0.parser(parser0);
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("}peH(Fy*b", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("}peH(Fy*b", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("}peH(Fy*b", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("}peH(Fy*b", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.append("");
      assertNotNull(document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("}peH(Fy*b", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("}peH(Fy*b", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("}peH(Fy*b", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("}peH(Fy*b", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      String string0 = document0.text();
      assertNotNull(string0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("}peH(Fy*b", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("}peH(Fy*b", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("7e6+P1J6", "7e6+P1J6");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("7e6+P1J6", document0.baseUri());
      assertEquals("7e6+P1J6", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("7e6+P1J6", document0.baseUri());
      assertEquals("7e6+P1J6", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("7e6+P1J6", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      
      String string0 = element0.cssSelector();
      assertNotNull(string0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("7e6+P1J6", document0.baseUri());
      assertEquals("7e6+P1J6", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("7e6+P1J6", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertEquals("html > head", string0);
      
      Element element1 = element0.removeClass("html > head");
      assertNotNull(element1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("7e6+P1J6", document0.baseUri());
      assertEquals("7e6+P1J6", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("7e6+P1J6", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertEquals("7e6+P1J6", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertEquals("head", element1.nodeName());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("g]<l>.Kar\":4u-<gt!", "Hz-*/PBM\"~YB");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Hz-*/PBM\"~YB", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Hz-*/PBM\"~YB", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      
      Element element0 = document0.prependElement("blockquote");
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("Hz-*/PBM\"~YB", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Hz-*/PBM\"~YB", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("blockquote", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("blockquote", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("Hz-*/PBM\"~YB", element0.baseUri());
      assertTrue(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = parser0.parseInput("XkBe%", "Cjke*{ocv=)");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Cjke*{ocv=)", document0.location());
      assertEquals("Cjke*{ocv=)", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      
      Document document1 = (Document)document0.removeClass("=snV`X+}z2");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Cjke*{ocv=)", document0.location());
      assertEquals("Cjke*{ocv=)", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("Cjke*{ocv=)", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Cjke*{ocv=)", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document1.className();
      assertNotNull(string0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Cjke*{ocv=)", document0.location());
      assertEquals("Cjke*{ocv=)", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("Cjke*{ocv=)", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Cjke*{ocv=)", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        document1.text("Cjke*{ocv=)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ascii", "ascii");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      
      Elements elements0 = document0.getElementsByIndexGreaterThan(678);
      assertNotNull(elements0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      Document document1 = (Document)document0.addClass("+P+Y>)5u)twWzJ*;B");
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      document1.doSetBaseUri("AfterAttributeValue_quoted");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("AfterAttributeValue_quoted", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("AfterAttributeValue_quoted", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements1 = document1.getElementsByAttributeValueMatching("AfterAttributeValue_quoted", "");
      assertNotNull(elements1);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("AfterAttributeValue_quoted", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("AfterAttributeValue_quoted", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertTrue(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(elements1, elements0);
      
      document0.setSiblingIndex(678);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("AfterAttributeValue_quoted", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(678, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertSame(document0, document1);
      
      Elements elements2 = document1.getElementsByClass(":ImmediateParent%s");
      assertNotNull(elements2);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("AfterAttributeValue_quoted", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(678, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("AfterAttributeValue_quoted", document1.baseUri());
      assertEquals(678, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertTrue(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/s?$o", "/s?$o");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/s?$o", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("/s?$o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      document0.setParentNode(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/s?$o", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("/s?$o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      String string0 = document0.text();
      assertNotNull(string0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/s?$o", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("/s?$o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("/s?$o", string0);
      
      TextNode textNode0 = TextNode.createFromEncoded("/s?$o", "/s?$o");
      assertNotNull(textNode0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(textNode0.hasParent());
      
      TextNode textNode1 = textNode0.text("/s?$o");
      assertNotNull(textNode1);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(textNode0.hasParent());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      assertFalse(textNode1.hasParent());
      assertSame(textNode0, textNode1);
      assertSame(textNode1, textNode0);
      
      Document document1 = (Document)document0.after((Node) textNode0);
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/s?$o", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("/s?$o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(textNode0.hasParent());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("/s?$o", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("/s?$o", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(textNode0, textNode1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("7e6+P1J6", "7e6+P1J6");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("7e6+P1J6", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7e6+P1J6", document0.location());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("7e6+P1J6", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7e6+P1J6", document0.location());
      assertEquals("7e6+P1J6", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      
      Element element1 = element0.wrap("R)H,");
      assertNotNull(element1);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("7e6+P1J6", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7e6+P1J6", document0.location());
      assertEquals("7e6+P1J6", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("7e6+P1J6", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      String string0 = element0.cssSelector();
      assertNotNull(string0);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("7e6+P1J6", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7e6+P1J6", document0.location());
      assertEquals("7e6+P1J6", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertSame(element0, element1);
      assertEquals("html > head > head", string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("7e6+P1J6", "7e6+P1J6");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("7e6+P1J6", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("7e6+P1J6", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("7e6+P1J6", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("7e6+P1J6", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("7e6+P1J6", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.tagName());
      
      String string0 = element0.cssSelector();
      assertNotNull(string0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("7e6+P1J6", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("7e6+P1J6", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("7e6+P1J6", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertEquals("html > head", string0);
      
      Element element1 = element0.parent();
      assertNotNull(element1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("7e6+P1J6", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("7e6+P1J6", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("7e6+P1J6", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertEquals("7e6+P1J6", element1.baseUri());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("html", element1.nodeName());
      assertEquals("html", element1.tagName());
      assertEquals(2, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Document.createShell("/8v]/`jq]i/");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/8v]/`jq]i/", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("/8v]/`jq]i/", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/8v]/`jq]i/", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("/8v]/`jq]i/", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("/8v]/`jq]i/", element0.baseUri());
      
      String string0 = document0.val();
      assertNotNull(string0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/8v]/`jq]i/", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("/8v]/`jq]i/", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", string0);
      
      Element element1 = element0.empty();
      assertNotNull(element1);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/8v]/`jq]i/", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("/8v]/`jq]i/", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("/8v]/`jq]i/", element0.baseUri());
      assertEquals("head", element1.tagName());
      assertEquals("/8v]/`jq]i/", element1.baseUri());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Attributes attributes0 = element0.attributes();
      assertNotNull(attributes0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/8v]/`jq]i/", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("/8v]/`jq]i/", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("/8v]/`jq]i/", element0.baseUri());
      assertEquals(0, attributes0.size());
      assertSame(element0, element1);
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains("/8v]/`jq]i/"));
      
      Element element2 = element0.classNames(set0);
      assertNotNull(element2);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/8v]/`jq]i/", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("/8v]/`jq]i/", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("/8v]/`jq]i/", element0.baseUri());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("head", element2.nodeName());
      assertEquals(0, element2.childNodeSize());
      assertTrue(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals("/8v]/`jq]i/", element2.baseUri());
      assertTrue(element2.hasParent());
      assertEquals("head", element2.tagName());
      assertFalse(set0.contains("/8v]/`jq]i/"));
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element2, element0);
      assertSame(element2, element1);
      
      Element element3 = null;
      try {
        element3 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("z>uwd  a\"a", "z>uwd  a\"a");
      assertNotNull(document0);
      assertEquals("z>uwd  a\"a", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("z>uwd  a\"a", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      
      List<DataNode> list0 = document0.dataNodes();
      assertNotNull(list0);
      assertEquals("z>uwd  a\"a", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("z>uwd  a\"a", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Document document1 = (Document)document0.attr("D)&o", "z>uwd  a\"a");
      assertNotNull(document1);
      assertEquals("z>uwd  a\"a", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("z>uwd  a\"a", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("z>uwd  a\"a", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("z>uwd  a\"a", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document1.getElementsMatchingText("z>uwd  a\"a");
      assertNotNull(elements0);
      assertEquals("z>uwd  a\"a", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("z>uwd  a\"a", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("z>uwd  a\"a", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("z>uwd  a\"a", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      // Undeclared exception!
      try { 
        document1.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("7e6+PtJ6", "7e6+PtJ6");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("7e6+PtJ6", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("7e6+PtJ6", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      Elements elements0 = document0.getElementsByIndexGreaterThan((-237));
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals("7e6+PtJ6", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("7e6+PtJ6", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      
      document0.setParentNode(document0);
      assertFalse(document0.isBlock());
      assertEquals("7e6+PtJ6", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7e6+PtJ6", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      
      String string0 = Node.EmptyString;
      assertNotNull(string0);
      assertEquals("", string0);
      
      // Undeclared exception!
      document0.appendElement(":/brV2rxxVr~&");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("opsi.J", "opsi.J");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("opsi.J", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("opsi.J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      
      String string0 = document0.text();
      assertNotNull(string0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("opsi.J", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("opsi.J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("opsi.J", string0);
      
      Document document1 = (Document)document0.addClass("");
      assertNotNull(document1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("opsi.J", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("opsi.J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("opsi.J", document1.baseUri());
      assertEquals("opsi.J", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsByClass("Invalid character reference: %s");
      assertNotNull(elements0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("opsi.J", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("opsi.J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Document.createShell("A7h(Z8zK^");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("A7h(Z8zK^", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("A7h(Z8zK^", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("A7h(Z8zK^", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("A7h(Z8zK^", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("A7h(Z8zK^", element0.baseUri());
      assertEquals("body", element0.tagName());
      
      Element element1 = element0.appendTo(document0);
      assertNotNull(element1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("A7h(Z8zK^", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("A7h(Z8zK^", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("A7h(Z8zK^", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("A7h(Z8zK^", element1.baseUri());
      assertEquals("body", element1.nodeName());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      Element element2 = element1.attr("Zt/", "1EHhU%`e&#~MsY");
      assertNotNull(element2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("A7h(Z8zK^", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("A7h(Z8zK^", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("A7h(Z8zK^", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("A7h(Z8zK^", element1.baseUri());
      assertEquals("body", element1.nodeName());
      assertEquals(0, element2.childNodeSize());
      assertEquals("body", element2.tagName());
      assertTrue(element2.isBlock());
      assertEquals("body", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.siblingIndex());
      assertEquals("A7h(Z8zK^", element2.baseUri());
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element2, element1);
      assertSame(element2, element0);
      
      Element element3 = element2.addClass("A7h(Z8zK^");
      assertNotNull(element3);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("A7h(Z8zK^", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("A7h(Z8zK^", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("A7h(Z8zK^", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("A7h(Z8zK^", element1.baseUri());
      assertEquals("body", element1.nodeName());
      assertEquals(0, element2.childNodeSize());
      assertEquals("body", element2.tagName());
      assertTrue(element2.isBlock());
      assertEquals("body", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.siblingIndex());
      assertEquals("A7h(Z8zK^", element2.baseUri());
      assertEquals("body", element3.nodeName());
      assertTrue(element3.hasParent());
      assertEquals(0, element3.childNodeSize());
      assertEquals(1, element3.siblingIndex());
      assertEquals("A7h(Z8zK^", element3.baseUri());
      assertTrue(element3.isBlock());
      assertEquals("body", element3.tagName());
      assertSame(element0, element3);
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element1, element3);
      assertSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element2, element1);
      assertSame(element2, element0);
      assertSame(element2, element3);
      assertSame(element3, element1);
      assertSame(element3, element0);
      assertSame(element3, element2);
      
      int int0 = element0.elementSiblingIndex();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("A7h(Z8zK^", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("A7h(Z8zK^", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("A7h(Z8zK^", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertSame(element0, element3);
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertEquals(1, int0);
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("A7h(Z8zK^", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("A7h(Z8zK^", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("z>uwd  a\"a", "z>uwd  a\"a");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("z>uwd  a\"a", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("z>uwd  a\"a", document0.location());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("z>uwd  a\"a", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("z>uwd  a\"a", document0.location());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertEquals("z>uwd  a\"a", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      
      String string0 = document0.data();
      assertNotNull(string0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("z>uwd  a\"a", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("z>uwd  a\"a", document0.location());
      assertEquals("", string0);
      
      Element element1 = element0.val("z>uwd  a\"a");
      assertNotNull(element1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("z>uwd  a\"a", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("z>uwd  a\"a", document0.location());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertEquals("z>uwd  a\"a", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("z>uwd  a\"a", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("head", element1.tagName());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("opsi.J", "opsi.J");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("opsi.J", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("opsi.J", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("opsi.J", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("opsi.J", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("opsi.J", element0.baseUri());
      
      String string0 = element0.cssSelector();
      assertNotNull(string0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("opsi.J", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("opsi.J", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("opsi.J", element0.baseUri());
      assertEquals("html > head", string0);
      
      String string1 = element0.val();
      assertNotNull(string1);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("opsi.J", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("opsi.J", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("opsi.J", element0.baseUri());
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      Elements elements0 = document0.getElementsByClass("html > head");
      assertNotNull(elements0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("opsi.J", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("opsi.J", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      Element element1 = element0.html("option");
      assertNotNull(element1);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("opsi.J", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("opsi.J", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("opsi.J", element0.baseUri());
      assertEquals("opsi.J", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.isBlock());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document document0 = Document.createShell("opsi.J");
      assertNotNull(document0);
      assertEquals("opsi.J", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("opsi.J", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals("opsi.J", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("opsi.J", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("opsi.J", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("e.7oM\r<;bkI38NkgN/");
      assertNotNull(mockPrintStream0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      assertNotNull(document_OutputSettings1);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      assertNotNull(document_OutputSettings2);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.syntax(document_OutputSettings_Syntax0);
      assertNotNull(document_OutputSettings3);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.outline());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      
      Elements elements0 = document0.getElementsByClass("!/IjMugqk?eiJ");
      assertNotNull(elements0);
      assertEquals("opsi.J", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("opsi.J", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.indentAmount(102);
      assertNotNull(document_OutputSettings4);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(102, document_OutputSettings2.indentAmount());
      assertEquals(102, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.outline());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(102, document_OutputSettings4.indentAmount());
      assertFalse(document_OutputSettings4.outline());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings4.syntax());
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      
      document0.outerHtmlHead(mockPrintStream0, 32, document_OutputSettings4);
      assertEquals("opsi.J", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("opsi.J", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(102, document_OutputSettings2.indentAmount());
      assertEquals(102, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.outline());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(102, document_OutputSettings4.indentAmount());
      assertFalse(document_OutputSettings4.outline());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings4.syntax());
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      
      String string0 = element0.cssSelector();
      assertNotNull(string0);
      assertEquals("opsi.J", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("opsi.J", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("opsi.J", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("html > head", string0);
      
      String string1 = element0.nodeName();
      assertNotNull(string1);
      assertEquals("opsi.J", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("opsi.J", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("opsi.J", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(string1.equals((Object)string0));
      assertEquals("head", string1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Document.createShell("opsi.J");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("opsi.J", document0.baseUri());
      assertEquals("opsi.J", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'Z';
      charArray0[1] = 'S';
      charArray0[2] = 't';
      charArray0[3] = 'j';
      charArray0[4] = 'H';
      charArray0[5] = '<';
      charArray0[6] = '';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.hasArray());
      assertEquals("ZStjH<", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(7, charBuffer0.capacity());
      assertEquals(7, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(7, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(7, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertArrayEquals(new char[] {'Z', 'S', 't', 'j', 'H', '<', ''}, charArray0);
      assertEquals(7, charArray0.length);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertNotNull(document_OutputSettings1);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      assertNotNull(document_OutputSettings2);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.indentAmount(3672);
      assertNotNull(document_OutputSettings3);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(3672, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertEquals(3672, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(3672, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(3672, document_OutputSettings3.indentAmount());
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, (-747), document_OutputSettings3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Document.createShell("opsi.J");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("opsi.J", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("opsi.J", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("opsi.J", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("opsi.J", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("opsi.J", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      
      String string0 = element0.cssSelector();
      assertNotNull(string0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("opsi.J", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("opsi.J", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("opsi.J", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("html > head", string0);
      
      Element element1 = element0.lastElementSibling();
      assertNotNull(element1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("opsi.J", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("opsi.J", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("opsi.J", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("opsi.J", element1.baseUri());
      assertEquals("body", element1.tagName());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      Element element2 = element0.text("opsi.J");
      assertNotNull(element2);
      assertEquals(0, document0.siblingIndex());
      assertEquals("opsi.J", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("opsi.J", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("opsi.J", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertTrue(element2.hasParent());
      assertEquals("head", element2.tagName());
      assertEquals(1, element2.childNodeSize());
      assertEquals("head", element2.nodeName());
      assertTrue(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals("opsi.J", element2.baseUri());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertNotSame(element0, element1);
      assertSame(element0, element2);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("opsi.J", "opsi.J");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("opsi.J", document0.baseUri());
      assertEquals("opsi.J", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = (Document)document0.toggleClass("opsi.J");
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("opsi.J", document0.baseUri());
      assertEquals("opsi.J", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("opsi.J", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("opsi.J", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      // Undeclared exception!
      try { 
        document0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Document.createShell("opsi.J");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("opsi.J", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("opsi.J", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Document document1 = (Document)document0.prependText("opsi.J");
      assertNotNull(document1);
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("opsi.J", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("opsi.J", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("opsi.J", document1.location());
      assertEquals("opsi.J", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      TextNode textNode0 = TextNode.createFromEncoded("#data", "#data");
      assertNotNull(textNode0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(textNode0.hasParent());
      
      document0.setParentNode(textNode0);
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("opsi.J", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("opsi.J", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(textNode0.hasParent());
      assertSame(document0, document1);
      
      // Undeclared exception!
      try { 
        document0.previousElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Document document0 = Document.createShell("ascii");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      Element element1 = element0.appendElement("textarea");
      assertNotNull(element1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertTrue(element1.hasParent());
      assertEquals("textarea", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("textarea", element1.tagName());
      assertEquals("ascii", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertFalse(element1.equals((Object)element0));
      assertNotSame(document0, document1);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      Node[] nodeArray0 = document0.childNodesAsArray();
      assertNotNull(nodeArray0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertEquals(1, nodeArray0.length);
      
      String string0 = element0.baseUri();
      assertNotNull(string0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(element0.equals((Object)element1));
      assertNotSame(document0, document1);
      assertNotSame(element0, element1);
      assertEquals("ascii", string0);
      
      document1.doSetBaseUri("html");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("html", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      List<Node> list0 = document1.childNodes();
      assertNotNull(list0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("html", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      String string1 = document0.nodeName();
      assertNotNull(string1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(document0, document1);
      assertEquals("#document", string1);
      
      Elements elements0 = document0.getElementsByAttribute("#document");
      assertNotNull(elements0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      Document document2 = (Document)document0.prependChild(document1);
      assertNotNull(document2);
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("html", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("ascii", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("ascii", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      
      String string2 = document2.wholeText();
      assertNotNull(string2);
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("html", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("ascii", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("ascii", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertEquals("", string2);
      
      document1.remove();
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("html", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      
      String string3 = document1.text();
      assertNotNull(string3);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("html", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertEquals("", string3);
      
      List<DataNode> list1 = document0.dataNodes();
      assertNotNull(list1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertFalse(document0.equals((Object)document1));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      
      boolean boolean1 = document2.hasText();
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("html", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("ascii", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("ascii", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(boolean1 == boolean0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("title", "title");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("title", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("title", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = (Document)document0.append("title");
      assertNotNull(document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("title", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("title", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("title", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("title", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      document0.setParentNode(document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("title", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("title", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("title", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("title", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document0.text();
      assertNotNull(string0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("title", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("title", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertEquals("title title", string0);
      
      Document document2 = (Document)document0.removeClass("title");
      assertNotNull(document2);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("title", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("title", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("title", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("title", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = "opsi.J";
      Document document0 = Parser.parseBodyFragmentRelaxed("opsi.J", "opsi.J");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("opsi.J", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("opsi.J", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" ", " ");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(" ", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(" ", document0.location());
      
      Document document1 = Parser.parseBodyFragmentRelaxed(" ", " ");
      assertNotNull(document1);
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(" ", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(" ", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document0.html(" ");
      assertNotNull(document2);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(" ", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(" ", document0.location());
      assertEquals(" ", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals(" ", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      
      boolean boolean0 = document0.hasText();
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(" ", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(" ", document0.location());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertFalse(boolean0);
      
      String string0 = document2.tagName();
      assertNotNull(string0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(" ", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(" ", document0.location());
      assertEquals(" ", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals(" ", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("#root", string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document document0 = new Document("GR?~");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("GR?~", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("GR?~", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals("GR?~", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("GR?~", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("GR?~", document1.location());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("GR?~", document1.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      List<TextNode> list0 = document1.textNodes();
      assertNotNull(list0);
      assertFalse(document0.isBlock());
      assertEquals("GR?~", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("GR?~", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("GR?~", document1.location());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("GR?~", document1.baseUri());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document1.appendChild(document0);
      assertNotNull(document2);
      assertFalse(document0.isBlock());
      assertEquals("GR?~", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("GR?~", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("GR?~", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("GR?~", document1.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("GR?~", document2.location());
      assertEquals("GR?~", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      Document document3 = (Document)document0.after("boPWT*-I,i");
      assertNotNull(document3);
      assertFalse(document0.isBlock());
      assertEquals("GR?~", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("GR?~", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("GR?~", document3.baseUri());
      assertEquals("GR?~", document3.location());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[!xElRkAN*J>g", "head");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("head", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("head", document0.location());
      
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("head", true);
      assertNotNull(xmlDeclaration0);
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      
      document0.setParentNode(xmlDeclaration0);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("head", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("head", document0.location());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.nextElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Document.createShell("title");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("title", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("title", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("title", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("title", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals("head", element0.tagName());
      assertEquals("title", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      
      Elements elements0 = element0.getElementsByTag("title");
      assertNotNull(elements0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("title", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("title", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals("head", element0.tagName());
      assertEquals("title", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      Element element1 = element0.previousElementSibling();
      assertNull(element1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("title", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("title", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals("head", element0.tagName());
      assertEquals("title", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      
      TextNode textNode0 = new TextNode("title");
      assertNotNull(textNode0);
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(textNode0.hasParent());
      assertEquals("#text", textNode0.nodeName());
      
      Element element2 = element0.after((Node) textNode0);
      assertNotNull(element2);
      assertEquals(0, document0.siblingIndex());
      assertEquals("title", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("title", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals("head", element0.tagName());
      assertEquals("title", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, textNode0.siblingIndex());
      assertTrue(textNode0.hasParent());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("title", element2.baseUri());
      assertTrue(element2.hasParent());
      assertEquals("head", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertEquals(0, element2.childNodeSize());
      assertTrue(element2.isBlock());
      assertEquals("head", element2.tagName());
      assertSame(element0, element2);
      assertSame(element2, element0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("option", "option");
      assertNotNull(document0);
      assertEquals("option", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("option", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      Document document1 = (Document)document0.append("option");
      assertNotNull(document1);
      assertEquals("option", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("option", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("option", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("option", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.appendChild(document0);
      assertNotNull(document2);
      assertEquals("option", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("option", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals("option", document1.location());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.siblingIndex());
      assertEquals("option", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(3, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("option", document2.location());
      assertEquals(2, document2.siblingIndex());
      assertEquals("option", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(":contains(text) query must not be empty");
      assertNotNull(mockFileWriter0);
      
      // Undeclared exception!
      document2.html(mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Document.createShell("title");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("title", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("title", document0.baseUri());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("title", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("title", document0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("title", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      
      Element element1 = element0.append("R{qU\"<g92[qW");
      assertNotNull(element1);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("title", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("title", document0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("title", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("title", element1.baseUri());
      assertEquals("head", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      int int0 = element0.elementSiblingIndex();
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("title", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("title", document0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("title", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertSame(element0, element1);
      assertEquals(0, int0);
      
      Element element2 = element0.previousElementSibling();
      assertNull(element2);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("title", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("title", document0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("title", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("i>k#]w", "i>k#]w");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals("i>k#]w", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("i>k#]w", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      TextNode textNode0 = TextNode.createFromEncoded("X1wsV3t``", "X1wsV3t``");
      assertNotNull(textNode0);
      assertFalse(textNode0.hasParent());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      document0.setParentNode(textNode0);
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("i>k#]w", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("i>k#]w", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(textNode0.hasParent());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("zD+]J7IHa%P8w-q^ P", "zD+]J7IHa%P8w-q^ P");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zD+]J7IHa%P8w-q^ P", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("zD+]J7IHa%P8w-q^ P", document0.location());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zD+]J7IHa%P8w-q^ P", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("zD+]J7IHa%P8w-q^ P", document0.location());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("zD+]J7IHa%P8w-q^ P", element0.baseUri());
      
      Element element1 = element0.previousElementSibling();
      assertNull(element1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zD+]J7IHa%P8w-q^ P", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("zD+]J7IHa%P8w-q^ P", document0.location());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("zD+]J7IHa%P8w-q^ P", element0.baseUri());
      
      Element element2 = element0.before((Node) document0);
      assertNotNull(element2);
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zD+]J7IHa%P8w-q^ P", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("zD+]J7IHa%P8w-q^ P", document0.location());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("zD+]J7IHa%P8w-q^ P", element0.baseUri());
      assertEquals(0, element2.childNodeSize());
      assertEquals("head", element2.nodeName());
      assertEquals("zD+]J7IHa%P8w-q^ P", element2.baseUri());
      assertEquals("head", element2.tagName());
      assertTrue(element2.isBlock());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.siblingIndex());
      assertSame(element0, element2);
      assertSame(element2, element0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parse("Z>uWD  A\"A", "Z>uWD  A\"A");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Z>uWD  A\"A", document0.baseUri());
      assertEquals("Z>uWD  A\"A", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      String string0 = document0.html();
      assertNotNull(string0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Z>uWD  A\"A", document0.baseUri());
      assertEquals("Z>uWD  A\"A", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("<html>\n <head></head>\n <body>\n  Z&gt;uWD A\"A\n </body>\n</html>", string0);
      
      Elements elements0 = document0.getElementsMatchingOwnText("<html>\n <head></head>\n <body>\n  Z&gt;uWD A\"A\n </body>\n</html>");
      assertNotNull(elements0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Z>uWD  A\"A", document0.baseUri());
      assertEquals("Z>uWD  A\"A", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      Document document1 = Parser.parse("<html>\n <head></head>\n <body>\n  Z&gt;uWD A\"A\n </body>\n</html>", "<html>\n <head></head>\n <body>\n  Z&gt;uWD A\"A\n </body>\n</html>");
      assertNotNull(document1);
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("<html>\n <head></head>\n <body>\n  Z&gt;uWD A\"A\n </body>\n</html>", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("<html>\n <head></head>\n <body>\n  Z&gt;uWD A\"A\n </body>\n</html>", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      
      String string1 = document1.data();
      assertNotNull(string1);
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("<html>\n <head></head>\n <body>\n  Z&gt;uWD A\"A\n </body>\n</html>", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("<html>\n <head></head>\n <body>\n  Z&gt;uWD A\"A\n </body>\n</html>", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(document1, document0);
      assertEquals("", string1);
      
      Document document2 = (Document)document1.appendChild(document0);
      assertNotNull(document2);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Z>uWD  A\"A", document0.baseUri());
      assertEquals(1, document0.siblingIndex());
      assertEquals("Z>uWD  A\"A", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("<html>\n <head></head>\n <body>\n  Z&gt;uWD A\"A\n </body>\n</html>", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("<html>\n <head></head>\n <body>\n  Z&gt;uWD A\"A\n </body>\n</html>", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("<html>\n <head></head>\n <body>\n  Z&gt;uWD A\"A\n </body>\n</html>", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("<html>\n <head></head>\n <body>\n  Z&gt;uWD A\"A\n </body>\n</html>", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      
      boolean boolean0 = document2.hasClass("<html>\n <head></head>\n <body>\n  Z&gt;uWD A\"A\n </body>\n</html>");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Z>uWD  A\"A", document0.baseUri());
      assertEquals(1, document0.siblingIndex());
      assertEquals("Z>uWD  A\"A", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("<html>\n <head></head>\n <body>\n  Z&gt;uWD A\"A\n </body>\n</html>", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("<html>\n <head></head>\n <body>\n  Z&gt;uWD A\"A\n </body>\n</html>", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("<html>\n <head></head>\n <body>\n  Z&gt;uWD A\"A\n </body>\n</html>", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("<html>\n <head></head>\n <body>\n  Z&gt;uWD A\"A\n </body>\n</html>", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        document2.getElementsByAttributeValueStarting("Z>uWD  A\"A", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = "opsi.J";
      Document document0 = Parser.parseBodyFragmentRelaxed("opsi.J", "opsi.J");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("opsi.J", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("opsi.J", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      List<Node> list0 = document0.childNodes();
      assertNotNull(list0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("opsi.J", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("opsi.J", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("opsi.J", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isEmpty());
      assertEquals("opsi.j", tag0.toString());
      assertEquals("opsi.j", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      
      CDataNode cDataNode0 = new CDataNode("ZS16!bnsg%i'6' H)O");
      assertNotNull(cDataNode0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "value", attributes0);
      assertNotNull(formElement0);
      assertFalse(tag0.isEmpty());
      assertEquals("opsi.j", tag0.toString());
      assertEquals("opsi.j", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("opsi.j", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals("value", formElement0.baseUri());
      assertEquals("opsi.j", formElement0.nodeName());
      
      Tag tag1 = Tag.valueOf("ascii", parseSettings0);
      assertNotNull(tag1);
      assertFalse(tag1.isKnownTag());
      assertFalse(tag1.preserveWhitespace());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.isEmpty());
      assertFalse(tag1.isData());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.isBlock());
      assertTrue(tag1.isInline());
      assertTrue(tag1.formatAsBlock());
      assertEquals("ascii", tag1.getName());
      assertFalse(tag1.canContainBlock());
      assertFalse(tag1.isSelfClosing());
      assertEquals("ascii", tag1.toString());
      assertFalse(tag1.equals((Object)tag0));
      assertNotSame(tag1, tag0);
      
      FormElement formElement1 = formElement0.addElement(document0);
      assertNotNull(formElement1);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("opsi.J", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("opsi.J", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(tag0.isEmpty());
      assertEquals("opsi.j", tag0.toString());
      assertEquals("opsi.j", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("opsi.j", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals("value", formElement0.baseUri());
      assertEquals("opsi.j", formElement0.nodeName());
      assertFalse(formElement1.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("opsi.j", formElement1.tagName());
      assertEquals("value", formElement1.baseUri());
      assertEquals("opsi.j", formElement1.nodeName());
      assertFalse(formElement1.isBlock());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(tag0.equals((Object)tag1));
      assertNotSame(tag0, tag1);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      
      document0.setParentNode(formElement1);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("opsi.J", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("opsi.J", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(tag0.isEmpty());
      assertEquals("opsi.j", tag0.toString());
      assertEquals("opsi.j", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("opsi.j", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals("value", formElement0.baseUri());
      assertEquals("opsi.j", formElement0.nodeName());
      assertFalse(formElement1.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("opsi.j", formElement1.tagName());
      assertEquals("value", formElement1.baseUri());
      assertEquals("opsi.j", formElement1.nodeName());
      assertFalse(formElement1.isBlock());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(tag0.equals((Object)tag1));
      assertNotSame(tag0, tag1);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      
      String string1 = document0.text();
      assertNotNull(string1);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("opsi.J", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("opsi.J", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(string1.equals((Object)string0));
      assertEquals("opsi.J", string1);
      
      StringBuffer stringBuffer0 = new StringBuffer("");
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      // Undeclared exception!
      try { 
        formElement0.outerHtmlTail(stringBuffer0, 62, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("opsi.J", "opsi.J");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("opsi.J", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("opsi.J", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-85);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-83), (byte) (-85)}, byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      
      document0.setParentNode(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("opsi.J", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("opsi.J", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      String string0 = document0.text();
      assertNotNull(string0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("opsi.J", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("opsi.J", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("opsi.J", string0);
      
      String string1 = document0.text();
      assertNotNull(string1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("opsi.J", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("opsi.J", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(string1.equals((Object)string0));
      assertEquals("opsi.J", string1);
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("opsi.J", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertEquals("opsi.J", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("opsi.J", tag0.toString());
      assertTrue(tag0.isInline());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("opsi.J", "textarea");
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Attributes attributes2 = attributes1.put("opsi.J", false);
      assertNotNull(attributes2);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, attributes2.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "opsi.J", attributes2);
      assertNotNull(pseudoTextElement0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertEquals("opsi.J", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("opsi.J", tag0.toString());
      assertTrue(tag0.isInline());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, attributes2.size());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("opsi.J", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("opsi.J", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("opsi.J", pseudoTextElement0.baseUri());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      
      Document document1 = (Document)document0.before((Node) pseudoTextElement0);
      assertNotNull(document1);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("opsi.J", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("opsi.J", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertEquals("opsi.J", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("opsi.J", tag0.toString());
      assertTrue(tag0.isInline());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, attributes2.size());
      assertEquals("opsi.J", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("opsi.J", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("opsi.J", pseudoTextElement0.baseUri());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertTrue(pseudoTextElement0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("opsi.J", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("opsi.J", document1.baseUri());
      assertSame(document0, document1);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(document1, document0);
      
      Map<String, String> map0 = pseudoTextElement0.dataset();
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertEquals("opsi.J", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("opsi.J", tag0.toString());
      assertTrue(tag0.isInline());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, attributes2.size());
      assertEquals("opsi.J", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("opsi.J", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("opsi.J", pseudoTextElement0.baseUri());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertTrue(pseudoTextElement0.hasParent());
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Document.createShell("ascii");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      document0.setSiblingIndex((-4));
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals((-4), document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.attr("ascii", "ascii");
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals((-4), document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals((-4), document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.baseUri());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsByAttributeValueMatching("ascii", "ascii");
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals((-4), document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertSame(document0, document1);
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals((-4), document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertSame(document0, document1);
      
      Node[] nodeArray0 = document0.childNodesAsArray();
      assertNotNull(nodeArray0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals((-4), document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertSame(document0, document1);
      assertEquals(1, nodeArray0.length);
      
      String string0 = element0.baseUri();
      assertNotNull(string0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals((-4), document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertSame(document0, document1);
      assertEquals("ascii", string0);
      
      Elements elements1 = element0.previousElementSiblings();
      assertNotNull(elements1);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals((-4), document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertFalse(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      
      Element element1 = document0.createElement("c0>c<$/+X`AIiY/>}");
      assertNotNull(element1);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals((-4), document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(element1.isBlock());
      assertEquals("c0>c<$/+X`AIiY/>}", element1.tagName());
      assertEquals("ascii", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("c0>c<$/+X`AIiY/>}", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.equals((Object)element0));
      assertSame(document0, document1);
      assertNotSame(element1, element0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document2 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document2);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals((-4), document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals((-4), document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("ascii", document2.location());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("ascii", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      document2.title("cj0e|");
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals((-4), document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals((-4), document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("ascii", document2.location());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("ascii", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = (Document)document2.append("org.jsoup.nodes.Element");
      assertNotNull(document3);
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals((-4), document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals((-4), document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("ascii", document2.location());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertEquals("ascii", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("ascii", document3.location());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("ascii", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertEquals((-4), document3.siblingIndex());
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      
      Comment comment0 = new Comment("g", "ascii");
      assertNotNull(comment0);
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      
      boolean boolean0 = document3.hasSameValue(comment0);
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals((-4), document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals((-4), document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("ascii", document2.location());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertEquals("ascii", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("ascii", document3.location());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("ascii", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertEquals((-4), document3.siblingIndex());
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertFalse(boolean0);
      
      String string1 = document1.data();
      assertNotNull(string1);
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals((-4), document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals((-4), document1.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.baseUri());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(string1.equals((Object)string0));
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertEquals("", string1);
      
      String string2 = document1.tagName();
      assertNotNull(string2);
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals((-4), document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals((-4), document1.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.baseUri());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertEquals("#root", string2);
      
      Elements elements2 = document1.siblingElements();
      assertNotNull(elements2);
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals((-4), document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals((-4), document1.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.baseUri());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      
      Elements elements3 = document1.getElementsByAttributeValueNot("AfterAttributeValue_quoted", "(b3{q");
      assertNotNull(elements3);
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals((-4), document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(5, elements3.size());
      assertFalse(elements3.isEmpty());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals((-4), document1.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.baseUri());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(elements3.equals((Object)elements2));
      assertFalse(elements3.equals((Object)elements1));
      assertFalse(elements3.equals((Object)elements0));
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements0);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Element element0 = new Element("QTt%sB");
      assertNotNull(element0);
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("QTt%sB", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("QTt%sB", element0.tagName());
      
      Document document0 = new Document("QTt%sB");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("QTt%sB", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("QTt%sB", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "QTt%sB");
      assertNotNull(charBuffer0);
      assertEquals(6, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(6, charBuffer0.remaining());
      assertEquals(6, charBuffer0.limit());
      assertEquals(6, charBuffer0.length());
      assertEquals("QTt%sB", charBuffer0.toString());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      assertNotNull(document_OutputSettings1);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.outline(true);
      assertNotNull(document_OutputSettings2);
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.outline());
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.clone();
      assertNotNull(document_OutputSettings3);
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.outline());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.escapeMode(entities_EscapeMode0);
      assertNotNull(document_OutputSettings4);
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.outline());
      assertTrue(document_OutputSettings3.outline());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertTrue(document_OutputSettings4.outline());
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      
      // Undeclared exception!
      try { 
        element0.outerHtmlTail(charBuffer0, (-7), document_OutputSettings4);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Parser.parse("/8V]/`Jq]I/", "/8V]/`Jq]I/");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      document0.childNodes = null;
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        document0.html("/8V]/`Jq]I/");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = "ascii";
      Document document0 = Parser.parse("ascii", "ascii");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      Tag tag0 = Tag.valueOf("ascii");
      assertNotNull(tag0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertEquals("ascii", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertEquals("ascii", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      
      Element element0 = new Element(tag0, "#root");
      assertNotNull(element0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertEquals("ascii", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertEquals("ascii", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("#root", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("ascii", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("ascii", element0.nodeName());
      
      document0.setParentNode(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertEquals("ascii", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertEquals("ascii", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("#root", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("ascii", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("ascii", element0.nodeName());
      
      // Undeclared exception!
      try { 
        document0.after((Node) element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("zD+]J7IHa%P8w-q^ P", "zD+]J7IHa%P8w-q^ P");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("zD+]J7IHa%P8w-q^ P", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zD+]J7IHa%P8w-q^ P", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      String string0 = document0.val();
      assertNotNull(string0);
      assertFalse(document0.hasParent());
      assertEquals("zD+]J7IHa%P8w-q^ P", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zD+]J7IHa%P8w-q^ P", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        document0.wrap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = "option";
      Document document0 = Parser.parseBodyFragment("option", "option");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("option", document0.location());
      assertEquals("option", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      // Undeclared exception!
      try { 
        document0.html((MockFileWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("opsi.J", "opsi.J");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("opsi.J", document0.baseUri());
      assertEquals("opsi.J", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      boolean boolean0 = document0.is("opsi.J");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("opsi.J", document0.baseUri());
      assertEquals("opsi.J", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(boolean0);
      
      Document document1 = new Document("opsi.J");
      assertNotNull(document1);
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("opsi.J", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("opsi.J", document1.baseUri());
      assertFalse(document1.equals((Object)document0));
      
      document1.setParentNode(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("opsi.J", document0.baseUri());
      assertEquals("opsi.J", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("opsi.J", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("opsi.J", document1.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Elements elements0 = document1.getElementsByIndexGreaterThan((-394));
      assertNotNull(elements0);
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("opsi.J", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("opsi.J", document1.baseUri());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document0.text("ol");
      assertNotNull(document2);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("opsi.J", document0.baseUri());
      assertEquals("opsi.J", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("opsi.J", document2.location());
      assertEquals("opsi.J", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("option", "option");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("option", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("option", document0.location());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = (Document)document0.append("option");
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("option", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("option", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("option", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("option", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      List<TextNode> list0 = document0.textNodes();
      assertNotNull(list0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("option", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("option", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertSame(document0, document1);
      
      Elements elements0 = document0.getElementsByIndexGreaterThan(37);
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("option", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("option", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = "/8\\V]/`Jqbw]I/";
      Document document0 = Parser.parse("/8V]/`Jqbw]I/", "/8V]/`Jqbw]I/");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/8V]/`Jqbw]I/", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/8V]/`Jqbw]I/", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      boolean boolean0 = document0.hasText();
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/8V]/`Jqbw]I/", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/8V]/`Jqbw]I/", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(boolean0);
      
      boolean boolean1 = false;
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Elements elements0 = document0.getElementsContainingText("/8V]/`Jqbw]I/");
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/8V]/`Jqbw]I/", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/8V]/`Jqbw]I/", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(3, elements0.size());
      assertFalse(elements0.isEmpty());
      
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/8V]/`Jqbw]I/", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/8V]/`Jqbw]I/", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = new Document("</");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      
      String string0 = document0.html();
      assertNotNull(string0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertEquals("", string0);
      
      Element element0 = document0.createElement("cpNlTC\"6l");
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("cpNlTC\"6l", element0.tagName());
      assertEquals("</", element0.baseUri());
      assertEquals("cpNlTC\"6l", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      
      Element element1 = element0.previousElementSibling();
      assertNull(element1);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("cpNlTC\"6l", element0.tagName());
      assertEquals("</", element0.baseUri());
      assertEquals("cpNlTC\"6l", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      
      Elements elements0 = element0.getAllElements();
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("cpNlTC\"6l", element0.tagName());
      assertEquals("</", element0.baseUri());
      assertEquals("cpNlTC\"6l", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      // Undeclared exception!
      try { 
        element0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("option", "option");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("option", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("option", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document1 = parser0.parseInput("option", "Tag name must not be empty.");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document0.appendTo(document1);
      assertNotNull(document2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("option", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("option", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("option", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.siblingIndex());
      assertEquals("option", document2.location());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      
      Document document3 = (Document)document0.append("option");
      assertNotNull(document3);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("option", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("option", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertEquals(1, document3.siblingIndex());
      assertEquals("option", document3.location());
      assertEquals("option", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document3, document0);
      assertNotSame(document3, document1);
      assertSame(document3, document2);
      
      Document document4 = (Document)document0.val("option");
      assertNotNull(document4);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("option", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("option", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertEquals(2, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.siblingIndex());
      assertEquals("option", document4.location());
      assertFalse(document4.isBlock());
      assertEquals("option", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertTrue(document4.hasParent());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document4.equals((Object)document1));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document4, document2);
      assertNotSame(document4, document1);
      assertSame(document4, document0);
      assertSame(document4, document3);
      
      Pattern pattern0 = Pattern.compile("option");
      assertNotNull(pattern0);
      assertEquals("option", pattern0.pattern());
      assertEquals("option", pattern0.toString());
      assertEquals(0, pattern0.flags());
      
      Elements elements0 = document1.getElementsMatchingOwnText(pattern0);
      assertNotNull(elements0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("option", pattern0.pattern());
      assertEquals("option", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals(3, elements0.size());
      assertFalse(elements0.isEmpty());
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document2);
      assertNotSame(document1, document4);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parse("f>l4", "f>l4");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("f>l4", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("f>l4", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("f>l4", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("f>l4", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("f>l4", element0.baseUri());
      
      Element element1 = element0.after("f>l4");
      assertNotNull(element1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("f>l4", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("f>l4", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("f>l4", element0.baseUri());
      assertEquals("body", element1.nodeName());
      assertEquals("f>l4", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      document0.setParentNode(element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("f>l4", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("f>l4", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("f>l4", element0.baseUri());
      assertSame(element0, element1);
      
      Elements elements0 = document0.getElementsByIndexGreaterThan((-2819));
      assertNotNull(elements0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("f>l4", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("f>l4", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(elements0.isEmpty());
      assertEquals(6, elements0.size());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parse("f>l4", "f>l4");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("f>l4", document0.baseUri());
      assertEquals("f>l4", document0.location());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("f>l4", document0.baseUri());
      assertEquals("f>l4", document0.location());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("f>l4", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      
      document0.setParentNode(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("f>l4", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("f>l4", document0.location());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("f>l4", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      
      Elements elements0 = document0.getElementsByIndexGreaterThan((-2819));
      assertNotNull(elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("f>l4", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("f>l4", document0.location());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
      
      // Undeclared exception!
      element0.before("f>l4");
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parse("$EGr++>s7a|*0", "$EGr++>s7a|*0");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("$EGr++>s7a|*0", document0.baseUri());
      assertEquals("$EGr++>s7a|*0", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Element element0 = document0.appendElement("Must be true");
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("$EGr++>s7a|*0", document0.baseUri());
      assertEquals("$EGr++>s7a|*0", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("$EGr++>s7a|*0", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("must be true", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("must be true", element0.tagName());
      assertFalse(element0.isBlock());
      
      String string0 = document0.wholeText();
      assertNotNull(string0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("$EGr++>s7a|*0", document0.baseUri());
      assertEquals("$EGr++>s7a|*0", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("$EGr++>s7a|*0", string0);
      
      Element element1 = element0.html("xmlns");
      assertNotNull(element1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("$EGr++>s7a|*0", document0.baseUri());
      assertEquals("$EGr++>s7a|*0", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("$EGr++>s7a|*0", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("must be true", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("must be true", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("$EGr++>s7a|*0", element1.baseUri());
      assertEquals("must be true", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertEquals("must be true", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parse("ascii", "ascii");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      
      Tag tag0 = Tag.valueOf("ascii");
      assertNotNull(tag0);
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("ascii", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertEquals("ascii", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      
      Element element0 = new Element(tag0, "#root");
      assertNotNull(element0);
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("ascii", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertEquals("ascii", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertEquals("#root", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("ascii", element0.nodeName());
      assertEquals("ascii", element0.tagName());
      assertFalse(element0.hasParent());
      
      document0.setParentNode(element0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("ascii", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertEquals("ascii", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertEquals("#root", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("ascii", element0.nodeName());
      assertEquals("ascii", element0.tagName());
      assertFalse(element0.hasParent());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.append("ascii");
      assertNotNull(document2);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("ascii", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("ascii", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("ascii", document2.baseUri());
      assertTrue(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Document document3 = (Document)document2.clone();
      assertNotNull(document3);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("ascii", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("ascii", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("ascii", document2.baseUri());
      assertTrue(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("ascii", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("ascii", document3.baseUri());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      
      List<DataNode> list0 = document1.dataNodes();
      assertNotNull(list0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("ascii", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      
      String string0 = document2.ownText();
      assertNotNull(string0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("ascii", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("ascii", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("ascii", document2.baseUri());
      assertTrue(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("ascii", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parse("/8V]/`Jq]I/", "<html>\n <head></head>\n <body></body>\n</html>");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", element0.baseUri());
      assertEquals("body", element0.tagName());
      
      Element element1 = element0.previousElementSibling();
      assertNotNull(element1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      Element element2 = element0.nextElementSibling();
      assertNull(element2);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertFalse(element0.equals((Object)element1));
      assertNotSame(element0, element1);
      
      Element element3 = element0.attr("Tag name must not be empty.", true);
      assertNotNull(element3);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", element3.baseUri());
      assertEquals("body", element3.tagName());
      assertEquals(1, element3.siblingIndex());
      assertEquals(1, element3.childNodeSize());
      assertTrue(element3.isBlock());
      assertTrue(element3.hasParent());
      assertEquals("body", element3.nodeName());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element3.equals((Object)element1));
      assertNotSame(element0, element1);
      assertSame(element0, element3);
      assertNotSame(element3, element1);
      assertSame(element3, element0);
      
      document0.setParentNode(element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertFalse(element0.equals((Object)element1));
      assertNotSame(element0, element1);
      assertSame(element0, element3);
      
      Elements elements0 = document0.getElementsByIndexGreaterThan((-1042));
      assertNotNull(elements0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ascii", "ascii");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      Tag tag0 = Tag.valueOf("ascii");
      assertNotNull(tag0);
      assertFalse(tag0.isBlock());
      assertEquals("ascii", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("ascii", tag0.getName());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("ascii", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Document document2 = document0.clone();
      assertNotNull(document2);
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("ascii", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("ascii", document2.location());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      
      Element element1 = element0.appendChild(document1);
      assertNotNull(element1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("ascii", document1.location());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.nodeName());
      assertEquals("ascii", element1.baseUri());
      assertEquals("head", element1.tagName());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Element element2 = element0.previousElementSibling();
      assertNull(element2);
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(element0, element1);
      
      Element element3 = element0.wrap("ascii");
      assertNotNull(element3);
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element3.siblingIndex());
      assertTrue(element3.hasParent());
      assertEquals("head", element3.nodeName());
      assertEquals(1, element3.childNodeSize());
      assertTrue(element3.isBlock());
      assertEquals("ascii", element3.baseUri());
      assertEquals("head", element3.tagName());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element0, element3);
      assertSame(element3, element0);
      assertSame(element3, element1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = new Document("_w]qqf'D?u!.H!&Q*~");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("_w]qqf'D?u!.H!&Q*~", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("_w]qqf'D?u!.H!&Q*~", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      
      CDataNode cDataNode0 = new CDataNode("_w]qqf'D?u!.H!&Q*~");
      assertNotNull(cDataNode0);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      
      document0.setParentNode(cDataNode0);
      assertFalse(document0.isBlock());
      assertEquals("_w]qqf'D?u!.H!&Q*~", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("_w]qqf'D?u!.H!&Q*~", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.getElementsByIndexGreaterThan((-2819));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parse("f>l4", "f>l4");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("f>l4", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("f>l4", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("f>l4", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("f>l4", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("f>l4", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      
      Elements elements0 = element0.getElementsByAttributeStarting("4%=_vm");
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("f>l4", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("f>l4", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("f>l4", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      document0.setParentNode(element0);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("f>l4", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("f>l4", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("f>l4", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      
      Elements elements1 = document0.getElementsByIndexGreaterThan((-2819));
      assertNotNull(elements1);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("f>l4", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("f>l4", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(4, elements1.size());
      assertFalse(elements1.isEmpty());
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      
      boolean boolean0 = element0.isBlock();
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("f>l4", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("f>l4", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("f>l4", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Element element0 = new Element("QTt%sB");
      assertNotNull(element0);
      assertEquals("QTt%sB", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("QTt%sB", element0.tagName());
      assertEquals("", element0.baseUri());
      
      Document document0 = new Document("QTt%sB");
      assertNotNull(document0);
      assertEquals("QTt%sB", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("QTt%sB", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      
      Elements elements0 = element0.getElementsByTag("QTt%sB");
      assertNotNull(elements0);
      assertEquals("QTt%sB", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("QTt%sB", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      Element element1 = document0.getElementById("%in.-");
      assertNull(element1);
      assertEquals("QTt%sB", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("QTt%sB", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Document.createShell("ascii");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      document0.doSetBaseUri("=L");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals("=L", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      List<Node> list0 = document0.childNodes();
      assertNotNull(list0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals("=L", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      String string0 = document0.nodeName();
      assertNotNull(string0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals("=L", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", string0);
      
      CDataNode cDataNode0 = new CDataNode("=L");
      assertNotNull(cDataNode0);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      
      TextNode textNode0 = cDataNode0.text("ascii");
      assertNotNull(textNode0);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#cdata", textNode0.nodeName());
      assertFalse(textNode0.hasParent());
      assertSame(cDataNode0, textNode0);
      assertSame(textNode0, cDataNode0);
      
      Document document1 = (Document)document0.prependChild(textNode0);
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals("=L", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertTrue(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(0, textNode0.siblingIndex());
      assertTrue(textNode0.hasParent());
      assertEquals("#cdata", textNode0.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("=L", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(cDataNode0, textNode0);
      assertSame(textNode0, cDataNode0);
      assertSame(document1, document0);
      
      String string1 = document1.text();
      assertNotNull(string1);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals("=L", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertTrue(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(0, textNode0.siblingIndex());
      assertTrue(textNode0.hasParent());
      assertEquals("#cdata", textNode0.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("=L", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(string1.equals((Object)string0));
      assertSame(document0, document1);
      assertSame(cDataNode0, textNode0);
      assertSame(textNode0, cDataNode0);
      assertSame(document1, document0);
      assertEquals("ascii", string1);
      
      Elements elements0 = document0.previousElementSiblings();
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals("=L", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(document0, document1);
      
      Element element0 = new Element("Insert position out of bounds.");
      assertNotNull(element0);
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("Insert position out of bounds.", element0.tagName());
      assertEquals("Insert position out of bounds.", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      
      String string2 = element0.cssSelector();
      assertNotNull(string2);
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("Insert position out of bounds.", element0.tagName());
      assertEquals("Insert position out of bounds.", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Insert position out of bounds.", string2);
      
      Element element1 = document0.head();
      assertNotNull(element1);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals("=L", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("head", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.nodeName());
      assertEquals("ascii", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.equals((Object)element0));
      assertSame(document0, document1);
      assertNotSame(element1, element0);
      
      Document document2 = (Document)document1.appendText(": ");
      assertNotNull(document2);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals("=L", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(0, textNode0.siblingIndex());
      assertTrue(textNode0.hasParent());
      assertEquals("#cdata", textNode0.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("=L", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("ascii", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(3, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("=L", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(cDataNode0, textNode0);
      assertSame(textNode0, cDataNode0);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parse("cj0e|", "cj0e|");
      assertNotNull(document0);
      assertEquals("cj0e|", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("cj0e|", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      Document document1 = (Document)document0.val("^s+");
      assertNotNull(document1);
      assertEquals("cj0e|", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("cj0e|", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("cj0e|", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("cj0e|", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
      assertEquals("cj0e|", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("cj0e|", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertSame(document0, document1);
      
      Document document2 = (Document)document0.addClass("</");
      assertNotNull(document2);
      assertEquals("cj0e|", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("cj0e|", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("cj0e|", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("cj0e|", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Set<String> set0 = document0.classNames();
      assertNotNull(set0);
      assertEquals("cj0e|", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("cj0e|", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertFalse(set0.contains("</"));
      assertSame(document0, document1);
      assertSame(document0, document2);
      
      Document document3 = (Document)document2.classNames(set0);
      assertNotNull(document3);
      assertEquals("cj0e|", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("cj0e|", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("cj0e|", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("cj0e|", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertEquals("#document", document3.nodeName());
      assertEquals("cj0e|", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("cj0e|", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(set0.contains("</"));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("^f>l4", "^f>l4");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("^f>l4", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("^f>l4", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      
      String string0 = Node.EmptyString;
      assertNotNull(string0);
      assertEquals("", string0);
      
      Document document1 = new Document("GUs-HUy");
      assertNotNull(document1);
      assertEquals("GUs-HUy", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("GUs-HUy", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = (Document)document1.removeClass("^f>l4");
      assertNotNull(document2);
      assertEquals("GUs-HUy", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("GUs-HUy", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("GUs-HUy", document2.location());
      assertEquals("GUs-HUy", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)71;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)71}, byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      
      Document document0 = Parser.parse("M3'9#;", "");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parse("f>l4", "tt");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("tt", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("tt", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      
      String string0 = document0.html();
      assertNotNull(string0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("tt", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("tt", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("<html>\n <head></head>\n <body>\n  f&gt;l4\n </body>\n</html>", string0);
      
      Elements elements0 = document0.getElementsMatchingOwnText("f>l4");
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("tt", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("tt", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("tt", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("tt", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parse("f>l4", "f>l4");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("f>l4", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("f>l4", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("f>l4", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("f>l4", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("f>l4", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      
      document0.setParentNode(element0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("f>l4", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("f>l4", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("f>l4", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      
      Elements elements0 = document0.getElementsByIndexGreaterThan((-2819));
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("f>l4", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("f>l4", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
      
      // Undeclared exception!
      document0.html("Q&m*P0Pulw@gy!a3");
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Document.createShell("7uascii");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("7uascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("7uascii", document0.baseUri());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("7uascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("7uascii", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("7uascii", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("7uascii", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("7uascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("7uascii", document0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertEquals("7uascii", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      document1.doSetBaseUri("=L");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("7uascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("7uascii", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("7uascii", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("=L", document1.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      List<Node> list0 = document1.childNodes();
      assertNotNull(list0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("7uascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("7uascii", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("7uascii", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("=L", document1.baseUri());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      String string0 = document0.nodeName();
      assertNotNull(string0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("7uascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("7uascii", document0.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertEquals("#document", string0);
      
      Document document2 = (Document)document0.prependChild(document1);
      assertNotNull(document2);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("7uascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("7uascii", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("7uascii", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("=L", document1.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("7uascii", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("7uascii", document2.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      
      String string1 = document1.text();
      assertNotNull(string1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("7uascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("7uascii", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("7uascii", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("=L", document1.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertEquals("", string1);
      
      Elements elements0 = element0.previousElementSiblings();
      assertNotNull(elements0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("7uascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("7uascii", document0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertEquals("7uascii", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      
      String string2 = element0.cssSelector();
      assertNotNull(string2);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("7uascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("7uascii", document0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertEquals("7uascii", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertFalse(document0.equals((Object)document1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertEquals("html > head", string2);
      
      Element element1 = document0.head();
      assertNotNull(element1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("7uascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("7uascii", document0.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("head", element1.nodeName());
      assertEquals("7uascii", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(element1.equals((Object)element0));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(element1, element0);
      
      Element element2 = element1.appendText("=L");
      assertNotNull(element2);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("7uascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("7uascii", document0.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("head", element1.nodeName());
      assertEquals("7uascii", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertEquals("7uascii", element2.baseUri());
      assertEquals("head", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertEquals(1, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertEquals("head", element2.tagName());
      assertTrue(element2.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(element1, element2);
      assertNotSame(element1, element0);
      assertSame(element2, element1);
      assertNotSame(element2, element0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Document.createShell("f>l4");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("f>l4", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("f>l4", document0.baseUri());
      
      String string0 = document0.val();
      assertNotNull(string0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("f>l4", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("f>l4", document0.baseUri());
      assertEquals("", string0);
      
      String string1 = document0.data();
      assertNotNull(string1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("f>l4", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("f>l4", document0.baseUri());
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      Document document1 = (Document)document0.val("");
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("f>l4", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("f>l4", document0.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("f>l4", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("f>l4", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.parents();
      assertNotNull(elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("f>l4", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("f>l4", document0.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(document0, document1);
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("f>l4", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("f>l4", document0.baseUri());
      assertEquals(1, attributes0.size());
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/8V]/`Jq]I/", "/8V]/`Jq]I/");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      Document document1 = (Document)document0.text("width must be > 0");
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("/8V]/`Jq]I/", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("/8V]/`Jq]I/", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Comment comment0 = new Comment("U&k~m#^RM3", "textarea");
      assertNotNull(comment0);
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      
      document0.setParentNode(comment0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertSame(document0, document1);
      
      // Undeclared exception!
      try { 
        Element.preserveWhitespace(document1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parse("M3'9#;", "$B~m");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("$B~m", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("$B~m", document0.baseUri());
      
      document0.setSiblingIndex(8);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("$B~m", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(8, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("$B~m", document0.baseUri());
      
      Document document1 = (Document)document0.val("wTZpNj");
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("$B~m", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(8, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("$B~m", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("$B~m", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(8, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("$B~m", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Document.createShell("7uuVcii");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("7uuVcii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7uuVcii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("7uuVcii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7uuVcii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("7uuVcii", document1.location());
      assertEquals("7uuVcii", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("7uuVcii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7uuVcii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("7uuVcii", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      Node[] nodeArray0 = document0.childNodesAsArray();
      assertNotNull(nodeArray0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("7uuVcii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7uuVcii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertEquals(1, nodeArray0.length);
      
      String string0 = element0.baseUri();
      assertNotNull(string0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("7uuVcii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7uuVcii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("7uuVcii", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertEquals("7uuVcii", string0);
      
      Elements elements0 = element0.parents();
      assertNotNull(elements0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("7uuVcii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7uuVcii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("7uuVcii", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      
      String string1 = document0.html();
      assertNotNull(string1);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("7uuVcii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7uuVcii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(document0, document1);
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string1);
      
      Elements elements1 = document1.getElementsMatchingOwnText("<%}X'qi");
      assertNotNull(elements1);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("7uuVcii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7uuVcii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("7uuVcii", document1.location());
      assertEquals("7uuVcii", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(elements1, elements0);
      
      Document document2 = Parser.parseBodyFragmentRelaxed("<%}X'qi", "<%}X'qi");
      assertNotNull(document2);
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("<%}X'qi", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("<%}X'qi", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      Set<String> set0 = document1.classNames();
      assertNotNull(set0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("7uuVcii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7uuVcii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("7uuVcii", document1.location());
      assertEquals("7uuVcii", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains("<%}X'qi"));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Document.createShell("7uuVcii");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7uuVcii", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("7uuVcii", document0.location());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7uuVcii", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("7uuVcii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("7uuVcii", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("7uuVcii", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7uuVcii", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("7uuVcii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertEquals("7uuVcii", element0.baseUri());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      Node[] nodeArray0 = document0.childNodesAsArray();
      assertNotNull(nodeArray0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7uuVcii", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("7uuVcii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertEquals(1, nodeArray0.length);
      
      String string0 = element0.baseUri();
      assertNotNull(string0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7uuVcii", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("7uuVcii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertEquals("7uuVcii", element0.baseUri());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertEquals("7uuVcii", string0);
      
      document1.doSetBaseUri("ht");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7uuVcii", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("7uuVcii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("7uuVcii", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("ht", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      List<Node> list0 = document1.childNodes();
      assertNotNull(list0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7uuVcii", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("7uuVcii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("7uuVcii", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("ht", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      String string1 = document0.nodeName();
      assertNotNull(string1);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7uuVcii", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("7uuVcii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(document0, document1);
      assertEquals("#document", string1);
      
      Elements elements0 = element0.getElementsByAttributeValueMatching("#document", "7uuVcii");
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7uuVcii", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("7uuVcii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertEquals("7uuVcii", element0.baseUri());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      Document document2 = (Document)document0.prependChild(document1);
      assertNotNull(document2);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("7uuVcii", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("7uuVcii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("7uuVcii", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("ht", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("7uuVcii", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("7uuVcii", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      
      boolean boolean0 = document0.hasAttributes();
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("7uuVcii", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("7uuVcii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertFalse(boolean0);
      
      Document document3 = document2.ownerDocument();
      assertNotNull(document3);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("7uuVcii", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("7uuVcii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("7uuVcii", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("ht", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("7uuVcii", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("7uuVcii", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("7uuVcii", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("7uuVcii", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      
      Document document4 = (Document)document3.toggleClass("RkOn j`");
      assertNotNull(document4);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("7uuVcii", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("7uuVcii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("7uuVcii", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("ht", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("7uuVcii", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("7uuVcii", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("7uuVcii", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("7uuVcii", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertEquals("7uuVcii", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertEquals(2, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("7uuVcii", document4.baseUri());
      assertFalse(document4.hasParent());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document4.equals((Object)document1));
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document1, document3);
      assertNotSame(document1, document4);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertNotSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document4);
      assertSame(document3, document2);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertNotSame(document4, document1);
      assertSame(document4, document3);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(15);
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(string1));
      
      Element element1 = element0.classNames((Set<String>) linkedHashSet0);
      assertNotNull(element1);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("7uuVcii", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("7uuVcii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertEquals("7uuVcii", element0.baseUri());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertEquals("7uuVcii", element1.baseUri());
      assertFalse(linkedHashSet0.contains(string1));
      assertFalse(document0.equals((Object)document1));
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      boolean boolean1 = document3.hasClass("7uuVcii");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("7uuVcii", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("7uuVcii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("7uuVcii", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("ht", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("7uuVcii", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("7uuVcii", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("7uuVcii", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("7uuVcii", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertTrue(boolean1 == boolean0);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document1, document3);
      assertNotSame(document1, document4);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertNotSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document4);
      assertSame(document3, document2);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = new Document("gvg6vC:@");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("gvg6vC:@", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("gvg6vC:@", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("gvg6vC:@", parseSettings0);
      assertNotNull(tag0);
      assertEquals("gvg6vC:@", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("gvg6vC:@", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      
      Tag tag1 = Tag.valueOf("gvg6vC:@", parseSettings0);
      assertNotNull(tag1);
      assertTrue(tag1.isInline());
      assertFalse(tag1.canContainBlock());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.isSelfClosing());
      assertFalse(tag1.isBlock());
      assertEquals("gvg6vC:@", tag1.getName());
      assertFalse(tag1.isData());
      assertFalse(tag1.isKnownTag());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.preserveWhitespace());
      assertFalse(tag1.isEmpty());
      assertEquals("gvg6vC:@", tag1.toString());
      assertFalse(tag1.isFormListed());
      assertTrue(tag1.equals((Object)tag0));
      assertNotSame(tag1, tag0);
      
      Tag tag2 = Tag.valueOf("html");
      assertNotNull(tag2);
      assertTrue(tag2.isKnownTag());
      assertFalse(tag2.isData());
      assertFalse(tag2.isInline());
      assertFalse(tag2.isFormSubmittable());
      assertFalse(tag2.isSelfClosing());
      assertEquals("html", tag2.getName());
      assertTrue(tag2.canContainBlock());
      assertTrue(tag2.isBlock());
      assertTrue(tag2.formatAsBlock());
      assertFalse(tag2.isEmpty());
      assertFalse(tag2.isFormListed());
      assertFalse(tag2.preserveWhitespace());
      assertEquals("html", tag2.toString());
      assertFalse(tag2.equals((Object)tag1));
      assertFalse(tag2.equals((Object)tag0));
      assertNotSame(tag2, tag1);
      assertNotSame(tag2, tag0);
      
      Element element0 = document0.createElement("Z>uWD  A\"A");
      assertNotNull(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("gvg6vC:@", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("gvg6vC:@", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("Z>uWD  A\"A", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("Z>uWD  A\"A", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("gvg6vC:@", element0.baseUri());
      
      Element element1 = new Element(tag0, "8_r!(O/Y]K(8: wU%L ", (Attributes) null);
      assertNotNull(element1);
      assertEquals("gvg6vC:@", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("gvg6vC:@", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("gvg6vC:@", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertEquals("8_r!(O/Y]K(8: wU%L ", element1.baseUri());
      assertEquals("gvg6vC:@", element1.tagName());
      assertFalse(tag0.equals((Object)tag2));
      assertTrue(tag0.equals((Object)tag1));
      assertFalse(element1.equals((Object)element0));
      
      Document document1 = (Document)document0.appendTo(element1);
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("gvg6vC:@", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("gvg6vC:@", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("gvg6vC:@", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("gvg6vC:@", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("gvg6vC:@", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertEquals("8_r!(O/Y]K(8: wU%L ", element1.baseUri());
      assertEquals("gvg6vC:@", element1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("gvg6vC:@", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("gvg6vC:@", document1.location());
      assertFalse(tag0.equals((Object)tag2));
      assertTrue(tag0.equals((Object)tag1));
      assertFalse(element1.equals((Object)element0));
      assertSame(document0, document1);
      assertNotSame(tag0, tag1);
      assertNotSame(tag0, tag2);
      assertNotSame(element1, element0);
      assertSame(document1, document0);
      
      boolean boolean0 = document0.hasText();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("gvg6vC:@", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("gvg6vC:@", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertSame(document0, document1);
      assertFalse(boolean0);
      
      Tag tag3 = Tag.valueOf("html");
      assertNotNull(tag3);
      assertFalse(tag3.preserveWhitespace());
      assertFalse(tag3.isInline());
      assertTrue(tag3.isBlock());
      assertTrue(tag3.formatAsBlock());
      assertTrue(tag3.canContainBlock());
      assertFalse(tag3.isFormListed());
      assertEquals("html", tag3.toString());
      assertFalse(tag3.isData());
      assertFalse(tag3.isEmpty());
      assertFalse(tag3.isSelfClosing());
      assertFalse(tag3.isFormSubmittable());
      assertTrue(tag3.isKnownTag());
      assertEquals("html", tag3.getName());
      assertFalse(tag3.equals((Object)tag1));
      assertFalse(tag3.equals((Object)tag0));
      assertNotSame(tag3, tag1);
      assertSame(tag3, tag2);
      assertNotSame(tag3, tag0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("Z>uWD  A\"A"));
      
      Document document2 = (Document)document0.classNames((Set<String>) linkedHashSet0);
      assertNotNull(document2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("gvg6vC:@", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("gvg6vC:@", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("gvg6vC:@", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("gvg6vC:@", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(linkedHashSet0.contains("Z>uWD  A\"A"));
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      String string0 = document1.text();
      assertNotNull(string0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("gvg6vC:@", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("gvg6vC:@", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("gvg6vC:@", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("gvg6vC:@", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("gvg6vC:@", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertEquals("8_r!(O/Y]K(8: wU%L ", element1.baseUri());
      assertEquals("gvg6vC:@", element1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("gvg6vC:@", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("gvg6vC:@", document1.location());
      assertFalse(tag0.equals((Object)tag3));
      assertFalse(tag0.equals((Object)tag2));
      assertTrue(tag0.equals((Object)tag1));
      assertFalse(element1.equals((Object)element0));
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(tag0, tag3);
      assertNotSame(tag0, tag1);
      assertNotSame(tag0, tag2);
      assertNotSame(element1, element0);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertEquals("", string0);
      
      String string1 = document1.baseUri();
      assertNotNull(string1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("gvg6vC:@", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("gvg6vC:@", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("gvg6vC:@", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("gvg6vC:@", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("gvg6vC:@", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertEquals("8_r!(O/Y]K(8: wU%L ", element1.baseUri());
      assertEquals("gvg6vC:@", element1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("gvg6vC:@", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("gvg6vC:@", document1.location());
      assertFalse(tag0.equals((Object)tag3));
      assertFalse(tag0.equals((Object)tag2));
      assertTrue(tag0.equals((Object)tag1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(string1.equals((Object)string0));
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(tag0, tag3);
      assertNotSame(tag0, tag1);
      assertNotSame(tag0, tag2);
      assertNotSame(element1, element0);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertEquals("gvg6vC:@", string1);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/8V]/`Jq]I/", "/8V]/`Jq]I/");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Document document1 = (Document)document0.tagName("/8V]/`Jq]I/");
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/8v]/`jq]i/", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("/8v]/`jq]i/", document1.tagName());
      assertEquals("/8V]/`Jq]I/", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("/8V]/`Jq]I/", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = document0.hasText();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/8v]/`jq]i/", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertSame(document0, document1);
      assertTrue(boolean0);
      
      Element element1 = document1.getElementById("/8V]/`Jq]I/");
      assertNull(element1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/8v]/`jq]i/", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("/8v]/`jq]i/", document1.tagName());
      assertEquals("/8V]/`Jq]I/", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("/8V]/`Jq]I/", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.doClone((Node) null);
      assertNotNull(document2);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/8v]/`jq]i/", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("/8v]/`jq]i/", document1.tagName());
      assertEquals("/8V]/`Jq]I/", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("/8V]/`Jq]I/", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("/8v]/`jq]i/", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("/8V]/`Jq]I/", document2.location());
      assertEquals("/8V]/`Jq]I/", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Document.createShell("7uascii");
      assertNotNull(document0);
      assertEquals("7uascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("7uascii", document0.location());
      assertEquals("#document", document0.nodeName());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertEquals("7uascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("7uascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("7uascii", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("7uascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals("7uascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("7uascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("7uascii", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      Node[] nodeArray0 = document0.childNodesAsArray();
      assertNotNull(nodeArray0);
      assertEquals("7uascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("7uascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertEquals(1, nodeArray0.length);
      
      String string0 = element0.baseUri();
      assertNotNull(string0);
      assertEquals("7uascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("7uascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("7uascii", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertEquals("7uascii", string0);
      
      document1.doSetBaseUri("ht");
      assertEquals("7uascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("7uascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("7uascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("ht", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      List<Node> list0 = document1.childNodes();
      assertNotNull(list0);
      assertEquals("7uascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("7uascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("7uascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("ht", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      String string1 = document0.nodeName();
      assertNotNull(string1);
      assertEquals("7uascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("7uascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(document0, document1);
      assertEquals("#document", string1);
      
      Elements elements0 = element0.getElementsByAttributeValueMatching("#document", "7uascii");
      assertNotNull(elements0);
      assertEquals("7uascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("7uascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("7uascii", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      Document document2 = (Document)document0.prependChild(document1);
      assertNotNull(document2);
      assertEquals("7uascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("7uascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("7uascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("ht", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("7uascii", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("7uascii", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      
      String string2 = document2.data();
      assertNotNull(string2);
      assertEquals("7uascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("7uascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("7uascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("ht", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("7uascii", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("7uascii", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("", string2);
      
      document2.doSetBaseUri("ugYzqKw;F");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("ugYzqKw;F", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("7uascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("7uascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("ht", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertEquals("ugYzqKw;F", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("7uascii", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      
      Element element1 = document1.lastElementSibling();
      assertNotNull(element1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("ugYzqKw;F", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("7uascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("7uascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("ht", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("html", element1.nodeName());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("html", element1.tagName());
      assertEquals("7uascii", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(element1.equals((Object)element0));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(element1, element0);
      
      Elements elements1 = element1.previousElementSiblings();
      assertNotNull(elements1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("ugYzqKw;F", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("7uascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("7uascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("ht", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("html", element1.nodeName());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("html", element1.tagName());
      assertEquals("7uascii", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals(1, elements1.size());
      assertFalse(elements1.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(element1.equals((Object)element0));
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(element1, element0);
      assertNotSame(elements1, elements0);
      
      Elements elements2 = document0.siblingElements();
      assertNotNull(elements2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("ugYzqKw;F", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("7uascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertFalse(document0.equals((Object)document1));
      assertFalse(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Parser.parse("-;}*", "7)}O7Yv+SvsM");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7)}O7Yv+SvsM", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("7)}O7Yv+SvsM", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      List<TextNode> list0 = document0.textNodes();
      assertNotNull(list0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7)}O7Yv+SvsM", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("7)}O7Yv+SvsM", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Document document1 = (Document)document0.text("7)}O7Yv+SvsM");
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7)}O7Yv+SvsM", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("7)}O7Yv+SvsM", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("7)}O7Yv+SvsM", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("7)}O7Yv+SvsM", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      List<Node> list1 = document1.ensureChildNodes();
      assertNotNull(list1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7)}O7Yv+SvsM", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("7)}O7Yv+SvsM", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("7)}O7Yv+SvsM", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("7)}O7Yv+SvsM", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      document1.setParentNode(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7)}O7Yv+SvsM", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("7)}O7Yv+SvsM", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7)}O7Yv+SvsM", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("7)}O7Yv+SvsM", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document0.cssSelector();
      assertNotNull(string0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7)}O7Yv+SvsM", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("7)}O7Yv+SvsM", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertEquals("#root", string0);
      
      Element element0 = document0.firstElementSibling();
      assertNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7)}O7Yv+SvsM", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("7)}O7Yv+SvsM", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("q<>#I|(2", "q<>#I|(2");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("q<>#I|(2", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("q<>#I|(2", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      document0.title("q<>#I|(2");
      assertFalse(document0.hasParent());
      assertEquals("q<>#I|(2", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("q<>#I|(2", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals("q<>#I|(2", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("q<>#I|(2", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("q<>#I|(2", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = 36;
      Elements elements0 = document0.getElementsByIndexGreaterThan(36);
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals("q<>#I|(2", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("q<>#I|(2", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Elements elements1 = element0.getElementsByAttributeValueEnding("q<>#I|(2", "q<>#I|(2");
      assertNotNull(elements1);
      assertFalse(document0.hasParent());
      assertEquals("q<>#I|(2", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("q<>#I|(2", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("q<>#I|(2", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      
      Document document1 = (Document)document0.html("/3e_\"Nk");
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals("q<>#I|(2", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("q<>#I|(2", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("q<>#I|(2", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("q<>#I|(2", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements2 = element0.getElementsContainingOwnText("/8v]/`jq]i/");
      assertNotNull(elements2);
      assertFalse(document0.hasParent());
      assertEquals("q<>#I|(2", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("q<>#I|(2", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("q<>#I|(2", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertTrue(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertSame(document0, document1);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      
      Document document2 = document0.normalise();
      assertNotNull(document2);
      assertFalse(document0.hasParent());
      assertEquals("q<>#I|(2", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("q<>#I|(2", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("q<>#I|(2", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("q<>#I|(2", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      document0.setParentNode(document2);
      assertEquals("q<>#I|(2", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("q<>#I|(2", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("q<>#I|(2", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("q<>#I|(2", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = (Document)document0.addClass("q<>#I|(2");
      assertNotNull(document3);
      assertEquals("q<>#I|(2", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("q<>#I|(2", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("q<>#I|(2", document3.baseUri());
      assertTrue(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("q<>#I|(2", document3.location());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      
      Node node0 = element0.previousSibling();
      assertNull(node0);
      assertEquals("q<>#I|(2", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("q<>#I|(2", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("q<>#I|(2", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      
      Document document4 = (Document)document3.addClass("q<>#I|(2");
      assertNotNull(document4);
      assertEquals("q<>#I|(2", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("q<>#I|(2", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("q<>#I|(2", document3.baseUri());
      assertTrue(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("q<>#I|(2", document3.location());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.isBlock());
      assertEquals("q<>#I|(2", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(1, document4.childNodeSize());
      assertEquals("q<>#I|(2", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document4);
      assertSame(document3, document1);
      assertSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document3);
      
      // Undeclared exception!
      element0.prepend("id");
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parse("-;}*", "7)}O7Yv+SvsM");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("7)}O7Yv+SvsM", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7)}O7Yv+SvsM", document0.location());
      
      Elements elements0 = document0.getElementsMatchingText("meter");
      assertNotNull(elements0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("7)}O7Yv+SvsM", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7)}O7Yv+SvsM", document0.location());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      List<TextNode> list0 = document0.textNodes();
      assertNotNull(list0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("7)}O7Yv+SvsM", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7)}O7Yv+SvsM", document0.location());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Document document1 = (Document)document0.text("7)}O7Yv+SvsM");
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("7)}O7Yv+SvsM", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7)}O7Yv+SvsM", document0.location());
      assertFalse(document1.hasParent());
      assertEquals("7)}O7Yv+SvsM", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("7)}O7Yv+SvsM", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      document1.setParentNode(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("7)}O7Yv+SvsM", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7)}O7Yv+SvsM", document0.location());
      assertEquals("7)}O7Yv+SvsM", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("7)}O7Yv+SvsM", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = Element.preserveWhitespace(document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("7)}O7Yv+SvsM", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7)}O7Yv+SvsM", document0.location());
      assertEquals("7)}O7Yv+SvsM", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("7)}O7Yv+SvsM", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      document0.prepend(".");
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Parser.parse("KiV~", "KiV~");
      assertNotNull(document0);
      assertEquals("KiV~", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("KiV~", document0.baseUri());
      assertEquals("#root", document0.tagName());
      
      Elements elements0 = document0.getElementsMatchingText("J5@bkARsH%Yj;o|");
      assertNotNull(elements0);
      assertEquals("KiV~", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("KiV~", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
      
      List<TextNode> list0 = document0.textNodes();
      assertNotNull(list0);
      assertEquals("KiV~", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("KiV~", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Document document1 = (Document)document0.text("Ipcl0plh&q");
      assertNotNull(document1);
      assertEquals("KiV~", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("KiV~", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("KiV~", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("KiV~", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.appendChild(document1);
      assertNotNull(document2);
      assertEquals(2, document0.childNodeSize());
      assertEquals("KiV~", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("KiV~", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("KiV~", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("KiV~", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("KiV~", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals("KiV~", document2.baseUri());
      assertEquals(1, document2.siblingIndex());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      // Undeclared exception!
      document1.html();
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Document.createShell("ascii");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document1.attr("ascii", "org.jsoup.nodes.Element");
      assertNotNull(document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("ascii", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("ascii", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      
      Node[] nodeArray0 = document0.childNodesAsArray();
      assertNotNull(nodeArray0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertEquals(1, nodeArray0.length);
      
      String string0 = element0.baseUri();
      assertNotNull(string0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertEquals("ascii", string0);
      
      document2.doSetBaseUri("html");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("html", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("html", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("ascii", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      
      List<Node> list0 = document1.childNodes();
      assertNotNull(list0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("html", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      
      String string1 = document2.nodeName();
      assertNotNull(string1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("html", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("html", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("ascii", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("#document", string1);
      
      Elements elements0 = document2.getElementsByAttribute("#document");
      assertNotNull(elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("html", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("html", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("ascii", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      
      Document document3 = (Document)document0.prependChild(document1);
      assertNotNull(document3);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("html", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("ascii", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals("ascii", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document3);
      assertNotSame(document3, document2);
      assertSame(document3, document0);
      assertNotSame(document3, document1);
      
      String string2 = document3.wholeText();
      assertNotNull(string2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("html", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("ascii", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals("ascii", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document3);
      assertNotSame(document3, document2);
      assertSame(document3, document0);
      assertNotSame(document3, document1);
      assertEquals("", string2);
      
      document2.remove();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("html", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("html", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("ascii", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document3);
      assertNotSame(document2, document3);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      
      String string3 = document2.text();
      assertNotNull(string3);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("html", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("html", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("ascii", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document3);
      assertNotSame(document2, document3);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("", string3);
      
      Elements elements1 = element0.previousElementSiblings();
      assertNotNull(elements1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertTrue(elements1.equals((Object)elements0));
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(elements1, elements0);
      
      String string4 = element0.cssSelector();
      assertNotNull(string4);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertEquals("html > head", string4);
      
      Element element1 = element0.firstElementSibling();
      assertNotNull(element1);
      assertTrue(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.nodeName());
      assertEquals("head", element1.tagName());
      assertEquals("ascii", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertSame(element1, element0);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(element0, element1);
      
      Tag tag0 = element0.tag();
      assertNotNull(tag0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("head", tag0.getName());
      assertEquals("head", tag0.toString());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parse("Z>uWD  A\"A", "Z>uWD  A\"A");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Z>uWD  A\"A", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Z>uWD  A\"A", document0.baseUri());
      assertFalse(document0.isBlock());
      
      Tag tag0 = Tag.valueOf("Z>uWD  A\"A");
      assertNotNull(tag0);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertEquals("Z>uWD  A\"A", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertEquals("Z>uWD  A\"A", tag0.toString());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      
      Element element0 = new Element(tag0, "UTF-");
      assertNotNull(element0);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertEquals("Z>uWD  A\"A", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertEquals("Z>uWD  A\"A", tag0.toString());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertEquals(0, element0.siblingIndex());
      assertEquals("UTF-", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("Z>uWD  A\"A", element0.nodeName());
      assertEquals("Z>uWD  A\"A", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      
      Document document1 = Parser.parseBodyFragment("$q>@,[:,l7", "Z>uWD  A\"A");
      assertNotNull(document1);
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Z>uWD  A\"A", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("Z>uWD  A\"A", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      
      document1.setParentNode(element0);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertEquals("Z>uWD  A\"A", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertEquals("Z>uWD  A\"A", tag0.toString());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertEquals(0, element0.siblingIndex());
      assertEquals("UTF-", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("Z>uWD  A\"A", element0.nodeName());
      assertEquals("Z>uWD  A\"A", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Z>uWD  A\"A", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Z>uWD  A\"A", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      assertNotNull(document2);
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Z>uWD  A\"A", document1.location());
      assertEquals("Z>uWD  A\"A", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("Z>uWD  A\"A", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("Z>uWD  A\"A", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      
      Document document3 = (Document)document0.append("Y.+@ltT_U`");
      assertNotNull(document3);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Z>uWD  A\"A", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Z>uWD  A\"A", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.isBlock());
      assertEquals("Z>uWD  A\"A", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertEquals("Z>uWD  A\"A", document3.location());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      
      String string0 = document1.data();
      assertNotNull(string0);
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Z>uWD  A\"A", document1.location());
      assertEquals("Z>uWD  A\"A", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertEquals("", string0);
      
      document1.doSetBaseUri("%in.-");
      assertEquals("%in.-", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Z>uWD  A\"A", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      
      Element element1 = document1.lastElementSibling();
      assertNull(element1);
      assertEquals("%in.-", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Z>uWD  A\"A", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      
      // Undeclared exception!
      try { 
        document1.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Document.createShell("ascii");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Tag tag0 = Tag.valueOf("ascii");
      assertNotNull(tag0);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("ascii", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("ascii", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      
      Element element0 = new Element(tag0, "#root");
      assertNotNull(element0);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("ascii", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("ascii", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(element0.isBlock());
      assertEquals("#root", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("ascii", element0.tagName());
      assertEquals("ascii", element0.nodeName());
      
      document0.setParentNode(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("ascii", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("ascii", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(element0.isBlock());
      assertEquals("#root", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("ascii", element0.tagName());
      assertEquals("ascii", element0.nodeName());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("ascii", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.append("ascii");
      assertNotNull(document2);
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("ascii", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("ascii", document2.baseUri());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("ascii", document2.location());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      String string0 = document1.data();
      assertNotNull(string0);
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("ascii", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertEquals("", string0);
      
      document0.doSetBaseUri("ascii");
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertSame(document0, document1);
      assertSame(document0, document2);
      
      Element element1 = document0.lastElementSibling();
      assertNull(element1);
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertSame(document0, document1);
      assertSame(document0, document2);
      
      int int0 = document2.childNodeSize();
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("ascii", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("ascii", document2.baseUri());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("ascii", document2.location());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals(2, int0);
      
      // Undeclared exception!
      try { 
        element0.appendChild(document1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parse("Z>uWD  A\"A", "Z>uWD  A\"A");
      assertNotNull(document0);
      assertEquals("Z>uWD  A\"A", document0.location());
      assertEquals("Z>uWD  A\"A", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      boolean boolean0 = document0.hasClass("Z>uWD  A\"A");
      assertEquals("Z>uWD  A\"A", document0.location());
      assertEquals("Z>uWD  A\"A", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(boolean0);
      
      Tag tag0 = Tag.valueOf("Z>uWD  A\"A");
      assertNotNull(tag0);
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertEquals("Z>uWD  A\"A", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertEquals("Z>uWD  A\"A", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      
      Element element0 = new Element(tag0, "Z>uWD  A\"A");
      assertNotNull(element0);
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertEquals("Z>uWD  A\"A", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertEquals("Z>uWD  A\"A", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Z>uWD  A\"A", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("Z>uWD  A\"A", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("Z>uWD  A\"A", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      
      Node[] nodeArray0 = new Node[2];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) element0;
      document0.addChildren(nodeArray0);
      assertEquals("Z>uWD  A\"A", document0.location());
      assertEquals("Z>uWD  A\"A", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, nodeArray0.length);
      
      // Undeclared exception!
      document0.after("Z>uWD  A\"A");
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Evaluator.IndexEquals evaluator_IndexEquals0 = new Evaluator.IndexEquals(0);
      assertNotNull(evaluator_IndexEquals0);
      
      Document document0 = new Document("#root");
      assertNotNull(document0);
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.baseUri());
      assertEquals("#root", document0.location());
      assertEquals("#root", document0.tagName());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertNotNull(document_OutputSettings1);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document document1 = document0.outputSettings(document_OutputSettings1);
      assertNotNull(document1);
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.baseUri());
      assertEquals("#root", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.location());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document1, document0);
      
      Document document2 = document1.clone();
      assertNotNull(document2);
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.baseUri());
      assertEquals("#root", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.location());
      assertEquals("#root", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      Element element0 = document2.createElement("#root");
      assertNotNull(element0);
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.baseUri());
      assertEquals("#root", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.location());
      assertEquals("#root", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("#root", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("#root", element0.baseUri());
      assertEquals("#root", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      Set<String> set0 = element0.classNames();
      assertNotNull(set0);
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.baseUri());
      assertEquals("#root", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.location());
      assertEquals("#root", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("#root", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("#root", element0.baseUri());
      assertEquals("#root", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains("#root"));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      Element element1 = element0.prepend("");
      assertNotNull(element1);
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.baseUri());
      assertEquals("#root", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.location());
      assertEquals("#root", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("#root", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("#root", element0.baseUri());
      assertEquals("#root", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element1.childNodeSize());
      assertEquals("#root", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.hasParent());
      assertEquals("#root", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("#root", element1.nodeName());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Document.createShell("ascii");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Tag tag0 = Tag.valueOf("ascii");
      assertNotNull(tag0);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertEquals("ascii", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertEquals("ascii", tag0.getName());
      
      Elements elements0 = document0.getElementsContainingText("ascii");
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      
      String string0 = element0.wholeText();
      assertNotNull(string0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("", string0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Document document1 = (Document)document0.html("");
      assertNotNull(document1);
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document2 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document2);
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("ascii", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("ascii", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      boolean boolean2 = document2.hasText();
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("ascii", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("ascii", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(boolean2);
      
      int int0 = document0.childNodeSize();
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = new Document("X.+a7GH");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("X.+a7GH", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals("X.+a7GH", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      String string0 = null;
      Document document1 = (Document)document0.val((String) null);
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("X.+a7GH", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals("X.+a7GH", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals("X.+a7GH", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("X.+a7GH", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string1 = document0.html();
      assertNotNull(string1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("X.+a7GH", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals("X.+a7GH", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertSame(document0, document1);
      assertEquals("", string1);
      
      Document document2 = (Document)document0.val("");
      assertNotNull(document2);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("X.+a7GH", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals("X.+a7GH", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals("X.+a7GH", document2.baseUri());
      assertEquals(0, document2.childNodeSize());
      assertEquals("X.+a7GH", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      String string2 = "</";
      // Undeclared exception!
      try { 
        document1.before("</");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Parser.parse("PLAINTEXT", "bM[@[9kEt");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("bM[@[9kEt", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("bM[@[9kEt", document0.location());
      assertEquals("#document", document0.nodeName());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Tag tag0 = Tag.valueOf("cj0e|");
      assertNotNull(tag0);
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("cj0e|", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("cj0e|", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      
      Element element0 = new Element(tag0, "cj0e|");
      assertNotNull(element0);
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("cj0e|", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("cj0e|", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("cj0e|", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("cj0e|", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("cj0e|", element0.tagName());
      assertFalse(element0.hasParent());
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "PLAINTEXT");
      assertNotNull(stringBuilder0);
      assertEquals("PLAINTEXT", stringBuilder0.toString());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      
      element0.indent(stringBuilder0, 116, document_OutputSettings0);
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("cj0e|", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("cj0e|", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("cj0e|", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("cj0e|", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("cj0e|", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("PLAINTEXT\n                                                                                                                    ", stringBuilder0.toString());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      
      document0.setParentNode(element0);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("bM[@[9kEt", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("bM[@[9kEt", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("cj0e|", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("cj0e|", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("cj0e|", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("cj0e|", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("cj0e|", element0.tagName());
      assertFalse(element0.hasParent());
      
      Element element1 = document0.head();
      assertNotNull(element1);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("bM[@[9kEt", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("bM[@[9kEt", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(element1.hasParent());
      assertEquals("head", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("bM[@[9kEt", element1.baseUri());
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element1, element0);
      
      Elements elements0 = document0.getElementsByIndexGreaterThan(1793);
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("bM[@[9kEt", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("bM[@[9kEt", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      Element element2 = element0.previousElementSibling();
      assertNull(element2);
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("cj0e|", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("cj0e|", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("cj0e|", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("cj0e|", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("cj0e|", element0.tagName());
      assertFalse(element0.hasParent());
      assertFalse(element0.equals((Object)element1));
      assertNotSame(element0, element1);
      
      Element element3 = element1.tagName("PLAINTEXT");
      assertNotNull(element3);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("bM[@[9kEt", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("bM[@[9kEt", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("plaintext", element1.nodeName());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("bM[@[9kEt", element1.baseUri());
      assertEquals("plaintext", element1.tagName());
      assertEquals(0, element3.childNodeSize());
      assertTrue(element3.hasParent());
      assertTrue(element3.isBlock());
      assertEquals("plaintext", element3.nodeName());
      assertEquals(0, element3.siblingIndex());
      assertEquals("bM[@[9kEt", element3.baseUri());
      assertEquals("plaintext", element3.tagName());
      assertFalse(element1.equals((Object)element0));
      assertFalse(element3.equals((Object)element0));
      assertNotSame(element1, element0);
      assertSame(element1, element3);
      assertSame(element3, element1);
      assertNotSame(element3, element0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Document.createShell("ascii");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Tag tag0 = Tag.valueOf("ascii");
      assertNotNull(tag0);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertEquals("ascii", tag0.getName());
      assertEquals("ascii", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      
      Element element0 = new Element(tag0, "#root");
      assertNotNull(element0);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertEquals("ascii", tag0.getName());
      assertEquals("ascii", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("#root", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("ascii", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("ascii", element0.tagName());
      
      document0.setParentNode(element0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertEquals("ascii", tag0.getName());
      assertEquals("ascii", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("#root", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("ascii", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("ascii", element0.tagName());
      
      List<TextNode> list0 = document0.textNodes();
      assertNotNull(list0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Document document1 = (Document)document0.val("cj0e|");
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("ascii", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.attr("#root", ":containsData(");
      assertNotNull(document2);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("ascii", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("ascii", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("ascii", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = (Document)document2.empty();
      assertNotNull(document3);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("ascii", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("ascii", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("ascii", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("ascii", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals(0, document3.childNodeSize());
      assertEquals("ascii", document3.baseUri());
      assertTrue(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("option", "7O<");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7O<", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("7O<", document0.location());
      
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7O<", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("7O<", document0.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("7O<", document1.baseUri());
      assertEquals("7O<", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = document0.normalise();
      assertNotNull(document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7O<", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("7O<", document0.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("7O<", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("7O<", document2.baseUri());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Elements elements0 = document2.getElementsContainingText("value");
      assertNotNull(elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7O<", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("7O<", document0.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("7O<", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("7O<", document2.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7O<", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("7O<", document0.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("7O<", document1.baseUri());
      assertEquals("7O<", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("7O<", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      
      String string0 = element0.wholeText();
      assertNotNull(string0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7O<", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("7O<", document0.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("7O<", document1.baseUri());
      assertEquals("7O<", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("7O<", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertEquals("option", string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Document document3 = (Document)document2.html(":nth-child(%d)");
      assertNotNull(document3);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7O<", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("7O<", document0.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("7O<", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("7O<", document2.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("7O<", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("7O<", document3.location());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      
      boolean boolean1 = document0.hasText();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7O<", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("7O<", document0.location());
      assertTrue(boolean1 == boolean0);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Document.createShell("f>l4");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("f>l4", document0.baseUri());
      assertEquals("f>l4", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Elements elements0 = document0.parents();
      assertNotNull(elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("f>l4", document0.baseUri());
      assertEquals("f>l4", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      Document document1 = new Document("f>l4");
      assertNotNull(document1);
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("f>l4", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("f>l4", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      
      String string0 = document0.toString();
      assertNotNull(string0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("f>l4", document0.baseUri());
      assertEquals("f>l4", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
      
      Elements elements1 = document0.nextElementSiblings();
      assertNotNull(elements1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("f>l4", document0.baseUri());
      assertEquals("f>l4", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(document0, document1);
      assertNotSame(elements1, elements0);
      
      Document document2 = Parser.parseBodyFragmentRelaxed("<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>");
      assertNotNull(document2);
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      boolean boolean0 = document2.hasText();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Document.createShell("ascii");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("ascii", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, element0.siblingIndex());
      assertEquals("ascii", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      Node[] nodeArray0 = document0.childNodesAsArray();
      assertNotNull(nodeArray0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertEquals(1, nodeArray0.length);
      
      String string0 = element0.baseUri();
      assertNotNull(string0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, element0.siblingIndex());
      assertEquals("ascii", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertEquals("ascii", string0);
      
      document1.doSetBaseUri("html");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("html", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      List<Node> list0 = document1.childNodes();
      assertNotNull(list0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("html", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      String string1 = document0.nodeName();
      assertNotNull(string1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.equals((Object)document1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(document0, document1);
      assertEquals("#document", string1);
      
      Elements elements0 = document0.getElementsByAttribute("#document");
      assertNotNull(elements0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      Document document2 = document0.normalise();
      assertNotNull(document2);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("ascii", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("ascii", document2.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      
      List<DataNode> list1 = document0.dataNodes();
      assertNotNull(list1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      
      boolean boolean1 = document2.hasText();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("ascii", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("ascii", document2.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(boolean1);
      
      Elements elements1 = document2.getElementsByIndexLessThan(202);
      assertNotNull(elements1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("ascii", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("ascii", document2.baseUri());
      assertEquals(3, elements1.size());
      assertFalse(elements1.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(elements1, elements0);
      
      String string2 = document2.cssSelector();
      assertNotNull(string2);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("ascii", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("ascii", document2.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertEquals("#root", string2);
      
      // Undeclared exception!
      try { 
        document1.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Parser.parse("Z>uWD  A\"A", "Z>uWD  A\"A");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals("Z>uWD  A\"A", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("Z>uWD  A\"A", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Tag tag0 = Tag.valueOf("Z]uWD  A\"A");
      assertNotNull(tag0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("Z]uWD  A\"A", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("Z]uWD  A\"A", tag0.toString());
      assertTrue(tag0.isInline());
      
      Element element0 = new Element(tag0, "Z>uWD  A\"A");
      assertNotNull(element0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("Z]uWD  A\"A", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("Z]uWD  A\"A", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("Z]uWD  A\"A", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Z>uWD  A\"A", element0.baseUri());
      assertEquals("Z]uWD  A\"A", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      
      document0.setParentNode(element0);
      assertEquals("#root", document0.tagName());
      assertEquals("Z>uWD  A\"A", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("Z>uWD  A\"A", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("Z]uWD  A\"A", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("Z]uWD  A\"A", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("Z]uWD  A\"A", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Z>uWD  A\"A", element0.baseUri());
      assertEquals("Z]uWD  A\"A", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      
      List<TextNode> list0 = document0.textNodes();
      assertNotNull(list0);
      assertEquals("#root", document0.tagName());
      assertEquals("Z>uWD  A\"A", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("Z>uWD  A\"A", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Document document1 = (Document)document0.val("Z>uWD  A\"A");
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals("Z>uWD  A\"A", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("Z>uWD  A\"A", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("Z>uWD  A\"A", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("Z>uWD  A\"A", document1.location());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parse("Z>uWD  A\"A", "Z>uWD  A\"A");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Z>uWD  A\"A", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Z>uWD  A\"A", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Tag tag0 = Tag.valueOf("Z]uWD  A\"A");
      assertNotNull(tag0);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertEquals("Z]uWD  A\"A", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertEquals("Z]uWD  A\"A", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      
      Element element0 = new Element(tag0, "Z>uWD  A\"A");
      assertNotNull(element0);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertEquals("Z]uWD  A\"A", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertEquals("Z]uWD  A\"A", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(0, element0.siblingIndex());
      assertEquals("Z>uWD  A\"A", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("Z]uWD  A\"A", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Z]uWD  A\"A", element0.nodeName());
      
      Element element1 = (Element)element0.clearAttributes();
      assertNotNull(element1);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertEquals("Z]uWD  A\"A", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertEquals("Z]uWD  A\"A", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(0, element0.siblingIndex());
      assertEquals("Z>uWD  A\"A", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("Z]uWD  A\"A", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Z]uWD  A\"A", element0.nodeName());
      assertEquals("Z]uWD  A\"A", element1.tagName());
      assertEquals("Z>uWD  A\"A", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("Z]uWD  A\"A", element1.nodeName());
      assertFalse(element1.hasParent());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      document0.setParentNode(element0);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Z>uWD  A\"A", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Z>uWD  A\"A", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertEquals("Z]uWD  A\"A", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertEquals("Z]uWD  A\"A", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(0, element0.siblingIndex());
      assertEquals("Z>uWD  A\"A", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("Z]uWD  A\"A", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Z]uWD  A\"A", element0.nodeName());
      assertSame(element0, element1);
      
      Document document1 = (Document)document0.append("Z>uWD  A\"A");
      assertNotNull(document1);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Z>uWD  A\"A", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Z>uWD  A\"A", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("Z>uWD  A\"A", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("Z>uWD  A\"A", document1.location());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document0.data();
      assertNotNull(string0);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Z>uWD  A\"A", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Z>uWD  A\"A", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertSame(document0, document1);
      assertEquals("", string0);
      
      Elements elements0 = document0.getElementsContainingText("");
      assertNotNull(elements0);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Z>uWD  A\"A", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Z>uWD  A\"A", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      assertSame(document0, document1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = Element.preserveWhitespace(document0);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Z>uWD  A\"A", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Z>uWD  A\"A", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(boolean1 == boolean0);
      assertSame(document0, document1);
      assertFalse(boolean1);
      
      Document document2 = (Document)document1.attr("Z]uWD  A\"A", false);
      assertNotNull(document2);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Z>uWD  A\"A", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Z>uWD  A\"A", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("Z>uWD  A\"A", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("Z>uWD  A\"A", document1.location());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Z>uWD  A\"A", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("Z>uWD  A\"A", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = "N6l)(Z";
      Document document0 = Parser.parse("N6l)(Z", "2o");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("2o", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("2o", document0.baseUri());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.prependElement("org.jsoup.select.StructuralEvaluator$ImmediateParent");
      assertNotNull(element0);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("2o", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("2o", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("org.jsoup.select.structuralevaluator$immediateparent", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("org.jsoup.select.structuralevaluator$immediateparent", element0.nodeName());
      assertEquals("2o", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      
      String string1 = document0.html();
      assertNotNull(string1);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("2o", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("2o", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(string1.equals((Object)string0));
      assertEquals("<org.jsoup.select.structuralevaluator$immediateparent></org.jsoup.select.structuralevaluator$immediateparent>\n<html>\n <head></head>\n <body>\n  N6l)(Z\n </body>\n</html>", string1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Element element1 = element0.before((Node) document0);
      assertNotNull(element1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("2o", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("2o", document0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("org.jsoup.select.structuralevaluator$immediateparent", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("org.jsoup.select.structuralevaluator$immediateparent", element0.nodeName());
      assertEquals("2o", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("2o", element1.baseUri());
      assertEquals("org.jsoup.select.structuralevaluator$immediateparent", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals("org.jsoup.select.structuralevaluator$immediateparent", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Document document1 = (Document)document0.appendTo(element0);
      assertNotNull(document1);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("2o", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("2o", document0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("org.jsoup.select.structuralevaluator$immediateparent", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("org.jsoup.select.structuralevaluator$immediateparent", element0.nodeName());
      assertEquals("2o", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("2o", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("2o", document1.location());
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(document1, document0);
      
      // Undeclared exception!
      document0.is((Evaluator) null);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parse("Z>uWD  A\"A", "Z>uWD  A\"A");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Z>uWD  A\"A", document0.location());
      assertEquals("Z>uWD  A\"A", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Tag tag0 = Tag.valueOf("Z]uWD  A\"A");
      assertNotNull(tag0);
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("Z]uWD  A\"A", tag0.getName());
      assertFalse(tag0.isData());
      assertEquals("Z]uWD  A\"A", tag0.toString());
      
      Element element0 = new Element(tag0, "Z>uWD  A\"A");
      assertNotNull(element0);
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("Z]uWD  A\"A", tag0.getName());
      assertFalse(tag0.isData());
      assertEquals("Z]uWD  A\"A", tag0.toString());
      assertEquals("Z>uWD  A\"A", element0.baseUri());
      assertEquals("Z]uWD  A\"A", element0.tagName());
      assertEquals("Z]uWD  A\"A", element0.nodeName());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      
      document0.setParentNode(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Z>uWD  A\"A", document0.location());
      assertEquals("Z>uWD  A\"A", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("Z]uWD  A\"A", tag0.getName());
      assertFalse(tag0.isData());
      assertEquals("Z]uWD  A\"A", tag0.toString());
      assertEquals("Z>uWD  A\"A", element0.baseUri());
      assertEquals("Z]uWD  A\"A", element0.tagName());
      assertEquals("Z]uWD  A\"A", element0.nodeName());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      
      Document document1 = (Document)document0.tagName(")%&4{ 8DL");
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Z>uWD  A\"A", document0.location());
      assertEquals("Z>uWD  A\"A", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(")%&4{ 8dl", document0.tagName());
      assertEquals("Z>uWD  A\"A", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Z>uWD  A\"A", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(")%&4{ 8dl", document1.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.text("Z]uWD  A\"A");
      assertNotNull(document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Z>uWD  A\"A", document0.location());
      assertEquals("Z>uWD  A\"A", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(")%&4{ 8dl", document0.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(")%&4{ 8dl", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("Z>uWD  A\"A", document2.baseUri());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("Z>uWD  A\"A", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      // Undeclared exception!
      try { 
        document0.setParentNode(element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Parser.parse("CJ0E|", "CJ0E|");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("CJ0E|", document0.location());
      
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("CJ0E|", document0.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("CJ0E|", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("CJ0E|", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Evaluator.IndexEquals evaluator_IndexEquals0 = new Evaluator.IndexEquals(0);
      assertNotNull(evaluator_IndexEquals0);
      
      Elements elements0 = document0.getElementsContainingText("#root");
      assertNotNull(elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("CJ0E|", document0.location());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(document0, document1);
      
      Document document2 = (Document)document0.tagName("CJ0E|");
      assertNotNull(document2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("cj0e|", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("CJ0E|", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("CJ0E|", document2.baseUri());
      assertEquals("cj0e|", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Document document3 = (Document)document0.text("CJ0E|");
      assertNotNull(document3);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("cj0e|", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("CJ0E|", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals("cj0e|", document3.tagName());
      assertEquals("CJ0E|", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      
      document3.setParentNode(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("cj0e|", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("CJ0E|", document0.location());
      assertTrue(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("cj0e|", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("CJ0E|", document1.location());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("CJ0E|", document1.baseUri());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("CJ0E|", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals("cj0e|", document3.tagName());
      assertEquals("CJ0E|", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      
      boolean boolean0 = Element.preserveWhitespace(document3);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("cj0e|", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("CJ0E|", document0.location());
      assertTrue(document0.hasParent());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("CJ0E|", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals("cj0e|", document3.tagName());
      assertEquals("CJ0E|", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertFalse(boolean0);
      
      // Undeclared exception!
      document3.tagName("Did not find balanced marker at '");
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/8V]/`Jq]I/", "/8V]/`Jq]I/");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      String string0 = document0.text();
      assertNotNull(string0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("/8V]/`Jq]I/", string0);
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("/8V]/`Jq]I/", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      
      Document document1 = (Document)document0.tagName("/8V]/`Jq]I/");
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("/8v]/`jq]i/", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("/8V]/`Jq]I/", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("/8V]/`Jq]I/", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("/8v]/`jq]i/", document1.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration(" ", " ", false);
      assertNotNull(xmlDeclaration0);
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      
      Element element1 = element0.prependChild(xmlDeclaration0);
      assertNotNull(element1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("/8v]/`jq]i/", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("/8V]/`Jq]I/", element0.baseUri());
      assertEquals(2, element0.childNodeSize());
      assertTrue(xmlDeclaration0.hasParent());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertTrue(element1.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertEquals("/8V]/`Jq]I/", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals("body", element1.tagName());
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      String string1 = document1.wholeText();
      assertNotNull(string1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("/8v]/`jq]i/", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("/8V]/`Jq]I/", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("/8V]/`Jq]I/", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("/8v]/`jq]i/", document1.tagName());
      assertTrue(string1.equals((Object)string0));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("/8V]/`Jq]I/", string1);
      
      // Undeclared exception!
      try { 
        document0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Parser.parse("Z>uWD  A\"A", "Z>uWD  A\"A");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("Z>uWD  A\"A", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Z>uWD  A\"A", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Tag tag0 = Tag.valueOf("Z]uWD  A\"A");
      assertNotNull(tag0);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertEquals("Z]uWD  A\"A", tag0.getName());
      assertEquals("Z]uWD  A\"A", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      
      String string0 = "textarea";
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag1 = Tag.valueOf("textarea", parseSettings0);
      assertNotNull(tag1);
      assertTrue(tag1.isFormSubmittable());
      assertFalse(tag1.isSelfClosing());
      assertTrue(tag1.isInline());
      assertEquals("textarea", tag1.toString());
      assertTrue(tag1.isFormListed());
      assertFalse(tag1.canContainBlock());
      assertTrue(tag1.isKnownTag());
      assertEquals("textarea", tag1.getName());
      assertFalse(tag1.isBlock());
      assertTrue(tag1.preserveWhitespace());
      assertFalse(tag1.isEmpty());
      assertFalse(tag1.isData());
      assertFalse(tag1.formatAsBlock());
      assertFalse(tag1.equals((Object)tag0));
      assertNotSame(tag1, tag0);
      
      Element element0 = new Element(tag0, "Z>uWD  A\"A");
      assertNotNull(element0);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertEquals("Z]uWD  A\"A", tag0.getName());
      assertEquals("Z]uWD  A\"A", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(element0.isBlock());
      assertEquals("Z>uWD  A\"A", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Z]uWD  A\"A", element0.tagName());
      assertEquals("Z]uWD  A\"A", element0.nodeName());
      assertFalse(tag0.equals((Object)tag1));
      
      document0.setParentNode(element0);
      assertEquals("Z>uWD  A\"A", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Z>uWD  A\"A", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertEquals("Z]uWD  A\"A", tag0.getName());
      assertEquals("Z]uWD  A\"A", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(element0.isBlock());
      assertEquals("Z>uWD  A\"A", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Z]uWD  A\"A", element0.tagName());
      assertEquals("Z]uWD  A\"A", element0.nodeName());
      assertFalse(tag0.equals((Object)tag1));
      assertNotSame(tag0, tag1);
      
      Document document1 = (Document)document0.prependText("Z]uWD  A\"A");
      assertNotNull(document1);
      assertEquals("Z>uWD  A\"A", document0.location());
      assertEquals("Z>uWD  A\"A", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Z>uWD  A\"A", document1.location());
      assertEquals("Z>uWD  A\"A", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      // Undeclared exception!
      try { 
        document1.after("IQY");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Document.createShell("2g0@6rrsN.6}");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      
      int int0 = element0.elementSiblingIndex();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, int0);
      
      Document document1 = Parser.parseBodyFragment("2g0@6rrsN.6}", "2g0@6rrsN.6}");
      assertNotNull(document1);
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document1.val((String) null);
      assertNotNull(document2);
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("option", "7O<");
      assertNotNull(document0);
      assertEquals("7O<", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7O<", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals("7O<", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7O<", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("7O<", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      
      Elements elements0 = document0.getElementsByIndexGreaterThan(0);
      assertNotNull(elements0);
      assertEquals("7O<", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7O<", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      Element element1 = element0.previousElementSibling();
      assertNull(element1);
      assertEquals("7O<", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7O<", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("7O<", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("option", "7O<");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("7O<", document0.baseUri());
      assertEquals("7O<", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Evaluator.IndexEquals evaluator_IndexEquals0 = new Evaluator.IndexEquals(0);
      assertNotNull(evaluator_IndexEquals0);
      
      String string0 = evaluator_IndexEquals0.toString();
      assertNotNull(string0);
      assertEquals(":eq(0)", string0);
      
      LinkedHashSet<PseudoTextElement> linkedHashSet0 = new LinkedHashSet<PseudoTextElement>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      boolean boolean0 = linkedHashSet0.add((PseudoTextElement) null);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(boolean0);
      
      Document document1 = new Document("7O<");
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("7O<", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("7O<", document1.location());
      assertFalse(document1.equals((Object)document0));
      
      // Undeclared exception!
      try { 
        document1.insertChildren(0, (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Document.createShell("ascii");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      document0.setSiblingIndex(0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      Document document1 = (Document)document0.attr("ascii", "font");
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("ascii", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsByAttributeValueMatching("font", "font");
      assertNotNull(elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(document0, document1);
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertEquals("ascii", element0.baseUri());
      assertSame(document0, document1);
      
      Node[] nodeArray0 = document0.childNodesAsArray();
      assertNotNull(nodeArray0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertSame(document0, document1);
      assertEquals(1, nodeArray0.length);
      
      String string0 = element0.baseUri();
      assertNotNull(string0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertEquals("ascii", element0.baseUri());
      assertSame(document0, document1);
      assertEquals("ascii", string0);
      
      element0.parentNode = (Node) document1;
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("ascii", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertEquals("ascii", element0.baseUri());
      assertEquals(0, element0.parentNode.siblingIndex());
      assertFalse(element0.parentNode.hasParent());
      
      document1.doSetBaseUri("ascii");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("ascii", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Evaluator.IndexEquals evaluator_IndexEquals0 = new Evaluator.IndexEquals(6);
      assertNotNull(evaluator_IndexEquals0);
      
      String string1 = evaluator_IndexEquals0.toString();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(":eq(6)", string1);
      
      boolean boolean0 = evaluator_IndexEquals0.matches(document0, element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertEquals("ascii", element0.baseUri());
      assertSame(document0, document1);
      assertFalse(boolean0);
      
      Element element1 = document0.head();
      assertNotNull(element1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("ascii", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.tagName());
      assertTrue(element1.isBlock());
      assertSame(document0, document1);
      assertSame(element1, element0);
      
      // Undeclared exception!
      try { 
        document0.getElementsByIndexGreaterThan(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Document.createShell("ascii");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      document0.setSiblingIndex(36);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(36, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = (Document)document0.attr("ascii", "#root");
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(36, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("ascii", document1.location());
      assertEquals(36, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsByAttributeValueMatching("#root", "#root");
      assertNotNull(elements0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(36, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(document0, document1);
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(36, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals("ascii", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertSame(document0, document1);
      
      Element element1 = element0.after("ascii");
      assertNotNull(element1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(36, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals("ascii", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertEquals("ascii", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Node[] nodeArray0 = document0.childNodesAsArray();
      assertNotNull(nodeArray0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(36, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertSame(document0, document1);
      assertEquals(1, nodeArray0.length);
      
      Document document2 = (Document)document1.removeAttr("ascii");
      assertNotNull(document2);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(36, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("ascii", document1.location());
      assertEquals(36, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(36, document2.siblingIndex());
      assertEquals("ascii", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      String string0 = element0.baseUri();
      assertNotNull(string0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(36, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals("ascii", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertEquals("ascii", string0);
      
      document1.doSetBaseUri("ascii");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(36, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("ascii", document1.location());
      assertEquals(36, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      
      document0.parentNode = (Node) element0;
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(36, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals("ascii", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, document0.parentNode.siblingIndex());
      assertTrue(document0.parentNode.hasParent());
      
      Element element2 = document1.head();
      assertNotNull(element2);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(36, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("ascii", document1.location());
      assertEquals(36, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", element2.baseUri());
      assertTrue(element2.hasParent());
      assertEquals("head", element2.nodeName());
      assertEquals(0, element2.childNodeSize());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element2.isBlock());
      assertEquals("head", element2.tagName());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(element2, element1);
      assertSame(element2, element0);
      
      Elements elements1 = document0.getElementsByIndexGreaterThan(36);
      assertNotNull(elements1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(36, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertTrue(elements1.equals((Object)elements0));
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      
      Element element3 = document1.nextElementSibling();
      assertNull(element3);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(36, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("ascii", document1.location());
      assertEquals(36, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Document.createShell("ascii");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.baseUri());
      
      document0.setSiblingIndex(13);
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(13, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.baseUri());
      
      Document document1 = (Document)document0.attr("ascii", "o9g.jsoup.nodes.Element");
      assertNotNull(document1);
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(13, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(13, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsByAttributeValueMatching("o9g.jsoup.nodes.Element", "o9g.jsoup.nodes.Element");
      assertNotNull(elements0);
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(13, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(document0, document1);
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(13, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.baseUri());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertSame(document0, document1);
      
      Element element1 = element0.after("ascii");
      assertNotNull(element1);
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(13, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.baseUri());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.nodeName());
      assertEquals("ascii", element1.baseUri());
      assertEquals("head", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Node[] nodeArray0 = document0.childNodesAsArray();
      assertNotNull(nodeArray0);
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(13, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.baseUri());
      assertSame(document0, document1);
      assertEquals(1, nodeArray0.length);
      
      Document document2 = (Document)document1.removeAttr("ascii");
      assertNotNull(document2);
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(13, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(13, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("ascii", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("ascii", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(13, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      String string0 = element0.baseUri();
      assertNotNull(string0);
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(13, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.baseUri());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(element0, element1);
      assertEquals("ascii", string0);
      
      document1.doSetBaseUri("ascii");
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(13, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(13, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      
      document0.parentNode = (Node) element0;
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(13, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.baseUri());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertTrue(document0.parentNode.hasParent());
      assertEquals(0, document0.parentNode.siblingIndex());
      
      Element element2 = document1.body();
      assertNotNull(element2);
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(13, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(13, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertTrue(element2.hasParent());
      assertEquals(2, element2.siblingIndex());
      assertEquals("body", element2.nodeName());
      assertEquals("ascii", element2.baseUri());
      assertEquals(1, element2.childNodeSize());
      assertTrue(element2.isBlock());
      assertEquals("body", element2.tagName());
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      
      Elements elements1 = document0.getElementsContainingText("o9g.jsoup.nodes.Element");
      assertNotNull(elements1);
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(13, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.baseUri());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertTrue(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(elements1, elements0);
      
      CDataNode cDataNode0 = new CDataNode("1=\"&'V~J=.zGa");
      assertNotNull(cDataNode0);
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      
      StringBuffer stringBuffer0 = new StringBuffer("1=\"&'V~J=.zGa");
      assertNotNull(stringBuffer0);
      assertEquals(14, stringBuffer0.length());
      assertEquals("1=\"&'V~J=.zGa", stringBuffer0.toString());
      
      StringBuffer stringBuffer1 = (StringBuffer)cDataNode0.html((Appendable) stringBuffer0);
      assertNotNull(stringBuffer1);
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals("1=\"&'V~J=.zGa<![CDATA[1=\"&'V~J=.zGa]]>", stringBuffer0.toString());
      assertEquals(40, stringBuffer0.length());
      assertEquals("1=\"&'V~J=.zGa<![CDATA[1=\"&'V~J=.zGa]]>", stringBuffer1.toString());
      assertEquals(40, stringBuffer1.length());
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      assertNotNull(document_OutputSettings1);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.outline(true);
      assertNotNull(document_OutputSettings2);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.syntax(document_OutputSettings_Syntax0);
      assertNotNull(document_OutputSettings3);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertTrue(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.prettyPrint(false);
      assertNotNull(document_OutputSettings4);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertTrue(document_OutputSettings4.outline());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings4.syntax());
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      
      element1.outerHtmlTail(stringBuffer1, 13, document_OutputSettings4);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(13, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertTrue(document_OutputSettings4.outline());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings4.syntax());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.nodeName());
      assertEquals("ascii", element1.baseUri());
      assertEquals("head", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(47, stringBuffer0.length());
      assertEquals("1=\"&'V~J=.zGa<![CDATA[1=\"&'V~J=.zGa]]></head>", stringBuffer0.toString());
      assertEquals(47, stringBuffer1.length());
      assertEquals("1=\"&'V~J=.zGa<![CDATA[1=\"&'V~J=.zGa]]></head>", stringBuffer1.toString());
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(element0.equals((Object)element2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(element1.equals((Object)element2));
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(element0, element1);
      assertNotSame(element0, element2);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(element1, element2);
      assertSame(element1, element0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "body";
      Tag tag0 = Tag.valueOf("body");
      assertNotNull(tag0);
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("body", tag0.getName());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isInline());
      assertEquals("body", tag0.toString());
      assertTrue(tag0.isBlock());
      
      Element element0 = new Element(tag0, "Z]uWD  A\"A");
      assertNotNull(element0);
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("body", tag0.getName());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isInline());
      assertEquals("body", tag0.toString());
      assertTrue(tag0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("Z]uWD  A\"A", element0.baseUri());
      
      Document document0 = new Document("org.jsoup.select.Evaluator$MatchText");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.select.Evaluator$MatchText", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.select.Evaluator$MatchText", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      
      DocumentType documentType0 = new DocumentType("option", "body", "body", " ");
      assertNotNull(documentType0);
      assertFalse(documentType0.hasParent());
      assertEquals(0, documentType0.siblingIndex());
      assertEquals("#doctype", documentType0.nodeName());
      
      document0.setParentNode(documentType0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.select.Evaluator$MatchText", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.select.Evaluator$MatchText", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(documentType0.hasParent());
      assertEquals(0, documentType0.siblingIndex());
      assertEquals("#doctype", documentType0.nodeName());
      
      // Undeclared exception!
      try { 
        document0.append("PUBLIC");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Z'X%%-");
      assertFalse(boolean0);
      
      String string0 = "sKtaSo~3kiyfMH*";
      Document document0 = Parser.parseBodyFragmentRelaxed("sKtaSo~3kiyfMH*", "sKtaSo~3kiyfMH*");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("sKtaSo~3kiyfMH*", document0.location());
      assertEquals("sKtaSo~3kiyfMH*", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals("sKtaSo~3kiyfMH*", document0.location());
      assertEquals("sKtaSo~3kiyfMH*", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("sKtaSo~3kiyfMH*", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      
      Element element1 = element0.prependElement("sKtaSo~3kiyfMH*");
      assertNotNull(element1);
      assertFalse(document0.hasParent());
      assertEquals("sKtaSo~3kiyfMH*", document0.location());
      assertEquals("sKtaSo~3kiyfMH*", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, element0.childNodeSize());
      assertEquals("sKtaSo~3kiyfMH*", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("sKtaSo~3kiyfMH*", element1.baseUri());
      assertEquals("sktaso~3kiyfmh*", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("sktaso~3kiyfmh*", element1.tagName());
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Element element2 = element0.appendTo(document0);
      assertNotNull(element2);
      assertFalse(document0.hasParent());
      assertEquals("sKtaSo~3kiyfMH*", document0.location());
      assertEquals("sKtaSo~3kiyfMH*", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, element0.childNodeSize());
      assertEquals("sKtaSo~3kiyfMH*", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.siblingIndex());
      assertEquals("body", element2.nodeName());
      assertEquals(2, element2.childNodeSize());
      assertEquals("sKtaSo~3kiyfMH*", element2.baseUri());
      assertTrue(element2.isBlock());
      assertEquals("body", element2.tagName());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertNotSame(element0, element1);
      assertSame(element0, element2);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      
      String string1 = "2\\Z#RZx5P)5?HBS";
      Element element3 = element1.appendText("2Z#RZx5P)5?HBS");
      assertNotNull(element3);
      assertFalse(document0.hasParent());
      assertEquals("sKtaSo~3kiyfMH*", document0.location());
      assertEquals("sKtaSo~3kiyfMH*", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, element0.childNodeSize());
      assertEquals("sKtaSo~3kiyfMH*", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("sKtaSo~3kiyfMH*", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertEquals("sktaso~3kiyfmh*", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("sktaso~3kiyfmh*", element1.tagName());
      assertEquals(0, element3.siblingIndex());
      assertTrue(element3.hasParent());
      assertFalse(element3.isBlock());
      assertEquals("sktaso~3kiyfmh*", element3.nodeName());
      assertEquals(1, element3.childNodeSize());
      assertEquals("sKtaSo~3kiyfMH*", element3.baseUri());
      assertEquals("sktaso~3kiyfmh*", element3.tagName());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element1.equals((Object)element2));
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element2));
      assertNotSame(element0, element1);
      assertNotSame(element0, element3);
      assertSame(element0, element2);
      assertNotSame(element1, element0);
      assertSame(element1, element3);
      assertNotSame(element1, element2);
      assertSame(element3, element1);
      assertNotSame(element3, element0);
      assertNotSame(element3, element2);
      
      Node node0 = element3.unwrap();
      assertNotNull(node0);
      assertFalse(document0.hasParent());
      assertEquals("sKtaSo~3kiyfMH*", document0.location());
      assertEquals("sKtaSo~3kiyfMH*", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, element0.childNodeSize());
      assertEquals("sKtaSo~3kiyfMH*", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("sKtaSo~3kiyfMH*", element1.baseUri());
      assertEquals("sktaso~3kiyfmh*", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertEquals("sktaso~3kiyfmh*", element1.tagName());
      assertEquals(1, element3.siblingIndex());
      assertFalse(element3.isBlock());
      assertFalse(element3.hasParent());
      assertEquals("sktaso~3kiyfmh*", element3.nodeName());
      assertEquals(0, element3.childNodeSize());
      assertEquals("sKtaSo~3kiyfMH*", element3.baseUri());
      assertEquals("sktaso~3kiyfmh*", element3.tagName());
      assertEquals("#text", node0.nodeName());
      assertEquals(0, node0.siblingIndex());
      assertTrue(node0.hasParent());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element0.equals((Object)element3));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element1.equals((Object)element2));
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element2));
      assertNotSame(element0, element1);
      assertNotSame(element0, element3);
      assertSame(element0, element2);
      assertNotSame(element1, element0);
      assertSame(element1, element3);
      assertNotSame(element1, element2);
      assertSame(element3, element1);
      assertNotSame(element3, element0);
      assertNotSame(element3, element2);
      
      Document document1 = Parser.parse("1#&au:'29N2m@`)\"S", "N");
      assertNotNull(document1);
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("N", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("N", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      
      // Undeclared exception!
      try { 
        element3.replaceChild(document1, element1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = "Wjt\\jme~B)8";
      Document document0 = Document.createShell("Wjtjme~B)8");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Wjtjme~B)8", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("Wjtjme~B)8", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      
      document0.setSiblingIndex(710);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(710, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("Wjtjme~B)8", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("Wjtjme~B)8", document0.baseUri());
      
      String string1 = "o9g.jsoup.nodes.Element";
      Document document1 = (Document)document0.attr("Wjtjme~B)8", "Wjtjme~B)8");
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(710, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("Wjtjme~B)8", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("Wjtjme~B)8", document0.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("Wjtjme~B)8", document1.location());
      assertEquals(710, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("Wjtjme~B)8", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string2 = null;
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("ascii", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Parser.parse("Z>uWD  A\"A", "Z>uWD  A\"A");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Z>uWD  A\"A", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Z>uWD  A\"A", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Tag tag0 = Tag.valueOf("Z]uWD  A\"A");
      assertNotNull(tag0);
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("Z]uWD  A\"A", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertEquals("Z]uWD  A\"A", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      
      Element element0 = new Element(tag0, "Z>uWD  A\"A");
      assertNotNull(element0);
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("Z]uWD  A\"A", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertEquals("Z]uWD  A\"A", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Z>uWD  A\"A", element0.baseUri());
      assertEquals("Z]uWD  A\"A", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("Z]uWD  A\"A", element0.nodeName());
      
      document0.setParentNode(element0);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Z>uWD  A\"A", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Z>uWD  A\"A", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("Z]uWD  A\"A", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertEquals("Z]uWD  A\"A", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Z>uWD  A\"A", element0.baseUri());
      assertEquals("Z]uWD  A\"A", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("Z]uWD  A\"A", element0.nodeName());
      
      Document document1 = (Document)document0.append("Z>uWD  A\"A");
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Z>uWD  A\"A", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("Z>uWD  A\"A", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("Z>uWD  A\"A", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("Z>uWD  A\"A", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document0.data();
      assertNotNull(string0);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Z>uWD  A\"A", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("Z>uWD  A\"A", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertSame(document0, document1);
      assertEquals("", string0);
      
      Evaluator.IndexEquals evaluator_IndexEquals0 = new Evaluator.IndexEquals(0);
      assertNotNull(evaluator_IndexEquals0);
      
      Elements elements0 = document0.getElementsContainingText("");
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Z>uWD  A\"A", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("Z>uWD  A\"A", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      assertSame(document0, document1);
      
      boolean boolean1 = Element.preserveWhitespace(element0);
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("Z]uWD  A\"A", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertEquals("Z]uWD  A\"A", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Z>uWD  A\"A", element0.baseUri());
      assertEquals("Z]uWD  A\"A", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("Z]uWD  A\"A", element0.nodeName());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Element element1 = document1.lastElementSibling();
      assertNull(element1);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Z>uWD  A\"A", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("Z>uWD  A\"A", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("Z>uWD  A\"A", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("Z>uWD  A\"A", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("option", "7;O<");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7;O<", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("7;O<", document0.baseUri());
      assertFalse(document0.isBlock());
      
      Evaluator.IndexEquals evaluator_IndexEquals0 = new Evaluator.IndexEquals(0);
      assertNotNull(evaluator_IndexEquals0);
      
      String string0 = evaluator_IndexEquals0.toString();
      assertNotNull(string0);
      assertEquals(":eq(0)", string0);
      
      Pattern pattern0 = Pattern.compile("option");
      assertNotNull(pattern0);
      assertEquals("option", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("option", pattern0.pattern());
      
      Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
      assertNotNull(elements0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7;O<", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("7;O<", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("option", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("option", pattern0.pattern());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      String string1 = evaluator_IndexEquals0.toString();
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals(":eq(0)", string1);
      
      boolean boolean0 = evaluator_IndexEquals0.matches(document0, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7;O<", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("7;O<", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(boolean0);
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7;O<", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("7;O<", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("7;O<", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals("head", element0.tagName());
      
      Elements elements1 = document0.getElementsByIndexGreaterThan(0);
      assertNotNull(elements1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7;O<", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("7;O<", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(elements1.isEmpty());
      assertEquals(1, elements1.size());
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = "ascii";
      Document document0 = Document.createShell("ascii");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      document0.setSiblingIndex(13);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(13, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      String string1 = "o9g.jsoup.nodes.Element";
      // Undeclared exception!
      try { 
        document0.attr((String) null, "ascii");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Document.createShell("IM-o@v-wokBjEK");
      assertNotNull(document0);
      assertEquals("IM-o@v-wokBjEK", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("IM-o@v-wokBjEK", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      
      document0.setSiblingIndex(13);
      assertEquals("IM-o@v-wokBjEK", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("IM-o@v-wokBjEK", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(13, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = (Document)document0.attr("IM-o@v-wokBjEK", "o9g.jsoup.nodes.Element");
      assertNotNull(document1);
      assertEquals("IM-o@v-wokBjEK", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("IM-o@v-wokBjEK", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(13, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("IM-o@v-wokBjEK", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("IM-o@v-wokBjEK", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(13, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsByAttributeValueMatching("o9g.jsoup.nodes.Element", "o9g.jsoup.nodes.Element");
      assertNotNull(elements0);
      assertEquals("IM-o@v-wokBjEK", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("IM-o@v-wokBjEK", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(13, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(document0, document1);
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals("IM-o@v-wokBjEK", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("IM-o@v-wokBjEK", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(13, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("IM-o@v-wokBjEK", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertSame(document0, document1);
      
      Element element1 = element0.after("IM-o@v-wokBjEK");
      assertNotNull(element1);
      assertEquals("IM-o@v-wokBjEK", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("IM-o@v-wokBjEK", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(13, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("IM-o@v-wokBjEK", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.nodeName());
      assertEquals("IM-o@v-wokBjEK", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Element element2 = element1.doClone(document0);
      assertNotNull(element2);
      assertEquals("IM-o@v-wokBjEK", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("IM-o@v-wokBjEK", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(13, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("IM-o@v-wokBjEK", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.nodeName());
      assertEquals("IM-o@v-wokBjEK", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertEquals("IM-o@v-wokBjEK", element2.baseUri());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.siblingIndex());
      assertEquals(0, element2.childNodeSize());
      assertEquals("head", element2.nodeName());
      assertTrue(element2.isBlock());
      assertEquals("head", element2.tagName());
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertSame(document0, document1);
      assertNotSame(element0, element2);
      assertSame(element0, element1);
      assertNotSame(element1, element2);
      assertSame(element1, element0);
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      
      Node[] nodeArray0 = document0.childNodesAsArray();
      assertNotNull(nodeArray0);
      assertEquals("IM-o@v-wokBjEK", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("IM-o@v-wokBjEK", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(13, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertEquals(1, nodeArray0.length);
      
      Document document2 = (Document)document1.removeAttr("IM-o@v-wokBjEK");
      assertNotNull(document2);
      assertEquals("IM-o@v-wokBjEK", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("IM-o@v-wokBjEK", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(13, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("IM-o@v-wokBjEK", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("IM-o@v-wokBjEK", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(13, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("IM-o@v-wokBjEK", document2.location());
      assertEquals(13, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("IM-o@v-wokBjEK", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      String string0 = element0.baseUri();
      assertNotNull(string0);
      assertEquals("IM-o@v-wokBjEK", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("IM-o@v-wokBjEK", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(13, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("IM-o@v-wokBjEK", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertFalse(element0.equals((Object)element2));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(element0, element2);
      assertSame(element0, element1);
      assertEquals("IM-o@v-wokBjEK", string0);
      
      document1.doSetBaseUri("IM-o@v-wokBjEK");
      assertEquals("IM-o@v-wokBjEK", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("IM-o@v-wokBjEK", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(13, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("IM-o@v-wokBjEK", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("IM-o@v-wokBjEK", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(13, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      
      document0.parentNode = (Node) element0;
      assertEquals("IM-o@v-wokBjEK", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("IM-o@v-wokBjEK", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(13, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("IM-o@v-wokBjEK", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, document0.parentNode.siblingIndex());
      assertTrue(document0.parentNode.hasParent());
      
      Element element3 = document1.head();
      assertNotNull(element3);
      assertEquals("IM-o@v-wokBjEK", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("IM-o@v-wokBjEK", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(13, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("IM-o@v-wokBjEK", document1.location());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("IM-o@v-wokBjEK", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(13, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(element3.hasParent());
      assertEquals("head", element3.nodeName());
      assertTrue(element3.isBlock());
      assertEquals("head", element3.tagName());
      assertEquals(0, element3.childNodeSize());
      assertEquals("IM-o@v-wokBjEK", element3.baseUri());
      assertEquals(0, element3.siblingIndex());
      assertFalse(element3.equals((Object)element2));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(element3, element2);
      assertSame(element3, element0);
      assertSame(element3, element1);
      
      Elements elements1 = document0.getElementsByIndexGreaterThan(13);
      assertNotNull(elements1);
      assertEquals("IM-o@v-wokBjEK", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("IM-o@v-wokBjEK", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(13, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertTrue(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Document.createShell("ascii");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("ascii", element0.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      Node[] nodeArray0 = document0.childNodesAsArray();
      assertNotNull(nodeArray0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertEquals(1, nodeArray0.length);
      
      String string0 = element0.baseUri();
      assertNotNull(string0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("ascii", element0.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertEquals("ascii", string0);
      
      document1.doSetBaseUri("html");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("html", document1.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      List<Node> list0 = document1.childNodes();
      assertNotNull(list0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("html", document1.baseUri());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      String string1 = document0.nodeName();
      assertNotNull(string1);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.equals((Object)document1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(document0, document1);
      assertEquals("#document", string1);
      
      Elements elements0 = document0.getElementsByAttribute("#document");
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      Document document2 = (Document)document0.prependChild(document1);
      assertNotNull(document2);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("html", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("ascii", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("ascii", document2.location());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      
      String string2 = document2.wholeText();
      assertNotNull(string2);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("html", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("ascii", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("ascii", document2.location());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("", string2);
      
      document1.remove();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("html", document1.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      
      String string3 = document1.text();
      assertNotNull(string3);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("html", document1.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertEquals("", string3);
      
      List<DataNode> list1 = document0.dataNodes();
      assertNotNull(list1);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      
      boolean boolean0 = document2.hasText();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("html", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("ascii", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("ascii", document2.location());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = "ascii";
      Document document0 = Document.createShell("ascii");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      
      document0.setSiblingIndex(13);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(13, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      
      Document document1 = (Document)document0.attr("ascii", "o9g.jsoup.nodes.Element");
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(13, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(13, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsByAttributeValueMatching("o9g.jsoup.nodes.Element", "o9g.jsoup.nodes.Element");
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(13, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(document0, document1);
      
      String string1 = null;
      Attribute attribute0 = new Attribute("o9g.jsoup.nodes.Element", (String) null);
      assertNotNull(attribute0);
      assertNull(attribute0.getValue());
      assertEquals("o9g.jsoup.nodes.Element", attribute0.getKey());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put(attribute0);
      assertNotNull(attributes1);
      assertNull(attribute0.getValue());
      assertEquals("o9g.jsoup.nodes.Element", attribute0.getKey());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("o9g.jsoup.nodes.Element", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals("o9g.jsoup.nodes.element", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("o9g.jsoup.nodes.element", tag0.getName());
      
      FormElement formElement0 = new FormElement(tag0, "l=t3d55LpbA", attributes0);
      assertNotNull(formElement0);
      assertEquals(1, attributes0.size());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals("o9g.jsoup.nodes.element", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("o9g.jsoup.nodes.element", tag0.getName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("l=t3d55LpbA", formElement0.baseUri());
      assertEquals("o9g.jsoup.nodes.element", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals("o9g.jsoup.nodes.element", formElement0.tagName());
      
      FormElement formElement1 = formElement0.addElement(document1);
      assertNotNull(formElement1);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(13, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(13, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, attributes0.size());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals("o9g.jsoup.nodes.element", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("o9g.jsoup.nodes.element", tag0.getName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("l=t3d55LpbA", formElement0.baseUri());
      assertEquals("o9g.jsoup.nodes.element", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals("o9g.jsoup.nodes.element", formElement0.tagName());
      assertFalse(formElement1.isBlock());
      assertEquals("o9g.jsoup.nodes.element", formElement1.tagName());
      assertFalse(formElement1.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("o9g.jsoup.nodes.element", formElement1.nodeName());
      assertEquals("l=t3d55LpbA", formElement1.baseUri());
      assertEquals(0, formElement1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(attributes0, attributes1);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      
      Pattern pattern0 = Pattern.compile("o9g.jsoup.nodes.Element", 13);
      assertNotNull(pattern0);
      assertEquals("o9g.jsoup.nodes.Element", pattern0.pattern());
      assertEquals(13, pattern0.flags());
      assertEquals("o9g.jsoup.nodes.Element", pattern0.toString());
      
      Elements elements1 = formElement1.getElementsByAttributeValueMatching("#root", pattern0);
      assertNotNull(elements1);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(13, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(13, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, attributes0.size());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals("o9g.jsoup.nodes.element", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("o9g.jsoup.nodes.element", tag0.getName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("l=t3d55LpbA", formElement0.baseUri());
      assertEquals("o9g.jsoup.nodes.element", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals("o9g.jsoup.nodes.element", formElement0.tagName());
      assertFalse(formElement1.isBlock());
      assertEquals("o9g.jsoup.nodes.element", formElement1.tagName());
      assertFalse(formElement1.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("o9g.jsoup.nodes.element", formElement1.nodeName());
      assertEquals("l=t3d55LpbA", formElement1.baseUri());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("o9g.jsoup.nodes.Element", pattern0.pattern());
      assertEquals(13, pattern0.flags());
      assertEquals("o9g.jsoup.nodes.Element", pattern0.toString());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertTrue(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(attributes0, attributes1);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertNotSame(elements1, elements0);
      
      FormElement formElement2 = new FormElement(tag0, "CC{;", attributes0);
      assertNotNull(formElement2);
      assertEquals(1, attributes0.size());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals("o9g.jsoup.nodes.element", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("o9g.jsoup.nodes.element", tag0.getName());
      assertEquals(0, formElement2.siblingIndex());
      assertEquals("o9g.jsoup.nodes.element", formElement2.nodeName());
      assertFalse(formElement2.hasParent());
      assertEquals("CC{;", formElement2.baseUri());
      assertEquals("o9g.jsoup.nodes.element", formElement2.tagName());
      assertEquals(0, formElement2.childNodeSize());
      assertFalse(formElement2.isBlock());
      assertFalse(formElement2.equals((Object)formElement0));
      assertFalse(formElement2.equals((Object)formElement1));
      
      // Undeclared exception!
      try { 
        formElement2.getElementsMatchingText("CC{;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: CC{;
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/8V]/`Jq]I/", "/8V]/`Jq]I/");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = (Document)document0.tagName("/8V]/`Jq]I/");
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals("/8v]/`jq]i/", document0.tagName());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("/8V]/`Jq]I/", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("/8V]/`Jq]I/", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("/8v]/`jq]i/", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = document0.normalise();
      assertNotNull(document2);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals("/8v]/`jq]i/", document0.tagName());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals("/8V]/`Jq]I/", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("/8V]/`Jq]I/", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("/8v]/`jq]i/", document2.tagName());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      boolean boolean0 = document2.hasText();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals("/8v]/`jq]i/", document0.tagName());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals("/8V]/`Jq]I/", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("/8V]/`Jq]I/", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("/8v]/`jq]i/", document2.tagName());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "/8V]/`Jq]I/");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Element element1 = document2.selectFirst("body");
      assertNotNull(element1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals("/8v]/`jq]i/", document0.tagName());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals("/8V]/`Jq]I/", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("/8V]/`Jq]I/", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("/8v]/`jq]i/", document2.tagName());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("/8V]/`Jq]I/", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Document.createShell("ascii");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      document0.setSiblingIndex(13);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(13, document0.siblingIndex());
      
      Document document1 = (Document)document0.attr("ascii", "o9g.jsoup.nodes.Element");
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(13, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(13, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsByAttributeValueMatching("o9g.jsoup.nodes.Element", "o9g.jsoup.nodes.Element");
      assertNotNull(elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(13, document0.siblingIndex());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(document0, document1);
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(13, document0.siblingIndex());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertSame(document0, document1);
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attribute attribute0 = Attribute.createFromEncoded("o9g.jsoup.nodes.Element", "textarea");
      assertNotNull(attribute0);
      assertEquals("textarea", attribute0.getValue());
      assertEquals("o9g.jsoup.nodes.Element", attribute0.getKey());
      
      Attribute attribute1 = attribute0.clone();
      assertNotNull(attribute1);
      assertEquals("textarea", attribute0.getValue());
      assertEquals("o9g.jsoup.nodes.Element", attribute0.getKey());
      assertEquals("o9g.jsoup.nodes.Element", attribute1.getKey());
      assertEquals("textarea", attribute1.getValue());
      assertTrue(attribute1.equals((Object)attribute0));
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      
      Attributes attributes1 = attributes0.put(attribute1);
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals("textarea", attribute0.getValue());
      assertEquals("o9g.jsoup.nodes.Element", attribute0.getKey());
      assertEquals("o9g.jsoup.nodes.Element", attribute1.getKey());
      assertEquals("textarea", attribute1.getValue());
      assertEquals(1, attributes1.size());
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertSame(attributes0, attributes1);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes1, attributes0);
      
      Tag tag0 = Tag.valueOf("o9g.jsoup.nodes.Element");
      assertNotNull(tag0);
      assertFalse(tag0.isKnownTag());
      assertEquals("o9g.jsoup.nodes.Element", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertEquals("o9g.jsoup.nodes.Element", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      
      FormElement formElement0 = new FormElement(tag0, "#(", attributes1);
      assertNotNull(formElement0);
      assertEquals(1, attributes0.size());
      assertEquals("textarea", attribute0.getValue());
      assertEquals("o9g.jsoup.nodes.Element", attribute0.getKey());
      assertEquals("o9g.jsoup.nodes.Element", attribute1.getKey());
      assertEquals("textarea", attribute1.getValue());
      assertEquals(1, attributes1.size());
      assertFalse(tag0.isKnownTag());
      assertEquals("o9g.jsoup.nodes.Element", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertEquals("o9g.jsoup.nodes.Element", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("#(", formElement0.baseUri());
      assertEquals("o9g.jsoup.nodes.Element", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("o9g.jsoup.nodes.Element", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      
      FormElement formElement1 = formElement0.addElement(document1);
      assertNotNull(formElement1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(13, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(13, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, attributes0.size());
      assertEquals("textarea", attribute0.getValue());
      assertEquals("o9g.jsoup.nodes.Element", attribute0.getKey());
      assertEquals("o9g.jsoup.nodes.Element", attribute1.getKey());
      assertEquals("textarea", attribute1.getValue());
      assertEquals(1, attributes1.size());
      assertFalse(tag0.isKnownTag());
      assertEquals("o9g.jsoup.nodes.Element", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertEquals("o9g.jsoup.nodes.Element", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("#(", formElement0.baseUri());
      assertEquals("o9g.jsoup.nodes.Element", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("o9g.jsoup.nodes.Element", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("#(", formElement1.baseUri());
      assertFalse(formElement1.hasParent());
      assertEquals("o9g.jsoup.nodes.Element", formElement1.tagName());
      assertFalse(formElement1.isBlock());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("o9g.jsoup.nodes.Element", formElement1.nodeName());
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(attributes0, attributes1);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes1, attributes0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      
      Pattern pattern0 = Pattern.compile("br", 6812);
      assertNotNull(pattern0);
      assertEquals("br", pattern0.pattern());
      assertEquals("br", pattern0.toString());
      assertEquals(6812, pattern0.flags());
      
      Elements elements1 = formElement1.getElementsByAttributeValueMatching("#(", pattern0);
      assertNotNull(elements1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(13, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(13, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, attributes0.size());
      assertEquals("textarea", attribute0.getValue());
      assertEquals("o9g.jsoup.nodes.Element", attribute0.getKey());
      assertEquals("o9g.jsoup.nodes.Element", attribute1.getKey());
      assertEquals("textarea", attribute1.getValue());
      assertEquals(1, attributes1.size());
      assertFalse(tag0.isKnownTag());
      assertEquals("o9g.jsoup.nodes.Element", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertEquals("o9g.jsoup.nodes.Element", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("#(", formElement0.baseUri());
      assertEquals("o9g.jsoup.nodes.Element", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("o9g.jsoup.nodes.Element", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("#(", formElement1.baseUri());
      assertFalse(formElement1.hasParent());
      assertEquals("o9g.jsoup.nodes.Element", formElement1.tagName());
      assertFalse(formElement1.isBlock());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("o9g.jsoup.nodes.Element", formElement1.nodeName());
      assertEquals("br", pattern0.pattern());
      assertEquals("br", pattern0.toString());
      assertEquals(6812, pattern0.flags());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertTrue(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(attributes0, attributes1);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes1, attributes0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertNotSame(elements1, elements0);
      
      Elements elements2 = formElement1.getElementsMatchingText("head");
      assertNotNull(elements2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(13, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(13, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, attributes0.size());
      assertEquals("textarea", attribute0.getValue());
      assertEquals("o9g.jsoup.nodes.Element", attribute0.getKey());
      assertEquals("o9g.jsoup.nodes.Element", attribute1.getKey());
      assertEquals("textarea", attribute1.getValue());
      assertEquals(1, attributes1.size());
      assertFalse(tag0.isKnownTag());
      assertEquals("o9g.jsoup.nodes.Element", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertEquals("o9g.jsoup.nodes.Element", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("#(", formElement0.baseUri());
      assertEquals("o9g.jsoup.nodes.Element", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("o9g.jsoup.nodes.Element", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("#(", formElement1.baseUri());
      assertFalse(formElement1.hasParent());
      assertEquals("o9g.jsoup.nodes.Element", formElement1.tagName());
      assertFalse(formElement1.isBlock());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("o9g.jsoup.nodes.Element", formElement1.nodeName());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertTrue(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(attributes0, attributes1);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes1, attributes0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      
      String string0 = attributes0.toString();
      assertNotNull(string0);
      assertEquals(1, attributes0.size());
      assertSame(attributes0, attributes1);
      assertEquals(" o9g.jsoup.nodes.Element=\"textarea\"", string0);
      
      Element element1 = new Element("o9g.jsoup.nodes.Element");
      assertNotNull(element1);
      assertFalse(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals("o9g.jsoup.nodes.Element", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("o9g.jsoup.nodes.Element", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.equals((Object)element0));
      
      FormElement formElement2 = (FormElement)formElement0.appendTo(element0);
      assertNotNull(formElement2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(13, document0.siblingIndex());
      assertEquals(0, formElement2.childNodeSize());
      assertEquals("o9g.jsoup.nodes.Element", formElement2.nodeName());
      assertTrue(formElement2.hasParent());
      assertFalse(formElement2.isBlock());
      assertEquals("o9g.jsoup.nodes.Element", formElement2.tagName());
      assertEquals(0, formElement2.siblingIndex());
      assertEquals("#(", formElement2.baseUri());
      assertEquals("ascii", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals("textarea", attribute0.getValue());
      assertEquals("o9g.jsoup.nodes.Element", attribute0.getKey());
      assertEquals("o9g.jsoup.nodes.Element", attribute1.getKey());
      assertEquals("textarea", attribute1.getValue());
      assertEquals(1, attributes1.size());
      assertFalse(tag0.isKnownTag());
      assertEquals("o9g.jsoup.nodes.Element", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertEquals("o9g.jsoup.nodes.Element", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("#(", formElement0.baseUri());
      assertTrue(formElement0.hasParent());
      assertEquals("o9g.jsoup.nodes.Element", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("o9g.jsoup.nodes.Element", formElement0.nodeName());
      assertFalse(element0.equals((Object)element1));
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertSame(document0, document1);
      assertSame(formElement2, formElement0);
      assertSame(formElement2, formElement1);
      assertNotSame(element0, element1);
      assertSame(attributes0, attributes1);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes1, attributes0);
      assertSame(formElement0, formElement1);
      assertSame(formElement0, formElement2);
      
      String string1 = formElement0.tagName();
      assertNotNull(string1);
      assertEquals(1, attributes0.size());
      assertEquals("textarea", attribute0.getValue());
      assertEquals("o9g.jsoup.nodes.Element", attribute0.getKey());
      assertEquals("o9g.jsoup.nodes.Element", attribute1.getKey());
      assertEquals("textarea", attribute1.getValue());
      assertEquals(1, attributes1.size());
      assertFalse(tag0.isKnownTag());
      assertEquals("o9g.jsoup.nodes.Element", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertEquals("o9g.jsoup.nodes.Element", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("#(", formElement0.baseUri());
      assertTrue(formElement0.hasParent());
      assertEquals("o9g.jsoup.nodes.Element", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("o9g.jsoup.nodes.Element", formElement0.nodeName());
      assertFalse(string1.equals((Object)string0));
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertSame(attributes0, attributes1);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes1, attributes0);
      assertSame(formElement0, formElement1);
      assertSame(formElement0, formElement2);
      assertEquals("o9g.jsoup.nodes.Element", string1);
      
      Element element2 = element0.nextElementSibling();
      assertNotNull(element2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(13, document0.siblingIndex());
      assertTrue(element2.isBlock());
      assertEquals("body", element2.tagName());
      assertEquals(0, element2.childNodeSize());
      assertEquals(1, element2.siblingIndex());
      assertEquals("body", element2.nodeName());
      assertEquals("ascii", element2.baseUri());
      assertTrue(element2.hasParent());
      assertEquals("ascii", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element0.equals((Object)element1));
      assertSame(document0, document1);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      
      FormElement formElement3 = formElement1.addElement(formElement0);
      assertNotNull(formElement3);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(13, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(13, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("o9g.jsoup.nodes.Element", formElement3.tagName());
      assertFalse(formElement3.isBlock());
      assertEquals("o9g.jsoup.nodes.Element", formElement3.nodeName());
      assertEquals(0, formElement3.siblingIndex());
      assertEquals("#(", formElement3.baseUri());
      assertEquals(0, formElement3.childNodeSize());
      assertTrue(formElement3.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals("textarea", attribute0.getValue());
      assertEquals("o9g.jsoup.nodes.Element", attribute0.getKey());
      assertEquals("o9g.jsoup.nodes.Element", attribute1.getKey());
      assertEquals("textarea", attribute1.getValue());
      assertEquals(1, attributes1.size());
      assertFalse(tag0.isKnownTag());
      assertEquals("o9g.jsoup.nodes.Element", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertEquals("o9g.jsoup.nodes.Element", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("#(", formElement0.baseUri());
      assertTrue(formElement0.hasParent());
      assertEquals("o9g.jsoup.nodes.Element", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("o9g.jsoup.nodes.Element", formElement0.nodeName());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("#(", formElement1.baseUri());
      assertEquals("o9g.jsoup.nodes.Element", formElement1.tagName());
      assertFalse(formElement1.isBlock());
      assertTrue(formElement1.hasParent());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("o9g.jsoup.nodes.Element", formElement1.nodeName());
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(formElement3, formElement0);
      assertSame(formElement3, formElement2);
      assertSame(formElement3, formElement1);
      assertSame(attributes0, attributes1);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes1, attributes0);
      assertSame(formElement0, formElement3);
      assertSame(formElement0, formElement1);
      assertSame(formElement0, formElement2);
      assertSame(formElement1, formElement0);
      assertSame(formElement1, formElement3);
      assertSame(formElement1, formElement2);
      
      FormElement formElement4 = (FormElement)formElement3.before((Node) formElement2);
      assertNotNull(formElement4);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(13, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(13, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals("textarea", attribute0.getValue());
      assertEquals("o9g.jsoup.nodes.Element", attribute0.getKey());
      assertEquals("o9g.jsoup.nodes.Element", attribute1.getKey());
      assertEquals("textarea", attribute1.getValue());
      assertEquals(1, attributes1.size());
      assertFalse(tag0.isKnownTag());
      assertEquals("o9g.jsoup.nodes.Element", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertEquals("o9g.jsoup.nodes.Element", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("#(", formElement0.baseUri());
      assertTrue(formElement0.hasParent());
      assertEquals("o9g.jsoup.nodes.Element", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("o9g.jsoup.nodes.Element", formElement0.nodeName());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("#(", formElement1.baseUri());
      assertEquals("o9g.jsoup.nodes.Element", formElement1.tagName());
      assertFalse(formElement1.isBlock());
      assertTrue(formElement1.hasParent());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("o9g.jsoup.nodes.Element", formElement1.nodeName());
      assertEquals(0, formElement2.childNodeSize());
      assertEquals("o9g.jsoup.nodes.Element", formElement2.nodeName());
      assertTrue(formElement2.hasParent());
      assertFalse(formElement2.isBlock());
      assertEquals("o9g.jsoup.nodes.Element", formElement2.tagName());
      assertEquals(0, formElement2.siblingIndex());
      assertEquals("#(", formElement2.baseUri());
      assertEquals("o9g.jsoup.nodes.Element", formElement3.tagName());
      assertFalse(formElement3.isBlock());
      assertEquals("o9g.jsoup.nodes.Element", formElement3.nodeName());
      assertEquals(0, formElement3.siblingIndex());
      assertEquals("#(", formElement3.baseUri());
      assertEquals(0, formElement3.childNodeSize());
      assertTrue(formElement3.hasParent());
      assertEquals(0, formElement4.childNodeSize());
      assertTrue(formElement4.hasParent());
      assertFalse(formElement4.isBlock());
      assertEquals("#(", formElement4.baseUri());
      assertEquals("o9g.jsoup.nodes.Element", formElement4.nodeName());
      assertEquals("o9g.jsoup.nodes.Element", formElement4.tagName());
      assertEquals(0, formElement4.siblingIndex());
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element1));
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      assertSame(attributes0, attributes1);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes1, attributes0);
      assertSame(formElement0, formElement3);
      assertSame(formElement0, formElement1);
      assertSame(formElement0, formElement4);
      assertSame(formElement0, formElement2);
      assertSame(formElement1, formElement0);
      assertSame(formElement1, formElement3);
      assertSame(formElement1, formElement4);
      assertSame(formElement1, formElement2);
      assertSame(formElement2, formElement0);
      assertSame(formElement2, formElement4);
      assertSame(formElement2, formElement1);
      assertSame(formElement2, formElement3);
      assertSame(formElement3, formElement4);
      assertSame(formElement3, formElement0);
      assertSame(formElement3, formElement2);
      assertSame(formElement3, formElement1);
      assertSame(formElement4, formElement1);
      assertSame(formElement4, formElement2);
      assertSame(formElement4, formElement3);
      assertSame(formElement4, formElement0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Document.createShell("ascii");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      
      document0.setSiblingIndex(0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.attr("ascii", "ascii");
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("ascii", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsByAttributeValueMatching("ascii", "ascii");
      assertNotNull(elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertSame(document0, document1);
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertSame(document0, document1);
      
      Node[] nodeArray0 = document0.childNodesAsArray();
      assertNotNull(nodeArray0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertSame(document0, document1);
      assertEquals(1, nodeArray0.length);
      
      String string0 = element0.baseUri();
      assertNotNull(string0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertSame(document0, document1);
      assertEquals("ascii", string0);
      
      Elements elements1 = element0.previousElementSiblings();
      assertNotNull(elements1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertFalse(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      
      Element element1 = document0.createElement("c0>c<$/+X`AIiY/>}");
      assertNotNull(element1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("c0>c<$/+X`AIiY/>}", element1.nodeName());
      assertEquals("ascii", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("c0>c<$/+X`AIiY/>}", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertFalse(element1.equals((Object)element0));
      assertSame(document0, document1);
      assertNotSame(element1, element0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document2 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document2);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("ascii", document2.location());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("ascii", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = (Document)document2.append("org.jsoup.nodes.Element");
      assertNotNull(document3);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("ascii", document2.location());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("ascii", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals("ascii", document3.location());
      assertFalse(document3.isBlock());
      assertEquals("ascii", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      
      Comment comment0 = new Comment("g", "ascii");
      assertNotNull(comment0);
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      
      boolean boolean0 = document3.hasSameValue(comment0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("ascii", document2.location());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("ascii", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals("ascii", document3.location());
      assertFalse(document3.isBlock());
      assertEquals("ascii", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertFalse(boolean0);
      
      String string1 = document1.data();
      assertNotNull(string1);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("ascii", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(string1.equals((Object)string0));
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertEquals("", string1);
      
      String string2 = document1.tagName();
      assertNotNull(string2);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("ascii", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertEquals("#root", string2);
      
      Elements elements2 = document1.siblingElements();
      assertNotNull(elements2);
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("ascii", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      
      Elements elements3 = document1.getElementsByAttributeValueNot("AfterAttributeValue_quoted", "(b3{q");
      assertNotNull(elements3);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(elements3.isEmpty());
      assertEquals(4, elements3.size());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("ascii", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(elements3.equals((Object)elements0));
      assertFalse(elements3.equals((Object)elements1));
      assertFalse(elements3.equals((Object)elements2));
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Document.createShell("ascii");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals("ascii", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      Node[] nodeArray0 = document0.childNodesAsArray();
      assertNotNull(nodeArray0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertEquals(1, nodeArray0.length);
      
      String string0 = element0.baseUri();
      assertNotNull(string0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals("ascii", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertEquals("ascii", string0);
      
      document1.doSetBaseUri("html");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("html", document1.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      List<Node> list0 = document1.childNodes();
      assertNotNull(list0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("html", document1.baseUri());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      String string1 = document0.nodeName();
      assertNotNull(string1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.equals((Object)document1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(document0, document1);
      assertEquals("#document", string1);
      
      Elements elements0 = document0.getElementsByAttribute("#document");
      assertNotNull(elements0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      Document document2 = (Document)document0.prependChild(document1);
      assertNotNull(document2);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("html", document1.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("ascii", document2.baseUri());
      assertEquals("ascii", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      
      boolean boolean0 = document0.hasAttributes();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.equals((Object)document1));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertTrue(boolean0);
      
      Document document3 = document2.clone();
      assertNotNull(document3);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("html", document1.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("ascii", document2.baseUri());
      assertEquals("ascii", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("ascii", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.hasParent());
      assertEquals("ascii", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertEquals(2, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      
      Document document4 = (Document)document3.toggleClass("Tag name must not be empty.");
      assertNotNull(document4);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("html", document1.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("ascii", document2.baseUri());
      assertEquals("ascii", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("ascii", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.hasParent());
      assertEquals("ascii", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertEquals(2, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertFalse(document4.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("ascii", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertEquals("ascii", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document4);
      assertNotSame(document1, document0);
      assertNotSame(document1, document4);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document2, document4);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document3, document4);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document0);
      assertNotSame(document4, document2);
      
      Elements elements1 = document0.parents();
      assertNotNull(elements1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document4);
      assertNotSame(elements1, elements0);
      
      Element element1 = element0.attr("J#EZ@1tmV", "ascii");
      assertNotNull(element1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals("ascii", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("ascii", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals("head", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document4);
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Parser.parse("CJ0E|", "CJ0E|");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("CJ0E|", document0.location());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      
      List<DataNode> list0 = document0.dataNodes();
      assertNotNull(list0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("CJ0E|", document0.location());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Evaluator.IndexEquals evaluator_IndexEquals0 = new Evaluator.IndexEquals(0);
      assertNotNull(evaluator_IndexEquals0);
      
      String string0 = evaluator_IndexEquals0.toString();
      assertNotNull(string0);
      assertEquals(":eq(0)", string0);
      
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf(":eq(0)", parseSettings0);
      assertNotNull(tag0);
      assertEquals(":eq(0)", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals(":eq(0)", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("7 ]^pcQ%^/.ZZ", "");
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Attribute attribute0 = new Attribute("7 ]^pcQ%^/.ZZ", (String) null);
      assertNotNull(attribute0);
      assertEquals("7 ]^pcQ%^/.ZZ", attribute0.getKey());
      assertNull(attribute0.getValue());
      
      Attributes attributes2 = attributes1.put(attribute0);
      assertNotNull(attributes2);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("7 ]^pcQ%^/.ZZ", attribute0.getKey());
      assertNull(attribute0.getValue());
      assertEquals(1, attributes2.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      
      FormElement formElement0 = new FormElement(tag0, "CJ0E|", attributes2);
      assertNotNull(formElement0);
      assertEquals(":eq(0)", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals(":eq(0)", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("7 ]^pcQ%^/.ZZ", attribute0.getKey());
      assertNull(attribute0.getValue());
      assertEquals(1, attributes2.size());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(":eq(0)", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals(":eq(0)", formElement0.tagName());
      assertEquals("CJ0E|", formElement0.baseUri());
      
      FormElement formElement1 = formElement0.addElement(document0);
      assertNotNull(formElement1);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("CJ0E|", document0.location());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":eq(0)", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals(":eq(0)", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("7 ]^pcQ%^/.ZZ", attribute0.getKey());
      assertNull(attribute0.getValue());
      assertEquals(1, attributes2.size());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(":eq(0)", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals(":eq(0)", formElement0.tagName());
      assertEquals("CJ0E|", formElement0.baseUri());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals(":eq(0)", formElement1.nodeName());
      assertFalse(formElement1.hasParent());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("CJ0E|", formElement1.baseUri());
      assertFalse(formElement1.isBlock());
      assertEquals(":eq(0)", formElement1.tagName());
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      
      Pattern pattern0 = Pattern.compile("7 ]^pcQ%^/.ZZ", 0);
      assertNotNull(pattern0);
      assertEquals("7 ]^pcQ%^/.ZZ", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("7 ]^pcQ%^/.ZZ", pattern0.toString());
      
      Elements elements0 = formElement1.getElementsByAttributeValueMatching("ScriptDataDoubleEscapeEnd", pattern0);
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("CJ0E|", document0.location());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":eq(0)", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals(":eq(0)", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("7 ]^pcQ%^/.ZZ", attribute0.getKey());
      assertNull(attribute0.getValue());
      assertEquals(1, attributes2.size());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(":eq(0)", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals(":eq(0)", formElement0.tagName());
      assertEquals("CJ0E|", formElement0.baseUri());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals(":eq(0)", formElement1.nodeName());
      assertFalse(formElement1.hasParent());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("CJ0E|", formElement1.baseUri());
      assertFalse(formElement1.isBlock());
      assertEquals(":eq(0)", formElement1.tagName());
      assertEquals("7 ]^pcQ%^/.ZZ", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("7 ]^pcQ%^/.ZZ", pattern0.toString());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      
      Elements elements1 = formElement0.getElementsMatchingText("head");
      assertNotNull(elements1);
      assertEquals(":eq(0)", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals(":eq(0)", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("7 ]^pcQ%^/.ZZ", attribute0.getKey());
      assertNull(attribute0.getValue());
      assertEquals(1, attributes2.size());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(":eq(0)", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals(":eq(0)", formElement0.tagName());
      assertEquals("CJ0E|", formElement0.baseUri());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertTrue(elements1.equals((Object)elements0));
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(formElement0, formElement1);
      assertNotSame(elements1, elements0);
      
      String string1 = attributes1.toString();
      assertNotNull(string1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(string1.equals((Object)string0));
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertEquals(" 7 ]^pcQ%^/.ZZ", string1);
      
      Element element0 = new Element("ScriptDataDoubleEscapeEnd");
      assertNotNull(element0);
      assertEquals("ScriptDataDoubleEscapeEnd", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("ScriptDataDoubleEscapeEnd", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      
      Element element1 = formElement0.appendTo(document0);
      assertNotNull(element1);
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("CJ0E|", document0.location());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(":eq(0)", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertEquals(":eq(0)", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals("CJ0E|", element1.baseUri());
      assertEquals(":eq(0)", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals(":eq(0)", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("7 ]^pcQ%^/.ZZ", attribute0.getKey());
      assertNull(attribute0.getValue());
      assertEquals(1, attributes2.size());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(":eq(0)", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals(":eq(0)", formElement0.tagName());
      assertEquals("CJ0E|", formElement0.baseUri());
      assertEquals(1, formElement0.siblingIndex());
      assertTrue(formElement0.hasParent());
      assertSame(element1, formElement0);
      assertSame(element1, formElement1);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(formElement0, element1);
      assertSame(formElement0, formElement1);
      
      String string2 = formElement1.tagName();
      assertNotNull(string2);
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("CJ0E|", document0.location());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":eq(0)", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals(":eq(0)", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("7 ]^pcQ%^/.ZZ", attribute0.getKey());
      assertNull(attribute0.getValue());
      assertEquals(1, attributes2.size());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(":eq(0)", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals(":eq(0)", formElement0.tagName());
      assertEquals("CJ0E|", formElement0.baseUri());
      assertEquals(1, formElement0.siblingIndex());
      assertTrue(formElement0.hasParent());
      assertEquals(1, formElement1.siblingIndex());
      assertTrue(formElement1.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals(":eq(0)", formElement1.nodeName());
      assertEquals("CJ0E|", formElement1.baseUri());
      assertFalse(formElement1.isBlock());
      assertEquals(":eq(0)", formElement1.tagName());
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(formElement0, element1);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertSame(formElement1, element1);
      assertEquals(":eq(0)", string2);
      
      Element element2 = element1.nextElementSibling();
      assertNull(element2);
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("CJ0E|", document0.location());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(":eq(0)", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertEquals(":eq(0)", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals("CJ0E|", element1.baseUri());
      assertEquals(":eq(0)", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals(":eq(0)", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("7 ]^pcQ%^/.ZZ", attribute0.getKey());
      assertNull(attribute0.getValue());
      assertEquals(1, attributes2.size());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(":eq(0)", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals(":eq(0)", formElement0.tagName());
      assertEquals("CJ0E|", formElement0.baseUri());
      assertEquals(1, formElement0.siblingIndex());
      assertTrue(formElement0.hasParent());
      assertSame(element1, formElement0);
      assertSame(element1, formElement1);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(formElement0, element1);
      assertSame(formElement0, formElement1);
      
      Element element3 = element1.before((Node) element0);
      assertNotNull(element3);
      assertEquals("ScriptDataDoubleEscapeEnd", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("ScriptDataDoubleEscapeEnd", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("CJ0E|", document0.location());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(":eq(0)", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(":eq(0)", element1.tagName());
      assertEquals(2, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("CJ0E|", element1.baseUri());
      assertEquals("CJ0E|", element3.baseUri());
      assertFalse(element3.isBlock());
      assertTrue(element3.hasParent());
      assertEquals(2, element3.siblingIndex());
      assertEquals(0, element3.childNodeSize());
      assertEquals(":eq(0)", element3.tagName());
      assertEquals(":eq(0)", element3.nodeName());
      assertEquals(":eq(0)", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals(":eq(0)", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("7 ]^pcQ%^/.ZZ", attribute0.getKey());
      assertNull(attribute0.getValue());
      assertEquals(1, attributes2.size());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(":eq(0)", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals(":eq(0)", formElement0.tagName());
      assertEquals(2, formElement0.siblingIndex());
      assertEquals("CJ0E|", formElement0.baseUri());
      assertTrue(formElement0.hasParent());
      assertSame(element1, formElement0);
      assertSame(element1, formElement1);
      assertSame(element1, element3);
      assertSame(element3, formElement1);
      assertSame(element3, element1);
      assertSame(element3, formElement0);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(formElement0, element1);
      assertSame(formElement0, element3);
      assertSame(formElement0, formElement1);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Document.createShell("ascii");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.location());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.location());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertEquals("ascii", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.location());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      Node[] nodeArray0 = document0.childNodesAsArray();
      assertNotNull(nodeArray0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.location());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertEquals(1, nodeArray0.length);
      
      String string0 = element0.baseUri();
      assertNotNull(string0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.location());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertEquals("ascii", string0);
      
      document1.doSetBaseUri("html");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.location());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("html", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      List<Node> list0 = document1.childNodes();
      assertNotNull(list0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.location());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("html", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      String string1 = document0.nodeName();
      assertNotNull(string1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.location());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(document0, document1);
      assertEquals("#document", string1);
      
      Document document2 = (Document)document0.prependChild(document1);
      assertNotNull(document2);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.location());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("html", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("ascii", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("ascii", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      
      String string2 = document2.wholeText();
      assertNotNull(string2);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.location());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("html", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("ascii", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("ascii", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertEquals("", string2);
      
      document1.remove();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.location());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("html", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      
      String string3 = document1.text();
      assertNotNull(string3);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.location());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("html", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertEquals("", string3);
      
      Elements elements0 = element0.previousElementSiblings();
      assertNotNull(elements0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.location());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      
      String string4 = element0.cssSelector();
      assertNotNull(string4);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.location());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertEquals("html > head", string4);
      
      Pattern pattern0 = Pattern.compile("~_+;-pD!O");
      assertNotNull(pattern0);
      assertEquals("~_+;-pD!O", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("~_+;-pD!O", pattern0.pattern());
      
      Elements elements1 = document1.getElementsMatchingOwnText(pattern0);
      assertNotNull(elements1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.location());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("html", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("~_+;-pD!O", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("~_+;-pD!O", pattern0.pattern());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/8V]/`Jq]I/", "/8V]/`Jq]I/");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertEquals("/8V]/`Jq]I/", document0.location());
      
      String string0 = document0.text();
      assertNotNull(string0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals("/8V]/`Jq]I/", string0);
      
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertEquals("/8V]/`Jq]I/", document0.location());
      
      Document document1 = new Document("/8V]/`Jq]I/");
      assertNotNull(document1);
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("/8V]/`Jq]I/", document1.location());
      assertEquals("/8V]/`Jq]I/", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document0.normalise();
      assertNotNull(document2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals("/8V]/`Jq]I/", document2.baseUri());
      assertEquals("/8V]/`Jq]I/", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      
      List<DataNode> list0 = document0.dataNodes();
      assertNotNull(list0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      
      boolean boolean0 = document1.hasText();
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("/8V]/`Jq]I/", document1.location());
      assertEquals("/8V]/`Jq]I/", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertFalse(boolean0);
      
      Document document3 = (Document)document2.attr("/8V]/`Jq]I/", "re7K]8FGEaYMY");
      assertNotNull(document3);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals("/8V]/`Jq]I/", document2.baseUri());
      assertEquals("/8V]/`Jq]I/", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals("/8V]/`Jq]I/", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("/8V]/`Jq]I/", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertNotSame(document3, document1);
      
      Elements elements0 = document1.getElementsMatchingText("/8V]/`Jq]I/");
      assertNotNull(elements0);
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("/8V]/`Jq]I/", document1.location());
      assertEquals("/8V]/`Jq]I/", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Document.createShell("ascii");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      document0.setSiblingIndex(13);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(13, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      Document document1 = (Document)document0.attr("ascii", "o9g.jsoup.nodes.Element");
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(13, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(13, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsByAttributeValueMatching("o9g.jsoup.nodes.Element", "o9g.jsoup.nodes.Element");
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(13, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(document0, document1);
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(13, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("ascii", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertSame(document0, document1);
      
      Element element1 = element0.after("ascii");
      assertNotNull(element1);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(13, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("ascii", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("ascii", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("head", element1.nodeName());
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Node[] nodeArray0 = document0.childNodesAsArray();
      assertNotNull(nodeArray0);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(13, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertSame(document0, document1);
      assertEquals(1, nodeArray0.length);
      
      Document document2 = (Document)document1.removeAttr("ascii");
      assertNotNull(document2);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(13, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(13, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(13, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("ascii", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("ascii", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      String string0 = element0.baseUri();
      assertNotNull(string0);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(13, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("ascii", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertEquals("ascii", string0);
      
      document1.doSetBaseUri("ascii");
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(13, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(13, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      
      document0.parentNode = (Node) element0;
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("ascii", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(13, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("ascii", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(document0.parentNode.hasParent());
      assertEquals(0, document0.parentNode.siblingIndex());
      
      Element element2 = document1.head();
      assertNotNull(element2);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("ascii", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(13, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(13, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.baseUri());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertEquals("head", element2.nodeName());
      assertEquals(0, element2.childNodeSize());
      assertTrue(element2.isBlock());
      assertEquals("ascii", element2.baseUri());
      assertEquals("head", element2.tagName());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(element2, element1);
      assertSame(element2, element0);
      
      Elements elements1 = document0.getElementsByIndexGreaterThan(13);
      assertNotNull(elements1);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("ascii", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(13, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertTrue(elements1.equals((Object)elements0));
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("f>l4", "f>l4");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("f>l4", document0.baseUri());
      assertEquals("f>l4", document0.location());
      assertFalse(document0.hasParent());
      
      String string0 = document0.val();
      assertNotNull(string0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("f>l4", document0.baseUri());
      assertEquals("f>l4", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("", string0);
      
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("f>l4", document0.baseUri());
      assertEquals("f>l4", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("f>l4", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("f>l4", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = document0.normalise();
      assertNotNull(document2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("f>l4", document0.baseUri());
      assertEquals("f>l4", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("f>l4", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("f>l4", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Document document3 = (Document)document0.prependText("%m");
      assertNotNull(document3);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("f>l4", document0.baseUri());
      assertEquals("f>l4", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("f>l4", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("f>l4", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(2, document3.childNodeSize());
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      
      String string1 = document0.text();
      assertNotNull(string1);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("f>l4", document0.baseUri());
      assertEquals("f>l4", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(string1.equals((Object)string0));
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertEquals("%m f>l4", string1);
      
      boolean boolean0 = document0.hasAttributes();
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("f>l4", document0.baseUri());
      assertEquals("f>l4", document0.location());
      assertFalse(document0.hasParent());
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertFalse(boolean0);
      
      Document document4 = (Document)document2.toggleClass("f>l4");
      assertNotNull(document4);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("f>l4", document0.baseUri());
      assertEquals("f>l4", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("f>l4", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("f>l4", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("f>l4", document4.baseUri());
      assertEquals(2, document4.childNodeSize());
      assertEquals("f>l4", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document4, document1);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertSame(document4, document2);
      
      // Undeclared exception!
      try { 
        document1.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Document.createShell("ascii");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      Node[] nodeArray0 = document0.childNodesAsArray();
      assertNotNull(nodeArray0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertEquals(1, nodeArray0.length);
      
      String string0 = element0.baseUri();
      assertNotNull(string0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertEquals("ascii", string0);
      
      document1.doSetBaseUri("html");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("html", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      List<Node> list0 = document1.childNodes();
      assertNotNull(list0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("html", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      String string1 = document0.nodeName();
      assertNotNull(string1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(document0, document1);
      assertEquals("#document", string1);
      
      Elements elements0 = document0.getElementsByAttribute("#document");
      assertNotNull(elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      List<Node> list1 = element0.childNodesCopy();
      assertNotNull(list1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertFalse(list1.equals((Object)list0));
      assertNotSame(document0, document1);
      
      Document document2 = (Document)document0.prependChild(document1);
      assertNotNull(document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("html", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("ascii", document2.baseUri());
      assertEquals("ascii", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      
      String string2 = document2.wholeText();
      assertNotNull(string2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("html", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("ascii", document2.baseUri());
      assertEquals("ascii", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertEquals("", string2);
      
      document1.remove();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("html", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      
      String string3 = document1.text();
      assertNotNull(string3);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("html", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertEquals("", string3);
      
      Elements elements1 = element0.previousElementSiblings();
      assertNotNull(elements1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertFalse(document0.equals((Object)document1));
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(elements1, elements0);
      
      String string4 = element0.cssSelector();
      assertNotNull(string4);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertEquals("html > head", string4);
      
      Element element1 = element0.firstElementSibling();
      assertNotNull(element1);
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals("head", element1.nodeName());
      assertEquals("ascii", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertSame(element1, element0);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(element0, element1);
      
      Element element2 = element0.before("ascii");
      assertNotNull(element2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertTrue(element2.hasParent());
      assertEquals("ascii", element2.baseUri());
      assertTrue(element2.isBlock());
      assertEquals("head", element2.tagName());
      assertEquals("head", element2.nodeName());
      assertEquals(0, element2.childNodeSize());
      assertEquals(2, element2.siblingIndex());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(element2, element0);
      assertSame(element2, element1);
      assertSame(element0, element1);
      assertSame(element0, element2);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Parser.parse("CJ0E|", "CJ0E|");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("CJ0E|", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      Elements elements0 = document0.select("CJ0E|");
      assertNotNull(elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("CJ0E|", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      List<DataNode> list0 = document0.dataNodes();
      assertNotNull(list0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("CJ0E|", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Evaluator.IndexEquals evaluator_IndexEquals0 = new Evaluator.IndexEquals(0);
      assertNotNull(evaluator_IndexEquals0);
      
      String string0 = evaluator_IndexEquals0.toString();
      assertNotNull(string0);
      assertEquals(":eq(0)", string0);
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("7 ]^pcQ%^/.ZZ", "");
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Attribute attribute0 = new Attribute("head", (String) null);
      assertNotNull(attribute0);
      assertNull(attribute0.getValue());
      assertEquals("head", attribute0.getKey());
      
      Attributes attributes2 = attributes1.put(attribute0);
      assertNotNull(attributes2);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertNull(attribute0.getValue());
      assertEquals("head", attribute0.getKey());
      assertEquals(2, attributes2.size());
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      
      Pattern pattern0 = Pattern.compile("head", 0);
      assertNotNull(pattern0);
      assertEquals("head", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("head", pattern0.toString());
      
      String string1 = attributes1.toString();
      assertNotNull(string1);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertFalse(string1.equals((Object)string0));
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertEquals(" 7 ]^pcQ%^/.ZZ=\"\" head", string1);
      
      Element element0 = new Element("whFss@w~BP&;Ya.#E");
      assertNotNull(element0);
      assertEquals(0, element0.siblingIndex());
      assertEquals("whFss@w~BP&;Ya.#E", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("whFss@w~BP&;Ya.#E", element0.tagName());
      assertFalse(element0.isBlock());
      
      // Undeclared exception!
      try { 
        document0.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/8V]/`Jq]I/", "/8V]/`Jq]I/");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      String string0 = document0.text();
      assertNotNull(string0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("/8V]/`Jq]I/", string0);
      
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.tagName("/8V]/`Jq]I/");
      assertNotNull(document1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/8v]/`jq]i/", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("/8V]/`Jq]I/", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("/8v]/`jq]i/", document1.tagName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("/8V]/`Jq]I/", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = document0.normalise();
      assertNotNull(document2);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/8v]/`jq]i/", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("/8V]/`Jq]I/", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("/8v]/`jq]i/", document2.tagName());
      assertEquals("/8V]/`Jq]I/", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      List<DataNode> list0 = document0.dataNodes();
      assertNotNull(list0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/8v]/`jq]i/", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertSame(document0, document2);
      assertSame(document0, document1);
      
      boolean boolean0 = document0.hasText();
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/8v]/`jq]i/", document0.tagName());
      assertFalse(document0.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parse("CJ0E|", "CJ0E|");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("CJ0E|", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("CJ0E|", document1.location());
      assertEquals("#root", document1.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      document1.title("CJ0E|");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("CJ0E|", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("CJ0E|", document1.location());
      assertEquals("#root", document1.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document1.getElementsMatchingText("org.jsoup.select.CombiningEvaluator$Or");
      assertNotNull(elements0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("CJ0E|", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("CJ0E|", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      List<TextNode> list0 = document1.textNodes();
      assertNotNull(list0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("CJ0E|", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("CJ0E|", document1.location());
      assertEquals("#root", document1.tagName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document0.tagName();
      assertNotNull(string0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertSame(document0, document1);
      assertEquals("#root", string0);
      
      Elements elements1 = document0.siblingElements();
      assertNotNull(elements1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertTrue(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      
      // Undeclared exception!
      try { 
        document1.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Document.createShell("ascii");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      String string0 = document0.text();
      assertNotNull(string0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertEquals("", string0);
      
      Element element0 = document1.previousElementSibling();
      assertNull(element0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document0.tagName("ascii");
      assertNotNull(document2);
      assertEquals("ascii", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("ascii", document2.location());
      assertEquals("ascii", document2.tagName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      
      // Undeclared exception!
      try { 
        document2.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/8V]/`Jq]I/", "/8V]/`Jq]I/");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertFalse(document0.hasParent());
      
      String string0 = document0.text();
      assertNotNull(string0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("/8V]/`Jq]I/", string0);
      
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertFalse(document0.hasParent());
      
      Document document1 = (Document)document0.tagName("/8V]/`Jq]I/");
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/8v]/`jq]i/", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("/8V]/`Jq]I/", document1.baseUri());
      assertEquals("/8v]/`jq]i/", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("/8V]/`Jq]I/", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Evaluator.IndexEquals evaluator_IndexEquals0 = new Evaluator.IndexEquals(0);
      assertNotNull(evaluator_IndexEquals0);
      
      String string1 = evaluator_IndexEquals0.toString();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(":eq(0)", string1);
      
      boolean boolean0 = evaluator_IndexEquals0.matches(document0, document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/8v]/`jq]i/", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertFalse(document0.hasParent());
      assertSame(document0, document1);
      assertTrue(boolean0);
      
      boolean boolean1 = document0.is((Evaluator) evaluator_IndexEquals0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/8v]/`jq]i/", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertFalse(document0.hasParent());
      assertTrue(boolean1 == boolean0);
      assertSame(document0, document1);
      assertTrue(boolean1);
      
      Document document2 = document0.normalise();
      assertNotNull(document2);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/8v]/`jq]i/", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("/8V]/`Jq]I/", document2.baseUri());
      assertEquals("/8V]/`Jq]I/", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("/8v]/`jq]i/", document2.tagName());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Document document3 = (Document)document2.tagName("/8V]/`Jq]I/");
      assertNotNull(document3);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/8v]/`jq]i/", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("/8V]/`Jq]I/", document2.baseUri());
      assertEquals("/8V]/`Jq]I/", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("/8v]/`jq]i/", document2.tagName());
      assertEquals("/8V]/`Jq]I/", document3.location());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals("/8v]/`jq]i/", document3.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("/8V]/`Jq]I/", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      
      Element element1 = document0.shallowClone();
      assertNotNull(element1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/8v]/`jq]i/", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("/8v]/`jq]i/", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("/8v]/`jq]i/", element1.nodeName());
      assertEquals("/8V]/`Jq]I/", element1.baseUri());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      
      Pattern pattern0 = Pattern.compile("N", 0);
      assertNotNull(pattern0);
      assertEquals("N", pattern0.toString());
      assertEquals("N", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      
      Elements elements0 = document1.getElementsMatchingText(pattern0);
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/8v]/`jq]i/", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("/8V]/`Jq]I/", document1.baseUri());
      assertEquals("/8v]/`jq]i/", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("/8V]/`Jq]I/", document1.location());
      assertEquals("N", pattern0.toString());
      assertEquals("N", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Document.createShell("");
      assertNotNull(document0);
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document1.attr("7gt-c10Bxw*Qmn", "~ZGq`AFw=f&H/fd>U8");
      assertNotNull(document2);
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals("", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      
      Element element0 = document1.head();
      assertNotNull(element0);
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      
      Node[] nodeArray0 = document1.childNodesAsArray();
      assertNotNull(nodeArray0);
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertEquals(1, nodeArray0.length);
      
      String string0 = document1.baseUri();
      assertNotNull(string0);
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertEquals("", string0);
      
      document1.doSetBaseUri("/");
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("/", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      
      List<Node> list0 = document1.childNodes();
      assertNotNull(list0);
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("/", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      
      String string1 = document1.nodeName();
      assertNotNull(string1);
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("/", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertEquals("#document", string1);
      
      Elements elements0 = document1.getElementsByAttribute("~ZGq`AFw=f&H/fd>U8");
      assertNotNull(elements0);
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("/", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      
      Element element1 = element0.prependChild(document0);
      assertNotNull(element1);
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("/", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      String string2 = document0.wholeText();
      assertNotNull(string2);
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertEquals("", string2);
      
      document0.remove();
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      
      String string3 = document2.text();
      assertNotNull(string3);
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("/", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("/", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("", string3);
      
      Elements elements1 = document0.previousElementSiblings();
      assertNotNull(elements1);
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(elements1, elements0);
      
      Document document3 = Parser.parseBodyFragmentRelaxed("br", "");
      assertNotNull(document3);
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertEquals("", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      
      String string4 = document3.cssSelector();
      assertNotNull(string4);
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertEquals("", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertEquals("#root", string4);
      
      Element element2 = element0.firstElementSibling();
      assertNotNull(element2);
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", element2.baseUri());
      assertEquals(0, element2.childNodeSize());
      assertTrue(element2.isBlock());
      assertEquals("head", element2.tagName());
      assertEquals(0, element2.siblingIndex());
      assertEquals("head", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("/", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(element2, element0);
      assertSame(element2, element1);
      assertNotSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(element0, element1);
      assertSame(element0, element2);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Parser.parse("CJ0E|", "CJ0E|");
      assertNotNull(document0);
      assertEquals("CJ0E|", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("CJ0E|", document0.baseUri());
      
      Elements elements0 = document0.select("CJ0E|");
      assertNotNull(elements0);
      assertEquals("CJ0E|", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("CJ0E|", document0.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      List<DataNode> list0 = document0.dataNodes();
      assertNotNull(list0);
      assertEquals("CJ0E|", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("CJ0E|", document0.baseUri());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Evaluator.IndexEquals evaluator_IndexEquals0 = new Evaluator.IndexEquals(0);
      assertNotNull(evaluator_IndexEquals0);
      
      String string0 = evaluator_IndexEquals0.toString();
      assertNotNull(string0);
      assertEquals(":eq(0)", string0);
      
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf(":eq(0)", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertEquals(":eq(0)", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertEquals(":eq(0)", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("7 ]^pcQ%^/.ZZ", "");
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Attribute attribute0 = new Attribute("head", (String) null);
      assertNotNull(attribute0);
      assertEquals("head", attribute0.getKey());
      assertNull(attribute0.getValue());
      
      Attributes attributes2 = attributes1.put(attribute0);
      assertNotNull(attributes2);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals("head", attribute0.getKey());
      assertNull(attribute0.getValue());
      assertEquals(2, attributes2.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      
      FormElement formElement0 = new FormElement(tag0, "CJ0E|", attributes2);
      assertNotNull(formElement0);
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertEquals(":eq(0)", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertEquals(":eq(0)", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals("head", attribute0.getKey());
      assertNull(attribute0.getValue());
      assertEquals(2, attributes2.size());
      assertEquals(":eq(0)", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals(":eq(0)", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals("CJ0E|", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      
      FormElement formElement1 = formElement0.addElement(document0);
      assertNotNull(formElement1);
      assertEquals("CJ0E|", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("CJ0E|", document0.baseUri());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertEquals(":eq(0)", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertEquals(":eq(0)", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals("head", attribute0.getKey());
      assertNull(attribute0.getValue());
      assertEquals(2, attributes2.size());
      assertEquals(":eq(0)", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals(":eq(0)", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals("CJ0E|", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(":eq(0)", formElement1.tagName());
      assertEquals("CJ0E|", formElement1.baseUri());
      assertEquals(0, formElement1.childNodeSize());
      assertFalse(formElement1.isBlock());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals(":eq(0)", formElement1.nodeName());
      assertFalse(formElement1.hasParent());
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      
      Pattern pattern0 = Pattern.compile("head", 0);
      assertNotNull(pattern0);
      assertEquals(0, pattern0.flags());
      assertEquals("head", pattern0.toString());
      assertEquals("head", pattern0.pattern());
      
      Elements elements1 = formElement1.getElementsByAttributeValueMatching("whFss@w~BP&;Ya.#E", pattern0);
      assertNotNull(elements1);
      assertEquals("CJ0E|", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("CJ0E|", document0.baseUri());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertEquals(":eq(0)", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertEquals(":eq(0)", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals("head", attribute0.getKey());
      assertNull(attribute0.getValue());
      assertEquals(2, attributes2.size());
      assertEquals(":eq(0)", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals(":eq(0)", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals("CJ0E|", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(":eq(0)", formElement1.tagName());
      assertEquals("CJ0E|", formElement1.baseUri());
      assertEquals(0, formElement1.childNodeSize());
      assertFalse(formElement1.isBlock());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals(":eq(0)", formElement1.nodeName());
      assertFalse(formElement1.hasParent());
      assertEquals(0, pattern0.flags());
      assertEquals("head", pattern0.toString());
      assertEquals("head", pattern0.pattern());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertTrue(elements1.equals((Object)elements0));
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertNotSame(elements1, elements0);
      
      Elements elements2 = formElement0.getElementsMatchingText("head");
      assertNotNull(elements2);
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertEquals(":eq(0)", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertEquals(":eq(0)", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals("head", attribute0.getKey());
      assertNull(attribute0.getValue());
      assertEquals(2, attributes2.size());
      assertEquals(":eq(0)", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals(":eq(0)", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals("CJ0E|", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertTrue(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(formElement0, formElement1);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      
      String string1 = attributes1.toString();
      assertNotNull(string1);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertFalse(string1.equals((Object)string0));
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertEquals(" 7 ]^pcQ%^/.ZZ=\"\" head", string1);
      
      Element element0 = new Element("whFss@w~BP&;Ya.#E");
      assertNotNull(element0);
      assertEquals("", element0.baseUri());
      assertEquals("whFss@w~BP&;Ya.#E", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("whFss@w~BP&;Ya.#E", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      
      Element element1 = formElement0.appendTo(document0);
      assertNotNull(element1);
      assertEquals("CJ0E|", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(":eq(0)", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(":eq(0)", element1.tagName());
      assertEquals("CJ0E|", element1.baseUri());
      assertFalse(element1.isBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertEquals(":eq(0)", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertEquals(":eq(0)", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals("head", attribute0.getKey());
      assertNull(attribute0.getValue());
      assertEquals(2, attributes2.size());
      assertEquals(":eq(0)", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals(":eq(0)", formElement0.tagName());
      assertEquals("CJ0E|", formElement0.baseUri());
      assertTrue(formElement0.hasParent());
      assertEquals(1, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertSame(element1, formElement1);
      assertSame(element1, formElement0);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(formElement0, element1);
      assertSame(formElement0, formElement1);
      
      String string2 = formElement1.tagName();
      assertNotNull(string2);
      assertEquals("CJ0E|", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("CJ0E|", document0.baseUri());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertEquals(":eq(0)", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertEquals(":eq(0)", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals("head", attribute0.getKey());
      assertNull(attribute0.getValue());
      assertEquals(2, attributes2.size());
      assertEquals(":eq(0)", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals(":eq(0)", formElement0.tagName());
      assertEquals("CJ0E|", formElement0.baseUri());
      assertTrue(formElement0.hasParent());
      assertEquals(1, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(":eq(0)", formElement1.tagName());
      assertEquals("CJ0E|", formElement1.baseUri());
      assertEquals(0, formElement1.childNodeSize());
      assertTrue(formElement1.hasParent());
      assertFalse(formElement1.isBlock());
      assertEquals(1, formElement1.siblingIndex());
      assertEquals(":eq(0)", formElement1.nodeName());
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(formElement0, element1);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertSame(formElement1, element1);
      assertEquals(":eq(0)", string2);
      
      Element element2 = element1.nextElementSibling();
      assertNull(element2);
      assertEquals("CJ0E|", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(":eq(0)", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(":eq(0)", element1.tagName());
      assertEquals("CJ0E|", element1.baseUri());
      assertFalse(element1.isBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertEquals(":eq(0)", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertEquals(":eq(0)", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals("head", attribute0.getKey());
      assertNull(attribute0.getValue());
      assertEquals(2, attributes2.size());
      assertEquals(":eq(0)", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals(":eq(0)", formElement0.tagName());
      assertEquals("CJ0E|", formElement0.baseUri());
      assertTrue(formElement0.hasParent());
      assertEquals(1, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertSame(element1, formElement1);
      assertSame(element1, formElement0);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(formElement0, element1);
      assertSame(formElement0, formElement1);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Parser.parse("CJ0E|", "CJ0E|");
      assertNotNull(document0);
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      Document document1 = Document.createShell("Smx2H%B6/<n:R");
      assertNotNull(document1);
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Smx2H%B6/<n:R", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Smx2H%B6/<n:R", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      
      Elements elements0 = document0.parents();
      assertNotNull(elements0);
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      
      String string0 = null;
      // Undeclared exception!
      try { 
        document1.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Element element0 = new Element("0aHPw.},?4");
      assertNotNull(element0);
      assertEquals("0aHPw.},?4", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("0aHPw.},?4", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      
      Element element1 = element0.getElementById(" > ");
      assertNull(element1);
      assertEquals("0aHPw.},?4", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("0aHPw.},?4", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      
      String string0 = element0.toString();
      assertNotNull(string0);
      assertEquals("0aHPw.},?4", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("0aHPw.},?4", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("<0aHPw.},?4></0aHPw.},?4>", string0);
      
      Elements elements0 = element0.getAllElements();
      assertNotNull(elements0);
      assertEquals("0aHPw.},?4", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("0aHPw.},?4", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      Pattern pattern0 = Pattern.compile("<0aHPw.},?4></0aHPw.},?4>", 32768);
      assertNotNull(pattern0);
      assertEquals("<0aHPw.},?4></0aHPw.},?4>", pattern0.pattern());
      assertEquals("<0aHPw.},?4></0aHPw.},?4>", pattern0.toString());
      assertEquals(32768, pattern0.flags());
      
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("Ho|F?h5c", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.preserveWhitespace());
      assertEquals("ho|f?h5c", tag0.getName());
      assertEquals("ho|f?h5c", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      
      CDataNode cDataNode0 = new CDataNode("0aHPw.},?4");
      assertNotNull(cDataNode0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      
      Attributes attributes1 = attributes0.put("s+", true);
      assertNotNull(attributes1);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      FormElement formElement0 = new FormElement(tag0, ",'PQ|", attributes1);
      assertNotNull(formElement0);
      assertFalse(tag0.preserveWhitespace());
      assertEquals("ho|f?h5c", tag0.getName());
      assertEquals("ho|f?h5c", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("ho|f?h5c", formElement0.nodeName());
      assertEquals("ho|f?h5c", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals(",'PQ|", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      
      FormElement formElement1 = formElement0.addElement((Element) null);
      assertNotNull(formElement1);
      assertFalse(tag0.preserveWhitespace());
      assertEquals("ho|f?h5c", tag0.getName());
      assertEquals("ho|f?h5c", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("ho|f?h5c", formElement0.nodeName());
      assertEquals("ho|f?h5c", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals(",'PQ|", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("ho|f?h5c", formElement1.nodeName());
      assertFalse(formElement1.hasParent());
      assertEquals(",'PQ|", formElement1.baseUri());
      assertEquals("ho|f?h5c", formElement1.tagName());
      assertFalse(formElement1.isBlock());
      assertEquals(0, formElement1.siblingIndex());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      
      Elements elements1 = formElement1.getElementsByAttributeValueMatching("Ho|F?h5c", pattern0);
      assertNotNull(elements1);
      assertEquals("<0aHPw.},?4></0aHPw.},?4>", pattern0.pattern());
      assertEquals("<0aHPw.},?4></0aHPw.},?4>", pattern0.toString());
      assertEquals(32768, pattern0.flags());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("ho|f?h5c", tag0.getName());
      assertEquals("ho|f?h5c", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("ho|f?h5c", formElement0.nodeName());
      assertEquals("ho|f?h5c", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals(",'PQ|", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("ho|f?h5c", formElement1.nodeName());
      assertFalse(formElement1.hasParent());
      assertEquals(",'PQ|", formElement1.baseUri());
      assertEquals("ho|f?h5c", formElement1.tagName());
      assertFalse(formElement1.isBlock());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertFalse(elements1.equals((Object)elements0));
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertNotSame(elements1, elements0);
      
      Elements elements2 = formElement1.getElementsMatchingText("br");
      assertNotNull(elements2);
      assertFalse(tag0.preserveWhitespace());
      assertEquals("ho|f?h5c", tag0.getName());
      assertEquals("ho|f?h5c", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("ho|f?h5c", formElement0.nodeName());
      assertEquals("ho|f?h5c", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals(",'PQ|", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("ho|f?h5c", formElement1.nodeName());
      assertFalse(formElement1.hasParent());
      assertEquals(",'PQ|", formElement1.baseUri());
      assertEquals("ho|f?h5c", formElement1.tagName());
      assertFalse(formElement1.isBlock());
      assertEquals(0, formElement1.siblingIndex());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertFalse(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      
      String string1 = attributes0.toString();
      assertNotNull(string1);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(2, attributes0.size());
      assertFalse(string1.equals((Object)string0));
      assertSame(attributes0, attributes1);
      assertEquals(" #cdata=\"0aHPw.},?4\" s+", string1);
      
      Element element2 = new Element("Ho|F?h5c");
      assertNotNull(element2);
      assertEquals(0, element2.siblingIndex());
      assertEquals(0, element2.childNodeSize());
      assertEquals("Ho|F?h5c", element2.tagName());
      assertEquals("Ho|F?h5c", element2.nodeName());
      assertEquals("", element2.baseUri());
      assertFalse(element2.hasParent());
      assertFalse(element2.isBlock());
      assertFalse(element2.equals((Object)element0));
      
      // Undeclared exception!
      try { 
        formElement0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("option", "option");
      assertNotNull(document0);
      assertEquals("option", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("option", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      
      Evaluator.IndexEquals evaluator_IndexEquals0 = new Evaluator.IndexEquals(0);
      assertNotNull(evaluator_IndexEquals0);
      
      String string0 = evaluator_IndexEquals0.toString();
      assertNotNull(string0);
      assertEquals(":eq(0)", string0);
      
      String string1 = evaluator_IndexEquals0.toString();
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals(":eq(0)", string1);
      
      boolean boolean0 = evaluator_IndexEquals0.matches(document0, document0);
      assertEquals("option", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("option", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(boolean0);
      
      boolean boolean1 = document0.is((Evaluator) evaluator_IndexEquals0);
      assertEquals("option", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("option", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Elements elements0 = document0.siblingElements();
      assertNotNull(elements0);
      assertEquals("option", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("option", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      Document document1 = (Document)document0.addClass("option");
      assertNotNull(document1);
      assertEquals("option", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("option", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("option", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("option", document1.location());
      assertEquals("#root", document1.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.removeClass(">]");
      assertNotNull(document2);
      assertEquals("option", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("option", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("option", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("option", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("option", document2.baseUri());
      assertEquals("option", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Elements elements1 = document2.getAllElements();
      assertNotNull(elements1);
      assertEquals("option", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("option", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("option", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("option", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("option", document2.baseUri());
      assertEquals("option", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(elements1.isEmpty());
      assertEquals(4, elements1.size());
      assertFalse(elements1.equals((Object)elements0));
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Element element0 = new Element("0aHPw.},?4");
      assertNotNull(element0);
      assertEquals(0, element0.siblingIndex());
      assertEquals("0aHPw.},?4", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("0aHPw.},?4", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      
      Document document0 = Parser.parse("-->", "figure");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("figure", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("figure", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("figure", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("figure", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("figure", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("figure", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Parser.parse("CJ0E|", "CJ0E|");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("CJ0E|", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      List<DataNode> list0 = document0.dataNodes();
      assertNotNull(list0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("CJ0E|", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      String string0 = document0.html();
      assertNotNull(string0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("CJ0E|", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("<html>\n <head></head>\n <body>\n  CJ0E|\n </body>\n</html>", string0);
      
      Charset charset0 = document0.charset();
      assertNotNull(charset0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("CJ0E|", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("CJ0E|", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(set0.contains(string0));
      
      Document document1 = (Document)document0.classNames(set0);
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("CJ0E|", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("CJ0E|", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("CJ0E|", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(set0.contains(string0));
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.text("textarea");
      assertNotNull(document2);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("CJ0E|", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("CJ0E|", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("CJ0E|", document2.location());
      assertEquals("#root", document2.tagName());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = document0.normalise();
      assertNotNull(document3);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("CJ0E|", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("CJ0E|", document3.baseUri());
      assertEquals("CJ0E|", document3.location());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      
      Document document4 = (Document)document3.prepend("<html>\n <head></head>\n <body>\n  CJ0E|\n </body>\n</html>");
      assertNotNull(document4);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(5, document0.childNodeSize());
      assertEquals("CJ0E|", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("CJ0E|", document3.baseUri());
      assertEquals("CJ0E|", document3.location());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(5, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertFalse(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("CJ0E|", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertEquals("CJ0E|", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(5, document4.childNodeSize());
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document4);
      assertSame(document3, document1);
      assertSame(document4, document3);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document0);
      
      List<Node> list1 = document3.childNodes();
      assertNotNull(list1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(5, document0.childNodeSize());
      assertEquals("CJ0E|", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("CJ0E|", document3.baseUri());
      assertEquals("CJ0E|", document3.location());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(5, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertFalse(list1.isEmpty());
      assertEquals(5, list1.size());
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document4);
      assertSame(document3, document1);
      
      String string1 = document0.nodeName();
      assertNotNull(string1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(5, document0.childNodeSize());
      assertEquals("CJ0E|", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(string1.equals((Object)string0));
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertEquals("#document", string1);
      
      Elements elements0 = document3.getElementsByAttribute("on");
      assertNotNull(elements0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(5, document0.childNodeSize());
      assertEquals("CJ0E|", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("CJ0E|", document3.baseUri());
      assertEquals("CJ0E|", document3.location());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(5, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document4);
      assertSame(document3, document1);
      
      Document document5 = (Document)document2.prependChild(document3);
      assertNotNull(document5);
      assertEquals("#document", document0.nodeName());
      assertEquals(6, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("CJ0E|", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(6, document2.childNodeSize());
      assertEquals("CJ0E|", document2.baseUri());
      assertEquals("CJ0E|", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("CJ0E|", document3.baseUri());
      assertEquals("CJ0E|", document3.location());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(6, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document5.siblingIndex());
      assertEquals(6, document5.childNodeSize());
      assertFalse(document5.isBlock());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("CJ0E|", document5.baseUri());
      assertEquals("CJ0E|", document5.location());
      assertTrue(document5.hasParent());
      assertEquals("#root", document5.tagName());
      assertEquals("#document", document5.nodeName());
      assertSame(document0, document5);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document2, document5);
      assertSame(document2, document3);
      assertSame(document3, document2);
      assertSame(document3, document5);
      assertSame(document3, document0);
      assertSame(document3, document4);
      assertSame(document3, document1);
      assertSame(document5, document1);
      assertSame(document5, document4);
      assertSame(document5, document3);
      assertSame(document5, document0);
      assertSame(document5, document2);
      
      document0.remove();
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(5, document0.childNodeSize());
      assertEquals("CJ0E|", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertSame(document0, document5);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document2);
      
      String string2 = document2.text();
      assertNotNull(string2);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(5, document0.childNodeSize());
      assertEquals("CJ0E|", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(5, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("CJ0E|", document2.baseUri());
      assertEquals("CJ0E|", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertSame(document0, document5);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document2, document5);
      assertSame(document2, document3);
      assertEquals("CJ0E| textarea", string2);
      
      Document document6 = document0.clone();
      assertNotNull(document6);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(5, document0.childNodeSize());
      assertEquals("CJ0E|", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document6.isBlock());
      assertEquals("#document", document6.nodeName());
      assertEquals(0, document6.siblingIndex());
      assertEquals(5, document6.childNodeSize());
      assertEquals("CJ0E|", document6.location());
      assertFalse(document6.updateMetaCharsetElement());
      assertFalse(document6.hasParent());
      assertEquals("#root", document6.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals("CJ0E|", document6.baseUri());
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document1));
      assertSame(document0, document5);
      assertNotSame(document0, document6);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertNotSame(document6, document0);
      assertNotSame(document6, document4);
      assertNotSame(document6, document3);
      assertNotSame(document6, document2);
      assertNotSame(document6, document5);
      assertNotSame(document6, document1);
      
      String string3 = document1.cssSelector();
      assertNotNull(string3);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(5, document0.childNodeSize());
      assertEquals("CJ0E|", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("CJ0E|", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(5, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("CJ0E|", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(set0.contains(string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document1.equals((Object)document6));
      assertSame(document0, document5);
      assertNotSame(document0, document6);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document6);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document5);
      
      // Undeclared exception!
      try { 
        document4.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Tag tag0 = Tag.valueOf("/4~&d$");
      assertNotNull(tag0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertEquals("/4~&d$", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("/4~&d$", tag0.getName());
      assertTrue(tag0.isInline());
      
      CDataNode cDataNode0 = new CDataNode("/4~&d$");
      assertNotNull(cDataNode0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      
      List<Node> list0 = cDataNode0.childNodes();
      assertNotNull(list0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      
      Attributes attributes1 = attributes0.put("/4~&d$", false);
      assertNotNull(attributes1);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      FormElement formElement0 = new FormElement(tag0, "/4~&d$", attributes1);
      assertNotNull(formElement0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertEquals("/4~&d$", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("/4~&d$", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("/4~&d$", formElement0.tagName());
      assertEquals("/4~&d$", formElement0.nodeName());
      assertEquals("/4~&d$", formElement0.baseUri());
      
      Element element0 = formElement0.attr("P'Q1GC+3RwOp", "i");
      assertNotNull(element0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertEquals("/4~&d$", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("/4~&d$", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("/4~&d$", formElement0.tagName());
      assertEquals("/4~&d$", formElement0.nodeName());
      assertEquals("/4~&d$", formElement0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("/4~&d$", element0.baseUri());
      assertEquals("/4~&d$", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("/4~&d$", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(formElement0, element0);
      assertSame(element0, formElement0);
      
      Pattern pattern0 = Pattern.compile("", 32768);
      assertNotNull(pattern0);
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals(32768, pattern0.flags());
      
      Elements elements0 = formElement0.getElementsByAttributeValueMatching("</", pattern0);
      assertNotNull(elements0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertEquals("/4~&d$", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("/4~&d$", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("/4~&d$", formElement0.tagName());
      assertEquals("/4~&d$", formElement0.nodeName());
      assertEquals("/4~&d$", formElement0.baseUri());
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals(32768, pattern0.flags());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(formElement0, element0);
      
      Elements elements1 = formElement0.getElementsMatchingText("");
      assertNotNull(elements1);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertEquals("/4~&d$", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("/4~&d$", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("/4~&d$", formElement0.tagName());
      assertEquals("/4~&d$", formElement0.nodeName());
      assertEquals("/4~&d$", formElement0.baseUri());
      assertFalse(elements1.isEmpty());
      assertEquals(1, elements1.size());
      assertFalse(elements1.equals((Object)elements0));
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(formElement0, element0);
      assertNotSame(elements1, elements0);
      
      String string0 = attributes1.toString();
      assertNotNull(string0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(" #cdata=\"/4~&amp;d$\" p'q1gc+3rwop=\"i\"", string0);
      
      Element element1 = new Element("/4~&d$");
      assertNotNull(element1);
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals("/4~&d$", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("/4~&d$", element1.tagName());
      
      Element element2 = formElement0.appendTo(element1);
      assertNotNull(element2);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertEquals("/4~&d$", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("/4~&d$", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("/4~&d$", formElement0.tagName());
      assertTrue(formElement0.hasParent());
      assertEquals("/4~&d$", formElement0.nodeName());
      assertEquals("/4~&d$", formElement0.baseUri());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals("/4~&d$", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("/4~&d$", element1.tagName());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals(0, element2.childNodeSize());
      assertEquals("/4~&d$", element2.tagName());
      assertTrue(element2.hasParent());
      assertEquals("/4~&d$", element2.baseUri());
      assertEquals("/4~&d$", element2.nodeName());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(formElement0, element2);
      assertSame(formElement0, element0);
      assertSame(element2, formElement0);
      assertSame(element2, element0);
      
      String string1 = formElement0.tagName();
      assertNotNull(string1);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertEquals("/4~&d$", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("/4~&d$", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("/4~&d$", formElement0.tagName());
      assertTrue(formElement0.hasParent());
      assertEquals("/4~&d$", formElement0.nodeName());
      assertEquals("/4~&d$", formElement0.baseUri());
      assertFalse(string1.equals((Object)string0));
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(formElement0, element2);
      assertSame(formElement0, element0);
      assertEquals("/4~&d$", string1);
      
      Element element3 = element1.nextElementSibling();
      assertNull(element3);
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals("/4~&d$", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("/4~&d$", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Tag tag0 = Tag.valueOf("/4~&d$");
      assertNotNull(tag0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertEquals("/4~&d$", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("/4~&d$", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      
      CDataNode cDataNode0 = new CDataNode("/4~&d$");
      assertNotNull(cDataNode0);
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      
      List<Node> list0 = cDataNode0.childNodes();
      assertNotNull(list0);
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      
      Attributes attributes1 = attributes0.put("/4~&d$", false);
      assertNotNull(attributes1);
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      FormElement formElement0 = new FormElement(tag0, "/4~&d$", attributes1);
      assertNotNull(formElement0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertEquals("/4~&d$", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("/4~&d$", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("/4~&d$", formElement0.nodeName());
      assertEquals("/4~&d$", formElement0.baseUri());
      assertEquals("/4~&d$", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      
      Pattern pattern0 = Pattern.compile("", 32768);
      assertNotNull(pattern0);
      assertEquals("", pattern0.toString());
      assertEquals(32768, pattern0.flags());
      assertEquals("", pattern0.pattern());
      
      Elements elements0 = formElement0.getElementsByAttributeValueMatching("</", pattern0);
      assertNotNull(elements0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertEquals("/4~&d$", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("/4~&d$", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("/4~&d$", formElement0.nodeName());
      assertEquals("/4~&d$", formElement0.baseUri());
      assertEquals("/4~&d$", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("", pattern0.toString());
      assertEquals(32768, pattern0.flags());
      assertEquals("", pattern0.pattern());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Elements elements1 = formElement0.getElementsMatchingText("");
      assertNotNull(elements1);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertEquals("/4~&d$", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("/4~&d$", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("/4~&d$", formElement0.nodeName());
      assertEquals("/4~&d$", formElement0.baseUri());
      assertEquals("/4~&d$", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(elements1.isEmpty());
      assertEquals(1, elements1.size());
      assertFalse(elements1.equals((Object)elements0));
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotSame(elements1, elements0);
      
      String string0 = attributes1.toString();
      assertNotNull(string0);
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(" #cdata=\"/4~&amp;d$\"", string0);
      
      Element element0 = new Element("/4~&d$");
      assertNotNull(element0);
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("/4~&d$", element0.nodeName());
      assertEquals("/4~&d$", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      
      Element element1 = formElement0.appendTo(element0);
      assertNotNull(element1);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertEquals("/4~&d$", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("/4~&d$", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("/4~&d$", formElement0.nodeName());
      assertEquals("/4~&d$", formElement0.baseUri());
      assertEquals("/4~&d$", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertTrue(formElement0.hasParent());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("/4~&d$", element0.nodeName());
      assertEquals("/4~&d$", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("/4~&d$", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("/4~&d$", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("/4~&d$", element1.nodeName());
      assertTrue(element1.hasParent());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(formElement0, element1);
      assertSame(element1, formElement0);
      
      String string1 = formElement0.tagName();
      assertNotNull(string1);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertEquals("/4~&d$", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("/4~&d$", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("/4~&d$", formElement0.nodeName());
      assertEquals("/4~&d$", formElement0.baseUri());
      assertEquals("/4~&d$", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertTrue(formElement0.hasParent());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(string1.equals((Object)string0));
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(formElement0, element1);
      assertEquals("/4~&d$", string1);
      
      Element element2 = element0.nextElementSibling();
      assertNull(element2);
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("/4~&d$", element0.nodeName());
      assertEquals("/4~&d$", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("CJ0E|", "CJ0E|");
      assertNotNull(document0);
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("CJ0E|", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      document0.setSiblingIndex(14);
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(14, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("CJ0E|", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      Document document1 = (Document)document0.attr("uSG!hEW<?tDP}9e+!", "org.jsoup.nodes.Element");
      assertNotNull(document1);
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(14, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("CJ0E|", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("CJ0E|", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("CJ0E|", document1.baseUri());
      assertEquals(14, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsByAttributeValueMatching("CJ0E|", "uSG!hEW<?tDP}9e+!");
      assertNotNull(elements0);
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(14, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("CJ0E|", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(document0, document1);
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(14, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("CJ0E|", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertSame(document0, document1);
      
      Node[] nodeArray0 = document0.childNodesAsArray();
      assertNotNull(nodeArray0);
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(14, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("CJ0E|", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertSame(document0, document1);
      assertEquals(1, nodeArray0.length);
      
      String string0 = document0.baseUri();
      assertNotNull(string0);
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(14, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("CJ0E|", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertSame(document0, document1);
      assertEquals("CJ0E|", string0);
      
      document0.doSetBaseUri("[bb(#$_1.?6|jD5.(?");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("[bb(#$_1.?6|jD5.(?", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(14, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("CJ0E|", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertSame(document0, document1);
      
      LinkedHashSet<PseudoTextElement> linkedHashSet0 = new LinkedHashSet<PseudoTextElement>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      boolean boolean0 = linkedHashSet0.add((PseudoTextElement) null);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean0);
      
      Document document2 = (Document)document0.insertChildren(0, (Collection<? extends Node>) elements0);
      assertNotNull(document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("[bb(#$_1.?6|jD5.(?", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(14, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("CJ0E|", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("CJ0E|", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("[bb(#$_1.?6|jD5.(?", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(14, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Pattern pattern0 = Pattern.compile("Z>uWD  A\"A");
      assertNotNull(pattern0);
      assertEquals("Z>uWD  A\"A", pattern0.pattern());
      assertEquals("Z>uWD  A\"A", pattern0.toString());
      assertEquals(0, pattern0.flags());
      
      Element element1 = new Element("noscript");
      assertNotNull(element1);
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("noscript", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("noscript", element1.nodeName());
      assertTrue(element1.isBlock());
      assertFalse(element1.equals((Object)element0));
      
      Document document3 = (Document)document0.toggleClass("");
      assertNotNull(document3);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("[bb(#$_1.?6|jD5.(?", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(14, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("CJ0E|", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("[bb(#$_1.?6|jD5.(?", document3.baseUri());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(14, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("CJ0E|", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      
      Document document4 = (Document)document0.appendText("noscript");
      assertNotNull(document4);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("[bb(#$_1.?6|jD5.(?", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(14, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("CJ0E|", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document4.isBlock());
      assertEquals("[bb(#$_1.?6|jD5.(?", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals(14, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals(2, document4.childNodeSize());
      assertEquals("CJ0E|", document4.location());
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document2);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parse("CJ0E|", "CJ0E|");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("CJ0E|", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("CJ0E|", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document1.getElementsMatchingText("org.jsoup.select.CombiningEvaluator$Or");
      assertNotNull(elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("CJ0E|", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("CJ0E|", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      List<TextNode> list0 = document1.textNodes();
      assertNotNull(list0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("CJ0E|", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("CJ0E|", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document0.tagName();
      assertNotNull(string0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertSame(document0, document1);
      assertEquals("#root", string0);
      
      Elements elements1 = document0.siblingElements();
      assertNotNull(elements1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertTrue(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Parser.parse("Z>uWD  A\"A", "Z>uWD  A\"A");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Z>uWD  A\"A", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Z>uWD  A\"A", document0.baseUri());
      
      int int0 = 1295;
      document0.setSiblingIndex(1295);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Z>uWD  A\"A", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Z>uWD  A\"A", document0.baseUri());
      assertEquals(1295, document0.siblingIndex());
      
      Document document1 = (Document)document0.attr("org.jsoup.nodes.Element", "Qal76O&$-+&GijMx^+");
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Z>uWD  A\"A", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Z>uWD  A\"A", document0.baseUri());
      assertEquals(1295, document0.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("Z>uWD  A\"A", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("Z>uWD  A\"A", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1295, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("", "_V 0&Sp Ov),k");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: _V 0&Sp Ov),k
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ascii", "ascii");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Document.createShell("ascii");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document1.attr("ascii", "org.jsoup.nodes.Element");
      assertNotNull(document2);
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("ascii", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("ascii", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      
      Node[] nodeArray0 = document0.childNodesAsArray();
      assertNotNull(nodeArray0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertEquals(1, nodeArray0.length);
      
      String string0 = element0.baseUri();
      assertNotNull(string0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertEquals("ascii", string0);
      
      document2.doSetBaseUri("html");
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("html", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("ascii", document2.location());
      assertEquals("html", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      List<Node> list0 = document1.childNodes();
      assertNotNull(list0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("html", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      
      String string1 = document2.nodeName();
      assertNotNull(string1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("html", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("ascii", document2.location());
      assertEquals("html", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertEquals("#document", string1);
      
      Elements elements0 = document2.getElementsByAttribute("#document");
      assertNotNull(elements0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("html", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("ascii", document2.location());
      assertEquals("html", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      Element element1 = element0.prependText("org.jsoup.nodes.Element");
      assertNotNull(element1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertEquals("head", element1.nodeName());
      assertEquals("ascii", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Document document3 = (Document)document0.prependChild(document1);
      assertNotNull(document3);
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("html", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals(0, document3.siblingIndex());
      assertEquals("ascii", document3.location());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertEquals("ascii", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document3);
      assertNotSame(document3, document1);
      assertSame(document3, document0);
      assertNotSame(document3, document2);
      
      String string2 = document3.wholeText();
      assertNotNull(string2);
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("html", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals(0, document3.siblingIndex());
      assertEquals("ascii", document3.location());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertEquals("ascii", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document3);
      assertNotSame(document3, document1);
      assertSame(document3, document0);
      assertNotSame(document3, document2);
      assertEquals("org.jsoup.nodes.Element", string2);
      
      document2.remove();
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("html", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("ascii", document2.location());
      assertEquals("html", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document3);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotSame(document2, document3);
      
      String string3 = document2.text();
      assertNotNull(string3);
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("html", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("ascii", document2.location());
      assertEquals("html", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document3);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotSame(document2, document3);
      assertEquals("", string3);
      
      Elements elements1 = element0.previousElementSiblings();
      assertNotNull(elements1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertSame(element0, element1);
      assertNotSame(elements1, elements0);
      
      String string4 = element0.cssSelector();
      assertNotNull(string4);
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertSame(element0, element1);
      assertEquals("html > head", string4);
      
      Element element2 = element0.firstElementSibling();
      assertNotNull(element2);
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("head", element2.nodeName());
      assertTrue(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals("ascii", element2.baseUri());
      assertTrue(element2.hasParent());
      assertEquals("head", element2.tagName());
      assertEquals(1, element2.childNodeSize());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertSame(element2, element1);
      assertSame(element2, element0);
      assertSame(element0, element2);
      assertSame(element0, element1);
      
      Element element3 = element2.appendChild(document3);
      assertNotNull(element3);
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("head", element2.nodeName());
      assertTrue(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals("ascii", element2.baseUri());
      assertTrue(element2.hasParent());
      assertEquals("head", element2.tagName());
      assertEquals(2, element2.childNodeSize());
      assertEquals("html", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertTrue(element3.hasParent());
      assertEquals("head", element3.tagName());
      assertEquals(2, element3.childNodeSize());
      assertEquals("ascii", element3.baseUri());
      assertEquals("head", element3.nodeName());
      assertTrue(element3.isBlock());
      assertEquals(0, element3.siblingIndex());
      assertEquals(2, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("ascii", document3.location());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("ascii", document3.baseUri());
      assertTrue(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertSame(element2, element1);
      assertSame(element2, element3);
      assertSame(element2, element0);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document3);
      assertSame(element3, element1);
      assertSame(element3, element0);
      assertSame(element3, element2);
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element0, element3);
      assertNotSame(document3, document1);
      assertSame(document3, document0);
      assertNotSame(document3, document2);
      
      boolean boolean0 = Element.preserveWhitespace(document2);
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("html", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("ascii", document2.location());
      assertEquals("html", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document3);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotSame(document2, document3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Document.createShell("ascii");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      document0.setSiblingIndex(0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document1.attr("ascii", "org.jsoup.nodes.Element");
      assertNotNull(document2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("ascii", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("ascii", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      Node[] nodeArray0 = document0.childNodesAsArray();
      assertNotNull(nodeArray0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertEquals(1, nodeArray0.length);
      
      String string0 = document0.baseUri();
      assertNotNull(string0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertEquals("ascii", string0);
      
      document2.doSetBaseUri("html");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("html", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("html", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("ascii", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      List<Node> list0 = document1.childNodes();
      assertNotNull(list0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("html", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      
      document1.addChildren(0, nodeArray0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("html", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertEquals(1, nodeArray0.length);
      
      String string1 = document2.nodeName();
      assertNotNull(string1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("html", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("html", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("ascii", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertEquals("#document", string1);
      
      String string2 = "YUr8H*";
      document0.reparentChild(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("html", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      
      Elements elements0 = document2.getElementsByAttribute("#document");
      assertNotNull(elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("html", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("html", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("ascii", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      // Undeclared exception!
      try { 
        document0.prependChild(document1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Document.createShell("ascii");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.baseUri());
      assertEquals("ascii", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Element element0 = document0.createElement("ascii");
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(element0.isBlock());
      assertEquals("ascii", element0.baseUri());
      assertEquals("ascii", element0.nodeName());
      assertEquals("ascii", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      Elements elements0 = element0.getElementsMatchingOwnText("textarea");
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(element0.isBlock());
      assertEquals("ascii", element0.baseUri());
      assertEquals("ascii", element0.nodeName());
      assertEquals("ascii", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      Attributes attributes0 = element0.attributes();
      assertNotNull(attributes0);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(element0.isBlock());
      assertEquals("ascii", element0.baseUri());
      assertEquals("ascii", element0.nodeName());
      assertEquals("ascii", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, attributes0.size());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      String string0 = Node.EmptyString;
      assertNotNull(string0);
      assertEquals("", string0);
      
      document1.doSetBaseUri("");
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      List<Node> list0 = document0.childNodes();
      assertNotNull(list0);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Y3p?H_BN6~1((c#");
      assertFalse(boolean0);
      
      Elements elements1 = element0.siblingElements();
      assertNotNull(elements1);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(element0.isBlock());
      assertEquals("ascii", element0.baseUri());
      assertEquals("ascii", element0.nodeName());
      assertEquals("ascii", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(document0, document1);
      assertNotSame(elements1, elements0);
      
      Elements elements2 = element0.getElementsMatchingOwnText("");
      assertNotNull(elements2);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(element0.isBlock());
      assertEquals("ascii", element0.baseUri());
      assertEquals("ascii", element0.nodeName());
      assertEquals("ascii", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(elements2.isEmpty());
      assertEquals(1, elements2.size());
      assertFalse(document0.equals((Object)document1));
      assertFalse(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      assertNotSame(document0, document1);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      
      String string1 = document0.nodeName();
      assertNotNull(string1);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.equals((Object)document1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(document0, document1);
      assertEquals("#document", string1);
      
      document1.siblingIndex = 0;
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      
      Element element1 = (Element)document1.childNode(0);
      assertNotNull(element1);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", element1.baseUri());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("html", element1.nodeName());
      assertEquals(2, element1.childNodeSize());
      assertEquals("html", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(element1, element0);
      
      // Undeclared exception!
      try { 
        document0.select("Y3p?H_BN6~1((c#");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'Y3p?H_BN6~1((c#': unexpected token at '?H_BN6~1((c#'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Tag tag0 = Tag.valueOf("style");
      assertNotNull(tag0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("style", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("style", tag0.getName());
      
      Tag tag1 = Tag.valueOf("style", (ParseSettings) null);
      assertNotNull(tag1);
      assertFalse(tag1.formatAsBlock());
      assertFalse(tag1.isInline());
      assertFalse(tag1.isSelfClosing());
      assertFalse(tag1.isFormListed());
      assertTrue(tag1.isBlock());
      assertFalse(tag1.isEmpty());
      assertFalse(tag1.preserveWhitespace());
      assertEquals("style", tag1.toString());
      assertEquals("style", tag1.getName());
      assertTrue(tag1.canContainBlock());
      assertFalse(tag1.isData());
      assertTrue(tag1.isKnownTag());
      assertFalse(tag1.isFormSubmittable());
      assertSame(tag1, tag0);
      
      CDataNode cDataNode0 = new CDataNode("g)PrzhuGX .");
      assertNotNull(cDataNode0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "style", attributes0);
      assertNotNull(pseudoTextElement0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("style", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("style", tag0.getName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertTrue(pseudoTextElement0.isBlock());
      assertEquals("style", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("style", pseudoTextElement0.nodeName());
      assertEquals("style", pseudoTextElement0.baseUri());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      
      Elements elements0 = pseudoTextElement0.getElementsByAttributeStarting("#root");
      assertNotNull(elements0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("style", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("style", tag0.getName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertTrue(pseudoTextElement0.isBlock());
      assertEquals("style", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("style", pseudoTextElement0.nodeName());
      assertEquals("style", pseudoTextElement0.baseUri());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(tag0, tag1);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = "2g0@6rrsN.6}";
      Document document0 = Document.createShell("2g0@6rrsN.6}");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      
      Element element1 = element0.after((Node) document0);
      assertNotNull(element1);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      String string1 = "body";
      Elements elements0 = element1.select("body");
      assertNotNull(elements0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      String string2 = element1.data();
      assertNotNull(string2);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("", string2);
      
      Elements elements1 = element0.nextElementSiblings();
      assertNotNull(elements1);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertFalse(elements1.isEmpty());
      assertEquals(1, elements1.size());
      assertFalse(elements1.equals((Object)elements0));
      assertSame(element0, element1);
      assertNotSame(elements1, elements0);
      
      Elements elements2 = document0.previousElementSiblings();
      assertNotNull(elements2);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(2, elements2.size());
      assertFalse(elements2.isEmpty());
      assertFalse(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      
      // Undeclared exception!
      try { 
        document0.createElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Document.createShell("2g0@6rrsN.6}");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      
      Element element1 = element0.after((Node) document0);
      assertNotNull(element1);
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Elements elements0 = element1.select("body");
      assertNotNull(elements0);
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      String string0 = element1.data();
      assertNotNull(string0);
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("", string0);
      
      Elements elements1 = element0.nextElementSiblings();
      assertNotNull(elements1);
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertEquals(1, elements1.size());
      assertFalse(elements1.isEmpty());
      assertFalse(elements1.equals((Object)elements0));
      assertSame(element0, element1);
      assertNotSame(elements1, elements0);
      
      Elements elements2 = element1.previousElementSiblings();
      assertNotNull(elements2);
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertFalse(elements2.isEmpty());
      assertEquals(1, elements2.size());
      assertFalse(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      
      Element element2 = document0.createElement("body");
      assertNotNull(element2);
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, element2.childNodeSize());
      assertEquals(0, element2.siblingIndex());
      assertEquals("body", element2.nodeName());
      assertTrue(element2.isBlock());
      assertFalse(element2.hasParent());
      assertEquals("body", element2.tagName());
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      
      Element element3 = element0.prependChild(element1);
      assertNotNull(element3);
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertEquals("body", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element3.hasParent());
      assertEquals(0, element3.siblingIndex());
      assertEquals(1, element3.childNodeSize());
      assertEquals("body", element3.nodeName());
      assertTrue(element3.isBlock());
      assertEquals("body", element3.tagName());
      assertFalse(element0.equals((Object)element2));
      assertFalse(element1.equals((Object)element2));
      assertFalse(element3.equals((Object)element2));
      assertSame(element0, element3);
      assertSame(element0, element1);
      assertNotSame(element0, element2);
      assertSame(element1, element3);
      assertSame(element1, element0);
      assertNotSame(element1, element2);
      assertSame(element3, element1);
      assertNotSame(element3, element2);
      assertSame(element3, element0);
      
      // Undeclared exception!
      try { 
        element1.data();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "0");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("0", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("0", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals("0", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("0", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("0", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("0", document1.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Elements elements0 = document1.children();
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals("0", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("0", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("0", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("0", document1.baseUri());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      int int0 = 1056;
      // Undeclared exception!
      try { 
        stringBuilder0.insert(1056, 1056);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1056
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Tag tag0 = Tag.valueOf("=g9t~$<");
      assertNotNull(tag0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("=g9t~$<", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("=g9t~$<", tag0.toString());
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Tag tag1 = Tag.valueOf(";Q21J.8#hF");
      assertNotNull(tag1);
      assertFalse(tag1.isData());
      assertEquals(";Q21J.8#hF", tag1.toString());
      assertEquals(";Q21J.8#hF", tag1.getName());
      assertFalse(tag1.isSelfClosing());
      assertFalse(tag1.isBlock());
      assertFalse(tag1.preserveWhitespace());
      assertTrue(tag1.isInline());
      assertFalse(tag1.canContainBlock());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.isKnownTag());
      assertFalse(tag1.isEmpty());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.equals((Object)tag0));
      assertNotSame(tag1, tag0);
      
      Tag tag2 = Tag.valueOf("id", parseSettings0);
      assertNotNull(tag2);
      assertFalse(tag2.canContainBlock());
      assertTrue(tag2.formatAsBlock());
      assertFalse(tag2.isSelfClosing());
      assertEquals("id", tag2.getName());
      assertFalse(tag2.isFormListed());
      assertTrue(tag2.isInline());
      assertEquals("id", tag2.toString());
      assertFalse(tag2.isBlock());
      assertFalse(tag2.isData());
      assertFalse(tag2.isFormSubmittable());
      assertFalse(tag2.isKnownTag());
      assertFalse(tag2.isEmpty());
      assertFalse(tag2.preserveWhitespace());
      assertFalse(tag2.equals((Object)tag0));
      assertFalse(tag2.equals((Object)tag1));
      assertNotSame(tag2, tag0);
      assertNotSame(tag2, tag1);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "=g9t~$<", (Attributes) null);
      assertNotNull(pseudoTextElement0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("=g9t~$<", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("=g9t~$<", tag0.toString());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("=g9t~$<", pseudoTextElement0.tagName());
      assertEquals("=g9t~$<", pseudoTextElement0.baseUri());
      assertEquals("=g9t~$<", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertFalse(tag0.equals((Object)tag2));
      assertFalse(tag0.equals((Object)tag1));
      
      Tag tag3 = Tag.valueOf("=g9t~$<");
      assertNotNull(tag3);
      assertFalse(tag3.isEmpty());
      assertFalse(tag3.isKnownTag());
      assertFalse(tag3.preserveWhitespace());
      assertTrue(tag3.isInline());
      assertEquals("=g9t~$<", tag3.getName());
      assertFalse(tag3.isFormSubmittable());
      assertFalse(tag3.isSelfClosing());
      assertFalse(tag3.isFormListed());
      assertEquals("=g9t~$<", tag3.toString());
      assertFalse(tag3.isData());
      assertFalse(tag3.canContainBlock());
      assertTrue(tag3.formatAsBlock());
      assertFalse(tag3.isBlock());
      assertFalse(tag3.equals((Object)tag2));
      assertFalse(tag3.equals((Object)tag1));
      assertTrue(tag3.equals((Object)tag0));
      assertNotSame(tag3, tag0);
      assertNotSame(tag3, tag2);
      assertNotSame(tag3, tag1);
      
      Elements elements0 = pseudoTextElement0.children();
      assertNotNull(elements0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("=g9t~$<", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("=g9t~$<", tag0.toString());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("=g9t~$<", pseudoTextElement0.tagName());
      assertEquals("=g9t~$<", pseudoTextElement0.baseUri());
      assertEquals("=g9t~$<", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(tag0.equals((Object)tag2));
      assertFalse(tag0.equals((Object)tag1));
      assertTrue(tag0.equals((Object)tag3));
      assertNotSame(tag0, tag2);
      assertNotSame(tag0, tag3);
      assertNotSame(tag0, tag1);
      
      Elements elements1 = pseudoTextElement0.getElementsByAttributeValueMatching("=g9t~$<", "=g9t~$<");
      assertNotNull(elements1);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("=g9t~$<", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("=g9t~$<", tag0.toString());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("=g9t~$<", pseudoTextElement0.tagName());
      assertEquals("=g9t~$<", pseudoTextElement0.baseUri());
      assertEquals("=g9t~$<", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertFalse(tag0.equals((Object)tag2));
      assertFalse(tag0.equals((Object)tag1));
      assertTrue(tag0.equals((Object)tag3));
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(tag0, tag2);
      assertNotSame(tag0, tag3);
      assertNotSame(tag0, tag1);
      assertNotSame(elements1, elements0);
      
      Tag tag4 = Tag.valueOf("=g9t~$<");
      assertNotNull(tag4);
      assertFalse(tag4.isData());
      assertFalse(tag4.isFormSubmittable());
      assertFalse(tag4.canContainBlock());
      assertEquals("=g9t~$<", tag4.toString());
      assertFalse(tag4.isSelfClosing());
      assertFalse(tag4.isBlock());
      assertFalse(tag4.preserveWhitespace());
      assertFalse(tag4.isEmpty());
      assertTrue(tag4.isInline());
      assertFalse(tag4.isKnownTag());
      assertTrue(tag4.formatAsBlock());
      assertFalse(tag4.isFormListed());
      assertEquals("=g9t~$<", tag4.getName());
      assertFalse(tag4.equals((Object)tag1));
      assertFalse(tag4.equals((Object)tag2));
      assertTrue(tag4.equals((Object)tag3));
      assertTrue(tag4.equals((Object)tag0));
      assertNotSame(tag4, tag1);
      assertNotSame(tag4, tag3);
      assertNotSame(tag4, tag0);
      assertNotSame(tag4, tag2);
      
      Tag tag5 = Tag.valueOf("id");
      assertNotNull(tag5);
      assertFalse(tag5.canContainBlock());
      assertTrue(tag5.formatAsBlock());
      assertFalse(tag5.isFormSubmittable());
      assertFalse(tag5.isSelfClosing());
      assertEquals("id", tag5.getName());
      assertFalse(tag5.isBlock());
      assertFalse(tag5.isData());
      assertFalse(tag5.isKnownTag());
      assertFalse(tag5.isEmpty());
      assertFalse(tag5.isFormListed());
      assertEquals("id", tag5.toString());
      assertFalse(tag5.preserveWhitespace());
      assertTrue(tag5.isInline());
      assertTrue(tag5.equals((Object)tag2));
      assertFalse(tag5.equals((Object)tag0));
      assertFalse(tag5.equals((Object)tag4));
      assertFalse(tag5.equals((Object)tag3));
      assertFalse(tag5.equals((Object)tag1));
      assertNotSame(tag5, tag0);
      assertNotSame(tag5, tag2);
      assertNotSame(tag5, tag4);
      assertNotSame(tag5, tag3);
      assertNotSame(tag5, tag1);
      
      CharArrayWriter charArrayWriter0 = pseudoTextElement0.html((CharArrayWriter) null);
      assertNull(charArrayWriter0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("=g9t~$<", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("=g9t~$<", tag0.toString());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("=g9t~$<", pseudoTextElement0.tagName());
      assertEquals("=g9t~$<", pseudoTextElement0.baseUri());
      assertEquals("=g9t~$<", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertFalse(tag0.equals((Object)tag2));
      assertTrue(tag0.equals((Object)tag4));
      assertFalse(tag0.equals((Object)tag1));
      assertTrue(tag0.equals((Object)tag3));
      assertFalse(tag0.equals((Object)tag5));
      assertNotSame(tag0, tag2);
      assertNotSame(tag0, tag3);
      assertNotSame(tag0, tag1);
      assertNotSame(tag0, tag4);
      assertNotSame(tag0, tag5);
      
      Elements elements2 = pseudoTextElement0.getElementsByIndexEquals((-2703));
      assertNotNull(elements2);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("=g9t~$<", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("=g9t~$<", tag0.toString());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("=g9t~$<", pseudoTextElement0.tagName());
      assertEquals("=g9t~$<", pseudoTextElement0.baseUri());
      assertEquals("=g9t~$<", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertFalse(tag0.equals((Object)tag2));
      assertTrue(tag0.equals((Object)tag4));
      assertFalse(tag0.equals((Object)tag1));
      assertTrue(tag0.equals((Object)tag3));
      assertFalse(tag0.equals((Object)tag5));
      assertTrue(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertNotSame(tag0, tag2);
      assertNotSame(tag0, tag3);
      assertNotSame(tag0, tag1);
      assertNotSame(tag0, tag4);
      assertNotSame(tag0, tag5);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      
      Elements elements3 = pseudoTextElement0.getElementsByIndexEquals((-1503));
      assertNotNull(elements3);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("=g9t~$<", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("=g9t~$<", tag0.toString());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("=g9t~$<", pseudoTextElement0.tagName());
      assertEquals("=g9t~$<", pseudoTextElement0.baseUri());
      assertEquals("=g9t~$<", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertTrue(elements3.isEmpty());
      assertEquals(0, elements3.size());
      assertFalse(tag0.equals((Object)tag2));
      assertTrue(tag0.equals((Object)tag4));
      assertFalse(tag0.equals((Object)tag1));
      assertTrue(tag0.equals((Object)tag3));
      assertFalse(tag0.equals((Object)tag5));
      assertTrue(elements3.equals((Object)elements2));
      assertTrue(elements3.equals((Object)elements1));
      assertTrue(elements3.equals((Object)elements0));
      assertNotSame(tag0, tag2);
      assertNotSame(tag0, tag3);
      assertNotSame(tag0, tag1);
      assertNotSame(tag0, tag4);
      assertNotSame(tag0, tag5);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements1);
      
      Attributes attributes0 = pseudoTextElement0.attributes();
      assertNotNull(attributes0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("=g9t~$<", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("=g9t~$<", tag0.toString());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("=g9t~$<", pseudoTextElement0.tagName());
      assertEquals("=g9t~$<", pseudoTextElement0.baseUri());
      assertEquals("=g9t~$<", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, attributes0.size());
      assertFalse(tag0.equals((Object)tag2));
      assertTrue(tag0.equals((Object)tag4));
      assertFalse(tag0.equals((Object)tag1));
      assertTrue(tag0.equals((Object)tag3));
      assertFalse(tag0.equals((Object)tag5));
      assertNotSame(tag0, tag2);
      assertNotSame(tag0, tag3);
      assertNotSame(tag0, tag1);
      assertNotSame(tag0, tag4);
      assertNotSame(tag0, tag5);
      
      // Undeclared exception!
      try { 
        pseudoTextElement0.child((-2703));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = "7;O<";
      Document document0 = Parser.parseBodyFragmentRelaxed("option", "7;O<");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("7;O<", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("7;O<", document0.location());
      
      Document document1 = (Document)document0.clone();
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals("7;O<", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("7;O<", document0.location());
      assertEquals("7;O<", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("7;O<", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document0.attr("option", false);
      assertNotNull(document2);
      assertFalse(document0.hasParent());
      assertEquals("7;O<", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("7;O<", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals("7;O<", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("7;O<", document2.location());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Element element0 = new Element("2g0@6rrsN.6}");
      assertNotNull(element0);
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      
      List<TextNode> list0 = element0.textNodes();
      assertNotNull(list0);
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      BufferedWriter bufferedWriter0 = element0.html((BufferedWriter) null);
      assertNull(bufferedWriter0);
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      
      Element element1 = element0.prepend("2g0@6rrsN.6}");
      assertNotNull(element1);
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Parser.parse("CJ0E|", "CJ0E|");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("CJ0E|", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5lb");
      assertFalse(boolean0);
      
      List<DataNode> list0 = document0.dataNodes();
      assertNotNull(list0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("CJ0E|", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Element element0 = new Element("CJ0E|");
      assertNotNull(element0);
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("CJ0E|", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("CJ0E|", element0.tagName());
      
      List<Node> list1 = document0.ensureChildNodes();
      assertNotNull(list1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("CJ0E|", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      
      Element element1 = new Element("CJ0E|");
      assertNotNull(element1);
      assertEquals(0, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("CJ0E|", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("CJ0E|", element1.nodeName());
      assertFalse(element1.hasParent());
      assertFalse(element1.equals((Object)element0));
      
      Element element2 = element1.addClass("CJ0E|");
      assertNotNull(element2);
      assertEquals(0, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("CJ0E|", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("CJ0E|", element1.nodeName());
      assertFalse(element1.hasParent());
      assertEquals("CJ0E|", element2.tagName());
      assertEquals(0, element2.siblingIndex());
      assertEquals("", element2.baseUri());
      assertFalse(element2.hasParent());
      assertEquals(0, element2.childNodeSize());
      assertEquals("CJ0E|", element2.nodeName());
      assertFalse(element2.isBlock());
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertNotSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element2, element1);
      assertNotSame(element2, element0);
      
      Document document1 = (Document)document0.append("async");
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("CJ0E|", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("CJ0E|", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("CJ0E|", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("CJ0E|", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document0.data();
      assertNotNull(string0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("CJ0E|", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("CJ0E|", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertSame(document0, document1);
      assertEquals("", string0);
      
      Evaluator.IndexEquals evaluator_IndexEquals0 = new Evaluator.IndexEquals((-2227));
      assertNotNull(evaluator_IndexEquals0);
      
      Elements elements0 = document0.getElementsContainingText("");
      assertNotNull(elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("CJ0E|", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("CJ0E|", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Document.createShell("ascii");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document1.attr("ascii", "org.jsoup.nodes.Element");
      assertNotNull(document2);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("ascii", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals("ascii", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("ascii", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      
      Node[] nodeArray0 = document0.childNodesAsArray();
      assertNotNull(nodeArray0);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertEquals(1, nodeArray0.length);
      
      String string0 = element0.baseUri();
      assertNotNull(string0);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("ascii", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertEquals("ascii", string0);
      
      document2.doSetBaseUri("html");
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("html", document1.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("html", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals("ascii", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      
      List<Node> list0 = document1.childNodes();
      assertNotNull(list0);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("html", document1.baseUri());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      
      String string1 = document2.nodeName();
      assertNotNull(string1);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("html", document1.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("html", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals("ascii", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("#document", string1);
      
      Elements elements0 = document2.getElementsByAttribute("#document");
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("html", document1.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("html", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals("ascii", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      
      Document document3 = (Document)document0.prependChild(document1);
      assertNotNull(document3);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("html", document1.baseUri());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("ascii", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals("ascii", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals(2, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document3, document1);
      assertSame(document3, document0);
      assertNotSame(document3, document2);
      
      String string2 = document3.wholeText();
      assertNotNull(string2);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("html", document1.baseUri());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("ascii", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals("ascii", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals(2, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document3, document1);
      assertSame(document3, document0);
      assertNotSame(document3, document2);
      assertEquals("", string2);
      
      document2.remove();
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("html", document1.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("html", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals("ascii", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document3);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document4 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document4);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals("ascii", document4.baseUri());
      assertEquals("ascii", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document4, document1);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertNotSame(document4, document2);
      
      Document document5 = Parser.parseBodyFragment(" />", "org.jsoup.nodes.Element$1");
      assertNotNull(document5);
      assertFalse(document5.isBlock());
      assertEquals(0, document5.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.hasParent());
      assertEquals("#root", document5.tagName());
      assertEquals("org.jsoup.nodes.Element$1", document5.location());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals("org.jsoup.nodes.Element$1", document5.baseUri());
      assertEquals(1, document5.childNodeSize());
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document2));
      assertNotSame(document5, document3);
      assertNotSame(document5, document4);
      assertNotSame(document5, document0);
      assertNotSame(document5, document1);
      assertNotSame(document5, document2);
      
      Document document6 = (Document)document5.clone();
      assertNotNull(document6);
      assertEquals("org.jsoup.nodes.Element$1", document6.location());
      assertFalse(document6.hasParent());
      assertEquals("#root", document6.tagName());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$1", document6.baseUri());
      assertEquals(1, document6.childNodeSize());
      assertFalse(document6.isBlock());
      assertEquals("#document", document6.nodeName());
      assertEquals(0, document6.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertFalse(document5.isBlock());
      assertEquals(0, document5.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.hasParent());
      assertEquals("#root", document5.tagName());
      assertEquals("org.jsoup.nodes.Element$1", document5.location());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals("org.jsoup.nodes.Element$1", document5.baseUri());
      assertEquals(1, document5.childNodeSize());
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document2));
      assertNotSame(document6, document0);
      assertNotSame(document6, document5);
      assertNotSame(document6, document4);
      assertNotSame(document6, document1);
      assertNotSame(document6, document2);
      assertNotSame(document6, document3);
      assertNotSame(document5, document3);
      assertNotSame(document5, document4);
      assertNotSame(document5, document0);
      assertNotSame(document5, document1);
      assertNotSame(document5, document2);
      assertNotSame(document5, document6);
      
      CDataNode cDataNode0 = new CDataNode("");
      assertNotNull(cDataNode0);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      
      CDataNode cDataNode1 = (CDataNode)cDataNode0.doClone(document6);
      assertNotNull(cDataNode1);
      assertEquals("org.jsoup.nodes.Element$1", document6.location());
      assertFalse(document6.hasParent());
      assertEquals("#root", document6.tagName());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$1", document6.baseUri());
      assertEquals(1, document6.childNodeSize());
      assertFalse(document6.isBlock());
      assertEquals("#document", document6.nodeName());
      assertEquals(0, document6.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode1.nodeName());
      assertEquals(0, cDataNode1.siblingIndex());
      assertTrue(cDataNode1.hasParent());
      assertFalse(document5.isBlock());
      assertEquals(0, document5.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.hasParent());
      assertEquals("#root", document5.tagName());
      assertEquals("org.jsoup.nodes.Element$1", document5.location());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals("org.jsoup.nodes.Element$1", document5.baseUri());
      assertEquals(1, document5.childNodeSize());
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document3));
      assertFalse(cDataNode1.equals((Object)cDataNode0));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document6));
      assertNotSame(document6, document0);
      assertNotSame(document6, document5);
      assertNotSame(document6, document4);
      assertNotSame(document6, document1);
      assertNotSame(document6, document2);
      assertNotSame(document6, document3);
      assertNotSame(cDataNode0, cDataNode1);
      assertNotSame(cDataNode1, cDataNode0);
      assertNotSame(document5, document3);
      assertNotSame(document5, document4);
      assertNotSame(document5, document0);
      assertNotSame(document5, document1);
      assertNotSame(document5, document2);
      assertNotSame(document5, document6);
      
      boolean boolean0 = Element.preserveWhitespace(cDataNode1);
      assertEquals("org.jsoup.nodes.Element$1", document6.location());
      assertFalse(document6.hasParent());
      assertEquals("#root", document6.tagName());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$1", document6.baseUri());
      assertEquals(1, document6.childNodeSize());
      assertFalse(document6.isBlock());
      assertEquals("#document", document6.nodeName());
      assertEquals(0, document6.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode1.nodeName());
      assertEquals(0, cDataNode1.siblingIndex());
      assertTrue(cDataNode1.hasParent());
      assertFalse(document5.isBlock());
      assertEquals(0, document5.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.hasParent());
      assertEquals("#root", document5.tagName());
      assertEquals("org.jsoup.nodes.Element$1", document5.location());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals("org.jsoup.nodes.Element$1", document5.baseUri());
      assertEquals(1, document5.childNodeSize());
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document3));
      assertFalse(cDataNode0.equals((Object)cDataNode1));
      assertFalse(cDataNode1.equals((Object)cDataNode0));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document6));
      assertNotSame(document6, document0);
      assertNotSame(document6, document5);
      assertNotSame(document6, document4);
      assertNotSame(document6, document1);
      assertNotSame(document6, document2);
      assertNotSame(document6, document3);
      assertNotSame(cDataNode0, cDataNode1);
      assertNotSame(cDataNode1, cDataNode0);
      assertNotSame(document5, document3);
      assertNotSame(document5, document4);
      assertNotSame(document5, document0);
      assertNotSame(document5, document1);
      assertNotSame(document5, document2);
      assertNotSame(document5, document6);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String string0 = "ascii";
      Document document0 = Parser.parseBodyFragmentRelaxed("ascii", "ascii");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      
      document0.setSiblingIndex(0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      
      Document document1 = (Document)document0.attr("ascii", "org.jsoup.nodes.Element");
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsByAttributeValueMatching("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      assertNotNull(elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(document0, document1);
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertSame(document0, document1);
      
      Element element1 = element0.toggleClass("Z>uWD  A\"A");
      assertNotNull(element1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("ascii", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.tagName());
      assertTrue(element1.isBlock());
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Node[] nodeArray0 = document0.childNodesAsArray();
      assertNotNull(nodeArray0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertSame(document0, document1);
      assertEquals(1, nodeArray0.length);
      
      String string1 = element0.baseUri();
      assertNotNull(string1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(string1.equals((Object)string0));
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertEquals("ascii", string1);
      
      document1.doSetBaseUri("ascii");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      LinkedHashSet<PseudoTextElement> linkedHashSet0 = new LinkedHashSet<PseudoTextElement>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      // Undeclared exception!
      try { 
        Pattern.compile(" KTD>nrmM{(<LU1e.OK");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 8
         //  KTD>nrmM{(<LU1e.OK
         //         ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Parser.parse("Z>uWD  A\"A", "Z>uWD  A\"A");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Z>uWD  A\"A", document0.location());
      assertEquals("Z>uWD  A\"A", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      boolean boolean0 = document0.hasClass("Z>uWD  A\"A");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Z>uWD  A\"A", document0.location());
      assertEquals("Z>uWD  A\"A", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(boolean0);
      
      Tag tag0 = Tag.valueOf("Z>uWD  A\"A");
      assertNotNull(tag0);
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertEquals("Z>uWD  A\"A", tag0.getName());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("Z>uWD  A\"A", tag0.toString());
      
      String string0 = "org.jsoup.nodes.rode$1";
      Document document1 = (Document)document0.attr("html", "BA9DqX^vS)>#o");
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Z>uWD  A\"A", document0.location());
      assertEquals("Z>uWD  A\"A", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("Z>uWD  A\"A", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Z>uWD  A\"A", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = document1.appendElement("html");
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Z>uWD  A\"A", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals("Z>uWD  A\"A", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("Z>uWD  A\"A", document1.location());
      assertEquals("Z>uWD  A\"A", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Z>uWD  A\"A", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("html", element0.tagName());
      assertEquals("html", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      LinkedHashSet<PseudoTextElement> linkedHashSet0 = new LinkedHashSet<PseudoTextElement>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "Z>uWD  A\"A", (Attributes) null);
      assertNotNull(pseudoTextElement0);
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertEquals("Z>uWD  A\"A", tag0.getName());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("Z>uWD  A\"A", tag0.toString());
      assertEquals("Z>uWD  A\"A", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("Z>uWD  A\"A", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("Z>uWD  A\"A", pseudoTextElement0.baseUri());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      
      boolean boolean1 = linkedHashSet0.add(pseudoTextElement0);
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertEquals("Z>uWD  A\"A", tag0.getName());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("Z>uWD  A\"A", tag0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals("Z>uWD  A\"A", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("Z>uWD  A\"A", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("Z>uWD  A\"A", pseudoTextElement0.baseUri());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertTrue(linkedHashSet0.contains(pseudoTextElement0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Document document2 = (Document)document0.insertChildren(0, (Collection<? extends Node>) linkedHashSet0);
      assertNotNull(document2);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("Z>uWD  A\"A", document0.location());
      assertEquals("Z>uWD  A\"A", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("Z>uWD  A\"A", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("Z>uWD  A\"A", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(3, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertTrue(linkedHashSet0.contains(pseudoTextElement0));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      
      // Undeclared exception!
      try { 
        document0.outputSettings((Document.OutputSettings) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Parser.parse("a|qrw0>|][", "a|qrw0>|][");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("a|qrw0>|][", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("a|qrw0>|][", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      document0.updateMetaCharsetElement(false);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("a|qrw0>|][", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("a|qrw0>|][", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Elements elements0 = document0.siblingElements();
      assertNotNull(elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("a|qrw0>|][", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("a|qrw0>|][", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      Tag tag0 = Tag.valueOf("DoctypePublicIdentifier_singleQuoted");
      assertNotNull(tag0);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertEquals("DoctypePublicIdentifier_singleQuoted", tag0.toString());
      assertEquals("DoctypePublicIdentifier_singleQuoted", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      
      Element element0 = new Element(tag0, "a|qrw0>|][");
      assertNotNull(element0);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertEquals("DoctypePublicIdentifier_singleQuoted", tag0.toString());
      assertEquals("DoctypePublicIdentifier_singleQuoted", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("a|qrw0>|][", element0.baseUri());
      assertEquals("DoctypePublicIdentifier_singleQuoted", element0.tagName());
      assertEquals("DoctypePublicIdentifier_singleQuoted", element0.nodeName());
      
      document0.setParentNode(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("a|qrw0>|][", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("a|qrw0>|][", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertEquals("DoctypePublicIdentifier_singleQuoted", tag0.toString());
      assertEquals("DoctypePublicIdentifier_singleQuoted", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("a|qrw0>|][", element0.baseUri());
      assertEquals("DoctypePublicIdentifier_singleQuoted", element0.tagName());
      assertEquals("DoctypePublicIdentifier_singleQuoted", element0.nodeName());
      
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Document.createShell("2g0@6rrsN.6}");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      
      Element element1 = element0.after((Node) document0);
      assertNotNull(element1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.nodeName());
      assertEquals("body", element1.tagName());
      assertEquals(1, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Evaluator.IndexEquals evaluator_IndexEquals0 = new Evaluator.IndexEquals(0);
      assertNotNull(evaluator_IndexEquals0);
      
      String string0 = evaluator_IndexEquals0.toString();
      assertNotNull(string0);
      assertEquals(":eq(0)", string0);
      
      String string1 = "\\s+";
      // Undeclared exception!
      document0.val((String) null);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Document.createShell("ascii");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      
      document0.setSiblingIndex(0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document1.attr("ascii", "org.jsoup.nodes.Element");
      assertNotNull(document2);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("ascii", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("ascii", document2.location());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      
      Node[] nodeArray0 = document1.childNodesAsArray();
      assertNotNull(nodeArray0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertEquals(1, nodeArray0.length);
      
      String string0 = document1.baseUri();
      assertNotNull(string0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertEquals("ascii", string0);
      
      document2.doSetBaseUri("ascii");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("ascii", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("ascii", document2.location());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      
      List<Node> list0 = document0.childNodes();
      assertNotNull(list0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      
      document0.addChildren(0, nodeArray0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertEquals(1, nodeArray0.length);
      
      String string1 = document2.nodeName();
      assertNotNull(string1);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("ascii", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("ascii", document2.location());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("#document", string1);
      
      Elements elements0 = document2.getElementsByAttribute("html");
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("ascii", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("ascii", document2.location());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      
      Comment comment0 = new Comment("#document");
      assertNotNull(comment0);
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      
      Document document3 = (Document)document1.prependChild(comment0);
      assertNotNull(document3);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertTrue(comment0.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("ascii", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("ascii", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      
      String string2 = document1.data();
      assertNotNull(string2);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertEquals("#document", string2);
      
      // Undeclared exception!
      try { 
        document1.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String string0 = "/8\\V]/`Jq]I/";
      Document document0 = Parser.parseBodyFragmentRelaxed("/8V]/`Jq]I/", "/8V]/`Jq]I/");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/8V]/`Jq]I/", document0.location());
      
      String string1 = "";
      String string2 = document0.text();
      assertNotNull(string2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("/8V]/`Jq]I/", string2);
      
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/8V]/`Jq]I/", document0.location());
      
      Document document1 = (Document)document0.tagName("/8V]/`Jq]I/");
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertEquals("/8v]/`jq]i/", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("/8V]/`Jq]I/", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("/8V]/`Jq]I/", document1.location());
      assertEquals("/8v]/`jq]i/", document1.tagName());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      List<Node> list0 = document0.childNodes();
      assertNotNull(list0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertEquals("/8v]/`jq]i/", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertSame(document0, document1);
      
      String string3 = document0.nodeName();
      assertNotNull(string3);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertEquals("/8v]/`jq]i/", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertSame(document0, document1);
      assertEquals("#document", string3);
      
      Elements elements0 = document1.getElementsByAttribute("br");
      assertNotNull(elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertEquals("/8v]/`jq]i/", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("/8V]/`Jq]I/", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("/8V]/`Jq]I/", document1.location());
      assertEquals("/8v]/`jq]i/", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      // Undeclared exception!
      try { 
        document1.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ascii", "ascii");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      
      document0.setSiblingIndex(0);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      
      Document document1 = (Document)document0.attr("ascii", "org.jsoup.nodes.Element");
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsByAttributeValueMatching("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(document0, document1);
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals("ascii", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertSame(document0, document1);
      
      Node[] nodeArray0 = document0.childNodesAsArray();
      assertNotNull(nodeArray0);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertSame(document0, document1);
      assertEquals(1, nodeArray0.length);
      
      String string0 = element0.baseUri();
      assertNotNull(string0);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals("ascii", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertSame(document0, document1);
      assertEquals("ascii", string0);
      
      document1.doSetBaseUri("ascii");
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      LinkedHashSet<PseudoTextElement> linkedHashSet0 = new LinkedHashSet<PseudoTextElement>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      boolean boolean0 = linkedHashSet0.add((PseudoTextElement) null);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean0);
      
      Document document2 = (Document)document0.insertChildren(0, (Collection<? extends Node>) elements0);
      assertNotNull(document2);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document2.isBlock());
      assertEquals("ascii", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("ascii", document2.location());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Pattern pattern0 = Pattern.compile("attributeDoubleValueCharsSorted");
      assertNotNull(pattern0);
      assertEquals(0, pattern0.flags());
      assertEquals("attributeDoubleValueCharsSorted", pattern0.pattern());
      assertEquals("attributeDoubleValueCharsSorted", pattern0.toString());
      
      Element element1 = new Element("T+");
      assertNotNull(element1);
      assertEquals(0, element1.childNodeSize());
      assertEquals("T+", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("T+", element1.nodeName());
      assertFalse(element1.equals((Object)element0));
      
      Document document3 = (Document)document0.toggleClass("Z>uWD  A\"A");
      assertNotNull(document3);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertEquals("ascii", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("ascii", document3.location());
      assertFalse(document3.isBlock());
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      
      // Undeclared exception!
      try { 
        document1.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Parser.parse("CJ0E|", "CJ0E|");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("CJ0E|", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("CJ0E|", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      List<DataNode> list0 = document0.dataNodes();
      assertNotNull(list0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertSame(document0, document1);
      
      Element element0 = new Element("CJ0E|");
      assertNotNull(element0);
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("CJ0E|", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("CJ0E|", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      
      Document document2 = document0.normalise();
      assertNotNull(document2);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("CJ0E|", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("CJ0E|", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      List<Node> list1 = document2.ensureChildNodes();
      assertNotNull(list1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("CJ0E|", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("CJ0E|", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Element element1 = new Element("CJ0E|");
      assertNotNull(element1);
      assertFalse(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("CJ0E|", element1.nodeName());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("CJ0E|", element1.tagName());
      assertFalse(element1.equals((Object)element0));
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document3 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document3);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("CJ0E|", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("CJ0E|", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      
      Document document4 = (Document)document0.clone();
      assertNotNull(document4);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("CJ0E|", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertEquals("CJ0E|", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document4, document3);
      assertNotSame(document4, document0);
      assertNotSame(document4, document2);
      assertNotSame(document4, document1);
      
      Document document5 = (Document)document3.prependText("");
      assertNotNull(document5);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("CJ0E|", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("CJ0E|", document3.location());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document5.isBlock());
      assertEquals("#document", document5.nodeName());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#root", document5.tagName());
      assertEquals("CJ0E|", document5.baseUri());
      assertEquals("CJ0E|", document5.location());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.hasParent());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document5.equals((Object)document4));
      assertSame(document0, document5);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document3, document0);
      assertNotSame(document3, document4);
      assertSame(document3, document5);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document5, document2);
      assertSame(document5, document0);
      assertNotSame(document5, document4);
      assertSame(document5, document1);
      assertSame(document5, document3);
      
      Elements elements0 = document0.getElementsContainingOwnText("\fW\")_<7r;");
      assertNotNull(elements0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document0.equals((Object)document4));
      assertSame(document0, document5);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document1);
      
      Elements elements1 = element0.getElementsByAttributeValueEnding("CJ0E|", "\fW\")_<7r;");
      assertNotNull(elements1);
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("CJ0E|", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("CJ0E|", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertFalse(element0.equals((Object)element1));
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(element0, element1);
      assertNotSame(elements1, elements0);
      
      // Undeclared exception!
      try { 
        document5.child(45);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 45, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/8V]/`Jq]I/", "/8V]/`Jq]I/");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/8V]/`Jq]I/", document0.location());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      document0.setBaseUri("");
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/8V]/`Jq]I/", document0.location());
      
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("/8V]/`Jq]I/", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.clone();
      assertNotNull(document2);
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("/8V]/`Jq]I/", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("/8V]/`Jq]I/", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      Document document3 = (Document)document1.attr("", false);
      assertNotNull(document3);
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("/8V]/`Jq]I/", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals("/8V]/`Jq]I/", document3.location());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      
      Elements elements0 = document3.getElementsMatchingText("HIl&Bex");
      assertNotNull(elements0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("/8V]/`Jq]I/", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals("/8V]/`Jq]I/", document3.location());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      
      List<TextNode> list0 = document2.textNodes();
      assertNotNull(list0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("/8V]/`Jq]I/", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("/8V]/`Jq]I/", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      
      // Undeclared exception!
      try { 
        document1.before((Node) document2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Document.createShell("ascii");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      
      document0.setSiblingIndex(0);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.baseUri());
      assertEquals("ascii", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      List<DataNode> list0 = document0.dataNodes();
      assertNotNull(list0);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      Element element0 = new Element("Pattern syntax error: ");
      assertNotNull(element0);
      assertEquals(0, element0.siblingIndex());
      assertEquals("Pattern syntax error:", element0.tagName());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("Pattern syntax error:", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      
      List<Node> list1 = document0.ensureChildNodes();
      assertNotNull(list1);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      Element element1 = new Element("zn");
      assertNotNull(element1);
      assertEquals("zn", element1.tagName());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("zn", element1.nodeName());
      assertFalse(element1.isBlock());
      assertFalse(element1.equals((Object)element0));
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document2 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document2);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document2.isBlock());
      assertEquals("ascii", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals("ascii", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = (Document)document1.clone();
      assertNotNull(document3);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.baseUri());
      assertEquals("ascii", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("ascii", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("ascii", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      
      Document document4 = (Document)document0.prependText("ascii");
      assertNotNull(document4);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document4.tagName());
      assertEquals(2, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("ascii", document4.location());
      assertFalse(document4.isBlock());
      assertEquals("ascii", document4.baseUri());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document4, document2);
      assertNotSame(document4, document1);
      assertNotSame(document4, document3);
      assertSame(document4, document0);
      
      Document document5 = Parser.parse("#root", "#root");
      assertNotNull(document5);
      assertFalse(document5.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertEquals(1, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertEquals("#root", document5.location());
      assertFalse(document5.isBlock());
      assertEquals("#root", document5.baseUri());
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document0));
      assertNotSame(document5, document3);
      assertNotSame(document5, document4);
      assertNotSame(document5, document2);
      assertNotSame(document5, document1);
      assertNotSame(document5, document0);
      
      Elements elements0 = document5.getElementsContainingOwnText("9%g2");
      assertNotNull(elements0);
      assertFalse(document5.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertEquals(1, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertEquals("#root", document5.location());
      assertFalse(document5.isBlock());
      assertEquals("#root", document5.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document0));
      assertNotSame(document5, document3);
      assertNotSame(document5, document4);
      assertNotSame(document5, document2);
      assertNotSame(document5, document1);
      assertNotSame(document5, document0);
      
      Document document6 = (Document)document2.appendChild(document1);
      assertNotNull(document6);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.baseUri());
      assertEquals(2, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("ascii", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals("ascii", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(3, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document6.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertFalse(document6.hasParent());
      assertEquals("ascii", document6.location());
      assertFalse(document6.isBlock());
      assertEquals("ascii", document6.baseUri());
      assertEquals(0, document6.siblingIndex());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(3, document6.childNodeSize());
      assertEquals("#document", document6.nodeName());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document3));
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document6);
      assertSame(document0, document4);
      assertNotSame(document0, document5);
      assertNotSame(document1, document2);
      assertNotSame(document1, document4);
      assertNotSame(document1, document3);
      assertNotSame(document1, document6);
      assertNotSame(document1, document0);
      assertNotSame(document1, document5);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(document2, document5);
      assertSame(document2, document6);
      assertSame(document6, document2);
      assertNotSame(document6, document5);
      assertNotSame(document6, document1);
      assertNotSame(document6, document3);
      assertSame(document6, document4);
      assertSame(document6, document0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Parser.parse("Z>uWD  A\"A", "Z>uWD  A\"A");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Z>uWD  A\"A", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Z>uWD  A\"A", document0.baseUri());
      assertFalse(document0.isBlock());
      
      boolean boolean0 = document0.hasClass("Z>uWD  A\"A");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Z>uWD  A\"A", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Z>uWD  A\"A", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(boolean0);
      
      Tag tag0 = Tag.valueOf("Z>uWD  A\"A");
      assertNotNull(tag0);
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertEquals("Z>uWD  A\"A", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertEquals("Z>uWD  A\"A", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      
      Element element0 = new Element(tag0, "Z>uWD  A\"A");
      assertNotNull(element0);
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertEquals("Z>uWD  A\"A", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertEquals("Z>uWD  A\"A", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Z>uWD  A\"A", element0.tagName());
      assertEquals("Z>uWD  A\"A", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("Z>uWD  A\"A", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      
      document0.setParentNode(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Z>uWD  A\"A", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Z>uWD  A\"A", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertEquals("Z>uWD  A\"A", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertEquals("Z>uWD  A\"A", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Z>uWD  A\"A", element0.tagName());
      assertEquals("Z>uWD  A\"A", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("Z>uWD  A\"A", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      
      Document document1 = (Document)document0.append("Z>uWD  A\"A");
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("Z>uWD  A\"A", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Z>uWD  A\"A", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("Z>uWD  A\"A", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("Z>uWD  A\"A", document1.location());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document0.data();
      assertNotNull(string0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("Z>uWD  A\"A", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Z>uWD  A\"A", document0.baseUri());
      assertFalse(document0.isBlock());
      assertSame(document0, document1);
      assertEquals("", string0);
      
      Evaluator.IndexEquals evaluator_IndexEquals0 = new Evaluator.IndexEquals(0);
      assertNotNull(evaluator_IndexEquals0);
      
      Elements elements0 = document0.getElementsContainingText("");
      assertNotNull(elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("Z>uWD  A\"A", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Z>uWD  A\"A", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Document.createShell("ascii");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      
      document0.setSiblingIndex(0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("ascii", document1.location());
      assertEquals("ascii", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document1.attr("ascii", "org.jsoup.nodes.Element");
      assertNotNull(document2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("ascii", document1.location());
      assertEquals("ascii", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("ascii", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("ascii", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      Node[] nodeArray0 = document0.childNodesAsArray();
      assertNotNull(nodeArray0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertEquals(1, nodeArray0.length);
      
      String string0 = document0.baseUri();
      assertNotNull(string0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertEquals("ascii", string0);
      
      document2.doSetBaseUri("html");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("ascii", document1.location());
      assertEquals("html", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("ascii", document2.location());
      assertEquals("html", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      List<Node> list0 = document1.childNodes();
      assertNotNull(list0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("ascii", document1.location());
      assertEquals("html", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      
      document1.addChildren(0, nodeArray0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("ascii", document1.location());
      assertEquals("html", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertEquals(1, nodeArray0.length);
      
      String string1 = document2.nodeName();
      assertNotNull(string1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("ascii", document1.location());
      assertEquals("html", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("ascii", document2.location());
      assertEquals("html", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertEquals("#document", string1);
      
      Elements elements0 = document2.getElementsByAttribute("#document");
      assertNotNull(elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("ascii", document1.location());
      assertEquals("html", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("ascii", document2.location());
      assertEquals("html", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      Document document3 = (Document)document0.prependChild(document1);
      assertNotNull(document3);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("ascii", document1.location());
      assertEquals("html", document1.baseUri());
      assertTrue(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("ascii", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals("ascii", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document3, document1);
      assertSame(document3, document0);
      assertNotSame(document3, document2);
      
      String string2 = document0.data();
      assertNotNull(string2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertEquals("", string2);
      
      document2.remove();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("ascii", document1.location());
      assertEquals("html", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("ascii", document2.location());
      assertEquals("html", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotSame(document2, document3);
      
      String string3 = document2.text();
      assertNotNull(string3);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("ascii", document1.location());
      assertEquals("html", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("ascii", document2.location());
      assertEquals("html", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotSame(document2, document3);
      assertEquals("", string3);
      
      Elements elements1 = document1.previousElementSiblings();
      assertNotNull(elements1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("ascii", document1.location());
      assertEquals("html", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(elements1, elements0);
      
      String string4 = document1.cssSelector();
      assertNotNull(string4);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("ascii", document1.location());
      assertEquals("html", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertEquals("#root", string4);
      
      Elements elements2 = document0.getElementsByTag("YUr8H*");
      assertNotNull(elements2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertTrue(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      
      Document document4 = (Document)document2.toggleClass("0Ky |?pb&7}4");
      assertNotNull(document4);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("html", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("ascii", document4.location());
      assertEquals(2, document4.childNodeSize());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("ascii", document1.location());
      assertEquals("html", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("ascii", document2.location());
      assertEquals("html", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document4, document1);
      assertNotSame(document4, document0);
      assertNotSame(document4, document3);
      assertSame(document4, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertNotSame(document2, document0);
      assertNotSame(document2, document3);
      
      Document document5 = (Document)document3.appendText("CMi,");
      assertNotNull(document5);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("ascii", document1.location());
      assertEquals("html", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#document", document5.nodeName());
      assertEquals("ascii", document5.baseUri());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(1, document5.childNodeSize());
      assertEquals("#root", document5.tagName());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.hasParent());
      assertFalse(document5.isBlock());
      assertEquals("ascii", document5.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("ascii", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals("ascii", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertNotSame(document0, document2);
      assertSame(document0, document5);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertNotSame(document1, document5);
      assertSame(document5, document3);
      assertSame(document5, document0);
      assertNotSame(document5, document2);
      assertNotSame(document5, document1);
      assertNotSame(document5, document4);
      assertNotSame(document3, document4);
      assertNotSame(document3, document1);
      assertSame(document3, document5);
      assertSame(document3, document0);
      assertNotSame(document3, document2);
      
      Element element0 = document2.nextElementSibling();
      assertNull(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("ascii", document1.location());
      assertEquals("html", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("ascii", document2.location());
      assertEquals("html", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertNotSame(document0, document2);
      assertSame(document0, document5);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertNotSame(document1, document5);
      assertSame(document2, document1);
      assertNotSame(document2, document5);
      assertSame(document2, document4);
      assertNotSame(document2, document0);
      assertNotSame(document2, document3);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Document.createShell("f>l4");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("f>l4", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("f>l4", document0.location());
      
      Elements elements0 = document0.parents();
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("f>l4", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("f>l4", document0.location());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      
      String string0 = document0.html();
      assertNotNull(string0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("f>l4", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("f>l4", document0.location());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
      
      Elements elements1 = document0.getElementsMatchingOwnText("<html>\n <head></head>\n <body></body>\n</html>");
      assertNotNull(elements1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("f>l4", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("f>l4", document0.location());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string1 = document0.text();
      assertNotNull(string1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("f>l4", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("f>l4", document0.location());
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      Elements elements2 = document0.previousElementSiblings();
      assertNotNull(elements2);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("f>l4", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("f>l4", document0.location());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertTrue(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      
      String string2 = document0.cssSelector();
      assertNotNull(string2);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("f>l4", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("f>l4", document0.location());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("#root", string2);
      
      Elements elements3 = document0.getElementsByTag("textarea");
      assertNotNull(elements3);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("f>l4", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("f>l4", document0.location());
      assertEquals(0, elements3.size());
      assertTrue(elements3.isEmpty());
      assertTrue(elements3.equals((Object)elements1));
      assertTrue(elements3.equals((Object)elements2));
      assertTrue(elements3.equals((Object)elements0));
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements1);
      
      Document document1 = (Document)document0.toggleClass("|:/hLd2");
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("f>l4", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("f>l4", document0.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("f>l4", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("f>l4", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.appendText("");
      assertNotNull(document2);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("f>l4", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("f>l4", document0.location());
      assertFalse(document2.isBlock());
      assertEquals("f>l4", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("f>l4", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Element element0 = document1.selectFirst("#root");
      assertNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("f>l4", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("f>l4", document0.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("f>l4", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("f>l4", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String string0 = "2g0@6rrsN.6}";
      Document document0 = Document.createShell("2g0@6rrsN.6}");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      
      Element element1 = element0.after((Node) document0);
      assertNotNull(element1);
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Elements elements0 = element1.select("body");
      assertNotNull(elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Elements elements1 = element1.previousElementSiblings();
      assertNotNull(elements1);
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals(1, elements1.size());
      assertFalse(elements1.isEmpty());
      assertFalse(elements1.equals((Object)elements0));
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(elements1, elements0);
      
      String string1 = element1.data();
      assertNotNull(string1);
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertFalse(string1.equals((Object)string0));
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("", string1);
      
      Elements elements2 = element0.nextElementSiblings();
      assertNotNull(elements2);
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, elements2.size());
      assertFalse(elements2.isEmpty());
      assertFalse(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
      assertSame(element0, element1);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      
      Elements elements3 = element1.previousElementSiblings();
      assertNotNull(elements3);
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals(1, elements3.size());
      assertFalse(elements3.isEmpty());
      assertTrue(elements3.equals((Object)elements1));
      assertFalse(elements3.equals((Object)elements2));
      assertFalse(elements3.equals((Object)elements0));
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements0);
      
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValue((String) null, "html");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("option", "option");
      assertNotNull(document0);
      assertEquals("option", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("option", document0.location());
      assertEquals("#root", document0.tagName());
      
      Evaluator.IndexEquals evaluator_IndexEquals0 = new Evaluator.IndexEquals(0);
      assertNotNull(evaluator_IndexEquals0);
      
      String string0 = evaluator_IndexEquals0.toString();
      assertNotNull(string0);
      assertEquals(":eq(0)", string0);
      
      Document document1 = (Document)document0.val("s+");
      assertNotNull(document1);
      assertEquals("option", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("option", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("option", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("option", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string1 = Node.EmptyString;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = evaluator_IndexEquals0.matches(document0, document0);
      assertEquals("option", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("option", document0.location());
      assertEquals("#root", document0.tagName());
      assertSame(document0, document1);
      assertTrue(boolean0);
      
      boolean boolean1 = document0.is((Evaluator) evaluator_IndexEquals0);
      assertEquals("option", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("option", document0.location());
      assertEquals("#root", document0.tagName());
      assertTrue(boolean1 == boolean0);
      assertSame(document0, document1);
      assertTrue(boolean1);
      
      Elements elements0 = document0.getElementsContainingText("option");
      assertNotNull(elements0);
      assertEquals("option", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("option", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(3, elements0.size());
      assertFalse(elements0.isEmpty());
      assertSame(document0, document1);
      
      Document document2 = (Document)document0.prependText("html");
      assertNotNull(document2);
      assertEquals("option", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("option", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("option", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("option", document2.location());
      assertEquals("#root", document2.tagName());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Elements elements1 = document0.getElementsContainingOwnText("");
      assertNotNull(elements1);
      assertEquals("option", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("option", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(4, elements1.size());
      assertFalse(elements1.isEmpty());
      assertFalse(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(elements1, elements0);
      
      boolean boolean2 = document1.hasAttributes();
      assertEquals("option", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("option", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("option", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("option", document1.baseUri());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Document.createShell("ascii");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      
      Document document1 = Parser.parse("ascii", "head");
      assertNotNull(document1);
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("head", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("head", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      
      boolean boolean0 = document0.hasClass("oBddbRas*v.");
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertFalse(boolean0);
      
      String string0 = document0.data();
      assertNotNull(string0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertEquals("", string0);
      
      Document document2 = document0.clone();
      assertNotNull(document2);
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("ascii", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("ascii", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      Elements elements0 = document2.previousElementSiblings();
      assertNotNull(elements0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("ascii", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("ascii", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      Elements elements1 = document1.previousElementSiblings();
      assertNotNull(elements1);
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("head", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("head", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(elements1, elements0);
      
      // Undeclared exception!
      try { 
        document0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Document.createShell("ascii");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document1.attr("ascii", "org.jsoup.nodes.Element");
      assertNotNull(document2);
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("ascii", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("ascii", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      
      Node[] nodeArray0 = document0.childNodesAsArray();
      assertNotNull(nodeArray0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertEquals(1, nodeArray0.length);
      
      document2.doSetBaseUri("html");
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("html", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("ascii", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("html", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      
      List<Node> list0 = document1.childNodes();
      assertNotNull(list0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("html", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      
      String string0 = document2.nodeName();
      assertNotNull(string0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("html", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("ascii", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("html", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("#document", string0);
      
      Elements elements0 = document2.getElementsByAttribute("#document");
      assertNotNull(elements0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("html", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("ascii", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("html", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      
      Document document3 = (Document)document0.prependChild(document1);
      assertNotNull(document3);
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("html", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("ascii", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("ascii", document3.location());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      
      String string1 = document3.wholeText();
      assertNotNull(string1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("html", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("ascii", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("ascii", document3.location());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(string1.equals((Object)string0));
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertEquals("", string1);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "#document");
      assertNotNull(charArrayWriter1);
      assertEquals(9, charArrayWriter0.size());
      assertEquals("#document", charArrayWriter0.toString());
      assertEquals("#document", charArrayWriter1.toString());
      assertEquals(9, charArrayWriter1.size());
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append((CharSequence) "");
      assertNotNull(charArrayWriter2);
      assertEquals(9, charArrayWriter0.size());
      assertEquals("#document", charArrayWriter0.toString());
      assertEquals("#document", charArrayWriter1.toString());
      assertEquals(9, charArrayWriter1.size());
      assertEquals(9, charArrayWriter2.size());
      assertEquals("#document", charArrayWriter2.toString());
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter0, charArrayWriter2);
      assertSame(charArrayWriter1, charArrayWriter2);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertSame(charArrayWriter2, charArrayWriter1);
      assertSame(charArrayWriter2, charArrayWriter0);
      
      CharArrayWriter charArrayWriter3 = document3.html(charArrayWriter0);
      assertNotNull(charArrayWriter3);
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("html", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("ascii", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("ascii", document3.location());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals(152, charArrayWriter0.size());
      assertEquals("#document\n<#root ascii=\"org.jsoup.nodes.Element\">\n <html>\n  <head></head>\n  <body></body>\n </html>\n</#root>\n<html>\n <head></head>\n <body></body>\n</html>", charArrayWriter0.toString());
      assertEquals(152, charArrayWriter3.size());
      assertEquals("#document\n<#root ascii=\"org.jsoup.nodes.Element\">\n <html>\n  <head></head>\n  <body></body>\n </html>\n</#root>\n<html>\n <head></head>\n <body></body>\n</html>", charArrayWriter3.toString());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter0, charArrayWriter3);
      assertSame(charArrayWriter0, charArrayWriter2);
      assertSame(charArrayWriter3, charArrayWriter1);
      assertSame(charArrayWriter3, charArrayWriter0);
      assertSame(charArrayWriter3, charArrayWriter2);
      
      String string2 = document2.val();
      assertNotNull(string2);
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("html", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("ascii", document2.location());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("html", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document3);
      assertSame(document2, document1);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      String string1 = "head";
      Document document0 = Document.createShell("head");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("head", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("head", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("br", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("br", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("br", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("br", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("br", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("br", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("br", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("br", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("br", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("br", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals("br", element0.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Element element1 = document1.prependElement("br");
      assertNotNull(element1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("br", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("br", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("br", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("br", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("br", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals("br", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("br", element1.tagName());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(element1, element0);
      
      boolean boolean1 = document1.hasClass("sNo");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("br", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("br", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("br", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("br", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = "Kf4Qy4e4O";
      Document document0 = new Document("Kf4Qy4e4O");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("Kf4Qy4e4O", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("Kf4Qy4e4O", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      
      Elements elements0 = document0.siblingElements();
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("Kf4Qy4e4O", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("Kf4Qy4e4O", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Kf4Qy4e4O");
      assertFalse(boolean0);
      
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("Kf4Qy4e4O", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("Kf4Qy4e4O", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("Kf4Qy4e4O", document1.baseUri());
      assertEquals("Kf4Qy4e4O", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Map<String, String> map0 = document0.dataset();
      assertNotNull(map0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("Kf4Qy4e4O", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("Kf4Qy4e4O", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertSame(document0, document1);
      
      String string1 = document0.val();
      assertNotNull(string1);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("Kf4Qy4e4O", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("Kf4Qy4e4O", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(string1.equals((Object)string0));
      assertSame(document0, document1);
      assertEquals("", string1);
      
      Document document2 = (Document)document1.removeClass("Kf4Qy4e4O");
      assertNotNull(document2);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("Kf4Qy4e4O", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("Kf4Qy4e4O", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("Kf4Qy4e4O", document1.baseUri());
      assertEquals("Kf4Qy4e4O", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("Kf4Qy4e4O", document2.baseUri());
      assertEquals("Kf4Qy4e4O", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      // Undeclared exception!
      try { 
        document1.getElementsByAttributeValueNot("Kf4Qy4e4O", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Document.createShell("2g0@6rrsN.6}");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      
      Element element1 = element0.after((Node) document0);
      assertNotNull(element1);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("body", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Elements elements0 = element1.select("body");
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("body", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      String string0 = element1.data();
      assertNotNull(string0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("body", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("", string0);
      
      Elements elements1 = element0.nextElementSiblings();
      assertNotNull(elements1);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertFalse(elements1.isEmpty());
      assertEquals(1, elements1.size());
      assertFalse(elements1.equals((Object)elements0));
      assertSame(element0, element1);
      assertNotSame(elements1, elements0);
      
      Elements elements2 = element1.previousElementSiblings();
      assertNotNull(elements2);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("body", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals(1, elements2.size());
      assertFalse(elements2.isEmpty());
      assertFalse(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      
      Element element2 = document0.createElement("body");
      assertNotNull(element2);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("body", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element2.isBlock());
      assertEquals(0, element2.childNodeSize());
      assertFalse(element2.hasParent());
      assertEquals("body", element2.tagName());
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      
      // Undeclared exception!
      document0.append("2g0@6rrsN.6}");
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Document.createShell("ascii");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      
      document0.setSiblingIndex(0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.baseUri());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document1.attr("ascii", "org.jsoup.nodes.Element");
      assertNotNull(document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.baseUri());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("ascii", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("ascii", document2.location());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      Node[] nodeArray0 = document0.childNodesAsArray();
      assertNotNull(nodeArray0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertEquals(1, nodeArray0.length);
      
      String string0 = document0.baseUri();
      assertNotNull(string0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertEquals("ascii", string0);
      
      document2.doSetBaseUri("html");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("html", document1.baseUri());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("html", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("ascii", document2.location());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      List<Node> list0 = document1.childNodes();
      assertNotNull(list0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("html", document1.baseUri());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      
      document1.addChildren(0, nodeArray0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("html", document1.baseUri());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertEquals(1, nodeArray0.length);
      
      String string1 = document2.nodeName();
      assertNotNull(string1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("html", document1.baseUri());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("html", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("ascii", document2.location());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertEquals("#document", string1);
      
      Elements elements0 = document2.getElementsByAttribute("#document");
      assertNotNull(elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("html", document1.baseUri());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("html", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("ascii", document2.location());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      Document document3 = (Document)document0.prependChild(document1);
      assertNotNull(document3);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("html", document1.baseUri());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals("ascii", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("ascii", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertSame(document3, document0);
      
      String string2 = document0.data();
      assertNotNull(string2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertEquals("", string2);
      
      document2.remove();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("html", document1.baseUri());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("html", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("ascii", document2.location());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document3);
      assertNotSame(document2, document0);
      
      String string3 = document2.text();
      assertNotNull(string3);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("html", document1.baseUri());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("html", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("ascii", document2.location());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document3);
      assertNotSame(document2, document0);
      assertEquals("", string3);
      
      Elements elements1 = document1.previousElementSiblings();
      assertNotNull(elements1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("html", document1.baseUri());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(elements1, elements0);
      
      String string4 = document1.cssSelector();
      assertNotNull(string4);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("html", document1.baseUri());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertEquals("#root", string4);
      
      Elements elements2 = document0.getElementsByTag("YUr8H*");
      assertNotNull(elements2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertTrue(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      
      // Undeclared exception!
      try { 
        document1.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Document.createShell("f>l4");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("f>l4", document0.location());
      assertEquals("f>l4", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      String string0 = document0.val();
      assertNotNull(string0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("f>l4", document0.location());
      assertEquals("f>l4", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", string0);
      
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("f>l4", document0.location());
      assertEquals("f>l4", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("f>l4", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("f>l4", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      // Undeclared exception!
      try { 
        document1.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("option", "7;O<");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("7;O<", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("7;O<", document0.baseUri());
      
      Evaluator.IndexEquals evaluator_IndexEquals0 = new Evaluator.IndexEquals(0);
      assertNotNull(evaluator_IndexEquals0);
      
      String string0 = evaluator_IndexEquals0.toString();
      assertNotNull(string0);
      assertEquals(":eq(0)", string0);
      
      Document document1 = (Document)document0.val("s+");
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("7;O<", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("7;O<", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("7;O<", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("7;O<", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string1 = evaluator_IndexEquals0.toString();
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals(":eq(0)", string1);
      
      boolean boolean0 = evaluator_IndexEquals0.matches(document0, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("7;O<", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("7;O<", document0.baseUri());
      assertSame(document0, document1);
      assertTrue(boolean0);
      
      boolean boolean1 = document0.is((Evaluator) evaluator_IndexEquals0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("7;O<", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("7;O<", document0.baseUri());
      assertTrue(boolean1 == boolean0);
      assertSame(document0, document1);
      assertTrue(boolean1);
      
      Elements elements0 = document0.getElementsContainingText("option");
      assertNotNull(elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("7;O<", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("7;O<", document0.baseUri());
      assertFalse(elements0.isEmpty());
      assertEquals(3, elements0.size());
      assertSame(document0, document1);
      
      Document document2 = (Document)document0.prependText("html");
      assertNotNull(document2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("7;O<", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("7;O<", document0.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("7;O<", document2.location());
      assertEquals("7;O<", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Elements elements1 = document0.getElementsContainingOwnText(":eq(0)");
      assertNotNull(elements1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("7;O<", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("7;O<", document0.baseUri());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertFalse(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Parser.parse("CJ0E|", "s+");
      assertNotNull(document0);
      assertEquals("s+", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("s+", document0.location());
      assertFalse(document0.hasParent());
      
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertEquals("s+", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("s+", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("s+", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("s+", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.prependText("s+");
      assertNotNull(document2);
      assertEquals("s+", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("s+", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("s+", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("s+", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("s+", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("s+", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      String string0 = document2.text();
      assertNotNull(string0);
      assertEquals("s+", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("s+", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("s+", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("s+", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("s+", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("s+", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("s+ CJ0E|", string0);
      
      Document document3 = (Document)document0.appendChild(document2);
      assertNotNull(document3);
      assertTrue(document0.hasParent());
      assertEquals("s+", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("s+", document0.location());
      assertFalse(document1.isBlock());
      assertEquals("s+", document1.baseUri());
      assertTrue(document1.hasParent());
      assertEquals(2, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("s+", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("s+", document2.baseUri());
      assertTrue(document2.hasParent());
      assertEquals(2, document2.siblingIndex());
      assertEquals("s+", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(3, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(3, document3.childNodeSize());
      assertEquals("s+", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals(2, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals("s+", document3.baseUri());
      assertTrue(document3.hasParent());
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/8V]/`Jq]I/", "/8V]/`Jq]I/");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      document0.setBaseUri("");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      
      Element element0 = new Element("html");
      assertNotNull(element0);
      assertTrue(element0.isBlock());
      assertEquals("html", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("html", element0.nodeName());
      
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("/8V]/`Jq]I/", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element1 = element0.tagName(":gr=/");
      assertNotNull(element1);
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(":gr=/", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(":gr=/", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals(":gr=/", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals(":gr=/", element1.nodeName());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Document document2 = (Document)document1.clone();
      assertNotNull(document2);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("/8V]/`Jq]I/", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("/8V]/`Jq]I/", document2.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("", document2.baseUri());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      Document document3 = (Document)document1.attr("body", true);
      assertNotNull(document3);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("/8V]/`Jq]I/", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("/8V]/`Jq]I/", document3.location());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertSame(document3, document0);
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document4 = (Document)document3.traverse(nodeVisitor0);
      assertNotNull(document4);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("/8V]/`Jq]I/", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("/8V]/`Jq]I/", document3.location());
      assertEquals("/8V]/`Jq]I/", document4.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals("", document4.baseUri());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document4.equals((Object)document2));
      assertNotSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document3, document0);
      assertNotSame(document4, document2);
      assertSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document3);
      
      List<TextNode> list0 = element0.textNodes();
      assertNotNull(list0);
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(":gr=/", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(":gr=/", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertSame(element0, element1);
      
      String string0 = document1.text();
      assertNotNull(string0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("/8V]/`Jq]I/", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertNotSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertEquals("/8V]/`Jq]I/", string0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parse("CJ0E|", "CJ0E|");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("CJ0E|", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("CJ0E|", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("CJ0E|", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("CJ0E|", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      List<DataNode> list0 = document1.dataNodes();
      assertNotNull(list0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("CJ0E|", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("CJ0E|", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("CJ0E|", document1.location());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document1.previousElementSiblings();
      assertNotNull(elements0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("CJ0E|", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("CJ0E|", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("CJ0E|", document1.location());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements1 = document1.previousElementSiblings();
      assertNotNull(elements1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("CJ0E|", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("CJ0E|", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("CJ0E|", document1.location());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertTrue(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(elements1, elements0);
      
      Element element0 = document1.shallowClone();
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("CJ0E|", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("CJ0E|", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("CJ0E|", document1.location());
      assertFalse(element0.isBlock());
      assertEquals("CJ0E|", element0.baseUri());
      assertEquals("#root", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("#root", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.append("CJ0E|");
      assertNotNull(document2);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("CJ0E|", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("CJ0E|", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("CJ0E|", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals("CJ0E|", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("CJ0E|", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      String string0 = document0.data();
      assertNotNull(string0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("CJ0E|", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertEquals("", string0);
      
      Evaluator.IndexEquals evaluator_IndexEquals0 = new Evaluator.IndexEquals(0);
      assertNotNull(evaluator_IndexEquals0);
      
      boolean boolean0 = evaluator_IndexEquals0.matches(document1, document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("CJ0E|", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("CJ0E|", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("CJ0E|", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertTrue(boolean0);
      
      boolean boolean1 = document1.is((Evaluator) evaluator_IndexEquals0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("CJ0E|", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("CJ0E|", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("CJ0E|", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertTrue(boolean1 == boolean0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertTrue(boolean1);
      
      Elements elements2 = document0.getElementsContainingText("");
      assertNotNull(elements2);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("CJ0E|", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(4, elements2.size());
      assertFalse(elements2.isEmpty());
      assertFalse(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      
      Document document3 = (Document)document1.prependText("body");
      assertNotNull(document3);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("CJ0E|", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("CJ0E|", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("CJ0E|", document1.location());
      assertEquals("CJ0E|", document3.location());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(3, document3.childNodeSize());
      assertEquals("CJ0E|", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      
      Elements elements3 = document1.getElementsContainingOwnText("Y;");
      assertNotNull(elements3);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("CJ0E|", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("CJ0E|", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("CJ0E|", document1.location());
      assertEquals(0, elements3.size());
      assertTrue(elements3.isEmpty());
      assertTrue(elements3.equals((Object)elements1));
      assertFalse(elements3.equals((Object)elements2));
      assertTrue(elements3.equals((Object)elements0));
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements1);
      
      Document document4 = document0.normalise();
      assertNotNull(document4);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("CJ0E|", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("CJ0E|", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertEquals(1, document4.childNodeSize());
      assertEquals("CJ0E|", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertSame(document4, document2);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/8V]/`Jq]I/", "/8V]/`Jq]I/");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("/8V]/`Jq]I/", document0.location());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      document0.setBaseUri("");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("/8V]/`Jq]I/", document0.location());
      
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals("/8V]/`Jq]I/", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Evaluator.IndexEquals evaluator_IndexEquals0 = new Evaluator.IndexEquals(60);
      assertNotNull(evaluator_IndexEquals0);
      
      boolean boolean0 = evaluator_IndexEquals0.matches(document1, document1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals("/8V]/`Jq]I/", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(boolean0);
      
      boolean boolean1 = document1.is((Evaluator) evaluator_IndexEquals0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals("/8V]/`Jq]I/", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertTrue(boolean1 == boolean0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(boolean1);
      
      Elements elements0 = document0.getElementsContainingText("/8V]/`Jq]I/");
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertFalse(elements0.isEmpty());
      assertEquals(3, elements0.size());
      assertSame(document0, document1);
      
      Document document2 = (Document)document0.prependText("Pattern syntax error: ");
      assertNotNull(document2);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals("/8V]/`Jq]I/", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Elements elements1 = document0.getElementsContainingOwnText("");
      assertNotNull(elements1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertFalse(elements1.isEmpty());
      assertEquals(4, elements1.size());
      assertFalse(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ascii", "ascii");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      document0.setSiblingIndex(0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Document document1 = Document.createShell("ascii");
      assertNotNull(document1);
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document1.attr("ascii", "org.jsoup.nodes.Element");
      assertNotNull(document2);
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("ascii", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("ascii", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      Elements elements0 = document0.getElementsByAttributeValueMatching("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      assertNotNull(elements0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("ascii", element0.baseUri());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      
      Node[] nodeArray0 = document0.childNodesAsArray();
      assertNotNull(nodeArray0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertEquals(1, nodeArray0.length);
      
      String string0 = element0.baseUri();
      assertNotNull(string0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("ascii", element0.baseUri());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertEquals("ascii", string0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append('K');
      assertNotNull(stringWriter1);
      assertEquals("K", stringWriter0.toString());
      assertEquals("K", stringWriter1.toString());
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      
      StringWriter stringWriter2 = document0.html(stringWriter1);
      assertNotNull(stringWriter2);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("K\n<html>\n <head></head>\n <body>\n  ascii\n </body>\n</html>", stringWriter0.toString());
      assertEquals("K\n<html>\n <head></head>\n <body>\n  ascii\n </body>\n</html>", stringWriter1.toString());
      assertEquals("K\n<html>\n <head></head>\n <body>\n  ascii\n </body>\n</html>", stringWriter2.toString());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter2, stringWriter0);
      
      document2.doSetBaseUri("html");
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("html", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("ascii", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("html", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      List<Node> list0 = document1.childNodes();
      assertNotNull(list0);
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("html", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(document1.equals((Object)document0));
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      
      document1.addChildren(0, nodeArray0);
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("html", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertEquals(1, nodeArray0.length);
      
      String string1 = document2.nodeName();
      assertNotNull(string1);
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("html", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("ascii", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("html", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(string1.equals((Object)string0));
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertEquals("#document", string1);
      
      Elements elements1 = document2.getElementsByAttribute("#document");
      assertNotNull(elements1);
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("html", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("ascii", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("html", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertTrue(elements1.equals((Object)elements0));
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotSame(elements1, elements0);
      
      Document document3 = (Document)document0.prependChild(document1);
      assertNotNull(document3);
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.hasParent());
      assertEquals("ascii", document3.location());
      assertEquals("ascii", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("html", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document3);
      
      String string2 = document2.wholeText();
      assertNotNull(string2);
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("html", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("ascii", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals("html", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document3);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotSame(document2, document3);
      assertEquals("ascii", string2);
      
      String string3 = document0.data();
      assertNotNull(string3);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertEquals("", string3);
      
      document2.remove();
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("html", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("ascii", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("html", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document3);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotSame(document2, document3);
      
      String string4 = document2.text();
      assertNotNull(string4);
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("html", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("ascii", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("html", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document3);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotSame(document2, document3);
      assertEquals("ascii", string4);
      
      Elements elements2 = element0.previousElementSiblings();
      assertNotNull(elements2);
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("ascii", element0.baseUri());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertTrue(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      
      String string5 = element0.cssSelector();
      assertNotNull(string5);
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("ascii", element0.baseUri());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertEquals("html > head", string5);
      
      Elements elements3 = document0.getElementsByTag("YUr8H*");
      assertNotNull(elements3);
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(elements3.isEmpty());
      assertEquals(0, elements3.size());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertTrue(elements3.equals((Object)elements2));
      assertTrue(elements3.equals((Object)elements1));
      assertTrue(elements3.equals((Object)elements0));
      assertSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements2);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Parser.parse("a|qrw0>|][", "a|qrw0>|][");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("a|qrw0>|][", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("a|qrw0>|][", document0.baseUri());
      
      document0.updateMetaCharsetElement(false);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("a|qrw0>|][", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("a|qrw0>|][", document0.baseUri());
      
      Elements elements0 = document0.siblingElements();
      assertNotNull(elements0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("a|qrw0>|][", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("a|qrw0>|][", document0.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      Document document1 = (Document)document0.attr("nth-last-child", "org.jsoup.nodes.rode$1");
      assertNotNull(document1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("a|qrw0>|][", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("a|qrw0>|][", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("a|qrw0>|][", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("a|qrw0>|][", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = document1.appendElement("org.jsoup.nodes.rode$1");
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("a|qrw0>|][", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("a|qrw0>|][", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("a|qrw0>|][", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("a|qrw0>|][", document1.baseUri());
      assertEquals("org.jsoup.nodes.rode$1", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("a|qrw0>|][", element0.baseUri());
      assertEquals("org.jsoup.nodes.rode$1", element0.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      LinkedHashSet<PseudoTextElement> linkedHashSet0 = new LinkedHashSet<PseudoTextElement>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      
      String string0 = document0.html();
      assertNotNull(string0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("a|qrw0>|][", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("a|qrw0>|][", document0.baseUri());
      assertSame(document0, document1);
      assertEquals("<html>\n <head></head>\n <body>\n  a|qrw0&gt;|][\n </body>\n</html>\n<org.jsoup.nodes.rode$1></org.jsoup.nodes.rode$1>", string0);
      
      Document document2 = Parser.parseBodyFragmentRelaxed("a|qrw0>|][", "nth-last-child");
      assertNotNull(document2);
      assertEquals("#root", document2.tagName());
      assertEquals("nth-last-child", document2.baseUri());
      assertEquals("nth-last-child", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      Document document3 = document2.normalise();
      assertNotNull(document3);
      assertEquals("#root", document2.tagName());
      assertEquals("nth-last-child", document2.baseUri());
      assertEquals("nth-last-child", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("nth-last-child", document3.location());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("nth-last-child", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      
      Document document4 = (Document)document0.prependText("<html>\n <head></head>\n <body>\n  a|qrw0&gt;|][\n </body>\n</html>\n<org.jsoup.nodes.rode$1></org.jsoup.nodes.rode$1>");
      assertNotNull(document4);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("a|qrw0>|][", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(3, document0.childNodeSize());
      assertEquals("a|qrw0>|][", document0.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(3, document4.childNodeSize());
      assertEquals("a|qrw0>|][", document4.baseUri());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertFalse(document4.isBlock());
      assertEquals("a|qrw0>|][", document4.location());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document4, document0);
      assertSame(document4, document1);
      assertNotSame(document4, document3);
      assertNotSame(document4, document2);
      
      String string1 = document3.text();
      assertNotNull(string1);
      assertEquals("#root", document2.tagName());
      assertEquals("nth-last-child", document2.baseUri());
      assertEquals("nth-last-child", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("nth-last-child", document3.location());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("nth-last-child", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(document2, document4);
      assertNotSame(document3, document4);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertEquals("a|qrw0>|][", string1);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Element element0 = new Element("0aHPw.},?4");
      assertNotNull(element0);
      assertEquals("0aHPw.},?4", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("0aHPw.},?4", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      
      Element element1 = element0.getElementById(" > ");
      assertNull(element1);
      assertEquals("0aHPw.},?4", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("0aHPw.},?4", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      
      String string0 = element0.toString();
      assertNotNull(string0);
      assertEquals("0aHPw.},?4", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("0aHPw.},?4", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("<0aHPw.},?4></0aHPw.},?4>", string0);
      
      Elements elements0 = element0.getAllElements();
      assertNotNull(elements0);
      assertEquals("0aHPw.},?4", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("0aHPw.},?4", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.append('0');
      assertNotNull(stringBuilder1);
      assertEquals("0", stringBuilder0.toString());
      assertEquals("0", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      int int0 = 162;
      // Undeclared exception!
      try { 
        stringBuilder1.insert(162, "<0aHPw.},?4></0aHPw.},?4>");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 162
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = "2g0@6rrsN.6}";
      Document document0 = Document.createShell("2g0@6rrsN.6}");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = Document.createShell("2g0@6rrsN.6}");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      
      Element element1 = element0.after((Node) document0);
      assertNotNull(element1);
      assertFalse(document0.isBlock());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      // Undeclared exception!
      document0.attr("org.jsoup.nodes.Element", "2g0@6rrsN.6}");
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/8V]/`Jq]I/", "/8V]/`Jq]I/");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      String string0 = "";
      // Undeclared exception!
      try { 
        document0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Document.createShell("2g0@6rrsN.6}");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      
      Element element1 = element0.after((Node) document0);
      assertNotNull(element1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Elements elements0 = element1.select("body");
      assertNotNull(elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Element element2 = element0.clone();
      assertNotNull(element2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element2.isBlock());
      assertEquals(0, element2.childNodeSize());
      assertFalse(element2.hasParent());
      assertEquals("body", element2.tagName());
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertSame(element0, element1);
      assertNotSame(element0, element2);
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      
      String string0 = element1.data();
      assertNotNull(string0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element0.equals((Object)element2));
      assertFalse(element1.equals((Object)element2));
      assertSame(element0, element1);
      assertNotSame(element0, element2);
      assertNotSame(element1, element2);
      assertSame(element1, element0);
      assertEquals("", string0);
      
      Elements elements1 = element0.previousElementSiblings();
      assertNotNull(elements1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, elements1.size());
      assertFalse(elements1.isEmpty());
      assertFalse(element0.equals((Object)element2));
      assertFalse(elements1.equals((Object)elements0));
      assertSame(element0, element1);
      assertNotSame(element0, element2);
      assertNotSame(elements1, elements0);
      
      Elements elements2 = element1.previousElementSiblings();
      assertNotNull(elements2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertFalse(elements2.isEmpty());
      assertEquals(1, elements2.size());
      assertFalse(element0.equals((Object)element2));
      assertFalse(element1.equals((Object)element2));
      assertFalse(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertSame(element0, element1);
      assertNotSame(element0, element2);
      assertNotSame(element1, element2);
      assertSame(element1, element0);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      
      Element element3 = element1.shallowClone();
      assertNotNull(element3);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element3.isBlock());
      assertEquals("body", element3.tagName());
      assertEquals(0, element3.childNodeSize());
      assertFalse(element3.hasParent());
      assertEquals("body", element3.nodeName());
      assertEquals(0, element3.siblingIndex());
      assertFalse(element0.equals((Object)element2));
      assertFalse(element1.equals((Object)element2));
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element2));
      assertFalse(element3.equals((Object)element1));
      assertNotSame(element0, element3);
      assertSame(element0, element1);
      assertNotSame(element0, element2);
      assertNotSame(element1, element2);
      assertNotSame(element1, element3);
      assertSame(element1, element0);
      assertNotSame(element3, element0);
      assertNotSame(element3, element2);
      assertNotSame(element3, element1);
      
      // Undeclared exception!
      document0.append("2g0@6rrsN.6}");
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Z>uWD  \"A", "Z>uWD  \"A");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Z>uWD  \"A", document0.location());
      assertEquals("Z>uWD  \"A", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      
      Document document1 = Document.createShell("Z>uWD  \"A");
      assertNotNull(document1);
      assertEquals("Z>uWD  \"A", document1.location());
      assertEquals("Z>uWD  \"A", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      
      boolean boolean0 = document1.hasClass("Z>uWD  \"A");
      assertEquals("Z>uWD  \"A", document1.location());
      assertEquals("Z>uWD  \"A", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertFalse(boolean0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        document1.getElementsByAttributeValueEnding("sV8-8", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("option", "7;O<");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("7;O<", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("7;O<", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      
      Evaluator.IndexEquals evaluator_IndexEquals0 = new Evaluator.IndexEquals(0);
      assertNotNull(evaluator_IndexEquals0);
      
      String string0 = evaluator_IndexEquals0.toString();
      assertNotNull(string0);
      assertEquals(":eq(0)", string0);
      
      String string1 = evaluator_IndexEquals0.toString();
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals(":eq(0)", string1);
      
      Elements elements0 = document0.getElementsByAttributeValueEnding(":eq(0)", ":eq(0)");
      assertNotNull(elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("7;O<", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("7;O<", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("7;O<", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("7;O<", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("7;O<", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("7;O<", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      document0.setParentNode(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("7;O<", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("7;O<", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("7;O<", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("7;O<", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Element element0 = document0.shallowClone();
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("7;O<", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("7;O<", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("#root", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("7;O<", element0.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      Document document2 = (Document)document1.html("P");
      assertNotNull(document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("7;O<", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("7;O<", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("7;O<", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("7;O<", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("7;O<", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("7;O<", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      
      boolean boolean0 = Element.preserveWhitespace(document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("7;O<", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("7;O<", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("7;O<", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("7;O<", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("7;O<", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("7;O<", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(boolean0);
      
      Tag tag0 = element0.tag();
      assertNotNull(tag0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("7;O<", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("7;O<", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("#root", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("7;O<", element0.baseUri());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertEquals("#root", tag0.toString());
      assertFalse(tag0.isBlock());
      assertEquals("#root", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      
      // Undeclared exception!
      try { 
        document1.after("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String string0 = "2g0@6rrsN.6}";
      Document document0 = Document.createShell("2g0@6rrsN.6}");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      
      Element element1 = element0.after((Node) document0);
      assertNotNull(element1);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Elements elements0 = element1.select("body");
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      String string1 = element1.data();
      assertNotNull(string1);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertFalse(string1.equals((Object)string0));
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("", string1);
      
      Elements elements1 = element0.previousElementSiblings();
      assertNotNull(elements1);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, elements1.size());
      assertFalse(elements1.isEmpty());
      assertFalse(elements1.equals((Object)elements0));
      assertSame(element0, element1);
      assertNotSame(elements1, elements0);
      
      Elements elements2 = element1.previousElementSiblings();
      assertNotNull(elements2);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertFalse(elements2.isEmpty());
      assertEquals(1, elements2.size());
      assertFalse(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      
      Element element2 = element1.shallowClone();
      assertNotNull(element2);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals("body", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element2.isBlock());
      assertEquals("body", element2.tagName());
      assertFalse(element2.hasParent());
      assertEquals(0, element2.childNodeSize());
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertSame(element0, element1);
      assertNotSame(element0, element2);
      assertSame(element1, element0);
      assertNotSame(element1, element2);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      
      // Undeclared exception!
      document0.append("2g0@6rrsN.6}");
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = new Document("html");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("html", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("html", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("html", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("html", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("html", document1.location());
      assertEquals("html", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = document1.createElement("html");
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("html", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("html", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("html", document1.location());
      assertEquals("html", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("html", element0.tagName());
      assertEquals("html", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("html", element0.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = element0.previousElementSiblings();
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("html", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("html", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("html", document1.location());
      assertEquals("html", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("html", element0.tagName());
      assertEquals("html", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("html", element0.nodeName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element1 = element0.attr("html", true);
      assertNotNull(element1);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("html", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("html", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("html", document1.location());
      assertEquals("html", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("html", element0.tagName());
      assertEquals("html", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("html", element0.nodeName());
      assertFalse(element1.hasParent());
      assertEquals("html", element1.nodeName());
      assertEquals("html", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals("html", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("option", "7;O<");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("7;O<", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("7;O<", document0.location());
      
      Evaluator.IndexEquals evaluator_IndexEquals0 = new Evaluator.IndexEquals(0);
      assertNotNull(evaluator_IndexEquals0);
      
      String string0 = evaluator_IndexEquals0.toString();
      assertNotNull(string0);
      assertEquals(":eq(0)", string0);
      
      String string1 = evaluator_IndexEquals0.toString();
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals(":eq(0)", string1);
      
      boolean boolean0 = evaluator_IndexEquals0.matches(document0, document0);
      assertFalse(document0.hasParent());
      assertEquals("7;O<", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("7;O<", document0.location());
      assertTrue(boolean0);
      
      boolean boolean1 = document0.is((Evaluator) evaluator_IndexEquals0);
      assertFalse(document0.hasParent());
      assertEquals("7;O<", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("7;O<", document0.location());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Elements elements0 = document0.getElementsContainingText("option");
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals("7;O<", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("7;O<", document0.location());
      assertFalse(elements0.isEmpty());
      assertEquals(3, elements0.size());
      
      Document document1 = (Document)document0.prependText("html");
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals("7;O<", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("7;O<", document0.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("7;O<", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("7;O<", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements1 = document0.getElementsContainingOwnText(":eq(0)");
      assertNotNull(elements1);
      assertFalse(document0.hasParent());
      assertEquals("7;O<", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("7;O<", document0.location());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertFalse(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Document.createShell("ascii");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.baseUri());
      assertEquals("ascii", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Element element0 = document0.createElement("ascii");
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", element0.nodeName());
      assertEquals("ascii", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("ascii", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      Elements elements0 = element0.getElementsMatchingOwnText("textarea");
      assertNotNull(elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", element0.nodeName());
      assertEquals("ascii", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("ascii", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      Attributes attributes0 = element0.attributes();
      assertNotNull(attributes0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", element0.nodeName());
      assertEquals("ascii", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("ascii", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, attributes0.size());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      String string0 = Node.EmptyString;
      assertNotNull(string0);
      assertEquals("", string0);
      
      document1.doSetBaseUri("");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      List<Node> list0 = document0.childNodes();
      assertNotNull(list0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Y3p?H_BN6~1((c#");
      assertFalse(boolean0);
      
      Elements elements1 = element0.siblingElements();
      assertNotNull(elements1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", element0.nodeName());
      assertEquals("ascii", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("ascii", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertFalse(document0.equals((Object)document1));
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(document0, document1);
      assertNotSame(elements1, elements0);
      
      Elements elements2 = element0.getElementsMatchingOwnText("");
      assertNotNull(elements2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", element0.nodeName());
      assertEquals("ascii", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("ascii", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, elements2.size());
      assertFalse(elements2.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertFalse(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      assertNotSame(document0, document1);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      
      String string1 = document0.nodeName();
      assertNotNull(string1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(document0, document1);
      assertEquals("#document", string1);
      
      document1.siblingIndex = 0;
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      Element element1 = (Element)document1.childNode(0);
      assertNotNull(element1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, element1.childNodeSize());
      assertEquals("html", element1.tagName());
      assertEquals("ascii", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals("html", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(element1, element0);
      
      Elements elements3 = document0.getElementsByAttribute("YUr8H*");
      assertNotNull(elements3);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(elements3.isEmpty());
      assertEquals(0, elements3.size());
      assertFalse(document0.equals((Object)document1));
      assertFalse(elements3.equals((Object)elements2));
      assertTrue(elements3.equals((Object)elements0));
      assertTrue(elements3.equals((Object)elements1));
      assertNotSame(document0, document1);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements2);
      
      Element element2 = new Element("textarea");
      assertNotNull(element2);
      assertEquals("textarea", element2.nodeName());
      assertEquals("", element2.baseUri());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals(0, element2.childNodeSize());
      assertFalse(element2.hasParent());
      assertEquals("textarea", element2.tagName());
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      
      String string2 = document1.data();
      assertNotNull(string2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals("", string2);
      
      Document document2 = document1.normalise();
      assertNotNull(document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("ascii", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      
      Elements elements4 = document2.getElementsByIndexGreaterThan(0);
      assertNotNull(elements4);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("ascii", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(elements4.isEmpty());
      assertEquals(1, elements4.size());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document1.equals((Object)document0));
      assertFalse(elements4.equals((Object)elements2));
      assertFalse(elements4.equals((Object)elements3));
      assertFalse(elements4.equals((Object)elements0));
      assertFalse(elements4.equals((Object)elements1));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(elements4, elements2);
      assertNotSame(elements4, elements3);
      assertNotSame(elements4, elements0);
      assertNotSame(elements4, elements1);
      
      String string3 = document1.cssSelector();
      assertNotNull(string3);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertEquals("#root", string3);
      
      String string4 = Node.EmptyString;
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      
      Element element3 = element0.selectFirst("textarea");
      assertNull(element3);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", element0.nodeName());
      assertEquals("ascii", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("ascii", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element1));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Document.createShell("ascii");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      String string0 = "org.jsoup.nodes.Element";
      Element element0 = document0.createElement("ascii");
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("ascii", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("ascii", element0.tagName());
      assertEquals("ascii", element0.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      Elements elements0 = element0.getElementsMatchingOwnText("textarea");
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("ascii", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("ascii", element0.tagName());
      assertEquals("ascii", element0.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      Attributes attributes0 = element0.attributes();
      assertNotNull(attributes0);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("ascii", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("ascii", element0.tagName());
      assertEquals("ascii", element0.baseUri());
      assertEquals(0, attributes0.size());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      String string1 = Node.EmptyString;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = "";
      document1.doSetBaseUri("");
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      List<Node> list0 = document0.childNodes();
      assertNotNull(list0);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Y3p?H_BN6~1((c#");
      assertFalse(boolean0);
      
      Elements elements1 = element0.siblingElements();
      assertNotNull(elements1);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("ascii", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("ascii", element0.tagName());
      assertEquals("ascii", element0.baseUri());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertFalse(document0.equals((Object)document1));
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(document0, document1);
      assertNotSame(elements1, elements0);
      
      Elements elements2 = element0.getElementsMatchingOwnText("");
      assertNotNull(elements2);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("ascii", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("ascii", element0.tagName());
      assertEquals("ascii", element0.baseUri());
      assertFalse(elements2.isEmpty());
      assertEquals(1, elements2.size());
      assertFalse(document0.equals((Object)document1));
      assertFalse(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
      assertNotSame(document0, document1);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      
      String string3 = document0.nodeName();
      assertNotNull(string3);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document0.equals((Object)document1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(document0, document1);
      assertEquals("#document", string3);
      
      document1.siblingIndex = 0;
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      
      Element element1 = (Element)document1.childNode(0);
      assertNotNull(element1);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("html", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("html", element1.nodeName());
      assertEquals("ascii", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(2, element1.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(element1, element0);
      
      Elements elements3 = document0.getElementsByAttribute("YU*s8H*");
      assertNotNull(elements3);
      assertEquals(0, elements3.size());
      assertTrue(elements3.isEmpty());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(elements3.equals((Object)elements2));
      assertTrue(elements3.equals((Object)elements1));
      assertTrue(elements3.equals((Object)elements0));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements2);
      assertNotSame(document0, document1);
      
      Element element2 = document1.head();
      assertNotNull(element2);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element2.isBlock());
      assertEquals(0, element2.childNodeSize());
      assertEquals("head", element2.tagName());
      assertTrue(element2.hasParent());
      assertEquals("head", element2.nodeName());
      assertEquals("ascii", element2.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      assertNotSame(document1, document0);
      
      String string4 = "nf";
      Element element3 = element2.text("nf");
      assertNotNull(element3);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals(0, element2.siblingIndex());
      assertEquals(1, element2.childNodeSize());
      assertTrue(element2.isBlock());
      assertEquals("head", element2.tagName());
      assertTrue(element2.hasParent());
      assertEquals("head", element2.nodeName());
      assertEquals("ascii", element2.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("ascii", element3.baseUri());
      assertEquals(1, element3.childNodeSize());
      assertTrue(element3.hasParent());
      assertEquals("head", element3.nodeName());
      assertEquals(0, element3.siblingIndex());
      assertTrue(element3.isBlock());
      assertEquals("head", element3.tagName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(element3.equals((Object)element1));
      assertFalse(element3.equals((Object)element0));
      assertNotSame(document0, document1);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      assertSame(element2, element3);
      assertNotSame(document1, document0);
      assertNotSame(element3, element1);
      assertNotSame(element3, element0);
      assertSame(element3, element2);
      
      element3.nodelistChanged();
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals(0, element2.siblingIndex());
      assertEquals(1, element2.childNodeSize());
      assertTrue(element2.isBlock());
      assertEquals("head", element2.tagName());
      assertTrue(element2.hasParent());
      assertEquals("head", element2.nodeName());
      assertEquals("ascii", element2.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("ascii", element3.baseUri());
      assertEquals(1, element3.childNodeSize());
      assertTrue(element3.hasParent());
      assertEquals("head", element3.nodeName());
      assertEquals(0, element3.siblingIndex());
      assertTrue(element3.isBlock());
      assertEquals("head", element3.tagName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(element3.equals((Object)element1));
      assertFalse(element3.equals((Object)element0));
      assertNotSame(document0, document1);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      assertSame(element2, element3);
      assertNotSame(document1, document0);
      assertNotSame(element3, element1);
      assertNotSame(element3, element0);
      assertSame(element3, element2);
      
      String string5 = element2.wholeText();
      assertNotNull(string5);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals(0, element2.siblingIndex());
      assertEquals(1, element2.childNodeSize());
      assertTrue(element2.isBlock());
      assertEquals("head", element2.tagName());
      assertTrue(element2.hasParent());
      assertEquals("head", element2.nodeName());
      assertEquals("ascii", element2.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotSame(document0, document1);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      assertSame(element2, element3);
      assertNotSame(document1, document0);
      assertEquals("nf", string5);
      
      String string6 = element1.nodeName();
      assertNotNull(string6);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("html", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("html", element1.nodeName());
      assertEquals("ascii", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(2, element1.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(element1.equals((Object)element3));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element1.equals((Object)element2));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(element1, element3);
      assertNotSame(element1, element0);
      assertNotSame(element1, element2);
      assertEquals("html", string6);
      
      String string7 = document0.baseUri();
      assertNotNull(string7);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document0.equals((Object)document1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertNotSame(document0, document1);
      assertEquals("ascii", string7);
      
      String string8 = element2.data();
      assertNotNull(string8);
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals(0, element2.siblingIndex());
      assertEquals(1, element2.childNodeSize());
      assertTrue(element2.isBlock());
      assertEquals("head", element2.tagName());
      assertTrue(element2.hasParent());
      assertEquals("head", element2.nodeName());
      assertEquals("ascii", element2.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertNotSame(document0, document1);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      assertSame(element2, element3);
      assertNotSame(document1, document0);
      assertEquals("", string8);
      
      // Undeclared exception!
      try { 
        document0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = Document.createShell("ascii");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      String string0 = "org.jsoup.nodes.Element";
      Element element0 = document0.createElement("ascii");
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("ascii", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("ascii", element0.baseUri());
      assertEquals("ascii", element0.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      Elements elements0 = element0.getElementsMatchingOwnText("ascii");
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("ascii", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("ascii", element0.baseUri());
      assertEquals("ascii", element0.nodeName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      Attributes attributes0 = element0.attributes();
      assertNotNull(attributes0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("ascii", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("ascii", element0.baseUri());
      assertEquals("ascii", element0.nodeName());
      assertEquals(0, attributes0.size());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      String string1 = Node.EmptyString;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = "";
      document1.doSetBaseUri("");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      List<Node> list0 = document0.childNodes();
      assertNotNull(list0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Y3p?H_BN6~1((c#");
      assertFalse(boolean0);
      
      Elements elements1 = element0.getElementsMatchingOwnText("");
      assertNotNull(elements1);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("ascii", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("ascii", element0.baseUri());
      assertEquals("ascii", element0.nodeName());
      assertEquals(1, elements1.size());
      assertFalse(elements1.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(document0, document1);
      assertNotSame(elements1, elements0);
      
      String string3 = document0.nodeName();
      assertNotNull(string3);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document0.equals((Object)document1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotSame(document0, document1);
      assertEquals("#document", string3);
      
      document1.siblingIndex = 0;
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      
      Element element1 = (Element)document1.childNode(0);
      assertNotNull(element1);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("html", element1.tagName());
      assertEquals("html", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(element1, element0);
      
      Elements elements2 = document0.getElementsByAttribute("YUr8H*");
      assertNotNull(elements2);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertFalse(document0.equals((Object)document1));
      assertTrue(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      assertNotSame(document0, document1);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      
      Element element2 = element1.text("nf");
      assertNotNull(element2);
      assertTrue(element2.hasParent());
      assertEquals("html", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertEquals("ascii", element2.baseUri());
      assertEquals(1, element2.childNodeSize());
      assertEquals("html", element2.tagName());
      assertTrue(element2.isBlock());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", element1.baseUri());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("html", element1.tagName());
      assertEquals("html", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element2.equals((Object)element0));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element2, element0);
      assertSame(element2, element1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(element1, element0);
      assertSame(element1, element2);
      
      String string4 = document0.wholeText();
      assertNotNull(string4);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document0.equals((Object)document1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotSame(document0, document1);
      assertEquals("", string4);
      
      String string5 = element1.nodeName();
      assertNotNull(string5);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", element1.baseUri());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("html", element1.tagName());
      assertEquals("html", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(element1.equals((Object)element0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(element1, element0);
      assertSame(element1, element2);
      assertEquals("html", string5);
      
      String string6 = document0.baseUri();
      assertNotNull(string6);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document0.equals((Object)document1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertNotSame(document0, document1);
      assertEquals("ascii", string6);
      
      String string7 = document1.data();
      assertNotNull(string7);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string4));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals("", string7);
      
      // Undeclared exception!
      try { 
        document0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = Parser.parse("CJ0E|", "CJ0E|");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      document0.setBaseUri("");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("CJ0E|", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.clone();
      assertNotNull(document2);
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("CJ0E|", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("CJ0E|", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      Document document3 = new Document("CJ0E|");
      assertNotNull(document3);
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("CJ0E|", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("CJ0E|", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      
      String string0 = document2.nodeName();
      assertNotNull(string0);
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("CJ0E|", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("CJ0E|", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertEquals("#document", string0);
      
      String string1 = "";
      // Undeclared exception!
      try { 
        document1.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      String string0 = "ascii";
      Document document0 = Document.createShell("ascii");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      
      document0.setSiblingIndex(0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document1.attr("ascii", "org.jsoup.nodes.Element");
      assertNotNull(document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("ascii", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("ascii", document2.location());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("ascii", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      
      Node[] nodeArray0 = document0.childNodesAsArray();
      assertNotNull(nodeArray0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertEquals(1, nodeArray0.length);
      
      String string1 = element0.baseUri();
      assertNotNull(string1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("ascii", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertEquals("ascii", string1);
      
      document2.doSetBaseUri("html");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("html", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("ascii", document2.location());
      assertEquals("html", document2.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      List<Node> list0 = document1.childNodes();
      assertNotNull(list0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("html", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      
      document1.addChildren(0, nodeArray0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("html", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertEquals(1, nodeArray0.length);
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        document0.attr((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = Document.createShell("ascii");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("ascii", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      String string0 = "org.jsoup.nodes.Element";
      Element element0 = document0.createElement("ascii");
      assertNotNull(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals("ascii", element0.baseUri());
      assertEquals("ascii", element0.nodeName());
      assertEquals("ascii", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      Elements elements0 = element0.getElementsMatchingOwnText("textarea");
      assertNotNull(elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals("ascii", element0.baseUri());
      assertEquals("ascii", element0.nodeName());
      assertEquals("ascii", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      Attributes attributes0 = element0.attributes();
      assertNotNull(attributes0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals("ascii", element0.baseUri());
      assertEquals("ascii", element0.nodeName());
      assertEquals("ascii", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, attributes0.size());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      String string1 = Node.EmptyString;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = "";
      document1.doSetBaseUri("");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      List<Node> list0 = document0.childNodes();
      assertNotNull(list0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Y3p?H_BN6~1((c#");
      assertFalse(boolean0);
      
      Elements elements1 = element0.siblingElements();
      assertNotNull(elements1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals("ascii", element0.baseUri());
      assertEquals("ascii", element0.nodeName());
      assertEquals("ascii", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertFalse(document0.equals((Object)document1));
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(document0, document1);
      assertNotSame(elements1, elements0);
      
      int int0 = document1.elementSiblingIndex();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals(0, int0);
      
      Elements elements2 = element0.getElementsMatchingOwnText("");
      assertNotNull(elements2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals("ascii", element0.baseUri());
      assertEquals("ascii", element0.nodeName());
      assertEquals("ascii", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(elements2.isEmpty());
      assertEquals(1, elements2.size());
      assertFalse(document0.equals((Object)document1));
      assertFalse(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
      assertNotSame(document0, document1);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      
      String string3 = document0.nodeName();
      assertNotNull(string3);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document0.equals((Object)document1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(document0, document1);
      assertEquals("#document", string3);
      
      document1.siblingIndex = 0;
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      
      Element element1 = (Element)document1.childNode(0);
      assertNotNull(element1);
      assertEquals("html", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(2, element1.childNodeSize());
      assertEquals("ascii", element1.baseUri());
      assertEquals("html", element1.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(element1.equals((Object)element0));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(element1, element0);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Elements elements3 = document0.getElementsByAttribute("YUr8H*");
      assertNotNull(elements3);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertTrue(elements3.isEmpty());
      assertEquals(0, elements3.size());
      assertFalse(document0.equals((Object)document1));
      assertFalse(elements3.equals((Object)elements2));
      assertTrue(elements3.equals((Object)elements0));
      assertTrue(elements3.equals((Object)elements1));
      assertNotSame(document0, document1);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements1);
      
      Element element2 = new Element("textarea");
      assertNotNull(element2);
      assertEquals("textarea", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertEquals("", element2.baseUri());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.childNodeSize());
      assertFalse(element2.hasParent());
      assertEquals("textarea", element2.tagName());
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      
      Document document2 = (Document)document0.text("YUr8H*");
      assertNotNull(document2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("ascii", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("ascii", document2.location());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      
      String string4 = element2.wholeText();
      assertNotNull(string4);
      assertEquals("textarea", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertEquals("", element2.baseUri());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.childNodeSize());
      assertFalse(element2.hasParent());
      assertEquals("textarea", element2.tagName());
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      assertEquals("", string4);
      
      String string5 = element1.nodeName();
      assertNotNull(string5);
      assertEquals("html", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(2, element1.childNodeSize());
      assertEquals("ascii", element1.baseUri());
      assertEquals("html", element1.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(element1.equals((Object)element0));
      assertFalse(element1.equals((Object)element2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotSame(element1, element0);
      assertNotSame(element1, element2);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertEquals("html", string5);
      
      String string6 = document0.baseUri();
      assertNotNull(string6);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertFalse(document0.equals((Object)document1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertEquals("ascii", string6);
      
      String string7 = element2.data();
      assertNotNull(string7);
      assertEquals("textarea", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertEquals("", element2.baseUri());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.childNodeSize());
      assertFalse(element2.hasParent());
      assertEquals("textarea", element2.tagName());
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      assertEquals("", string7);
      
      String string8 = element0.html();
      assertNotNull(string8);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals("ascii", element0.baseUri());
      assertEquals("ascii", element0.nodeName());
      assertEquals("ascii", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      assertEquals("", string8);
      
      // Undeclared exception!
      try { 
        document0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      String string0 = "CJ0E|";
      Document document0 = Parser.parse("CJ0E|", "CJ0E|");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("CJ0E|", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      document0.setBaseUri("");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("CJ0E|", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.clone();
      assertNotNull(document2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("CJ0E|", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("CJ0E|", document2.location());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      Document document3 = new Document("CJ0E|");
      assertNotNull(document3);
      assertEquals("CJ0E|", document3.location());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("CJ0E|", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      
      Document document4 = document0.clone();
      assertNotNull(document4);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document4.isBlock());
      assertEquals("", document4.baseUri());
      assertFalse(document4.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.childNodeSize());
      assertEquals("CJ0E|", document4.location());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document4, document0);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      
      Document.QuirksMode document_QuirksMode1 = Document.QuirksMode.limitedQuirks;
      Document document5 = document4.quirksMode(document_QuirksMode1);
      assertNotNull(document5);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document4.isBlock());
      assertEquals("", document4.baseUri());
      assertFalse(document4.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.childNodeSize());
      assertEquals("CJ0E|", document4.location());
      assertEquals("", document5.baseUri());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(1, document5.childNodeSize());
      assertEquals("CJ0E|", document5.location());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document5.quirksMode());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document2));
      assertNotSame(document0, document5);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document4, document0);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertSame(document4, document5);
      assertNotSame(document4, document2);
      assertSame(document_QuirksMode1, document_QuirksMode0);
      assertNotSame(document5, document3);
      assertNotSame(document5, document1);
      assertNotSame(document5, document0);
      assertNotSame(document5, document2);
      assertSame(document5, document4);
      
      Document document6 = (Document)document3.clone();
      assertNotNull(document6);
      assertEquals("CJ0E|", document3.location());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("CJ0E|", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("#root", document6.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertFalse(document6.hasParent());
      assertFalse(document6.isBlock());
      assertEquals(0, document6.siblingIndex());
      assertEquals("CJ0E|", document6.baseUri());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals("CJ0E|", document6.location());
      assertEquals("#document", document6.nodeName());
      assertEquals(0, document6.childNodeSize());
      assertFalse(document3.equals((Object)document5));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document4));
      assertNotSame(document3, document5);
      assertNotSame(document3, document4);
      assertNotSame(document3, document2);
      assertNotSame(document3, document6);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document6, document3);
      assertNotSame(document6, document0);
      assertNotSame(document6, document2);
      assertNotSame(document6, document5);
      assertNotSame(document6, document1);
      assertNotSame(document6, document4);
      
      Document document7 = (Document)document3.attr("html", false);
      assertNotNull(document7);
      assertEquals("CJ0E|", document3.location());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("CJ0E|", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals(0, document7.childNodeSize());
      assertEquals("#root", document7.tagName());
      assertEquals(0, document7.siblingIndex());
      assertFalse(document7.hasParent());
      assertFalse(document7.isBlock());
      assertEquals("CJ0E|", document7.location());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertEquals("CJ0E|", document7.baseUri());
      assertEquals("#document", document7.nodeName());
      assertFalse(document7.updateMetaCharsetElement());
      assertFalse(document3.equals((Object)document5));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document6));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document5));
      assertFalse(document7.equals((Object)document6));
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document4));
      assertNotSame(document3, document5);
      assertNotSame(document3, document4);
      assertNotSame(document3, document2);
      assertNotSame(document3, document6);
      assertSame(document3, document7);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document7, document0);
      assertNotSame(document7, document5);
      assertSame(document7, document3);
      assertNotSame(document7, document6);
      assertNotSame(document7, document2);
      assertNotSame(document7, document1);
      assertNotSame(document7, document4);
      
      List<TextNode> list0 = document3.textNodes();
      assertNotNull(list0);
      assertEquals("CJ0E|", document3.location());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("CJ0E|", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(document3.equals((Object)document5));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document6));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document3, document5);
      assertNotSame(document3, document4);
      assertNotSame(document3, document2);
      assertNotSame(document3, document6);
      assertSame(document3, document7);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      
      Document document8 = Parser.parseBodyFragment("html", "CJ0E|");
      assertNotNull(document8);
      assertFalse(document8.isBlock());
      assertEquals("#document", document8.nodeName());
      assertEquals(0, document8.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document8.quirksMode());
      assertEquals("CJ0E|", document8.baseUri());
      assertFalse(document8.hasParent());
      assertEquals("#root", document8.tagName());
      assertFalse(document8.updateMetaCharsetElement());
      assertEquals(1, document8.childNodeSize());
      assertEquals("CJ0E|", document8.location());
      assertFalse(document8.equals((Object)document0));
      assertFalse(document8.equals((Object)document2));
      assertFalse(document8.equals((Object)document5));
      assertFalse(document8.equals((Object)document3));
      assertFalse(document8.equals((Object)document6));
      assertFalse(document8.equals((Object)document7));
      assertFalse(document8.equals((Object)document1));
      assertFalse(document8.equals((Object)document4));
      assertNotSame(document8, document0);
      assertNotSame(document8, document2);
      assertNotSame(document8, document5);
      assertNotSame(document8, document3);
      assertNotSame(document8, document6);
      assertNotSame(document8, document7);
      assertNotSame(document8, document1);
      assertNotSame(document8, document4);
      
      // Undeclared exception!
      try { 
        document8.before((Node) document2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = Parser.parse("/&XGY%$~Hc{(1@", "<!doctype");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("<!doctype", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("<!doctype", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("<!doctype", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("<!doctype", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("<!doctype", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("<!doctype", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsByIndexEquals(2625);
      assertNotNull(elements0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("<!doctype", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("<!doctype", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(document0, document1);
      
      Document document2 = (Document)document0.prependText("o85])aW'");
      assertNotNull(document2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("<!doctype", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("<!doctype", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("<!doctype", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("<!doctype", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      String string0 = document1.text();
      assertNotNull(string0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("<!doctype", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("<!doctype", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("<!doctype", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("<!doctype", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertEquals("o85])aW' /&XGY%$~Hc{(1@", string0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Document.createShell("ascii");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      
      document0.setSiblingIndex(0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document1.attr("ascii", "org.jsoup.nodes.Element");
      assertNotNull(document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("ascii", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("ascii", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      
      Elements elements0 = document2.getElementsByIndexEquals(0);
      assertNotNull(elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("ascii", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("ascii", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(3, elements0.size());
      assertFalse(elements0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      Node[] nodeArray0 = document0.childNodesAsArray();
      assertNotNull(nodeArray0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertEquals(1, nodeArray0.length);
      
      String string0 = element0.baseUri();
      assertNotNull(string0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertEquals("ascii", string0);
      
      document2.doSetBaseUri("html");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("html", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("html", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("ascii", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      List<Node> list0 = document1.childNodes();
      assertNotNull(list0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("html", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      
      document1.addChildren(0, nodeArray0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("html", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertEquals(1, nodeArray0.length);
      
      Elements elements1 = element0.siblingElements();
      assertNotNull(elements1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertFalse(elements1.isEmpty());
      assertEquals(1, elements1.size());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(elements1, elements0);
      
      String string1 = document2.nodeName();
      assertNotNull(string1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("html", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("html", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("ascii", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertEquals("#document", string1);
      
      Elements elements2 = document2.select("ascii");
      assertNotNull(elements2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("html", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("html", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("ascii", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      
      Document document3 = (Document)document0.prependChild(document1);
      assertNotNull(document3);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("html", document1.baseUri());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("ascii", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals("ascii", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document3, document2);
      assertSame(document3, document0);
      assertNotSame(document3, document1);
      
      String string2 = document3.wholeText();
      assertNotNull(string2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("html", document1.baseUri());
      assertEquals("ascii", document1.location());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("ascii", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals("ascii", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document3, document2);
      assertSame(document3, document0);
      assertNotSame(document3, document1);
      assertEquals("", string2);
      
      String string3 = document0.data();
      assertNotNull(string3);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document0, document2);
      assertEquals("", string3);
      
      document2.remove();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("html", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("html", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("ascii", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      assertSame(document2, document1);
      assertNotSame(document2, document3);
      assertNotSame(document2, document0);
      
      String string4 = document2.text();
      assertNotNull(string4);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("html", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("html", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("ascii", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      assertSame(document2, document1);
      assertNotSame(document2, document3);
      assertNotSame(document2, document0);
      assertEquals("", string4);
      
      Elements elements3 = element0.previousElementSiblings();
      assertNotNull(elements3);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertEquals(0, elements3.size());
      assertTrue(elements3.isEmpty());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertTrue(elements3.equals((Object)elements2));
      assertFalse(elements3.equals((Object)elements1));
      assertFalse(elements3.equals((Object)elements0));
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements0);
      
      String string5 = element0.cssSelector();
      assertNotNull(string5);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document0, document2);
      assertEquals("html > head", string5);
      
      // Undeclared exception!
      try { 
        document2.insertChildren(62, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = parser0.parseInput("Tag name must not be empty.", "Pattern syntax error: ");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("Pattern syntax error: ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Pattern syntax error: ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertEquals("Pattern syntax error: ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Pattern syntax error: ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("Pattern syntax error: ", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("Pattern syntax error: ", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("Pattern syntax error: ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Pattern syntax error: ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Pattern syntax error: ", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      document1.doSetBaseUri("option");
      assertFalse(parser0.isTrackErrors());
      assertEquals("Pattern syntax error: ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Pattern syntax error: ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("option", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("Pattern syntax error: ", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      List<Node> list0 = document0.childNodes();
      assertNotNull(list0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("Pattern syntax error: ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Pattern syntax error: ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      String string0 = document0.nodeName();
      assertNotNull(string0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("Pattern syntax error: ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Pattern syntax error: ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertEquals("#document", string0);
      
      Document document2 = (Document)document1.prependChild(document0);
      assertNotNull(document2);
      assertFalse(parser0.isTrackErrors());
      assertEquals("Pattern syntax error: ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Pattern syntax error: ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("option", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("Pattern syntax error: ", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("Pattern syntax error: ", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("option", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      
      String string1 = document0.text();
      assertNotNull(string1);
      assertFalse(parser0.isTrackErrors());
      assertEquals("Pattern syntax error: ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Pattern syntax error: ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertEquals("Tag name must not be empty.", string1);
      
      Elements elements0 = document2.previousElementSiblings();
      assertNotNull(elements0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("Pattern syntax error: ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Pattern syntax error: ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("option", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("Pattern syntax error: ", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("Pattern syntax error: ", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("option", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      
      String string2 = document1.cssSelector();
      assertNotNull(string2);
      assertFalse(parser0.isTrackErrors());
      assertEquals("Pattern syntax error: ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Pattern syntax error: ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("option", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("Pattern syntax error: ", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertEquals("#root", string2);
      
      Element element1 = document0.head();
      assertNotNull(element1);
      assertFalse(parser0.isTrackErrors());
      assertEquals("Pattern syntax error: ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Pattern syntax error: ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("Pattern syntax error: ", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(element1, element0);
      
      // Undeclared exception!
      try { 
        element0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Parser.parse("CJ0E|", "CJ0E|");
      assertNotNull(document0);
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      document0.setBaseUri("");
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("CJ0E|", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.clone();
      assertNotNull(document2);
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("CJ0E|", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("CJ0E|", document2.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      Document document3 = new Document("CJ0E|");
      assertNotNull(document3);
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("CJ0E|", document3.baseUri());
      assertEquals("CJ0E|", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      
      Document document4 = (Document)document3.attr("", false);
      assertNotNull(document4);
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("CJ0E|", document3.baseUri());
      assertEquals("CJ0E|", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("CJ0E|", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals(0, document4.siblingIndex());
      assertEquals("CJ0E|", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertSame(document3, document4);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(document4, document0);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertSame(document4, document3);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ", true);
      assertNotNull(mockFileOutputStream0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Set<String> set0 = document4.classNames();
      assertNotNull(set0);
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("CJ0E|", document3.baseUri());
      assertEquals("CJ0E|", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("CJ0E|", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals(0, document4.siblingIndex());
      assertEquals("CJ0E|", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains("CJ0E|"));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertSame(document3, document4);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(document4, document0);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertSame(document4, document3);
      
      Document document5 = (Document)document3.classNames(set0);
      assertNotNull(document5);
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("CJ0E|", document3.baseUri());
      assertEquals("CJ0E|", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("CJ0E|", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals(0, document4.siblingIndex());
      assertEquals("CJ0E|", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("CJ0E|", document5.location());
      assertEquals("CJ0E|", document5.baseUri());
      assertFalse(document5.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.hasParent());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#root", document5.tagName());
      assertEquals(0, document5.childNodeSize());
      assertFalse(set0.contains("CJ0E|"));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document0));
      assertSame(document3, document4);
      assertSame(document3, document5);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(document4, document0);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertSame(document4, document5);
      assertSame(document4, document3);
      assertNotSame(document5, document2);
      assertNotSame(document5, document1);
      assertNotSame(document5, document0);
      assertSame(document5, document3);
      assertSame(document5, document4);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Document document0 = Parser.parse("a|qrw0>|][", "a|qrw0>|][");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("a|qrw0>|][", document0.baseUri());
      assertEquals("a|qrw0>|][", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      document0.updateMetaCharsetElement(false);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("a|qrw0>|][", document0.baseUri());
      assertEquals("a|qrw0>|][", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Elements elements0 = document0.siblingElements();
      assertNotNull(elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("a|qrw0>|][", document0.baseUri());
      assertEquals("a|qrw0>|][", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      String string0 = "org.jsoup.nodes.Node$1";
      Document document1 = (Document)document0.attr("nth-last-child", "org.jsoup.nodes.Node$1");
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("a|qrw0>|][", document0.baseUri());
      assertEquals("a|qrw0>|][", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("a|qrw0>|][", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("a|qrw0>|][", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = document1.appendElement("org.jsoup.nodes.Node$1");
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("a|qrw0>|][", document0.baseUri());
      assertEquals("a|qrw0>|][", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("a|qrw0>|][", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("a|qrw0>|][", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.node$1", element0.nodeName());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("a|qrw0>|][", element0.baseUri());
      assertEquals("org.jsoup.nodes.node$1", element0.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      LinkedHashSet<PseudoTextElement> linkedHashSet0 = new LinkedHashSet<PseudoTextElement>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      boolean boolean0 = linkedHashSet0.add((PseudoTextElement) null);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean0);
      
      Document document2 = (Document)document0.insertChildren(0, (Collection<? extends Node>) elements0);
      assertNotNull(document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("a|qrw0>|][", document0.baseUri());
      assertEquals("a|qrw0>|][", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("a|qrw0>|][", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertEquals("a|qrw0>|][", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      
      // Undeclared exception!
      try { 
        document0.outputSettings((Document.OutputSettings) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Document document0 = Parser.parse("CJ0E|", "s+");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("s+", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("s+", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Evaluator.IndexEquals evaluator_IndexEquals0 = new Evaluator.IndexEquals(1968);
      assertNotNull(evaluator_IndexEquals0);
      
      String string0 = evaluator_IndexEquals0.toString();
      assertNotNull(string0);
      assertEquals(":eq(1968)", string0);
      
      boolean boolean0 = evaluator_IndexEquals0.matches(document0, document0);
      assertFalse(document0.isBlock());
      assertEquals("s+", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("s+", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(boolean0);
      
      boolean boolean1 = document0.is((Evaluator) evaluator_IndexEquals0);
      assertFalse(document0.isBlock());
      assertEquals("s+", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("s+", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Elements elements0 = document0.getElementsContainingText("");
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals("s+", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("s+", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
      
      Pattern pattern0 = Pattern.compile("CJ0E|");
      assertNotNull(pattern0);
      assertEquals("CJ0E|", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("CJ0E|", pattern0.pattern());
      
      Elements elements1 = document0.getElementsMatchingText(pattern0);
      assertNotNull(elements1);
      assertFalse(document0.isBlock());
      assertEquals("s+", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("s+", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("CJ0E|", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("CJ0E|", pattern0.pattern());
      assertFalse(elements1.isEmpty());
      assertEquals(4, elements1.size());
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      
      Elements elements2 = document0.getElementsByAttributeValue(":eq(1968)", "H%elmR$5QfsXo");
      assertNotNull(elements2);
      assertFalse(document0.isBlock());
      assertEquals("s+", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("s+", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertFalse(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Evaluator.IndexEquals evaluator_IndexEquals0 = new Evaluator.IndexEquals(0);
      assertNotNull(evaluator_IndexEquals0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "kbeH7b.Zm;`?9-<YI");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("kbeH7b.Zm;`?9-<YI", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("kbeH7b.Zm;`?9-<YI", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      
      MockFile mockFile0 = new MockFile("nVyd}$/M1isaMVenqGk", "r{,RFo?}e`C?Y~6");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      PrintStream printStream0 = mockPrintStream0.append('E');
      assertNotNull(printStream0);
      assertEquals(1L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/experiment/nVyd}$/M1isaMVenqGk/r{,RFo?}e`C?Y~6", mockFile0.toString());
      assertEquals("/experiment/nVyd}$/M1isaMVenqGk", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals("r{,RFo?}e`C?Y~6", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      
      document0.indent(printStream0, 0, document_OutputSettings0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("kbeH7b.Zm;`?9-<YI", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("kbeH7b.Zm;`?9-<YI", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(2L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/experiment/nVyd}$/M1isaMVenqGk/r{,RFo?}e`C?Y~6", mockFile0.toString());
      assertEquals("/experiment/nVyd}$/M1isaMVenqGk", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals("r{,RFo?}e`C?Y~6", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      
      Document document1 = (Document)document0.clone();
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("kbeH7b.Zm;`?9-<YI", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("kbeH7b.Zm;`?9-<YI", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("kbeH7b.Zm;`?9-<YI", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("kbeH7b.Zm;`?9-<YI", document1.location());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Element element0 = document1.appendElement("s+");
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("kbeH7b.Zm;`?9-<YI", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("kbeH7b.Zm;`?9-<YI", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("kbeH7b.Zm;`?9-<YI", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("kbeH7b.Zm;`?9-<YI", document1.location());
      assertEquals(0, element0.childNodeSize());
      assertEquals("s+", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("s+", element0.tagName());
      assertEquals("kbeH7b.Zm;`?9-<YI", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Document document0 = Document.createShell("ascii");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.baseUri());
      assertEquals("ascii", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Element element0 = document0.createElement("ascii");
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("ascii", element0.nodeName());
      assertEquals("ascii", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      Elements elements0 = element0.getElementsByAttributeValueContaining("textarea", "textarea");
      assertNotNull(elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("ascii", element0.nodeName());
      assertEquals("ascii", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      Attributes attributes0 = element0.attributes();
      assertNotNull(attributes0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("ascii", element0.nodeName());
      assertEquals("ascii", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, attributes0.size());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      Node[] nodeArray0 = document0.childNodesAsArray();
      assertNotNull(nodeArray0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertEquals(1, nodeArray0.length);
      
      String string0 = Node.EmptyString;
      assertNotNull(string0);
      assertEquals("", string0);
      
      document1.doSetBaseUri("");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Element element1 = new Element("\"");
      assertNotNull(element1);
      assertEquals("\"", element1.nodeName());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("\"", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertFalse(element1.equals((Object)element0));
      
      List<Node> list0 = document1.ensureChildNodes();
      assertNotNull(list0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document1.prependChild(element0);
      assertNotNull(document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", element0.baseUri());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("ascii", element0.nodeName());
      assertEquals("ascii", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("ascii", document2.location());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(element0, element1);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      String string1 = document1.text();
      assertNotNull(string1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertEquals("", string1);
      
      Element element2 = element1.previousElementSibling();
      assertNull(element2);
      assertEquals("\"", element1.nodeName());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("\"", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element1, element0);
      
      String string2 = "Vm.T";
      Document document3 = document0.normalise();
      assertNotNull(document3);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("ascii", document3.baseUri());
      assertEquals("ascii", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      
      Document document4 = (Document)document3.tagName("Vm.T");
      assertNotNull(document4);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("vm.t", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ascii", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("ascii", document3.baseUri());
      assertEquals("vm.t", document3.tagName());
      assertEquals("ascii", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("ascii", document4.location());
      assertEquals("ascii", document4.baseUri());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertFalse(document4.isBlock());
      assertEquals("vm.t", document4.tagName());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertSame(document0, document4);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document3, document0);
      assertNotSame(document3, document2);
      assertSame(document3, document4);
      assertNotSame(document3, document1);
      assertSame(document4, document3);
      assertNotSame(document4, document1);
      assertSame(document4, document0);
      assertNotSame(document4, document2);
      
      Pattern pattern0 = Pattern.compile("org.jsoup.nodes.Element");
      assertNotNull(pattern0);
      assertEquals(0, pattern0.flags());
      assertEquals("org.jsoup.nodes.Element", pattern0.pattern());
      assertEquals("org.jsoup.nodes.Element", pattern0.toString());
      
      // Undeclared exception!
      try { 
        Pattern.compile("4u>2rvYIW]l(gh,W", 42);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 17
         // 4u>2rvYIW]l(gh,W
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = Parser.parse("CJ0E|", "CJ0E|");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.hasParent());
      
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("CJ0E|", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("CJ0E|", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document1.ownText();
      assertNotNull(string0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("CJ0E|", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("CJ0E|", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", string0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      
      String string1 = document1.html();
      assertNotNull(string1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("CJ0E|", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("CJ0E|", document1.baseUri());
      assertFalse(string1.equals((Object)string0));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("<html>\n <head></head>\n <body>\n  CJ0E|\n </body>\n</html>", string1);
      
      Document document2 = Parser.parse("<html>\n <head></head>\n <body>\n  CJ0E|\n </body>\n</html>", "<html>\n <head></head>\n <body>\n  CJ0E|\n </body>\n</html>");
      assertNotNull(document2);
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("<html>\n <head></head>\n <body>\n  CJ0E|\n </body>\n</html>", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("<html>\n <head></head>\n <body>\n  CJ0E|\n </body>\n</html>", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document3 = document2.quirksMode(document_QuirksMode0);
      assertNotNull(document3);
      assertEquals("<html>\n <head></head>\n <body>\n  CJ0E|\n </body>\n</html>", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("<html>\n <head></head>\n <body>\n  CJ0E|\n </body>\n</html>", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("<html>\n <head></head>\n <body>\n  CJ0E|\n </body>\n</html>", document3.baseUri());
      assertEquals("<html>\n <head></head>\n <body>\n  CJ0E|\n </body>\n</html>", document3.location());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotSame(document3, document0);
      assertSame(document3, document2);
      assertNotSame(document3, document1);
      
      Document document4 = Parser.parse("", "<html>\n <head></head>\n <body>\n  CJ0E|\n </body>\n</html>");
      assertNotNull(document4);
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.isBlock());
      assertEquals("<html>\n <head></head>\n <body>\n  CJ0E|\n </body>\n</html>", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("<html>\n <head></head>\n <body>\n  CJ0E|\n </body>\n</html>", document4.location());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertNotSame(document4, document0);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      
      Document document5 = document3.outputSettings(document_OutputSettings0);
      assertNotNull(document5);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals("<html>\n <head></head>\n <body>\n  CJ0E|\n </body>\n</html>", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("<html>\n <head></head>\n <body>\n  CJ0E|\n </body>\n</html>", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("<html>\n <head></head>\n <body>\n  CJ0E|\n </body>\n</html>", document3.baseUri());
      assertEquals("<html>\n <head></head>\n <body>\n  CJ0E|\n </body>\n</html>", document3.location());
      assertEquals("<html>\n <head></head>\n <body>\n  CJ0E|\n </body>\n</html>", document5.location());
      assertFalse(document5.isBlock());
      assertFalse(document5.hasParent());
      assertEquals(1, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertEquals("<html>\n <head></head>\n <body>\n  CJ0E|\n </body>\n</html>", document5.baseUri());
      assertEquals(Document.QuirksMode.quirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document1));
      assertSame(document2, document3);
      assertSame(document2, document5);
      assertNotSame(document2, document4);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(document3, document5);
      assertNotSame(document3, document0);
      assertSame(document3, document2);
      assertNotSame(document3, document4);
      assertNotSame(document3, document1);
      assertSame(document5, document3);
      assertNotSame(document5, document0);
      assertNotSame(document5, document4);
      assertNotSame(document5, document1);
      assertSame(document5, document2);
      
      List<TextNode> list0 = document1.textNodes();
      assertNotNull(list0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("CJ0E|", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("CJ0E|", document1.baseUri());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document2));
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertNotSame(document0, document5);
      assertNotSame(document0, document2);
      assertNotSame(document1, document5);
      assertNotSame(document1, document3);
      assertNotSame(document1, document4);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      
      Element element0 = document4.head();
      assertNotNull(element0);
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.isBlock());
      assertEquals("<html>\n <head></head>\n <body>\n  CJ0E|\n </body>\n</html>", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("<html>\n <head></head>\n <body>\n  CJ0E|\n </body>\n</html>", document4.location());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals("<html>\n <head></head>\n <body>\n  CJ0E|\n </body>\n</html>", element0.baseUri());
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document5));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertNotSame(document4, document0);
      assertNotSame(document4, document5);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      
      Element element1 = document1.body();
      assertNotNull(element1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("CJ0E|", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("CJ0E|", document1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("CJ0E|", element1.baseUri());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document2));
      assertFalse(element1.equals((Object)element0));
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertNotSame(document0, document5);
      assertNotSame(document0, document2);
      assertNotSame(document1, document5);
      assertNotSame(document1, document3);
      assertNotSame(document1, document4);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(element1, element0);
      
      Element element2 = element0.appendTo(element1);
      assertNotNull(element2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("CJ0E|", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("CJ0E|", document1.baseUri());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.isBlock());
      assertEquals("<html>\n <head></head>\n <body>\n  CJ0E|\n </body>\n</html>", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("<html>\n <head></head>\n <body>\n  CJ0E|\n </body>\n</html>", document4.location());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals("<html>\n <head></head>\n <body>\n  CJ0E|\n </body>\n</html>", element0.baseUri());
      assertEquals("body", element1.tagName());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("CJ0E|", element1.baseUri());
      assertEquals(0, element2.childNodeSize());
      assertTrue(element2.isBlock());
      assertEquals("head", element2.tagName());
      assertEquals("head", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals("<html>\n <head></head>\n <body>\n  CJ0E|\n </body>\n</html>", element2.baseUri());
      assertEquals(1, element2.siblingIndex());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document5));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertNotSame(document0, document5);
      assertNotSame(document0, document2);
      assertNotSame(document1, document5);
      assertNotSame(document1, document3);
      assertNotSame(document1, document4);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document4, document0);
      assertNotSame(document4, document5);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertNotSame(element1, element2);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) element2;
      nodeArray0[1] = (Node) element1;
      nodeArray0[2] = (Node) document1;
      // Undeclared exception!
      try { 
        element2.insertChildren(2, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      String string0 = "CJ0E|";
      Document document0 = Parser.parse("CJ0E|", "CJ0E|");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("CJ0E|", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("CJ0E|", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      int int0 = 0;
      String string1 = document1.ownText();
      assertNotNull(string1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("CJ0E|", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("CJ0E|", document1.location());
      assertFalse(string1.equals((Object)string0));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", string1);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      List<DataNode> list0 = document1.dataNodes();
      assertNotNull(list0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("CJ0E|", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("CJ0E|", document1.location());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string2 = document0.className();
      assertNotNull(string2);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertSame(document0, document1);
      assertEquals("", string2);
      
      Element element0 = null;
      try {
        element0 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Document document0 = Parser.parse("a|qrw0>|][", "a|qrw0>|][");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("a|qrw0>|][", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("a|qrw0>|][", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = Document.createShell("7{E2!");
      assertNotNull(document1);
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("7{E2!", document1.location());
      assertEquals("7{E2!", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      
      boolean boolean0 = document0.hasClass(" ?= 8G");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("a|qrw0>|][", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("a|qrw0>|][", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertFalse(boolean0);
      
      Document document2 = (Document)document1.attr(" ?= 8G", "j1AAh)tds");
      assertNotNull(document2);
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("7{E2!", document1.location());
      assertEquals("7{E2!", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("7{E2!", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("7{E2!", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      LinkedHashSet<PseudoTextElement> linkedHashSet0 = new LinkedHashSet<PseudoTextElement>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      LinkedHashSet<PseudoTextElement> linkedHashSet1 = new LinkedHashSet<PseudoTextElement>();
      assertNotNull(linkedHashSet1);
      assertEquals(0, linkedHashSet1.size());
      assertTrue(linkedHashSet1.isEmpty());
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      
      boolean boolean1 = linkedHashSet1.add((PseudoTextElement) null);
      assertEquals(1, linkedHashSet1.size());
      assertFalse(linkedHashSet1.isEmpty());
      assertFalse(linkedHashSet1.equals((Object)linkedHashSet0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(linkedHashSet1, linkedHashSet0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        document0.insertChildren(14, (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Document document0 = new Document("a|qrw0>|][");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("a|qrw0>|][", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("a|qrw0>|][", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      
      document0.updateMetaCharsetElement(false);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("a|qrw0>|][", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("a|qrw0>|][", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      
      Elements elements0 = document0.siblingElements();
      assertNotNull(elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("a|qrw0>|][", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("a|qrw0>|][", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains("a|qrw0>|]["));
      
      String string0 = document0.html();
      assertNotNull(string0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("a|qrw0>|][", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("a|qrw0>|][", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", string0);
      
      Document document1 = (Document)document0.classNames((Set<String>) linkedHashSet0);
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("a|qrw0>|][", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("a|qrw0>|][", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("a|qrw0>|][", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("a|qrw0>|][", document1.location());
      assertFalse(linkedHashSet0.contains("a|qrw0>|]["));
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      // Undeclared exception!
      try { 
        document0.text("a|qrw0>|][");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Document document0 = Document.createShell("s+");
      assertNotNull(document0);
      assertEquals("s+", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("s+", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Tag tag0 = Tag.valueOf("HH");
      assertNotNull(tag0);
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("HH", tag0.toString());
      assertTrue(tag0.isInline());
      assertEquals("HH", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      
      Element element0 = new Element(tag0, "HH");
      assertNotNull(element0);
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("HH", tag0.toString());
      assertTrue(tag0.isInline());
      assertEquals("HH", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("HH", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("HH", element0.nodeName());
      assertEquals("HH", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      
      Elements elements0 = element0.getElementsContainingOwnText("d<C@_,,Y~");
      assertNotNull(elements0);
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("HH", tag0.toString());
      assertTrue(tag0.isInline());
      assertEquals("HH", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("HH", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("HH", element0.nodeName());
      assertEquals("HH", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertEquals("s+", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("s+", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("s+", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("s+", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Elements elements1 = document1.previousElementSiblings();
      assertNotNull(elements1);
      assertEquals("s+", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("s+", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("s+", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("s+", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(elements1, elements0);
      
      Tag tag1 = Tag.valueOf("ra,6M2ez67+");
      assertNotNull(tag1);
      assertFalse(tag1.isBlock());
      assertTrue(tag1.isInline());
      assertFalse(tag1.isSelfClosing());
      assertFalse(tag1.preserveWhitespace());
      assertEquals("ra,6M2ez67+", tag1.toString());
      assertEquals("ra,6M2ez67+", tag1.getName());
      assertFalse(tag1.canContainBlock());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.isData());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.isKnownTag());
      assertFalse(tag1.isEmpty());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.equals((Object)tag0));
      assertNotSame(tag1, tag0);
      
      Elements elements2 = document1.getElementsByAttributeValueEnding("ra,6M2ez67+", "#root");
      assertNotNull(elements2);
      assertEquals("s+", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("s+", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("s+", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("s+", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertTrue(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      
      String string0 = element0.data();
      assertNotNull(string0);
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("HH", tag0.toString());
      assertTrue(tag0.isInline());
      assertEquals("HH", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("HH", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("HH", element0.nodeName());
      assertEquals("HH", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(tag0.equals((Object)tag1));
      assertNotSame(tag0, tag1);
      assertEquals("", string0);
      
      Elements elements3 = element0.getElementsByIndexGreaterThan(8212);
      assertNotNull(elements3);
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("HH", tag0.toString());
      assertTrue(tag0.isInline());
      assertEquals("HH", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("HH", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("HH", element0.nodeName());
      assertEquals("HH", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, elements3.size());
      assertTrue(elements3.isEmpty());
      assertFalse(tag0.equals((Object)tag1));
      assertTrue(elements3.equals((Object)elements0));
      assertTrue(elements3.equals((Object)elements1));
      assertTrue(elements3.equals((Object)elements2));
      assertNotSame(tag0, tag1);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements2);
      
      String string1 = element0.cssSelector();
      assertNotNull(string1);
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("HH", tag0.toString());
      assertTrue(tag0.isInline());
      assertEquals("HH", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("HH", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("HH", element0.nodeName());
      assertEquals("HH", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(tag0.equals((Object)tag1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(tag0, tag1);
      assertEquals("HH", string1);
      
      String string2 = Node.EmptyString;
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      // Undeclared exception!
      try { 
        element0.selectFirst("3-^bb`x;E`");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '3-^bb`x;E`': unexpected token at '^bb`x;E`'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      String string0 = "\\s+";
      Document document0 = Document.createShell("s+");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("s+", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("s+", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Tag tag0 = Tag.valueOf("CJ0E|");
      assertNotNull(tag0);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertEquals("CJ0E|", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("CJ0E|", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      CDataNode cDataNode0 = new CDataNode("CJ0E|");
      assertNotNull(cDataNode0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      
      Attributes attributes1 = cDataNode0.attributes();
      assertNotNull(attributes1);
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes1.size());
      assertFalse(attributes1.equals((Object)attributes0));
      assertNotSame(attributes1, attributes0);
      
      Attributes attributes2 = attributes1.put("Thi+P:.t-HJruot ", true);
      assertNotNull(attributes2);
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      
      FormElement formElement0 = new FormElement(tag0, "CJ0E|", attributes2);
      assertNotNull(formElement0);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertEquals("CJ0E|", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("CJ0E|", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("CJ0E|", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("CJ0E|", formElement0.baseUri());
      assertEquals("CJ0E|", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      
      FormElement formElement1 = new FormElement(tag0, "CJ0E|", attributes2);
      assertNotNull(formElement1);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertEquals("CJ0E|", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("CJ0E|", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals("CJ0E|", formElement1.baseUri());
      assertFalse(formElement1.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("CJ0E|", formElement1.tagName());
      assertEquals("CJ0E|", formElement1.nodeName());
      assertFalse(formElement1.isBlock());
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(formElement1.equals((Object)formElement0));
      
      Elements elements0 = formElement1.getElementsByAttributeValueMatching("R[GtO}):", "Thi+P:.t-HJruot ");
      assertNotNull(elements0);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertEquals("CJ0E|", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("CJ0E|", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals("CJ0E|", formElement1.baseUri());
      assertFalse(formElement1.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("CJ0E|", formElement1.tagName());
      assertEquals("CJ0E|", formElement1.nodeName());
      assertFalse(formElement1.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(formElement1.equals((Object)formElement0));
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(formElement1, formElement0);
      
      String string1 = "InHead";
      Elements elements1 = formElement1.getElementsByAttributeValueMatching(string0, string1);
      assertNotNull(elements1);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertEquals("CJ0E|", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("CJ0E|", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals("CJ0E|", formElement1.baseUri());
      assertFalse(formElement1.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("CJ0E|", formElement1.tagName());
      assertEquals("CJ0E|", formElement1.nodeName());
      assertFalse(formElement1.isBlock());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertFalse(string0.equals((Object)string1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(formElement1.equals((Object)formElement0));
      assertFalse(string1.equals((Object)string0));
      assertTrue(elements1.equals((Object)elements0));
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(formElement1, formElement0);
      assertNotSame(elements1, elements0);
      
      String string2 = document0.val();
      assertNotNull(string2);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("s+", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("s+", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Document document0 = Document.createShell("ascii");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      
      document0.setSiblingIndex(0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document1.attr("ascii", "org.jsoup.nodes.Element");
      assertNotNull(document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("ascii", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("ascii", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      
      Elements elements0 = document2.getElementsByIndexEquals(0);
      assertNotNull(elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("ascii", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("ascii", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertFalse(elements0.isEmpty());
      assertEquals(3, elements0.size());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      Node[] nodeArray0 = document0.childNodesAsArray();
      assertNotNull(nodeArray0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertEquals(1, nodeArray0.length);
      
      String string0 = element0.baseUri();
      assertNotNull(string0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertEquals("ascii", string0);
      
      document2.doSetBaseUri("html");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("html", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("ascii", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("html", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      List<Node> list0 = document1.childNodes();
      assertNotNull(list0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("html", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      
      document1.addChildren(0, nodeArray0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("html", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertEquals(1, nodeArray0.length);
      
      Elements elements1 = element0.siblingElements();
      assertNotNull(elements1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(elements1.isEmpty());
      assertEquals(1, elements1.size());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(elements1, elements0);
      
      String string1 = document2.nodeName();
      assertNotNull(string1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("html", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("ascii", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("html", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertEquals("#document", string1);
      
      Elements elements2 = document2.getElementsByAttribute("#document");
      assertNotNull(elements2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("html", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("ascii", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("html", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      
      Document document3 = (Document)document0.prependChild(document1);
      assertNotNull(document3);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("html", document1.baseUri());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("ascii", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("ascii", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document3, document1);
      assertSame(document3, document0);
      assertNotSame(document3, document2);
      
      String string2 = document3.wholeText();
      assertNotNull(string2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("html", document1.baseUri());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("ascii", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("ascii", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document3, document1);
      assertSame(document3, document0);
      assertNotSame(document3, document2);
      assertEquals("", string2);
      
      String string3 = document0.data();
      assertNotNull(string3);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertEquals("", string3);
      
      document2.remove();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("html", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("ascii", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("html", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document3);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      String string4 = document2.text();
      assertNotNull(string4);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("html", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("ascii", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("html", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document3);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertEquals("", string4);
      
      Elements elements3 = element0.previousElementSiblings();
      assertNotNull(elements3);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements3.isEmpty());
      assertEquals(0, elements3.size());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(elements3.equals((Object)elements0));
      assertTrue(elements3.equals((Object)elements2));
      assertFalse(elements3.equals((Object)elements1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements1);
      
      String string5 = element0.cssSelector();
      assertNotNull(string5);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertEquals("ascii", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertEquals("html > head", string5);
      
      Elements elements4 = document0.getElementsByTag("YUr8H*");
      assertNotNull(elements4);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements4.isEmpty());
      assertEquals(0, elements4.size());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertTrue(elements4.equals((Object)elements2));
      assertFalse(elements4.equals((Object)elements1));
      assertFalse(elements4.equals((Object)elements0));
      assertTrue(elements4.equals((Object)elements3));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(elements4, elements1);
      assertNotSame(elements4, elements3);
      assertNotSame(elements4, elements2);
      assertNotSame(elements4, elements0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Document document0 = Document.createShell("ascii");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Element element0 = document0.createElement("ascii");
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("ascii", element0.nodeName());
      assertEquals("ascii", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("ascii", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      Elements elements0 = element0.getElementsMatchingOwnText("textarea");
      assertNotNull(elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("ascii", element0.nodeName());
      assertEquals("ascii", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("ascii", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      Attributes attributes0 = element0.attributes();
      assertNotNull(attributes0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("ascii", element0.nodeName());
      assertEquals("ascii", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("ascii", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, attributes0.size());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      Node[] nodeArray0 = document0.childNodesAsArray();
      assertNotNull(nodeArray0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertEquals(1, nodeArray0.length);
      
      String string0 = element0.baseUri();
      assertNotNull(string0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("ascii", element0.nodeName());
      assertEquals("ascii", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("ascii", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertEquals("ascii", string0);
      
      document1.doSetBaseUri("");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      List<Node> list0 = document0.childNodes();
      assertNotNull(list0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      document0.addChildren(0, nodeArray0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertEquals(1, nodeArray0.length);
      
      Elements elements1 = element0.siblingElements();
      assertNotNull(elements1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("ascii", element0.nodeName());
      assertEquals("ascii", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("ascii", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertFalse(document0.equals((Object)document1));
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(document0, document1);
      assertNotSame(elements1, elements0);
      
      Elements elements2 = element0.getElementsMatchingOwnText("ascii");
      assertNotNull(elements2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("ascii", element0.nodeName());
      assertEquals("ascii", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("ascii", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertTrue(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertNotSame(document0, document1);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      
      String string1 = document0.nodeName();
      assertNotNull(string1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(document0, document1);
      assertEquals("#document", string1);
      
      document1.siblingIndex = 0;
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      
      String string2 = element0.data();
      assertNotNull(string2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("ascii", element0.nodeName());
      assertEquals("ascii", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("ascii", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(document0, document1);
      assertEquals("", string2);
      
      Elements elements3 = document0.getElementsByIndexGreaterThan(818);
      assertNotNull(elements3);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(elements3.isEmpty());
      assertEquals(0, elements3.size());
      assertFalse(document0.equals((Object)document1));
      assertTrue(elements3.equals((Object)elements1));
      assertTrue(elements3.equals((Object)elements0));
      assertTrue(elements3.equals((Object)elements2));
      assertNotSame(document0, document1);
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements1);
      
      String string3 = document0.cssSelector();
      assertNotNull(string3);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertEquals("#root", string3);
      
      String string4 = Node.EmptyString;
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      
      // Undeclared exception!
      try { 
        document0.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Document document0 = Document.createShell("ascii");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("ascii", document1.location());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      String string0 = "org.jsoup.nodes.Element";
      Element element0 = document0.createElement("ascii");
      assertNotNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", element0.tagName());
      assertEquals("ascii", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("ascii", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      Elements elements0 = element0.getElementsMatchingOwnText("textarea");
      assertNotNull(elements0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", element0.tagName());
      assertEquals("ascii", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("ascii", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      Attributes attributes0 = element0.attributes();
      assertNotNull(attributes0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", element0.tagName());
      assertEquals("ascii", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("ascii", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(0, attributes0.size());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      Node[] nodeArray0 = document0.childNodesAsArray();
      assertNotNull(nodeArray0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertEquals(1, nodeArray0.length);
      
      String string1 = Node.EmptyString;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = "";
      document1.doSetBaseUri("");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("ascii", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      List<Node> list0 = document0.childNodes();
      assertNotNull(list0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      document0.addChildren(0, nodeArray0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertEquals(1, nodeArray0.length);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Y3p?H_BN6~1((c#");
      assertFalse(boolean0);
      
      Elements elements1 = element0.siblingElements();
      assertNotNull(elements1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", element0.tagName());
      assertEquals("ascii", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("ascii", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertFalse(document0.equals((Object)document1));
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(document0, document1);
      assertNotSame(elements1, elements0);
      
      Elements elements2 = element0.getElementsMatchingOwnText("");
      assertNotNull(elements2);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", element0.tagName());
      assertEquals("ascii", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("ascii", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertFalse(elements2.isEmpty());
      assertEquals(1, elements2.size());
      assertFalse(document0.equals((Object)document1));
      assertFalse(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
      assertNotSame(document0, document1);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      
      String string3 = document0.nodeName();
      assertNotNull(string3);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotSame(document0, document1);
      assertEquals("#document", string3);
      
      document1.siblingIndex = 0;
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("ascii", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      Element element1 = (Element)document1.childNode(0);
      assertNotNull(element1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element1.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertEquals("html", element1.nodeName());
      assertEquals("html", element1.tagName());
      assertEquals("ascii", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("ascii", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document0.equals((Object)document1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(element1, element0);
      assertNotSame(document1, document0);
      
      Elements elements3 = document0.getElementsByAttribute("YUr8H*");
      assertNotNull(elements3);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements3.isEmpty());
      assertEquals(0, elements3.size());
      assertFalse(document0.equals((Object)document1));
      assertTrue(elements3.equals((Object)elements1));
      assertTrue(elements3.equals((Object)elements0));
      assertFalse(elements3.equals((Object)elements2));
      assertNotSame(document0, document1);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements2);
      
      Element element2 = new Element("textarea");
      assertNotNull(element2);
      assertFalse(element2.hasParent());
      assertEquals("textarea", element2.nodeName());
      assertEquals(0, element2.childNodeSize());
      assertEquals("textarea", element2.tagName());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertEquals("", element2.baseUri());
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      
      Element element3 = element2.text("nf");
      assertNotNull(element3);
      assertFalse(element2.hasParent());
      assertEquals("textarea", element2.nodeName());
      assertEquals(1, element2.childNodeSize());
      assertEquals("textarea", element2.tagName());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertEquals("", element2.baseUri());
      assertFalse(element3.hasParent());
      assertEquals(1, element3.childNodeSize());
      assertEquals("textarea", element3.tagName());
      assertEquals("textarea", element3.nodeName());
      assertEquals(0, element3.siblingIndex());
      assertEquals("", element3.baseUri());
      assertFalse(element3.isBlock());
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element1));
      assertNotSame(element2, element0);
      assertSame(element2, element3);
      assertNotSame(element2, element1);
      assertNotSame(element3, element0);
      assertSame(element3, element2);
      assertNotSame(element3, element1);
      
      String string4 = element2.wholeText();
      assertNotNull(string4);
      assertFalse(element2.hasParent());
      assertEquals("textarea", element2.nodeName());
      assertEquals(1, element2.childNodeSize());
      assertEquals("textarea", element2.tagName());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertEquals("", element2.baseUri());
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotSame(element2, element0);
      assertSame(element2, element3);
      assertNotSame(element2, element1);
      assertEquals("nf", string4);
      
      String string5 = element1.nodeName();
      assertNotNull(string5);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element1.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertEquals("html", element1.nodeName());
      assertEquals("html", element1.tagName());
      assertEquals("ascii", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("ascii", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document0.equals((Object)document1));
      assertFalse(element1.equals((Object)element2));
      assertFalse(element1.equals((Object)element3));
      assertFalse(element1.equals((Object)element0));
      assertFalse(document1.equals((Object)document0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotSame(document0, document1);
      assertNotSame(element1, element2);
      assertNotSame(element1, element3);
      assertNotSame(element1, element0);
      assertNotSame(document1, document0);
      assertEquals("html", string5);
      
      String string6 = document0.baseUri();
      assertNotNull(string6);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertNotSame(document0, document1);
      assertEquals("ascii", string6);
      
      String string7 = element2.data();
      assertNotNull(string7);
      assertFalse(element2.hasParent());
      assertEquals("textarea", element2.nodeName());
      assertEquals(1, element2.childNodeSize());
      assertEquals("textarea", element2.tagName());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertEquals("", element2.baseUri());
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string1));
      assertNotSame(element2, element0);
      assertSame(element2, element3);
      assertNotSame(element2, element1);
      assertEquals("", string7);
      
      // Undeclared exception!
      try { 
        document0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Document document0 = Parser.parse("CJ0E|", "CJ0E|");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("CJ0E|", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("CJ0E|", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document1.ownText();
      assertNotNull(string0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("CJ0E|", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("CJ0E|", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", string0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      
      String string1 = document1.html();
      assertNotNull(string1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("CJ0E|", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("CJ0E|", document1.location());
      assertFalse(string1.equals((Object)string0));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("<html>\n <head></head>\n <body>\n  CJ0E|\n </body>\n</html>", string1);
      
      Document document2 = Parser.parse("<html>\n <head></head>\n <body>\n  CJ0E|\n </body>\n</html>", "<html>\n <head></head>\n <body>\n  CJ0E|\n </body>\n</html>");
      assertNotNull(document2);
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("<html>\n <head></head>\n <body>\n  CJ0E|\n </body>\n</html>", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("<html>\n <head></head>\n <body>\n  CJ0E|\n </body>\n</html>", document2.location());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document3 = document2.quirksMode(document_QuirksMode0);
      assertNotNull(document3);
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("<html>\n <head></head>\n <body>\n  CJ0E|\n </body>\n</html>", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("<html>\n <head></head>\n <body>\n  CJ0E|\n </body>\n</html>", document2.location());
      assertFalse(document3.isBlock());
      assertEquals("<html>\n <head></head>\n <body>\n  CJ0E|\n </body>\n</html>", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals("<html>\n <head></head>\n <body>\n  CJ0E|\n </body>\n</html>", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertSame(document3, document2);
      
      Document document4 = (Document)document0.clone();
      assertNotNull(document4);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertEquals("CJ0E|", document4.location());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertEquals("CJ0E|", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertNotSame(document0, document4);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document4, document0);
      assertNotSame(document4, document2);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      
      Document document5 = (Document)document3.attr(",|}E_-8+q=NLc7*Zt", false);
      assertNotNull(document5);
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("<html>\n <head></head>\n <body>\n  CJ0E|\n </body>\n</html>", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("<html>\n <head></head>\n <body>\n  CJ0E|\n </body>\n</html>", document2.location());
      assertFalse(document3.isBlock());
      assertEquals("<html>\n <head></head>\n <body>\n  CJ0E|\n </body>\n</html>", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals("<html>\n <head></head>\n <body>\n  CJ0E|\n </body>\n</html>", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals("<html>\n <head></head>\n <body>\n  CJ0E|\n </body>\n</html>", document5.baseUri());
      assertEquals("<html>\n <head></head>\n <body>\n  CJ0E|\n </body>\n</html>", document5.location());
      assertFalse(document5.isBlock());
      assertFalse(document5.hasParent());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertEquals(1, document5.childNodeSize());
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document0));
      assertNotSame(document2, document4);
      assertNotSame(document2, document0);
      assertSame(document2, document5);
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertSame(document3, document5);
      assertSame(document3, document2);
      assertNotSame(document3, document4);
      assertSame(document5, document2);
      assertSame(document5, document3);
      assertNotSame(document5, document4);
      assertNotSame(document5, document1);
      assertNotSame(document5, document0);
      
      List<TextNode> list0 = document1.textNodes();
      assertNotNull(list0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("CJ0E|", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("CJ0E|", document1.location());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document5));
      assertNotSame(document0, document4);
      assertNotSame(document0, document5);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document4);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertNotSame(document1, document5);
      
      // Undeclared exception!
      try { 
        document0.before((Node) document5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "org.jsoup.select.Evaluator$AttributeWithValueNot");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$AttributeWithValueNot", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.select.Evaluator$AttributeWithValueNot", document0.baseUri());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$AttributeWithValueNot", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.select.Evaluator$AttributeWithValueNot", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("org.jsoup.select.Evaluator$AttributeWithValueNot", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.select.Evaluator$AttributeWithValueNot", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document1.text("area");
      assertNotNull(document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$AttributeWithValueNot", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.select.Evaluator$AttributeWithValueNot", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("org.jsoup.select.Evaluator$AttributeWithValueNot", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.select.Evaluator$AttributeWithValueNot", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("org.jsoup.select.Evaluator$AttributeWithValueNot", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$AttributeWithValueNot", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      boolean boolean0 = document2.isBlock();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$AttributeWithValueNot", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.select.Evaluator$AttributeWithValueNot", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("org.jsoup.select.Evaluator$AttributeWithValueNot", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.select.Evaluator$AttributeWithValueNot", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("org.jsoup.select.Evaluator$AttributeWithValueNot", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$AttributeWithValueNot", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Document document0 = Parser.parse("CJ0E|", "CJ0E|");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("CJ0E|", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("CJ0E|", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("CJ0E|", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("CJ0E|", document1.location());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      int int0 = (-153);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      
      String string0 = document1.html();
      assertNotNull(string0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CJ0E|", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("CJ0E|", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("CJ0E|", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("CJ0E|", document1.location());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("<html>\n <head></head>\n <body>\n  CJ0E|\n </body>\n</html>", string0);
      
      boolean boolean0 = false;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      assertNotNull(document_OutputSettings1);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      // Undeclared exception!
      try { 
        document_OutputSettings1.indentAmount((-153));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/8V]/`Jq]I/", "/8V]/`Jq]I/");
      assertNotNull(document0);
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      document0.setBaseUri("");
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("/8V]/`Jq]I/", document1.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.clone();
      assertNotNull(document2);
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("/8V]/`Jq]I/", document1.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("/8V]/`Jq]I/", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      Comment comment0 = new Comment("f|UG@8\"JU", "/8V]/`Jq]I/");
      assertNotNull(comment0);
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document2;
      nodeArray0[2] = (Node) document1;
      nodeArray0[3] = (Node) comment0;
      nodeArray0[4] = (Node) document2;
      nodeArray0[5] = (Node) comment0;
      // Undeclared exception!
      try { 
        document1.insertChildren((-1), nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("CJ0E|", "yS4HW9G48'%");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("yS4HW9G48'%", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("yS4HW9G48'%", document0.baseUri());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("yS4HW9G48'%", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("yS4HW9G48'%", document0.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("yS4HW9G48'%", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("yS4HW9G48'%", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document1.getElementsByClass("yS4HW9G48'%");
      assertNotNull(elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("yS4HW9G48'%", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("yS4HW9G48'%", document0.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("yS4HW9G48'%", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("yS4HW9G48'%", document1.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      assertNotNull(document_OutputSettings1);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings2 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings2);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.indentAmount(1303);
      assertNotNull(document_OutputSettings3);
      assertEquals(1303, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(1303, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      assertNotNull(document_OutputSettings4);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertFalse(document_OutputSettings4.outline());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings3));
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings5 = document_OutputSettings2.indentAmount(1303);
      assertNotNull(document_OutputSettings5);
      assertEquals(1303, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings5.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings5.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings5.syntax());
      assertEquals(1303, document_OutputSettings5.indentAmount());
      assertFalse(document_OutputSettings5.outline());
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings1));
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings5);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertNotSame(document_OutputSettings5, document_OutputSettings4);
      assertNotSame(document_OutputSettings5, document_OutputSettings0);
      assertSame(document_OutputSettings5, document_OutputSettings3);
      assertSame(document_OutputSettings5, document_OutputSettings2);
      assertNotSame(document_OutputSettings5, document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings6 = document_OutputSettings4.prettyPrint(false);
      assertNotNull(document_OutputSettings6);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertFalse(document_OutputSettings4.outline());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings6.syntax());
      assertFalse(document_OutputSettings6.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings6.escapeMode());
      assertFalse(document_OutputSettings6.prettyPrint());
      assertEquals(1, document_OutputSettings6.indentAmount());
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings5));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings5));
      assertFalse(document_OutputSettings6.equals((Object)document_OutputSettings5));
      assertFalse(document_OutputSettings6.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings6.equals((Object)document_OutputSettings2));
      assertSame(document_OutputSettings0, document_OutputSettings6);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings5);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings4, document_OutputSettings6);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings5);
      assertNotSame(document_OutputSettings6, document_OutputSettings5);
      assertNotSame(document_OutputSettings6, document_OutputSettings2);
      assertNotSame(document_OutputSettings6, document_OutputSettings3);
      assertSame(document_OutputSettings6, document_OutputSettings4);
      assertSame(document_OutputSettings6, document_OutputSettings0);
      assertSame(document_OutputSettings6, document_OutputSettings1);
      
      // Undeclared exception!
      document1.outerHtmlHead(charArrayWriter0, 796, document_OutputSettings5);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Document document0 = Document.createShell("ascii");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      document0.setSiblingIndex(0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document1.attr("ascii", "org.jsoup.nodes.Element");
      assertNotNull(document2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ascii", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("ascii", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("ascii", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      Element element0 = document0.createElement("ascii");
      assertNotNull(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("ascii", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("ascii", element0.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      
      Elements elements0 = element0.getElementsMatchingOwnText("textarea");
      assertNotNull(elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("ascii", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("ascii", element0.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      
      Attributes attributes0 = element0.attributes();
      assertNotNull(attributes0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("ascii", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("ascii", element0.baseUri());
      assertEquals(0, attributes0.size());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      
      Node[] nodeArray0 = document0.childNodesAsArray();
      assertNotNull(nodeArray0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertEquals(1, nodeArray0.length);
      
      String string0 = element0.baseUri();
      assertNotNull(string0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("ascii", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("ascii", element0.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertEquals("ascii", string0);
      
      document1.doSetBaseUri("");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      
      List<Node> list0 = document0.childNodes();
      assertNotNull(list0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      
      document0.addChildren(0, nodeArray0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertEquals(1, nodeArray0.length);
      
      Elements elements1 = element0.siblingElements();
      assertNotNull(elements1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("ascii", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("ascii", element0.baseUri());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(elements1, elements0);
      
      Elements elements2 = element0.getElementsMatchingOwnText("ascii");
      assertNotNull(elements2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("ascii", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("ascii", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("ascii", element0.baseUri());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertTrue(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      
      String string1 = document0.nodeName();
      assertNotNull(string1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertEquals("#document", string1);
      
      document1.siblingIndex = 0;
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      Element element1 = (Element)document1.childNode(0);
      assertNotNull(element1);
      assertEquals(2, element1.childNodeSize());
      assertEquals("html", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("html", element1.tagName());
      assertEquals("ascii", element1.baseUri());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(element1.equals((Object)element0));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(element1, element0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      
      Elements elements3 = document0.getElementsByAttribute("YUr8H*");
      assertNotNull(elements3);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, elements3.size());
      assertTrue(elements3.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertTrue(elements3.equals((Object)elements0));
      assertTrue(elements3.equals((Object)elements1));
      assertTrue(elements3.equals((Object)elements2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements1);
      
      Element element2 = element0.prependChild(document1);
      assertNotNull(element2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(element2.isBlock());
      assertEquals("ascii", element2.baseUri());
      assertFalse(element2.hasParent());
      assertEquals(1, element2.childNodeSize());
      assertEquals("ascii", element2.tagName());
      assertEquals("ascii", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("ascii", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("ascii", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("ascii", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(element2.equals((Object)element1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      
      Pattern pattern0 = Pattern.compile("2z");
      assertNotNull(pattern0);
      assertEquals("2z", pattern0.toString());
      assertEquals("2z", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      
      Pattern pattern1 = Pattern.compile("");
      assertNotNull(pattern1);
      assertEquals("", pattern1.pattern());
      assertEquals("", pattern1.toString());
      assertEquals(0, pattern1.flags());
      assertFalse(pattern1.equals((Object)pattern0));
      assertNotSame(pattern1, pattern0);
      
      Elements elements4 = document0.getElementsByAttributeValueMatching((String) null, pattern1);
      assertNotNull(elements4);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("", pattern1.pattern());
      assertEquals("", pattern1.toString());
      assertEquals(0, pattern1.flags());
      assertEquals(0, elements4.size());
      assertTrue(elements4.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(pattern1.equals((Object)pattern0));
      assertTrue(elements4.equals((Object)elements3));
      assertTrue(elements4.equals((Object)elements0));
      assertTrue(elements4.equals((Object)elements2));
      assertTrue(elements4.equals((Object)elements1));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(pattern1, pattern0);
      assertNotSame(elements4, elements1);
      assertNotSame(elements4, elements2);
      assertNotSame(elements4, elements0);
      assertNotSame(elements4, elements3);
      
      String string2 = document1.text();
      assertNotNull(string2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("ascii", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertEquals("", string2);
      
      Elements elements5 = document0.getElementsByAttributeValueNot("ascii", "x\"JOt[E6r! F");
      assertNotNull(elements5);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("ascii", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(elements5.isEmpty());
      assertEquals(4, elements5.size());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(elements5.equals((Object)elements3));
      assertFalse(elements5.equals((Object)elements2));
      assertFalse(elements5.equals((Object)elements4));
      assertFalse(elements5.equals((Object)elements1));
      assertFalse(elements5.equals((Object)elements0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(elements5, elements3);
      assertNotSame(elements5, elements2);
      assertNotSame(elements5, elements4);
      assertNotSame(elements5, elements1);
      assertNotSame(elements5, elements0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Document document0 = Parser.parse("CJ0E|", "s+");
      assertNotNull(document0);
      assertEquals("s+", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("s+", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertEquals("s+", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("s+", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("s+", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("s+", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.prependText("s+");
      assertNotNull(document2);
      assertEquals("s+", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("s+", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("s+", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("s+", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("s+", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("s+", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document1;
      nodeArray0[2] = (Node) document2;
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) document2;
      nodeArray0[5] = (Node) document0;
      // Undeclared exception!
      try { 
        document2.insertChildren(75, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      String string0 = "<}AS0&R20R]va=ci";
      Tag tag0 = Tag.valueOf("<}AS0&R20R]va=ci");
      assertNotNull(tag0);
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertEquals("<}AS0&R20R]va=ci", tag0.toString());
      assertEquals("<}AS0&R20R]va=ci", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      
      Element element0 = new Element(tag0, "f-I");
      assertNotNull(element0);
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertEquals("<}AS0&R20R]va=ci", tag0.toString());
      assertEquals("<}AS0&R20R]va=ci", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("f-I", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("<}AS0&R20R]va=ci", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("<}AS0&R20R]va=ci", element0.nodeName());
      assertFalse(element0.hasParent());
      
      String string1 = "7 5q?eM{NZ<t;e=";
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      String string2 = parseSettings0.normalizeAttribute("-$NS.");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("-$ns.", string2);
      
      String string3 = element0.attr("<}AS0&R20R]va=ci");
      assertNotNull(string3);
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertEquals("<}AS0&R20R]va=ci", tag0.toString());
      assertEquals("<}AS0&R20R]va=ci", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("f-I", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("<}AS0&R20R]va=ci", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("<}AS0&R20R]va=ci", element0.nodeName());
      assertFalse(element0.hasParent());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      // Undeclared exception!
      try { 
        element0.wrap("NAWBe^'An");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Document document0 = Parser.parse("CJ0E|", "");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      
      Evaluator.IndexEquals evaluator_IndexEquals0 = new Evaluator.IndexEquals((-2704));
      assertNotNull(evaluator_IndexEquals0);
      
      String string0 = evaluator_IndexEquals0.toString();
      assertNotNull(string0);
      assertEquals(":eq(-2704)", string0);
      
      String string1 = evaluator_IndexEquals0.toString();
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals(":eq(-2704)", string1);
      
      Comment comment0 = new Comment("id", "bX");
      assertNotNull(comment0);
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) comment0;
      nodeArray0[3] = (Node) comment0;
      nodeArray0[4] = (Node) comment0;
      nodeArray0[5] = (Node) comment0;
      // Undeclared exception!
      try { 
        document0.insertChildren((-2704), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Tag tag0 = Tag.valueOf("html");
      assertNotNull(tag0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertEquals("html", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertEquals("html", tag0.toString());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isInline());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("Thi+P:.t-HJruot ", true);
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      FormElement formElement0 = new FormElement(tag0, "Thi+P:.t-HJruot ", attributes1);
      assertNotNull(formElement0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertEquals("html", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertEquals("html", tag0.toString());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isInline());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("html", formElement0.nodeName());
      assertTrue(formElement0.isBlock());
      assertEquals("Thi+P:.t-HJruot ", formElement0.baseUri());
      assertEquals("html", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      StringReader stringReader0 = new StringReader("html");
      assertNotNull(stringReader0);
      
      Document document0 = parser0.parseInput((Reader) stringReader0, "@y?7cuMu!P@A!G)-j");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("@y?7cuMu!P@A!G)-j", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("@y?7cuMu!P@A!G)-j", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("@y?7cuMu!P@A!G)-j", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("@y?7cuMu!P@A!G)-j", document0.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("@y?7cuMu!P@A!G)-j", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("@y?7cuMu!P@A!G)-j", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Map<String, String> map0 = document1.dataset();
      assertNotNull(map0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("@y?7cuMu!P@A!G)-j", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("@y?7cuMu!P@A!G)-j", document0.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("@y?7cuMu!P@A!G)-j", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("@y?7cuMu!P@A!G)-j", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = document0.ownerDocument();
      assertNotNull(document2);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("@y?7cuMu!P@A!G)-j", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("@y?7cuMu!P@A!G)-j", document0.location());
      assertEquals("@y?7cuMu!P@A!G)-j", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("@y?7cuMu!P@A!G)-j", document2.location());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Document document3 = (Document)document2.appendTo(formElement0);
      assertNotNull(document3);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertEquals("html", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertEquals("html", tag0.toString());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isInline());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("html", formElement0.nodeName());
      assertTrue(formElement0.isBlock());
      assertEquals("Thi+P:.t-HJruot ", formElement0.baseUri());
      assertEquals("html", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals(1, formElement0.childNodeSize());
      assertFalse(parser0.isTrackErrors());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("@y?7cuMu!P@A!G)-j", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("@y?7cuMu!P@A!G)-j", document0.location());
      assertEquals("@y?7cuMu!P@A!G)-j", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("@y?7cuMu!P@A!G)-j", document2.location());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("@y?7cuMu!P@A!G)-j", document3.location());
      assertEquals("@y?7cuMu!P@A!G)-j", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      
      Document document4 = Parser.parse("n @lM![bpV7", "QZH+1^Zd05v&gR");
      assertNotNull(document4);
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("QZH+1^Zd05v&gR", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals("QZH+1^Zd05v&gR", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertNotSame(document4, document3);
      assertNotSame(document4, document0);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      
      Document document5 = (Document)document4.prependText("");
      assertNotNull(document5);
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("QZH+1^Zd05v&gR", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals("QZH+1^Zd05v&gR", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals(2, document4.childNodeSize());
      assertEquals("QZH+1^Zd05v&gR", document5.location());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(2, document5.childNodeSize());
      assertFalse(document5.isBlock());
      assertEquals("#document", document5.nodeName());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#root", document5.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("QZH+1^Zd05v&gR", document5.baseUri());
      assertFalse(document5.hasParent());
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document1));
      assertNotSame(document4, document3);
      assertNotSame(document4, document0);
      assertNotSame(document4, document1);
      assertSame(document4, document5);
      assertNotSame(document4, document2);
      assertNotSame(document5, document0);
      assertNotSame(document5, document3);
      assertNotSame(document5, document2);
      assertNotSame(document5, document1);
      assertSame(document5, document4);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/8V]/`Jq]I/", "/8V]/`Jq]I/");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      document0.setBaseUri("");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("/8V]/`Jq]I/", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.clone();
      assertNotNull(document2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("/8V]/`Jq]I/", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("/8V]/`Jq]I/", document2.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      Elements elements0 = document0.getElementsContainingText("#root");
      assertNotNull(elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      
      // Undeclared exception!
      try { 
        document0.after("SOC>d|m~-S");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("option", "7;O<");
      assertNotNull(document0);
      assertEquals("7;O<", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("7;O<", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      
      Evaluator.IndexEquals evaluator_IndexEquals0 = new Evaluator.IndexEquals(0);
      assertNotNull(evaluator_IndexEquals0);
      
      String string0 = evaluator_IndexEquals0.toString();
      assertNotNull(string0);
      assertEquals(":eq(0)", string0);
      
      String string1 = evaluator_IndexEquals0.toString();
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals(":eq(0)", string1);
      
      boolean boolean0 = evaluator_IndexEquals0.matches(document0, document0);
      assertEquals("7;O<", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("7;O<", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(boolean0);
      
      boolean boolean1 = document0.is((Evaluator) evaluator_IndexEquals0);
      assertEquals("7;O<", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("7;O<", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Document document1 = (Document)document0.attr("3>1nA_~YpjkH", true);
      assertNotNull(document1);
      assertEquals("7;O<", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("7;O<", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("7;O<", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("7;O<", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      List<TextNode> list0 = document1.textNodes();
      assertNotNull(list0);
      assertEquals("7;O<", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("7;O<", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("7;O<", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("7;O<", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      // Undeclared exception!
      try { 
        document0.before((Node) document1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Document document0 = Document.createShell("JvUPX");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("JvUPX", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("JvUPX", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      
      String string0 = document0.absUrl("q$<**c");
      assertNotNull(string0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("JvUPX", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("JvUPX", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", string0);
      
      Document document1 = Parser.parse("JvUPX", "");
      assertNotNull(document1);
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      
      Document document2 = document0.normalise();
      assertNotNull(document2);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("JvUPX", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("JvUPX", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("JvUPX", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("JvUPX", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      
      Map<String, String> map0 = document2.dataset();
      assertNotNull(map0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("JvUPX", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("JvUPX", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("JvUPX", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("JvUPX", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = (Document)document1.appendTo(document2);
      assertNotNull(document3);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("JvUPX", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("JvUPX", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("JvUPX", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("JvUPX", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertEquals("", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertTrue(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      
      Document document4 = (Document)document1.prependText("");
      assertNotNull(document4);
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertEquals(2, document4.childNodeSize());
      assertTrue(document4.hasParent());
      assertEquals("", document4.location());
      assertEquals("#document", document4.nodeName());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document4, document1);
      assertNotSame(document4, document0);
      assertNotSame(document4, document2);
      assertSame(document4, document3);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Tag tag0 = Tag.valueOf("4rba!+xg5XSqd=j~");
      assertNotNull(tag0);
      assertFalse(tag0.isKnownTag());
      assertEquals("4rba!+xg5XSqd=j~", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertEquals("4rba!+xg5XSqd=j~", tag0.getName());
      assertFalse(tag0.isFormListed());
      
      Tag tag1 = Tag.valueOf("4rba!+xg5XSqd=j~");
      assertNotNull(tag1);
      assertEquals("4rba!+xg5XSqd=j~", tag1.toString());
      assertFalse(tag1.isSelfClosing());
      assertFalse(tag1.canContainBlock());
      assertTrue(tag1.formatAsBlock());
      assertEquals("4rba!+xg5XSqd=j~", tag1.getName());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.isData());
      assertFalse(tag1.isKnownTag());
      assertFalse(tag1.isEmpty());
      assertFalse(tag1.preserveWhitespace());
      assertTrue(tag1.isInline());
      assertFalse(tag1.isBlock());
      assertTrue(tag1.equals((Object)tag0));
      assertNotSame(tag1, tag0);
      
      Element element0 = new Element(tag0, "4rba!+xg5XSqd=j~");
      assertNotNull(element0);
      assertFalse(tag0.isKnownTag());
      assertEquals("4rba!+xg5XSqd=j~", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertEquals("4rba!+xg5XSqd=j~", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertEquals("4rba!+xg5XSqd=j~", element0.nodeName());
      assertEquals("4rba!+xg5XSqd=j~", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("4rba!+xg5XSqd=j~", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertTrue(tag0.equals((Object)tag1));
      
      Elements elements0 = element0.getElementsContainingOwnText("                 ");
      assertNotNull(elements0);
      assertFalse(tag0.isKnownTag());
      assertEquals("4rba!+xg5XSqd=j~", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertEquals("4rba!+xg5XSqd=j~", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertEquals("4rba!+xg5XSqd=j~", element0.nodeName());
      assertEquals("4rba!+xg5XSqd=j~", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("4rba!+xg5XSqd=j~", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertTrue(tag0.equals((Object)tag1));
      assertNotSame(tag0, tag1);
      
      Elements elements1 = element0.previousElementSiblings();
      assertNotNull(elements1);
      assertFalse(tag0.isKnownTag());
      assertEquals("4rba!+xg5XSqd=j~", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertEquals("4rba!+xg5XSqd=j~", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertEquals("4rba!+xg5XSqd=j~", element0.nodeName());
      assertEquals("4rba!+xg5XSqd=j~", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("4rba!+xg5XSqd=j~", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertTrue(tag0.equals((Object)tag1));
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(tag0, tag1);
      assertNotSame(elements1, elements0);
      
      Tag tag2 = Tag.valueOf("*}(%Pmg^~vS");
      assertNotNull(tag2);
      assertFalse(tag2.isBlock());
      assertTrue(tag2.isInline());
      assertTrue(tag2.formatAsBlock());
      assertEquals("*}(%Pmg^~vS", tag2.toString());
      assertFalse(tag2.isFormSubmittable());
      assertFalse(tag2.canContainBlock());
      assertFalse(tag2.isFormListed());
      assertFalse(tag2.isSelfClosing());
      assertEquals("*}(%Pmg^~vS", tag2.getName());
      assertFalse(tag2.isData());
      assertFalse(tag2.isKnownTag());
      assertFalse(tag2.isEmpty());
      assertFalse(tag2.preserveWhitespace());
      assertFalse(tag2.equals((Object)tag1));
      assertFalse(tag2.equals((Object)tag0));
      assertNotSame(tag2, tag1);
      assertNotSame(tag2, tag0);
      
      Elements elements2 = element0.getElementsByAttributeValueEnding("@7s GZDFD7/N:qn&+pA", "@7s GZDFD7/N:qn&+pA");
      assertNotNull(elements2);
      assertFalse(tag0.isKnownTag());
      assertEquals("4rba!+xg5XSqd=j~", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertEquals("4rba!+xg5XSqd=j~", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertEquals("4rba!+xg5XSqd=j~", element0.nodeName());
      assertEquals("4rba!+xg5XSqd=j~", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("4rba!+xg5XSqd=j~", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertTrue(tag0.equals((Object)tag1));
      assertFalse(tag0.equals((Object)tag2));
      assertTrue(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertNotSame(tag0, tag2);
      assertNotSame(tag0, tag1);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      
      String string0 = element0.data();
      assertNotNull(string0);
      assertFalse(tag0.isKnownTag());
      assertEquals("4rba!+xg5XSqd=j~", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertEquals("4rba!+xg5XSqd=j~", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertEquals("4rba!+xg5XSqd=j~", element0.nodeName());
      assertEquals("4rba!+xg5XSqd=j~", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("4rba!+xg5XSqd=j~", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertTrue(tag0.equals((Object)tag1));
      assertFalse(tag0.equals((Object)tag2));
      assertNotSame(tag0, tag2);
      assertNotSame(tag0, tag1);
      assertEquals("", string0);
      
      Elements elements3 = element0.getElementsByIndexGreaterThan(1623);
      assertNotNull(elements3);
      assertFalse(tag0.isKnownTag());
      assertEquals("4rba!+xg5XSqd=j~", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertEquals("4rba!+xg5XSqd=j~", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertEquals("4rba!+xg5XSqd=j~", element0.nodeName());
      assertEquals("4rba!+xg5XSqd=j~", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("4rba!+xg5XSqd=j~", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(0, elements3.size());
      assertTrue(elements3.isEmpty());
      assertTrue(tag0.equals((Object)tag1));
      assertFalse(tag0.equals((Object)tag2));
      assertTrue(elements3.equals((Object)elements2));
      assertTrue(elements3.equals((Object)elements1));
      assertTrue(elements3.equals((Object)elements0));
      assertNotSame(tag0, tag2);
      assertNotSame(tag0, tag1);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements2);
      
      String string1 = element0.cssSelector();
      assertNotNull(string1);
      assertFalse(tag0.isKnownTag());
      assertEquals("4rba!+xg5XSqd=j~", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertEquals("4rba!+xg5XSqd=j~", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertEquals("4rba!+xg5XSqd=j~", element0.nodeName());
      assertEquals("4rba!+xg5XSqd=j~", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("4rba!+xg5XSqd=j~", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertTrue(tag0.equals((Object)tag1));
      assertFalse(tag0.equals((Object)tag2));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(tag0, tag2);
      assertNotSame(tag0, tag1);
      assertEquals("4rba!+xg5XSqd=j~", string1);
      
      String string2 = Node.EmptyString;
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      // Undeclared exception!
      try { 
        element0.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      String string0 = "html";
      Tag tag0 = Tag.valueOf("html");
      assertNotNull(tag0);
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.canContainBlock());
      assertEquals("html", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertEquals("html", tag0.getName());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isBlock());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("Thi+P:.t-HJruot ", true);
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      FormElement formElement0 = new FormElement(tag0, "Thi+P:.t-HJruot ", attributes1);
      assertNotNull(formElement0);
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.canContainBlock());
      assertEquals("html", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertEquals("html", tag0.getName());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isBlock());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(formElement0.hasParent());
      assertEquals("Thi+P:.t-HJruot ", formElement0.baseUri());
      assertTrue(formElement0.isBlock());
      assertEquals("html", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("html", formElement0.nodeName());
      assertEquals(0, formElement0.childNodeSize());
      
      String string1 = formElement0.text();
      assertNotNull(string1);
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.canContainBlock());
      assertEquals("html", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertEquals("html", tag0.getName());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isBlock());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(formElement0.hasParent());
      assertEquals("Thi+P:.t-HJruot ", formElement0.baseUri());
      assertTrue(formElement0.isBlock());
      assertEquals("html", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("html", formElement0.nodeName());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(string1.equals((Object)string0));
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals("", string1);
      
      Elements elements0 = formElement0.previousElementSiblings();
      assertNotNull(elements0);
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.canContainBlock());
      assertEquals("html", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertEquals("html", tag0.getName());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isBlock());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(formElement0.hasParent());
      assertEquals("Thi+P:.t-HJruot ", formElement0.baseUri());
      assertTrue(formElement0.isBlock());
      assertEquals("html", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("html", formElement0.nodeName());
      assertEquals(0, formElement0.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      String string2 = formElement0.cssSelector();
      assertNotNull(string2);
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.canContainBlock());
      assertEquals("html", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertEquals("html", tag0.getName());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isBlock());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(formElement0.hasParent());
      assertEquals("Thi+P:.t-HJruot ", formElement0.baseUri());
      assertTrue(formElement0.isBlock());
      assertEquals("html", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("html", formElement0.nodeName());
      assertEquals(0, formElement0.childNodeSize());
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals("html", string2);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      assertNotNull(parseSettings0);
      
      Parser parser1 = parser0.settings(parseSettings0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      // Undeclared exception!
      try { 
        parser1.parseInput("Thi+P:.t-HJruot ", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BaseURI must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Tag tag0 = Tag.valueOf("html");
      assertNotNull(tag0);
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isInline());
      assertEquals("html", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertEquals("html", tag0.getName());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("Thi+P:.t-HJruot ", true);
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      FormElement formElement0 = new FormElement(tag0, "Thi+P:.t-HJruot ", attributes1);
      assertNotNull(formElement0);
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isInline());
      assertEquals("html", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertEquals("html", tag0.getName());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(0, formElement0.childNodeSize());
      assertTrue(formElement0.isBlock());
      assertEquals("html", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals("Thi+P:.t-HJruot ", formElement0.baseUri());
      assertEquals("html", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      
      Elements elements0 = formElement0.getElementsByAttributeValueMatching("Doctype", "html");
      assertNotNull(elements0);
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isInline());
      assertEquals("html", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertEquals("html", tag0.getName());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(0, formElement0.childNodeSize());
      assertTrue(formElement0.isBlock());
      assertEquals("html", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals("Thi+P:.t-HJruot ", formElement0.baseUri());
      assertEquals("html", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Tag tag0 = Tag.valueOf("#");
      assertNotNull(tag0);
      assertEquals("#", tag0.getName());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertEquals("#", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("#", true);
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      attributes1.remove("#");
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Attributes attributes2 = attributes1.put("#", "#");
      assertNotNull(attributes2);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      
      Element element0 = new Element(tag0, "#");
      assertNotNull(element0);
      assertEquals("#", tag0.getName());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertEquals("#", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertEquals("#", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("#", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("#", element0.tagName());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      
      Node node0 = element0.previousSibling();
      assertNull(node0);
      assertEquals("#", tag0.getName());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertEquals("#", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertEquals("#", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("#", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("#", element0.tagName());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      
      Element element1 = element0.text("#");
      assertNotNull(element1);
      assertEquals("#", tag0.getName());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertEquals("#", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("#", element0.nodeName());
      assertEquals("#", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("#", element0.tagName());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertFalse(element1.hasParent());
      assertEquals("#", element1.baseUri());
      assertEquals("#", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("#", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Elements elements0 = element0.getElementsByIndexLessThan(1843);
      assertNotNull(elements0);
      assertEquals("#", tag0.getName());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertEquals("#", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("#", element0.nodeName());
      assertEquals("#", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("#", element0.tagName());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Document document0 = Parser.parse("CJ0E|", "");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Map<String, String> map0 = document1.dataset();
      assertNotNull(map0);
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.appendTo(document0);
      assertNotNull(document2);
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertEquals("", document2.location());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("", document2.baseUri());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = (Document)document0.prependText("#root");
      assertNotNull(document3);
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("", document3.baseUri());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(3, document3.childNodeSize());
      assertTrue(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertEquals(2, document3.siblingIndex());
      assertEquals("", document3.location());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/8V]/`Jq]I/", "/8V]/`Jq]I/");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      document0.setBaseUri("");
      assertFalse(document0.isBlock());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("/8V]/`Jq]I/", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.clone();
      assertNotNull(document2);
      assertFalse(document0.isBlock());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("/8V]/`Jq]I/", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("/8V]/`Jq]I/", document2.location());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      Document document3 = (Document)document1.attr("", false);
      assertNotNull(document3);
      assertFalse(document0.isBlock());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("/8V]/`Jq]I/", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("/8V]/`Jq]I/", document3.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      
      List<TextNode> list0 = document2.textNodes();
      assertNotNull(list0);
      assertFalse(document0.isBlock());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("/8V]/`Jq]I/", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("/8V]/`Jq]I/", document2.location());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      // Undeclared exception!
      try { 
        document1.before((Node) document2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Document document0 = Parser.parse("98VeC", "98VeC");
      assertNotNull(document0);
      assertEquals("98VeC", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("98VeC", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertEquals("98VeC", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("98VeC", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("98VeC", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("98VeC", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = document1.parser((Parser) null);
      assertNotNull(document2);
      assertEquals("98VeC", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("98VeC", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("98VeC", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("98VeC", document1.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("98VeC", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("98VeC", document2.baseUri());
      assertFalse(document2.isBlock());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Document document3 = (Document)document1.append("mxTeo[,9N?K");
      assertNotNull(document3);
      assertEquals("98VeC", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals("98VeC", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("98VeC", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("98VeC", document1.location());
      assertFalse(document3.hasParent());
      assertEquals("98VeC", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(2, document3.childNodeSize());
      assertEquals("98VeC", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      
      Map<String, String> map0 = document1.dataset();
      assertNotNull(map0);
      assertEquals("98VeC", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals("98VeC", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("98VeC", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("98VeC", document1.location());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      
      Element element0 = document1.head();
      assertNotNull(element0);
      assertEquals("98VeC", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals("98VeC", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("98VeC", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("98VeC", document1.location());
      assertTrue(element0.hasParent());
      assertEquals("98VeC", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      
      Document document4 = (Document)document0.prependText("mxTeo[,9N?K");
      assertNotNull(document4);
      assertEquals("98VeC", document0.location());
      assertEquals("98VeC", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document4.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals("98VeC", document4.location());
      assertEquals("98VeC", document4.baseUri());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(3, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertSame(document4, document3);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Document document0 = Document.createShell("ascii");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.location());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      
      document0.setSiblingIndex(0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.location());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.location());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      String string0 = "org.jsoup.nodes.Element";
      Document document2 = (Document)document1.attr("ascii", "org.jsoup.nodes.Element");
      assertNotNull(document2);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.location());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("ascii", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("ascii", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.location());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      
      Elements elements0 = document2.getElementsByIndexEquals(0);
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.location());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("ascii", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("ascii", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("ascii", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(3, elements0.size());
      assertFalse(elements0.isEmpty());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      
      Node[] nodeArray0 = document0.childNodesAsArray();
      assertNotNull(nodeArray0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.location());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertEquals(1, nodeArray0.length);
      
      String string1 = element0.baseUri();
      assertNotNull(string1);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.location());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertEquals("ascii", string1);
      
      document1.doSetBaseUri("");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.location());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      
      List<Node> list0 = document0.childNodes();
      assertNotNull(list0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.location());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      
      document0.addChildren(0, nodeArray0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.location());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertEquals(1, nodeArray0.length);
      
      Elements elements1 = element0.siblingElements();
      assertNotNull(elements1);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.location());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ascii", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(elements1.isEmpty());
      assertEquals(1, elements1.size());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(elements1, elements0);
      
      String string2 = document0.nodeName();
      assertNotNull(string2);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.location());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertEquals("#document", string2);
      
      document1.siblingIndex = 0;
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.location());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertFalse(document1.isBlock());
      
      Elements elements2 = document0.getElementsByAttribute("YUr8H*");
      assertNotNull(elements2);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.location());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      
      Element element1 = element0.prependChild(document1);
      assertNotNull(element1);
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("head", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("ascii", element1.baseUri());
      assertEquals("head", element1.tagName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.location());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("ascii", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertSame(element1, element0);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(element0, element1);
      
      String string3 = element1.wholeText();
      assertNotNull(string3);
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("head", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("ascii", element1.baseUri());
      assertEquals("head", element1.tagName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.location());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("ascii", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(document1.equals((Object)document0));
      assertSame(element1, element0);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(element0, element1);
      assertEquals("", string3);
      
      String string4 = element1.data();
      assertNotNull(string4);
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("head", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("ascii", element1.baseUri());
      assertEquals("head", element1.tagName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", document0.location());
      assertEquals("ascii", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ascii", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("ascii", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(document1.equals((Object)document0));
      assertSame(element1, element0);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(element0, element1);
      assertEquals("", string4);
      
      // Undeclared exception!
      try { 
        document0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Document document0 = Parser.parse("CJ0E|", "");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      assertNotNull(document2);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("", document2.location());
      assertEquals("", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      // Undeclared exception!
      try { 
        document2.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/8V]/`Jq]I/", "/8V]/`Jq]I/");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      document0.setBaseUri("/8V]/`Jq]I/");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Tag tag0 = Tag.valueOf(" 3;.Fws:hY+");
      assertNotNull(tag0);
      assertFalse(tag0.isBlock());
      assertEquals("3;.Fws:hY+", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertEquals("3;.Fws:hY+", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "Unknown combinator: ", attributes0);
      assertNotNull(formElement0);
      assertFalse(tag0.isBlock());
      assertEquals("3;.Fws:hY+", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertEquals("3;.Fws:hY+", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals(0, attributes0.size());
      assertEquals("3;.Fws:hY+", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals("3;.Fws:hY+", formElement0.nodeName());
      assertEquals("Unknown combinator: ", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      
      Document document1 = (Document)document0.doClone(formElement0);
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("/8V]/`Jq]I/", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/8V]/`Jq]I/", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(tag0.isBlock());
      assertEquals("3;.Fws:hY+", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertEquals("3;.Fws:hY+", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals(0, attributes0.size());
      assertEquals("3;.Fws:hY+", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals("3;.Fws:hY+", formElement0.nodeName());
      assertEquals("Unknown combinator: ", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("/8V]/`Jq]I/", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("/8V]/`Jq]I/", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      FormElement formElement1 = (FormElement)formElement0.empty();
      assertNotNull(formElement1);
      assertFalse(tag0.isBlock());
      assertEquals("3;.Fws:hY+", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertEquals("3;.Fws:hY+", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals(0, attributes0.size());
      assertEquals("3;.Fws:hY+", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals("3;.Fws:hY+", formElement0.nodeName());
      assertEquals("Unknown combinator: ", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement1.childNodeSize());
      assertFalse(formElement1.hasParent());
      assertEquals("Unknown combinator: ", formElement1.baseUri());
      assertEquals("3;.Fws:hY+", formElement1.nodeName());
      assertEquals("3;.Fws:hY+", formElement1.tagName());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      String string0 = "Split offset must not be greater than current text length";
      Document document0 = parser0.parseInput("Split offset must not be greater than current text length", "Split offset must not be greater than current text length");
      document0.parser(parser0);
      Document document1 = document0.normalise();
      document1.prepend("Split offset must not be greater than current text length");
      int int0 = (-2706);
      LinkedHashSet<PseudoTextElement> linkedHashSet0 = new LinkedHashSet<PseudoTextElement>();
      String string1 = "^tD37}}'.s";
      document0.getElementsByAttributeValueContaining("^tD37}}'.s", "^tD37}}'.s");
      PseudoTextElement pseudoTextElement0 = null;
      String string2 = null;
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      // Undeclared exception!
      try { 
        Tag.valueOf((String) null, parseSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Document document0 = Parser.parse("CJ0E|", "s+");
      Document document1 = document0.normalise();
      Element element0 = document1.prependText("s+");
      String string0 = element0.text();
      assertEquals("s+", element0.baseUri());
      assertEquals("s+ CJ0E|", string0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("option", "7;O<");
      Evaluator.IndexEquals evaluator_IndexEquals0 = new Evaluator.IndexEquals(0);
      evaluator_IndexEquals0.toString();
      evaluator_IndexEquals0.toString();
      Comment comment0 = new Comment(":eq(0)", ":eq(0)");
      Node[] nodeArray0 = new Node[0];
      Element element0 = document0.insertChildren(0, nodeArray0);
      assertEquals("7;O<", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Tag.valueOf("&+\"Y_RNQ\"[PqJdBd,");
      Document document0 = Parser.parse("rbg71XH$C&", "");
      document0.getElementsByIndexGreaterThan(58);
      CDataNode cDataNode0 = new CDataNode("             ");
      // Undeclared exception!
      try { 
        cDataNode0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Document document0 = Parser.parse("CJ0E|", "");
      Document document1 = document0.normalise();
      Evaluator.IsNthLastChild evaluator_IsNthLastChild0 = new Evaluator.IsNthLastChild(58, 1199);
      document1.is((Evaluator) evaluator_IsNthLastChild0);
      document1.className();
      Set<String> set0 = document1.classNames();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Document document0 = Parser.parse("CJ0E|", "");
      Document document1 = document0.normalise();
      Element element0 = document1.prependText("");
      assertEquals("#document", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Document document0 = Document.createShell(" ");
      // Undeclared exception!
      try { 
        document0.is(" ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query ' ': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      String string0 = "Z>uW7  \"[$";
      Document document0 = Parser.parseBodyFragment("Z>uW7  \"[$", "Z>uW7  \"[$");
      Document document1 = document0.ownerDocument();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document1.hasClass("Z>uW7  \"[$");
      // Undeclared exception!
      try { 
        document_OutputSettings0.charset("Z>uW7  \"[$");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Z>uW7  \"[$
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      String string0 = "{t,|3WK";
      CDataNode cDataNode0 = new CDataNode("{t,|3WK");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "{t,|3WK", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Document document0 = Parser.parse("98VeC", "98VeC");
      assertEquals(1, document0.childNodeSize());
      
      Document document1 = document0.normalise();
      Document document2 = document1.parser((Parser) null);
      Element element0 = document2.body();
      Elements elements0 = element0.siblingElements();
      assertEquals("98VeC", element0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Tag tag0 = Tag.valueOf("4rba!+xg5XSqd=j~");
      Tag.valueOf("4rba!+xg5XSqd=j~");
      Element element0 = new Element(tag0, "4rba!+xg5XSqd=j~");
      Elements elements0 = element0.getElementsContainingOwnText("                 ");
      element0.previousElementSiblings();
      Tag.valueOf("*}(%Pmg^~vS");
      element0.getElementsByAttributeValueEnding("@7s GZDFD7/N:qn&+pA", "@7s GZDFD7/N:qn&+pA");
      element0.data();
      Elements elements1 = element0.getElementsByIndexGreaterThan(1623);
      assertTrue(elements1.equals((Object)elements0));
      
      String string0 = element0.cssSelector();
      assertEquals("4rba!+xg5XSqd=j~", string0);
      
      element0.id();
      assertEquals("4rba!+xg5XSqd=j~", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      String string0 = "JvUPX";
      Document document0 = Document.createShell("JvUPX");
      document0.absUrl("q$<**c");
      String string1 = null;
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      document0.parents();
      Element element0 = document0.classNames(set0);
      element0.previousElementSiblings();
      // Undeclared exception!
      try { 
        element0.replaceWith(document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      List<Node> list0 = document0.ensureChildNodes();
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Tag tag0 = Tag.valueOf(".");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put(".", true);
      Attributes attributes2 = attributes1.put(".", ".");
      Element element0 = new Element(tag0, ".", attributes2);
      element0.getElementsByIndexLessThan(1843);
      assertEquals(".", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      String string0 = "Split offset must not be greater than current text length";
      Document document0 = parser0.parseInput("Split offset must not be greater than current text length", "Split offset must not be greater than current text length");
      Document document1 = document0.parser(parser0);
      Document document2 = document1.normalise();
      document2.prepend("Split offset must not be greater than current text length");
      LinkedHashSet<PseudoTextElement> linkedHashSet0 = new LinkedHashSet<PseudoTextElement>();
      linkedHashSet0.add((PseudoTextElement) null);
      // Undeclared exception!
      try { 
        document0.insertChildren((-2706), (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      String string0 = "";
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      String string1 = "$kL>o{Uc1PY,nUf";
      // Undeclared exception!
      try { 
        document0.appendElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/8V]/`Jq]I/", "/8V]/`Jq]I/");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      document0.setBaseUri("");
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Element element0 = document1.clone();
      element0.textNodes();
      // Undeclared exception!
      try { 
        document1.before((Node) element0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("em", "em");
      Tag tag0 = Tag.valueOf("8tz");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      FormElement formElement0 = new FormElement(tag0, "8tz", attributes1);
      FormElement formElement1 = formElement0.addElement(document0);
      // Undeclared exception!
      try { 
        document0.before((Node) formElement1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Element element0 = new Element("meter");
      // Undeclared exception!
      try { 
        element0.child((-272));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Document document0 = Document.createShell("ascii");
      document0.setSiblingIndex(0);
      Document document1 = document0.clone();
      document1.attr("ascii", "org.jsoup.nodes.Element");
      Element element0 = document0.createElement("ascii");
      String string0 = "textarea";
      element0.getElementsMatchingOwnText("textarea");
      element0.attributes();
      Node[] nodeArray0 = document0.childNodesAsArray();
      element0.baseUri();
      document1.doSetBaseUri("");
      document0.childNodes();
      document0.addChildren(0, nodeArray0);
      element0.siblingElements();
      element0.getElementsMatchingOwnText("ascii");
      document0.nodeName();
      document1.siblingIndex = 0;
      document1.childNode(0);
      document0.getElementsByAttribute("YUr8H*");
      Element element1 = element0.prependChild(document1);
      element1.wholeText();
      element1.data();
      // Undeclared exception!
      try { 
        document0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      String string0 = null;
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      Element element0 = new Element("'}hms7");
      Element element1 = element0.appendText("vH^Ra%2SL2?BUU");
      element1.className();
      Elements elements0 = element0.getElementsByIndexEquals(0);
      Pattern pattern0 = Pattern.compile("ZN7s=n^w5");
      pattern0.split((CharSequence) "'}hms7", 0);
      element0.getElementsByAttributeValueMatching("'}hms7", pattern0);
      element0.getElementsByAttributeValueStarting("ZN7s=n^w5", "'}hms7");
      element0.className();
      element1.parent();
      Elements elements1 = element1.getElementsByAttribute("vH^Ra%2SL2?BUU");
      assertEquals(1, element0.childNodeSize());
      assertFalse(elements1.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("option", "7;O<");
      Evaluator.IndexEquals evaluator_IndexEquals0 = new Evaluator.IndexEquals(0);
      evaluator_IndexEquals0.toString();
      evaluator_IndexEquals0.toString();
      evaluator_IndexEquals0.matches(document0, document0);
      document0.is((Evaluator) evaluator_IndexEquals0);
      document0.getElementsContainingText("option");
      // Undeclared exception!
      try { 
        document0.after("SOC>d|m~-S");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("&+\"Y_RNQ\"[PqJdBd,", "}Mswsl?n=`");
      Document document1 = document0.ownerDocument();
      Document document2 = document1.normalise();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document3 = document2.quirksMode(document_QuirksMode0);
      // Undeclared exception!
      try { 
        document3.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      String string0 = "a|qrw0>|][";
      Document document0 = Parser.parse("a|qrw0>|][", "a|qrw0>|][");
      document0.updateMetaCharsetElement(false);
      document0.siblingElements();
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      String string0 = "";
      Document document0 = new Document("");
      Document document1 = document0.normalise();
      Element element0 = document1.head();
      String string1 = "v*~Kg{4Od&g";
      element0.clearAttributes();
      // Undeclared exception!
      try { 
        document0.replaceChild(element0, element0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      String string0 = "org.jsoup.nodes.Element$2";
      Document document0 = Document.createShell("org.jsoup.nodes.Element$2");
      Parser parser0 = Parser.htmlParser();
      document0.title();
      Document document1 = document0.parser(parser0);
      String string1 = "org.jsoup.nodes.Element$2";
      Document document2 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      document1.tagName("org.jsoup.nodes.Element$2");
      parser0.parseFragmentInput("org.jsoup.nodes.Element$2", document2, "");
      String string2 = "";
      // Undeclared exception!
      try { 
        document1.getElementsByAttributeValueContaining("org.jsoup.nodes.Element$2", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Tag tag0 = Tag.valueOf("<}AS0&R20R]va=ci");
      Element element0 = new Element(tag0, "f-I");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      parseSettings0.normalizeAttribute("-$NS.");
      element0.attr("<}AS0&R20R]va=ci");
      element0.textNodes();
      Tag.valueOf("7 5q?eM{NZ<t;e=", parseSettings0);
      element0.nextElementSiblings();
      // Undeclared exception!
      try { 
        element0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }
}
