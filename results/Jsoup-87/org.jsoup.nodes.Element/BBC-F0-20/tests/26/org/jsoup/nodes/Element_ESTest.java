/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 21:58:58 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.UnknownFormatConversionException;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("flw0", "flw0");
      document0.toggleClass("flw0");
      document0.toggleClass("flw0");
      document0.hasClass("Insert position out of bounds.");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Tag tag0 = Tag.valueOf("q");
      Element element0 = new Element(tag0, "q");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      element0.outerHtmlTail(mockPrintStream0, (-2332), document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("P", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "P", attributes0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      formElement0.outerHtmlHead(mockPrintWriter0, 419, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Document.createShell("head");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = new Document("^&%nR}NY=*\"hMY");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = new Document("flw0");
      Document document1 = (Document)document0.doClone(document0);
      document1.wrap("java.lang.string@0000000057 d)kwb)gctuntea#d\"?");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("W", "v");
      Element element0 = document0.head();
      element0.wrap("YA;0eGFP*Wl^yWw>");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("clasX", "clasX");
      Element element0 = document0.body();
      element0.wrap("clasX");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Element element0 = new Element("thxearea");
      element0.setSiblingIndex((-4233));
      element0.val("thxearea");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("EI)'%U", "EI)'%U");
      Element element0 = document0.body();
      element0.val("button");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("EI)'%U", "EI)'%U");
      document0.val("button");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("EI8)'%U", "EI8)'%U");
      Element element0 = document0.toggleClass("q");
      element0.siblingIndex = (-1602);
      element0.toggleClass("java.lang.string@0000000023 html java.lang.string@0000000027 html html");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("EI8)'%U", "EI8)'%U");
      Element element0 = document0.body();
      element0.text("EI8)'%U");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("EI8)'%U", "EI8)'%U");
      document0.text("EI8)'%U");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Document.createShell("head");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("flw0", "flw0");
      Element element0 = document0.body();
      element0.tagName("<html>\n <head></head>\n <body>\n  flw0\n </body>\n</html>\n<#root>\n <html>\n  <head></head>\n  <body>\n   flw0\n  </body>\n </html>\n</#root>");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Document.createShell("head");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Element element0 = document0.prependElement("br");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parse("head", "head");
      Element element0 = document0.head();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Document.createShell("head");
      Element element0 = document0.body();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("iu", "org.jsoup.select.Evaluator$IndexEquals");
      document0.selectFirst("iu");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Element element0 = new Element("txeare");
      element0.selectFirst("txeare");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("is", "is");
      document0.selectFirst("body");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parse("head", "head");
      document0.select("head");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.safety.cleaner$cleaningvisitor", "flw0");
      document0.appendTo(document0);
      document0.removeClass("ascii");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Document.createShell("!dJj2Jp)Jyg:&c*+#");
      Element element0 = document0.head();
      element0.removeClass("!dJj2Jp)Jyg:&c*+#");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parse("$VALUES", "$VALUES");
      document0.removeClass("$VALUES");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("head", "k*|`lcUi_&)1");
      Document document1 = Parser.parseBodyFragment("H1", "H1");
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document1;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document1;
      nodeArray0[6] = (Node) document1;
      nodeArray0[7] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("br", "br");
      document0.appendTo(document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("is", "is");
      Element element0 = document0.body();
      element0.prependText("is");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("K}T):.36[s@vTa", "br");
      Element element0 = document0.body();
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("head", "head");
      Element element0 = document0.body();
      element0.prepend("small");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Document.createShell("~$*");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("EI8)'%U", "EI8)'%U");
      Element element0 = document0.body();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = new Document("oo");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("mF2KzZ<", "kcKK8?dn*Ipgo");
      Element element0 = document0.head();
      document0.prepend("etSS[#");
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("flw0", "flw0");
      Element element0 = document0.body();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("kHmFgL", "kHmFgL");
      Document document1 = (Document)document0.doClone(document0);
      document1.parent();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("clasX", "clasX");
      Element element0 = document0.body();
      element0.ownText();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("clasX", "clasX");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "textarea");
      Element element0 = document0.head();
      Element element1 = element0.after("textarea");
      element1.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("flw0", "flw0");
      Element element0 = document0.appendTo(document0);
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Document.createShell("head");
      Element element0 = document0.body();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("EI8)'%U", "EI8)'%U");
      Element element0 = document0.body();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("EI8)'%U", "EI8)'%U");
      Evaluator.AllElements evaluator_AllElements0 = new Evaluator.AllElements();
      document0.is((Evaluator) evaluator_AllElements0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Element element0 = new Element("frame");
      element0.is("frame");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("clasX", "clasX");
      Node[] nodeArray0 = new Node[3];
      TextNode textNode0 = new TextNode("gyh:gu#j", "clasX");
      nodeArray0[0] = (Node) textNode0;
      nodeArray0[1] = (Node) document0;
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("clasX", (String) null, false);
      nodeArray0[2] = (Node) xmlDeclaration0;
      document0.insertChildren(1, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = new Document("BO;S/--^HZ6Ta|T");
      Node[] nodeArray0 = new Node[0];
      document0.insertChildren((-1), nodeArray0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{", "{");
      Element element0 = document0.body();
      Elements elements0 = document0.getElementsMatchingOwnText("9!h:Y!8E}.h");
      element0.insertChildren(0, (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(">", ">");
      LinkedList<FormElement> linkedList0 = new LinkedList<FormElement>();
      document0.insertChildren(1, (Collection<? extends Node>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parse("5U-A>ClJf(Dbqa", "5U-A>ClJf(Dbqa");
      Document document1 = document0.normalise();
      document1.siblingIndex = (-519);
      document1.html("`5^xaN1z6g~('`s!?");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("flw0", "flw0");
      Element element0 = document0.body();
      element0.html("");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("flw0", "flw0");
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Document.createShell("head");
      Element element0 = document0.body();
      element0.html((CharArrayWriter) null);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.safety.cleaner$cleaningvisitor", "flw0");
      Element element0 = document0.prependElement("br");
      element0.html();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("EI8)'%U", "EI8)'%U");
      Document document1 = (Document)document0.attr("EI8)'%U", true);
      document1.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("oo", "oo");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Document.createShell("head");
      Pattern pattern0 = Pattern.compile("org.jsoup.nodes.Element", 1556);
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("EI8)'%U", "EI8)'%U");
      document0.getElementsMatchingText("!i6m*+]%>XssgBCS.");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Document.createShell("head");
      Pattern pattern0 = Pattern.compile("q");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Element element0 = new Element("txeare");
      element0.getElementsContainingOwnText("txeare");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("2}:f}_'&9{9WdV.m$0", "2}:f}_'&9{9WdV.m$0");
      document0.getElementsByTag("J;kU';:[3m[3");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("head", "head");
      document0.getElementsByTag("head");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("kHmFgL", "kHmFgL");
      document0.getElementsByIndexLessThan(13);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("4 0KG}LIt", "Vt&xR_we");
      document0.getElementsByIndexEquals(0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Parser.parse("ewr", "ewr");
      document0.getElementsByAttributeValueMatching((String) null, "%Y K`\"");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Document.createShell("head");
      document0.getElementsByAttributeValueEnding("head", "html");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Document.createShell("[%s!=%s]");
      document0.getElementsByAttributeValueContaining(":containsData", "h0.u:~8\"GzU}E");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("oo", "oo");
      document0.getElementsByAttributeValue("B[", "oo");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.safety.cleaner$cleaningvisitor", "flw0");
      Element element0 = document0.prependElement("br");
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("flw0", "flw0");
      document0.appendTo(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("flw0", "flw0");
      Element element0 = document0.body();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      Element element0 = document0.head();
      Element element1 = element0.doClone(document0);
      element1.empty();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Document.createShell("tehxw");
      Element element0 = document0.prependChild(document0);
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("flw0", "flw0");
      document0.appendTo(document0);
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("EI8)'%U", "EI8)'%U");
      Element element0 = document0.body();
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("flw0", "flw0");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Tag tag0 = Tag.valueOf("html");
      Element element0 = new Element(tag0, "Tag name must not be empty.");
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = new Document("kbm8LxV{XcpC4l");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("flw0", "flw0");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parse("su]=5n17s", "su]=5n17s");
      Element element0 = document0.body();
      Locale locale0 = Locale.PRC;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Element element0 = document0.head();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parse("flw0", "flw0");
      Element element0 = document0.toggleClass("e#s^");
      element0.classNames();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parse("_F[j", "_F[j");
      Element element0 = document0.toggleClass("_F[j");
      element0.className();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Parser.parse("'", "'");
      Element element0 = document0.body();
      element0.children();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("br", "br");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Tag tag0 = Tag.valueOf("P<Bgq<=2O|ezy0\">sa:");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "\"\"ULr>gB2i1>(", attributes0);
      formElement0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Document.createShell("!dJj2Jp)Jyg:&c*+#");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parse("head", "head");
      document0.prependChild(document0);
      document0.child(0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Document.createShell("head");
      Element element0 = document0.doClone(document0);
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("flw0", "flw0");
      Element element0 = document0.prependElement("H\rAWA[Y3&z");
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Document.createShell("head");
      Document document1 = (Document)document0.doClone(document0);
      document1.before("A}Tt7L6_#Gm y\"JQ\"");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Document.createShell("head");
      Element element0 = document0.body();
      element0.before("CONTINUE");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Document.createShell("head");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput(" ", "");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("flw0", "flw0");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("EI8)'%U", "EI8)'%U");
      document0.toggleClass("ul");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Tag tag0 = Tag.valueOf("(");
      FormElement formElement0 = new FormElement(tag0, "(", (Attributes) null);
      CDataNode cDataNode0 = new CDataNode("(");
      Element element0 = formElement0.prependChild(cDataNode0);
      Element element1 = element0.appendElement("j~Bn[Hxgj.u^}Q");
      element1.attr("Q--HV", true);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("EI8)'%U", "EI8)'%U");
      Element element0 = document0.toggleClass("q");
      element0.siblingIndex = (-1602);
      element0.attr("d", true);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Element element0 = new Element("frame");
      element0.attr("frame", false);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Tag tag0 = Tag.valueOf("(");
      FormElement formElement0 = new FormElement(tag0, "(", (Attributes) null);
      Element element0 = formElement0.appendElement("j~Bn[Hxgj.u^}Q");
      element0.attr("Q--HV", true);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "");
      document0.setSiblingIndex((-93));
      document0.attr("textarea", " />");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("EI8)'%U", "EI8)'%U");
      Element element0 = document0.body();
      element0.attr("EI8)'%U", "Children collection to be inserted must not be null.");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Element element0 = new Element("br");
      element0.attr("Insert position out of bounds.", "br");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Document.createShell("98/");
      Element element0 = document0.body();
      element0.appendText("FAil,><1M= :)");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("flw0", "flw0");
      document0.appendTo(document0);
      document0.appendText("Children collection to be inserted must not be null.");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = new Document("head");
      document0.appendElement("head");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("2}:f}_'&9{9WdV.m$0", "2}:f}_'&9{9WdV.m$0");
      Comment comment0 = new Comment(".SO)pI&|kEcnY3FP+T>");
      document0.siblingIndex = (-1);
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      document0.appendChild(xmlDeclaration0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = new Document("z`80$5");
      document0.tagName("html");
      document0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      document0.setSiblingIndex((-1760));
      document0.append("org.jsoup.nodes.Element");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = new Document("su]=5n17s");
      document0.append("");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parse("'", "'");
      Element element0 = document0.body();
      CDataNode cDataNode0 = new CDataNode("'");
      element0.after((Node) cDataNode0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Document.createShell("!dJj2Jp)Jyg:&c*+#");
      Element element0 = document0.head();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = new Document("head");
      Element element0 = document0.prependElement("iu");
      element0.after("/qB8>R");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("EI8)'%U", "EI8)'%U");
      Element element0 = document0.body();
      element0.after("EI8)'%U");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Element element0 = new Element("html");
      Document document0 = Parser.parse("java.lang.string@0000000085 clr<scugx^'h", "java.lang.string@0000000085 clr<scugx^'h");
      element0.appendTo(document0);
      element0.addClass("html");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("EI8)'%U", "EI8)'%U");
      Element element0 = document0.head();
      element0.addClass("EI8)'%U");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("flw0", "flw0");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.wrap("VY}?F.}[C=V0y");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("]r", "]r");
      Element element0 = document0.appendElement("]r");
      // Undeclared exception!
      try { 
        element0.wrap("<!DOCTYPE");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      // Undeclared exception!
      try { 
        document0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = new Document("flw0");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.val("*=!B,HUR_");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("oo", "oo");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("CommentEnd", "YH]p.;c*aE54@3");
      document0.empty();
      // Undeclared exception!
      try { 
        document0.text("o'jgYQtxqDa4aQ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Element element0 = new Element("thxearea");
      element0.childNodes = null;
      // Undeclared exception!
      try { 
        element0.text();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Document.createShell(">");
      Element element0 = document0.appendElement(">");
      element0.siblingIndex = (-219);
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("b", "b");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.tagName("b");
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Parser.parse("flw0", "flw0");
      // Undeclared exception!
      try { 
        document0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("open", "org.jsoup.nodes.Element$1");
      // Undeclared exception!
      try { 
        document0.selectFirst("}@\"{");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '}@\"{': unexpected token at '}@\"{'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      // Undeclared exception!
      try { 
        document0.selectFirst("G Zd8![q%5");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '5'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("F.~Zptv", "");
      // Undeclared exception!
      try { 
        document0.selectFirst((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("EI8)'%U", "EI8)'%U");
      // Undeclared exception!
      try { 
        document0.select("EI8)'%U");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'EI8)'%U': unexpected token at ')'%U'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("kHmFgL", "kHmFgL");
      // Undeclared exception!
      try { 
        document0.select("[V4YlEPQ%;,+^>n");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = ';'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("b", "b");
      // Undeclared exception!
      try { 
        document0.select((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = new Document("br");
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("clasX", "clasX");
      CDataNode cDataNode0 = new CDataNode(":iLa9N~!");
      Element element0 = document0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        element0.previousElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Element element0 = new Element("U5");
      // Undeclared exception!
      try { 
        element0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Element element0 = new Element("frame");
      Element element1 = element0.appendTo(element0);
      // Undeclared exception!
      element1.prependElement("id");
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Parser.parse("Q--HV", "Q--HV");
      List<Node> list0 = Parser.parseXmlFragment("<Gm'?l", "Q--HV");
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.prependElement("Q--HV");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parse("Q--HV", "flw0");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.prependElement("J");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = new Document("su]=5n17s");
      // Undeclared exception!
      try { 
        document0.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Document.createShell("d,N'TVP.mV<I/[&5");
      Element element0 = document0.head();
      element0.setParentNode(element0);
      // Undeclared exception!
      try { 
        document0.prependChild(element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("pZ>-zO", "pZ>-zO");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$4qJjv>#JKNh/k@WBQf", "$4qJjv>#JKNh/k@WBQf");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.prepend("StartTag");
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("clasX", "clasX");
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("flq]", "flq]");
      CDataNode cDataNode0 = new CDataNode("flq]");
      Element element0 = document0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        element0.parents();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = new Document("java.lang.string@0000000048 this is f searchale index. enter search keywords: ");
      DataNode dataNode0 = new DataNode("QI9]],/.Y*E<o&W", "");
      dataNode0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.parent();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parse("l", "l");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((Appendable) null, 1, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Document.createShell("head");
      MockPrintStream mockPrintStream0 = new MockPrintStream("head");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(mockPrintStream0, (-1625949436), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Parser.parse("GvnX", "GvnX");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "GvnX");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 6, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("flw0", "flw0");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead((Appendable) null, (-3159), document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = new Document("class");
      MockFile mockFile0 = new MockFile("class");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(mockPrintWriter0, (-1432352094), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("hxe*a", "hxe*a");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        document0.outerHtmlHead(pipedWriter0, 75, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Document.createShell("head");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("head", "HVuldAQ<|[LX");
      Element element0 = document0.doClone(document0);
      element0.after((Node) document0);
      Pattern pattern0 = Pattern.compile("F*Q5ETnh3a07+NCq8B$", 4);
      Evaluator.Matches evaluator_Matches0 = new Evaluator.Matches(pattern0);
      // Undeclared exception!
      document0.is((Evaluator) evaluator_Matches0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parse("iu", "head");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = new Document("java.lang.string@0000000076");
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      // Undeclared exception!
      try { 
        document0.is((Evaluator) evaluator_IsRoot0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Tag tag0 = Tag.valueOf("u>+3Y:fU|i`{9?");
      CDataNode cDataNode0 = new CDataNode("");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "u>+3Y:fU|i`{9?", attributes0);
      cDataNode0.reparentChild(element0);
      // Undeclared exception!
      try { 
        element0.is((Evaluator) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.CDataNode cannot be cast to org.jsoup.nodes.Element
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      Tag tag0 = Tag.valueOf("body", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("Children collection to be inserted must not be null.");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      // Undeclared exception!
      try { 
        formElement0.is((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parse("5U-A>ClJf(Dbqa", "5U-A>ClJf(Dbqa");
      Element element0 = document0.appendChild(document0);
      // Undeclared exception!
      element0.is("khmfgl");
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parse("ff>'sr-RsfcXW3", "ff>'sr-RsfcXW3");
      document0.childNodes = null;
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document0.insertChildren((-1010136971), nodeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren((-1), nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element");
      document0.setSiblingIndex((-1760));
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      Tag tag0 = Tag.valueOf("yA{&,/8,qMu;s^d");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "#root", (Attributes) null);
      nodeArray0[4] = (Node) pseudoTextElement0;
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(",Q[eI@", ",Q[eI@");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        document0.insertChildren(1, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("p>x-zto", "/>");
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      TextNode textNode0 = TextNode.createFromEncoded("/>");
      nodeArray0[5] = (Node) textNode0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Tag tag0 = Tag.valueOf("section");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "section", attributes0);
      // Undeclared exception!
      try { 
        formElement0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{", "{");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("flw0", "flw0");
      Element element0 = document0.appendTo(document0);
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      element0.html(pipedWriter0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parse("iu", "head");
      CharBuffer charBuffer0 = CharBuffer.allocate(18);
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(">", ">");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("kehxw", "kehxw");
      DocumentType documentType0 = new DocumentType("0", "I|m[5{UF`|#n07e", "d0");
      document0.parentNode = (Node) documentType0;
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parse("ff>'sr-RsfcXW3", "ff>'sr-RsfcXW3");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.hasText();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Document.createShell("[%s!=%s]");
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{", "{");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "textarea");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("l#J+BaVW(xfdvsX");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: l#J+BaVW(xfdvsX
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("8C\"@+iXy:XK?zL", "html");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Document.createShell("head");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = new Document("9at)");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("\"/'`_L(S3<K>Y<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: \"/'`_L(S3<K>Y<
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("clasX", "clasX");
      TextNode textNode0 = new TextNode("clasX");
      document0.parentNode = (Node) textNode0;
      // Undeclared exception!
      try { 
        document0.getElementsContainingText("");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      document0.siblingIndex = (-2401);
      document0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.getElementsContainingText("br");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Document.createShell("ZG6^e/.<|$\"3G\"MR");
      Element element0 = document0.prependElement("ZG6^e/.<|$\"3G\"MR");
      document0.replaceChild(element0, element0);
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("w9l))dju,x]ictSm(");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Parser.parse("iu", "head");
      TextNode textNode0 = new TextNode("java.lang.string@0000000023 html h3", "flw0");
      document0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("iu");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Document.createShell("iu");
      Element element0 = document0.prependElement("iu");
      element0.setSiblingIndex((-2070787801));
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("iu");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Document.createShell("head");
      Element element0 = document0.doClone(document0);
      Tag tag0 = Tag.valueOf("head");
      CDataNode cDataNode0 = new CDataNode("id");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "id", attributes0);
      formElement0.prependChild(element0);
      // Undeclared exception!
      try { 
        formElement0.getElementsByIndexLessThan((-855));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parse("flw0", "flw0");
      DataNode dataNode0 = new DataNode("=ONZf)yr1~");
      document0.parentNode = (Node) dataNode0;
      // Undeclared exception!
      try { 
        document0.getElementsByIndexGreaterThan((-1491));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parse("flw0", "flw0");
      DataNode dataNode0 = new DataNode("=ONZf)yr1~");
      document0.parentNode = (Node) dataNode0;
      // Undeclared exception!
      try { 
        document0.getElementsByIndexEquals(58);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("b", "b");
      // Undeclared exception!
      try { 
        document0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("flw0", "flw0");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting(":%ZNoQ1", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = new Document("9at)");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("9at)", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("EI8)'%U", "EI8)'%U");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("?9HTn5k", "EI8)'%U");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: EI8)'%U
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("EI8)'%U", "EI8)'%U");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("cftU+\"6 s", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Parser.parse("ff>'sr-RsfcXW3", "ff>'sr-RsfcXW3");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("ff>'sr-RsfcXW3", "ff>'sr-RsfcXW3");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("EI8)'%U", "EI8)'%U");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = new Document("z_-N");
      // Undeclared exception!
      try { 
        document0.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parse("ewr", "ewr");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Parser.parse("2lw ", "2lw ");
      DataNode dataNode0 = new DataNode("=ONZf)yr1~");
      document0.parentNode = (Node) dataNode0;
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parse("had", "had");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.dataNodes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("EI8)'%U", "EI8)'%U");
      Element element0 = document0.body();
      element0.toggleClass("EI8)'%U");
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'body.java.lang.String@0000000090': unexpected token at '@0000000090'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("GvJ-", "GvJ-");
      Element element0 = document0.head();
      element0.siblingIndex = (-1429);
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Parser.parse("iu", "head");
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("flw0", "flw0");
      // Undeclared exception!
      try { 
        document0.child(3026);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3026, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Element element0 = new Element("Q--HV");
      // Undeclared exception!
      try { 
        element0.child((-4));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", "ChiZdren collection to be inse:ted must not b null.");
      document0.reparentChild(document0);
      List<Node> list0 = Parser.parseXmlFragment(" />", " />");
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("iu", "org.jsoup.select.Evaluator$IndexEquals");
      Element element0 = document0.append("org.jsoup.select.Evaluator$IndexEquals");
      element0.parentNode = (Node) element0;
      // Undeclared exception!
      document0.before("?VPt");
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Document.createShell("[%s!=%s]");
      // Undeclared exception!
      try { 
        document0.attr((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("iu", "iu");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.attr("iu", "iu");
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Document.createShell("had");
      // Undeclared exception!
      try { 
        document0.attr((String) null, "had");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Fn", "Fn");
      Element element0 = document0.toggleClass("`XqFIk(~l@eTl");
      List<Node> list0 = Parser.parseXmlFragment("Fn", "sub");
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        element0.appendTo(document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Document.createShell(" />");
      Element element0 = document0.head();
      Element element1 = document0.doClone(element0);
      // Undeclared exception!
      try { 
        element1.appendTo(element1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = new Document("q");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Document.createShell("head");
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("flw0", "flw0");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.appendElement("flw0");
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("claU", "]r");
      List<Node> list0 = Parser.parseXmlFragment(": ", "?cwO%@[@J5A-R+7D");
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.appendElement("]r");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Document.createShell("StartTag");
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      document0.parser(parser1);
      // Undeclared exception!
      try { 
        document0.appendElement("StartTag");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Document.createShell("head");
      // Undeclared exception!
      try { 
        document0.appendElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" eV!", " eV!");
      List<Node> list0 = Parser.parseFragment(" eV!", (Element) document0, " eV!");
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.appendChild(document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = new Document("flq");
      CDataNode cDataNode0 = new CDataNode("nVK~O3o33N.PX");
      Node node0 = cDataNode0.doClone(document0);
      // Undeclared exception!
      try { 
        document0.appendChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Document.createShell("flw0");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("EI8)'%U", "EI8)'%U");
      Element element0 = document0.body();
      Element element1 = element0.before((Node) document0);
      // Undeclared exception!
      element1.append("/}zx3~k+)_shnA9hW");
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Document.createShell("rs-");
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Fn", "Fn");
      DocumentType documentType0 = new DocumentType("attributeSingleValueCharsSorted", "head", "attributeSingleValueCharsSorted", "body");
      document0.parentNode = (Node) documentType0;
      // Undeclared exception!
      try { 
        document0.append("Fn");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Parser.parse("Q--HV", "Q--HV");
      Element element0 = document0.prependElement("GYH:gu#J");
      Parser parser0 = Parser.xmlParser();
      Document document1 = parser0.parseInput("Q--HV", "POST");
      document1.appendTo(document0);
      Element element1 = element0.val("POST");
      // Undeclared exception!
      try { 
        document1.after((Node) element1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("iu", "org.jsoup.select.Evaluator$IndexEquals");
      Element element0 = document0.append("org.jsoup.select.Evaluator$IndexEquals");
      element0.parentNode = (Node) element0;
      // Undeclared exception!
      document0.after("q+?'m-z94");
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = new Document("flw0");
      Element element0 = document0.doClone(document0);
      // Undeclared exception!
      try { 
        element0.after("class");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Parser.parse("$VALUES", "$VALUES");
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("Insert position out of bounds.", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("Insert position out of bounds.");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = null;
      try {
        element0 = new Element(tag0, (String) null, attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "nO% 9jX'.$Cir");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("flw0", parseSettings0);
      Element element0 = new Element(tag0, "flw0", (Attributes) null);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(31);
      element0.html(charArrayWriter0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("pZ>-zO", "pZ>-zO");
      document0.hasClass("pZ>-zO");
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("W", "v");
      document0.prependText("&Q");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput(" ", "");
      document0.prependElement("JY&8l");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("br", "Q--HV");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Document.createShell("head");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Document.createShell("head");
      Element element0 = document0.body();
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("oo", "oo");
      Element element0 = document0.prependElement("q");
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = new Document("flw0");
      Element element0 = document0.doClone(document0);
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "textarea");
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Parser.parse("iu", "head");
      Element element0 = document0.prependElement("head");
      element0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Element element0 = document0.body();
      element0.append("open");
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("kHmFgL", "kHmFgL");
      Pattern pattern0 = Pattern.compile("", 13);
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Document.createShell("head");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("EI8)'%U", "EI8)'%U");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Fn", "Fn");
      document0.select("G");
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("iu", "org.jsoup.select.Evaluator$IndexEquals");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Element element0 = new Element("br");
      element0.classNames();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Document.createShell("[%s!=%s]");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outputSettings(document_OutputSettings0);
      document_OutputSettings0.prettyPrint(false);
      document0.html();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("kehxw", "kehxw");
      document0.title("kehxw");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("is", "textarea");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      try { 
        document0.outerHtmlTail(pipedWriter0, 1428, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.safety.cleaner$cleaningvisitor", "EqEvQ6GsEYE");
      // Undeclared exception!
      try { 
        document0.html((CharArrayWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Element element0 = new Element("br");
      element0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Fn", "Fn");
      char[] charArray0 = new char[2];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 5, document_OutputSettings1);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Element element0 = new Element("textarea");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Element element0 = new Element("StarbTag");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("flw0", "flw0");
      Element element0 = document0.toggleClass("flw0");
      element0.toggleClass("flw0");
      element0.toggleClass("flw0");
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("flw0", "flw0");
      document0.toggleClass("e#s^");
      document0.toggleClass("flw0");
      document0.hasClass("flw0");
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("flw0", "flw0");
      document0.toggleClass("flw0");
      document0.toggleClass("flw0");
      document0.toggleClass("VY}?F}[C=V0y");
      document0.hasClass("flw0");
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("flw0", "flw0");
      Element element0 = document0.toggleClass("flw0");
      element0.toggleClass("flw0");
      document0.toggleClass("VY}?F[C=Voy");
      document0.hasClass("html");
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = new Document("flw0");
      document0.toggleClass("flw0");
      Element element0 = document0.toggleClass(" > ");
      element0.hasClass("html");
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.safety.cleaner$cleaningvisitor", "EqEvQ6GsEYE");
      document0.toggleClass("id");
      document0.hasClass("*\"is7");
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Parser.parse("iu", "head");
      Element element0 = document0.toggleClass("");
      element0.toggleClass("cLR<ScuGx^'H");
      element0.hasClass("org.jsoup.safety.cleaner$cleaningvisitor");
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parse("iu", "head");
      Element element0 = document0.toggleClass("");
      element0.hasClass("org.jsoup.safety.cleaner$cleaningvisitor");
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("is", "is");
      DataNode dataNode0 = DataNode.createFromEncoded("is", ";Wy-zc]W");
      document0.prependChild(dataNode0);
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("iu", "org.jsoup.select.Evaluator$IndexEquals");
      Element element0 = document0.append("org.jsoup.select.Evaluator$IndexEquals");
      element0.parentNode = (Node) element0;
      element0.getElementsContainingOwnText("org.jsoup.select.Evaluator$IndexEquals");
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("", true);
      Element.preserveWhitespace(xmlDeclaration0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      document0.appendElement("br");
      document0.prependElement("br");
      document0.getElementsContainingOwnText("br");
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("EI8)'%U", "EI8)'%U");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" ", "RWCDvP4lP0YE7se:");
      Element element0 = document0.append("RWCDvP4lP0YE7se:");
      element0.text();
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Parser.parse("fa<!d*>C9+*cbLbN1Kx", "fa<!d*>C9+*cbLbN1Kx");
      document0.append("=s2#eq%EJD");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("flw0", "flw0");
      Document document1 = document0.clone();
      document1.appendTo(document0);
      document0.getElementsContainingText("");
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "textarea");
      Element element0 = document0.head();
      element0.after("textarea");
      document0.getElementsMatchingText("textarea");
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[%s*=%s]", "br");
      document0.appendElement("br");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = new Document("head");
      document0.getElementById("head");
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Document.createShell("su]=5n17s");
      Element element0 = document0.doClone(document0);
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("head", "head");
      Element element0 = document0.doClone(document0);
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("flw0", "flw0");
      document0.appendTo(document0);
      document0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Element element0 = new Element("br");
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("iu", "iu");
      document0.parentNode = (Node) document0;
      document0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^tioYI.J", "^tioYI.J");
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$4qJjv>#JKNh/k@WBQf", "$4qJjv>#JKNh/k@WBQf");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, elements0.size());
      assertEquals("$4qJjv>#JKNh/k@WBQf", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("flw0", "flw0");
      Element element0 = document0.body();
      Elements elements0 = element0.siblingElements();
      assertEquals(1, elements0.size());
      assertEquals("flw0", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("EI8)'%U", "EI8)'%U");
      document0.siblingElements();
      assertEquals("EI8)'%U", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = new Document("");
      document0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Lr", "Lr");
      Element element0 = document0.body();
      element0.before("html");
      String string0 = element0.cssSelector();
      assertEquals("Lr", element0.baseUri());
      assertEquals("html > body:nth-child(4)", string0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("EI8)'%U", "EI8)'%U");
      document0.toggleClass("EI8)'%U");
      document0.cssSelector();
      assertEquals("EI8)'%U", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Document.createShell("head");
      Node[] nodeArray0 = new Node[2];
      // Undeclared exception!
      try { 
        document0.insertChildren(4, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("EI8)'%U", "EI8)'%U");
      Node[] nodeArray0 = new Node[8];
      // Undeclared exception!
      try { 
        document0.insertChildren((-855), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = new Document("flq");
      LinkedList<Comment> linkedList0 = new LinkedList<Comment>();
      Element element0 = document0.insertChildren(0, (Collection<? extends Node>) linkedList0);
      assertEquals("flq", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Document.createShell("head");
      LinkedList<CDataNode> linkedList0 = new LinkedList<CDataNode>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-1663), (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("EI8)'%U", "EI8)'%U");
      LinkedList<CDataNode> linkedList0 = new LinkedList<CDataNode>();
      // Undeclared exception!
      try { 
        document0.insertChildren(1164, (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Document.createShell("tehxw");
      DataNode dataNode0 = new DataNode("noQuirks", "noQuirks");
      document0.prependChild(dataNode0);
      document0.dataNodes();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Document.createShell("head");
      document0.append("id");
      document0.textNodes();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = new Document(":prev*%s");
      document0.normalise();
      document0.getElementsByIndexGreaterThan(677);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Lr", "Lr");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-2333));
      assertEquals(4, elements0.size());
      assertEquals("Lr", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = new Document(":prev*%s");
      document0.is("attributeSingleValueCharsSorted");
      assertEquals(":prev*%s", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Lr", "Lr");
      // Undeclared exception!
      try { 
        document0.before("html");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Document.createShell("rp");
      document0.getElementsByAttribute("]&kU({DxG4X_zlwHvr");
      assertEquals("rp", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = Document.createShell("rp");
      document0.getElementsByAttributeValueNot("rp", "rp");
      assertEquals(1, document0.childNodeSize());
      assertEquals("rp", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(",Q[eI@", ",Q[eI@");
      Element element0 = document0.shallowClone();
      assertEquals(",Q[eI@", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Element element0 = new Element("frame");
      element0.doSetBaseUri("frame");
      assertEquals("frame", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = Document.createShell("!dJj2Jp)Jyg:&c*+#");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      document0.title("textarea");
      Elements elements0 = document0.getElementsContainingOwnText("textarea");
      assertEquals(2, elements0.size());
      assertEquals(1, document0.childNodeSize());
      assertEquals("textarea", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Element element0 = new Element("Fn");
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueContaining("+#$uU1Fl", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Parser.parse("ZDdkw/!pE#O8\"k<", "ZDdkw/!pE#O8\"k<");
      Pattern pattern0 = Pattern.compile("b", 0);
      document0.getElementsByAttributeValueMatching("ZDdkw/!pE#O8\"k<", pattern0);
      assertEquals("ZDdkw/!pE#O8\"k<", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Element element0 = new Element("br");
      Elements elements0 = element0.getElementsContainingText("Insert position out of bounds.");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{", "{");
      Elements elements0 = document0.getElementsByClass("#");
      assertEquals(1, document0.childNodeSize());
      assertEquals("{", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$4qJjv>#JKNh/k@WBQf", "$4qJjv>#JKNh/k@WBQf");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("$4qJjv>#JKNh/k@WBQf", "'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Evaluator.IndexLessThan evaluator_IndexLessThan0 = new Evaluator.IndexLessThan(3647);
      document0.is((Evaluator) evaluator_IndexLessThan0);
      assertEquals("br", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Doctype", "Doctype");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("2\"`-T?", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Document document0 = Parser.parse("flw0", "flw0");
      Elements elements0 = document0.getElementsByIndexEquals(58);
      assertEquals("flw0", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = Document.createShell("]");
      document0.getElementsByAttributeStarting("]");
      assertEquals(1, document0.childNodeSize());
      assertEquals("]", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Document document0 = Parser.parse("ff>'sr-RsfcXW3", "ff>'sr-RsfcXW3");
      Elements elements0 = document0.getElementsByIndexLessThan((-1018));
      assertEquals("ff>'sr-RsfcXW3", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Document document0 = new Document("head");
      // Undeclared exception!
      try { 
        document0.after("/qB8>R");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Elements elements0 = document0.getElementsMatchingOwnText("");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Element element0 = new Element("Fn");
      Element element1 = element0.prepend("");
      assertEquals(0, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("GvJ-", "GvJ-");
      Element element0 = document0.head();
      String string0 = element0.cssSelector();
      assertEquals("html > head", string0);
      assertEquals("GvJ-", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "textarea");
      document0.getElementsByAttributeValueStarting("textarea", "textarea");
      assertEquals("textarea", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Document document0 = Parser.parse("ZDdkw/!pE#O8\"k<", "ZDdkw/!pE#O8\"k<");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("", "data");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Element element0 = new Element("thxearea");
      Element element1 = element0.attr("thxearea", true);
      Elements elements0 = element1.getElementsByAttributeStarting("thxearea");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Document document0 = Document.createShell("head");
      document0.wholeText();
      assertEquals(1, document0.childNodeSize());
      assertEquals("head", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("flw0", "flw0");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Element element0 = new Element("StarbTag");
      Element element1 = element0.val("StarbTag");
      String string0 = element1.val();
      assertEquals("StarbTag", string0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("EI8)'%U", "EI8)'%U");
      Element element0 = document0.addClass("EI8)'%U");
      assertEquals("EI8)'%U", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "]6M-sP~F*>(@o3>");
      document0.dataset();
      assertEquals("]6M-sP~F*>(@o3>", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.tagName("br");
      Element element0 = document0.prependElement("br");
      String string0 = element0.outerHtml();
      assertEquals(2, document0.childNodeSize());
      assertEquals("<br>", string0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Document document0 = Parser.parse("head", "head");
      assertEquals(1, document0.childNodeSize());
      
      Element element0 = document0.child(0);
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      assertEquals("head", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("iu", "iu");
      document0.previousElementSiblings();
      assertEquals("iu", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      DataNode dataNode0 = new DataNode("");
      Element element0 = document0.prependChild(dataNode0);
      element0.getElementsMatchingOwnText("");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Document document0 = Document.createShell("head");
      Pattern pattern0 = Pattern.compile("", (-1));
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("head", document0.baseUri());
      assertEquals(4, elements0.size());
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("flw0", "flw0");
      document0.appendText("Children collection to be inserted must not be null.");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("W", "v");
      // Undeclared exception!
      try { 
        document0.wrap("YA;0eGFP*Wl^yWw>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$4qJjv>#JKNh/k@WBQf", "$4qJjv>#JKNh/k@WBQf");
      document0.nextElementSiblings();
  }
}
